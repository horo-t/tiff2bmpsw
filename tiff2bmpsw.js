/*
  tiff2bmpsw: https://github.com/horo-t/tiff2bmpsw/
*/
/*
Copyright (c) 2014, Tsuyoshi Horo
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
* Redistributions of source code must retain the above copyright notice, 
  this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice, 
  this list of conditions and the following disclaimer in the documentation 
  and/or other materials provided with the distribution.
* Neither the name of the Tsuyoshi Horo nor theã€€names of its contributors 
  may be used to endorse or promote products derived from this software 
  without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  LibTIFF: http://www.remotesensing.org/libtiff/
*/
/*
Copyright (c) 1988-1997 Sam Leffler
Copyright (c) 1991-1997 Silicon Graphics, Inc.

Permission to use, copy, modify, distribute, and sell this software and 
its documentation for any purpose is hereby granted without fee, provided
that (i) the above copyright notices and this permission notice appear in
all copies of the software and related documentation, and (ii) the names of
Sam Leffler and Silicon Graphics may not be used in any advertising or
publicity relating to the software without the specific, prior written
permission of Sam Leffler and Silicon Graphics.

THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  

IN NO EVENT SHALL SAM LEFFLER OR SILICON GRAPHICS BE LIABLE FOR
ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF 
LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
OF THIS SOFTWARE.
*/

var bmpOutput = [];

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 134192;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([114,0,0,0,0,0,0,0,70,105,108,101,32,111,112,101,110,32,102,97,105,108,117,114,101,46,10,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,103,101,116,32,119,105,100,116,104,46,10,0,0,0,70,97,105,108,101,100,32,116,111,32,103,101,116,32,104,101,105,103,104,116,46,10,0,0,84,73,70,70,82,101,97,100,82,71,66,65,73,109,97,103,101,79,114,105,101,110,116,101,100,32,102,97,105,108,101,100,46,10,0,0,0,0,0,0,114,101,97,100,32,100,111,110,101,10,0,0,0,0,0,0,84,97,103,32,0,0,0,0,0,0,0,0,0,0,0,0,116,105,102,95,100,105,114,46,99,0,0,0,0,0,0,0,95,84,73,70,70,86,71,101,116,70,105,101,108,100,0,0,37,115,58,32,73,110,118,97,108,105,100,32,37,115,116,97,103,32,34,37,115,34,32,40,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,99,111,100,101,99,41,0,112,115,101,117,100,111,45,0,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,0,68,111,116,82,97,110,103,101,0,0,0,0,0,0,0,0,116,118,45,62,99,111,117,110,116,32,61,61,32,49,0,0,95,84,73,70,70,86,83,101,116,70,105,101,108,100,0,0,78,111,110,115,116,97,110,100,97,114,100,32,116,105,108,101,32,119,105,100,116,104,32,37,100,44,32,99,111,110,118,101,114,116,32,102,105,108,101,0,78,111,110,115,116,97,110,100,97,114,100,32,116,105,108,101,32,108,101,110,103,116,104,32,37,100,44,32,99,111,110,118,101,114,116,32,102,105,108,101,0,0,0,0,0,0,0,0,37,115,58,32,83,111,114,114,121,44,32,99,97,110,110,111,116,32,110,101,115,116,32,83,117,98,73,70,68,115,0,0,37,115,58,32,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,115,112,97,99,101,32,102,111,114,32,108,105,115,116,32,111,102,32,99,117,115,116,111,109,32,118,97,108,117,101,115,0,0,37,115,58,32,66,97,100,32,102,105,101,108,100,32,116,121,112,101,32,37,100,32,102,111,114,32,34,37,115,34,0,0,102,105,112,45,62,102,105,101,108,100,95,119,114,105,116,101,99,111,117,110,116,61,61,84,73,70,70,95,86,65,82,73,65,66,76,69,50,0,0,0,95,84,73,70,70,86,83,101,116,70,105,101,108,100,0,0,37,115,58,32,78,117,108,108,32,99,111,117,110,116,32,102,111,114,32,34,37,115,34,32,40,116,121,112,101,32,37,100,44,32,119,114,105,116,101,99,111,117,110,116,32,37,100,44,32,112,97,115,115,99,111,117,110,116,32,37,100,41,0,0,99,117,115,116,111,109,32,116,97,103,32,98,105,110,97,114,121,32,111,98,106,101,99,116,0,0,0,0,0,0,0,0,37,115,58,32,66,97,100,32,118,97,108,117,101,32,37,117,32,102,111,114,32,34,37,115,34,32,116,97,103,0,0,0,84,73,70,70,83,101,116,70,105,101,108,100,0,0,0,0,37,115,58,32,73,110,118,97,108,105,100,32,73,110,107,78,97,109,101,115,32,118,97,108,117,101,59,32,101,120,112,101,99,116,105,110,103,32,37,100,32,110,97,109,101,115,44,32,102,111,117,110,100,32,37,100,0,0,0,0,0,0,0,0,37,115,58,32,85,110,107,110,111,119,110,32,37,115,116,97,103,32,37,117,0,0,0,0,37,115,58,32,67,97,110,110,111,116,32,109,111,100,105,102,121,32,116,97,103,32,34,37,115,34,32,119,104,105,108,101,32,119,114,105,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,0,0,0,104,16,0,0,1,0,0,0,0,0,0,0,56,0,0,0,80,4,0,0,84,97,103,32,0,0,0,0,95,84,73,70,70,83,101,116,117,112,70,105,101,108,100,115,0,0,0,0,0,0,0,0,83,101,116,116,105,110,103,32,117,112,32,102,105,101,108,100,32,105,110,102,111,32,102,97,105,108,101,100,0,0,0,0,95,84,73,70,70,77,101,114,103,101,70,105,101,108,100,115,0,0,0,0,0,0,0,0,102,111,114,32,102,105,101,108,100,115,32,97,114,114,97,121,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,102,105,101,108,100,115,32,97,114,114,97,121,0,84,73,70,70,70,105,101,108,100,87,105,116,104,84,97,103,0,0,0,0,0,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,44,32,117,110,107,110,111,119,110,32,116,97,103,32,48,120,37,120,0,0,0,0,0,0,0,0,84,97,103,32,37,100,0,0,154,130,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,48,12,0,0,0,0,0,0,157,130,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,64,12,0,0,0,0,0,0,34,136,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,72,12,0,0,0,0,0,0,36,136,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,88,12,0,0,0,0,0,0,39,136,0,0,255,255,255,255,3,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,65,0,1,1,112,12,0,0,0,0,0,0,40,136,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,128,12,0,0,0,0,0,0,0,144,0,0,4,0,4,0,7,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,1,0,160,12,0,0,0,0,0,0,3,144,0,0,20,0,20,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,176,12,0,0,0,0,0,0,4,144,0,0,20,0,20,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,200,12,0,0,0,0,0,0,1,145,0,0,4,0,4,0,7,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,1,0,224,12,0,0,0,0,0,0,2,145,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,248,12,0,0,0,0,0,0,1,146,0,0,1,0,1,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,16,13,0,0,0,0,0,0,2,146,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,40,13,0,0,0,0,0,0,3,146,0,0,1,0,1,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,56,13,0,0,0,0,0,0,4,146,0,0,1,0,1,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,72,13,0,0,0,0,0,0,5,146,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,96,13,0,0,0,0,0,0,6,146,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,120,13,0,0,0,0,0,0,7,146,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,136,13,0,0,0,0,0,0,8,146,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,152,13,0,0,0,0,0,0,9,146,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,168,13,0,0,0,0,0,0,10,146,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,176,13,0,0,0,0,0,0,20,146,0,0,255,255,255,255,3,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,65,0,1,1,192,13,0,0,0,0,0,0,124,146,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,208,13,0,0,0,0,0,0,134,146,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,224,13,0,0,0,0,0,0,144,146,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,240,13,0,0,0,0,0,0,145,146,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,0,14,0,0,0,0,0,0,146,146,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,24,14,0,0,0,0,0,0,0,160,0,0,4,0,4,0,7,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,1,0,48,14,0,0,0,0,0,0,1,160,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,64,14,0,0,0,0,0,0,2,160,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,1,0,80,14,0,0,0,0,0,0,3,160,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,1,0,96,14,0,0,0,0,0,0,4,160,0,0,13,0,13,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,112,14,0,0,0,0,0,0,11,162,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,136,14,0,0,0,0,0,0,12,162,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,152,14,0,0,0,0,0,0,14,162,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,184,14,0,0,0,0,0,0,15,162,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,208,14,0,0,0,0,0,0,16,162,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,232,14,0,0,0,0,0,0,20,162,0,0,2,0,2,0,3,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,65,0,1,0,8,15,0,0,0,0,0,0,21,162,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,24,15,0,0,0,0,0,0,23,162,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,40,15,0,0,0,0,0,0,0,163,0,0,1,0,1,0,7,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,65,0,1,0,56,15,0,0,0,0,0,0,1,163,0,0,1,0,1,0,7,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,65,0,1,0,72,15,0,0,0,0,0,0,2,163,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,88,15,0,0,0,0,0,0,1,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,104,15,0,0,0,0,0,0,2,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,120,15,0,0,0,0,0,0,3,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,136,15,0,0,0,0,0,0,4,164,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,152,15,0,0,0,0,0,0,5,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,176,15,0,0,0,0,0,0,6,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,200,15,0,0,0,0,0,0,7,164,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,224,15,0,0,0,0,0,0,8,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,240,15,0,0,0,0,0,0,9,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,0,16,0,0,0,0,0,0,10,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,16,16,0,0,0,0,0,0,11,164,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,32,16,0,0,0,0,0,0,12,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,64,16,0,0,0,0,0,0,32,164,0,0,33,0,33,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,88,16,0,0,0,0,0,0,69,120,112,111,115,117,114,101,84,105,109,101,0,0,0,0,70,78,117,109,98,101,114,0,69,120,112,111,115,117,114,101,80,114,111,103,114,97,109,0,83,112,101,99,116,114,97,108,83,101,110,115,105,116,105,118,105,116,121,0,0,0,0,0,73,83,79,83,112,101,101,100,82,97,116,105,110,103,115,0,79,112,116,111,101,108,101,99,116,114,105,99,67,111,110,118,101,114,115,105,111,110,70,97,99,116,111,114,0,0,0,0,69,120,105,102,86,101,114,115,105,111,110,0,0,0,0,0,68,97,116,101,84,105,109,101,79,114,105,103,105,110,97,108,0,0,0,0,0,0,0,0,68,97,116,101,84,105,109,101,68,105,103,105,116,105,122,101,100,0,0,0,0,0,0,0,67,111,109,112,111,110,101,110,116,115,67,111,110,102,105,103,117,114,97,116,105,111,110,0,67,111,109,112,114,101,115,115,101,100,66,105,116,115,80,101,114,80,105,120,101,108,0,0,83,104,117,116,116,101,114,83,112,101,101,100,86,97,108,117,101,0,0,0,0,0,0,0,65,112,101,114,116,117,114,101,86,97,108,117,101,0,0,0,66,114,105,103,104,116,110,101,115,115,86,97,108,117,101,0,69,120,112,111,115,117,114,101,66,105,97,115,86,97,108,117,101,0,0,0,0,0,0,0,77,97,120,65,112,101,114,116,117,114,101,86,97,108,117,101,0,0,0,0,0,0,0,0,83,117,98,106,101,99,116,68,105,115,116,97,110,99,101,0,77,101,116,101,114,105,110,103,77,111,100,101,0,0,0,0,76,105,103,104,116,83,111,117,114,99,101,0,0,0,0,0,70,108,97,115,104,0,0,0,70,111,99,97,108,76,101,110,103,116,104,0,0,0,0,0,83,117,98,106,101,99,116,65,114,101,97,0,0,0,0,0,77,97,107,101,114,78,111,116,101,0,0,0,0,0,0,0,85,115,101,114,67,111,109,109,101,110,116,0,0,0,0,0,83,117,98,83,101,99,84,105,109,101,0,0,0,0,0,0,83,117,98,83,101,99,84,105,109,101,79,114,105,103,105,110,97,108,0,0,0,0,0,0,83,117,98,83,101,99,84,105,109,101,68,105,103,105,116,105,122,101,100,0,0,0,0,0,70,108,97,115,104,112,105,120,86,101,114,115,105,111,110,0,67,111,108,111,114,83,112,97,99,101,0,0,0,0,0,0,80,105,120,101,108,88,68,105,109,101,110,115,105,111,110,0,80,105,120,101,108,89,68,105,109,101,110,115,105,111,110,0,82,101,108,97,116,101,100,83,111,117,110,100,70,105,108,101,0,0,0,0,0,0,0,0,70,108,97,115,104,69,110,101,114,103,121,0,0,0,0,0,83,112,97,116,105,97,108,70,114,101,113,117,101,110,99,121,82,101,115,112,111,110,115,101,0,0,0,0,0,0,0,0,70,111,99,97,108,80,108,97,110,101,88,82,101,115,111,108,117,116,105,111,110,0,0,0,70,111,99,97,108,80,108,97,110,101,89,82,101,115,111,108,117,116,105,111,110,0,0,0,70,111,99,97,108,80,108,97,110,101,82,101,115,111,108,117,116,105,111,110,85,110,105,116,0,0,0,0,0,0,0,0,83,117,98,106,101,99,116,76,111,99,97,116,105,111,110,0,69,120,112,111,115,117,114,101,73,110,100,101,120,0,0,0,83,101,110,115,105,110,103,77,101,116,104,111,100,0,0,0,70,105,108,101,83,111,117,114,99,101,0,0,0,0,0,0,83,99,101,110,101,84,121,112,101,0,0,0,0,0,0,0,67,70,65,80,97,116,116,101,114,110,0,0,0,0,0,0,67,117,115,116,111,109,82,101,110,100,101,114,101,100,0,0,69,120,112,111,115,117,114,101,77,111,100,101,0,0,0,0,87,104,105,116,101,66,97,108,97,110,99,101,0,0,0,0,68,105,103,105,116,97,108,90,111,111,109,82,97,116,105,111,0,0,0,0,0,0,0,0,70,111,99,97,108,76,101,110,103,116,104,73,110,51,53,109,109,70,105,108,109,0,0,0,83,99,101,110,101,67,97,112,116,117,114,101,84,121,112,101,0,0,0,0,0,0,0,0,71,97,105,110,67,111,110,116,114,111,108,0,0,0,0,0,67,111,110,116,114,97,115,116,0,0,0,0,0,0,0,0,83,97,116,117,114,97,116,105,111,110,0,0,0,0,0,0,83,104,97,114,112,110,101,115,115,0,0,0,0,0,0,0,68,101,118,105,99,101,83,101,116,116,105,110,103,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,0,0,0,83,117,98,106,101,99,116,68,105,115,116,97,110,99,101,82,97,110,103,101,0,0,0,0,73,109,97,103,101,85,110,105,113,117,101,73,68,0,0,0,254,0,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,1,0,168,37,0,0,0,0,0,0,255,0,0,0,1,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,1,0,184,37,0,0,0,0,0,0,0,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,200,37,0,0,0,0,0,0,1,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,0,1,0,216,37,0,0,0,0,0,0,2,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,232,37,0,0,0,0,0,0,3,1,0,0,255,255,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,248,37,0,0,0,0,0,0,6,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,8,38,0,0,0,0,0,0,7,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,9,0,1,0,40,38,0,0,0,0,0,0,8,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,56,38,0,0,0,0,0,0,9,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,72,38,0,0,0,0,0,0,10,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,10,0,0,0,88,38,0,0,0,0,0,0,13,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,104,38,0,0,0,0,0,0,14,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,120,38,0,0,0,0,0,0,15,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,144,38,0,0,0,0,0,0,16,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,152,38,0,0,0,0,0,0,17,1,0,0,255,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,160,38,0,0,0,0,0,0,18,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,15,0,0,0,176,38,0,0,0,0,0,0,21,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,16,0,0,0,192,38,0,0,0,0,0,0,22,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,17,0,0,0,208,38,0,0,0,0,0,0,23,1,0,0,255,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,224,38,0,0,0,0,0,0,24,1,0,0,254,255,255,255,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,18,0,1,0,240,38,0,0,0,0,0,0,25,1,0,0,254,255,255,255,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,19,0,1,0,0,39,0,0,0,0,0,0,26,1,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,3,0,1,0,16,39,0,0,0,0,0,0,27,1,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,3,0,1,0,32,39,0,0,0,0,0,0,28,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,20,0,0,0,48,39,0,0,0,0,0,0,29,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,72,39,0,0,0,0,0,0,30,1,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,4,0,1,0,88,39,0,0,0,0,0,0,31,1,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,4,0,1,0,104,39,0,0,0,0,0,0,32,1,0,0,255,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,39,0,0,0,0,0,0,33,1,0,0,255,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,39,0,0,0,0,0,0,34,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,152,39,0,0,0,0,0,0,35,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,176,39,0,0,0,0,0,0,40,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,22,0,1,0,200,39,0,0,0,0,0,0,41,1,0,0,2,0,2,0,3,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,23,0,1,0,216,39,0,0,0,0,0,0,44,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,232,39,0,0,0,0,0,0,45,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,44,0,1,0,0,40,0,0,0,0,0,0,49,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,24,40,0,0,0,0,0,0,50,1,0,0,20,0,20,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,40,40,0,0,0,0,0,0,59,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,56,40,0,0,0,0,0,0,60,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,64,40,0,0,0,0,0,0,62,1,0,0,2,0,2,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,1,0,80,40,0,0,0,0,0,0,63,1,0,0,6,0,6,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,1,0,96,40,0,0,0,0,0,0,64,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,26,0,1,0,120,40,0,0,0,0,0,0,65,1,0,0,2,0,2,0,3,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,37,0,1,0,136,40,0,0,0,0,0,0,66,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,2,0,0,0,152,40,0,0,0,0,0,0,67,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,2,0,0,0,168,40,0,0,0,0,0,0,68,1,0,0,255,255,1,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,184,40,0,0,0,0,0,0,69,1,0,0,255,255,1,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,200,40,0,0,0,0,0,0,74,1,0,0,255,255,255,255,18,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,49,0,1,1,216,40,0,0,88,3,0,0,76,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,0,0,224,40,0,0,0,0,0,0,77,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,46,0,1,1,232,40,0,0,0,0,0,0,78,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,248,40,0,0,0,0,0,0,80,1,0,0,2,0,2,0,3,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,65,0,0,0,8,41,0,0,0,0,0,0,81,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,24,41,0,0,0,0,0,0,82,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,31,0,0,1,40,41,0,0,0,0,0,0,83,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,32,0,0,0,56,41,0,0,0,0,0,0,84,1,0,0,254,255,255,255,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,33,0,1,0,72,41,0,0,0,0,0,0,85,1,0,0,254,255,255,255,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,34,0,1,0,88,41,0,0,0,0,0,0,87,1,0,0,255,255,253,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,1,104,41,0,0,0,0,0,0,88,1,0,0,1,0,1,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,120,41,0,0,0,0,0,0,88,1,0,0,1,0,1,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,120,41,0,0,0,0,0,0,89,1,0,0,1,0,1,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,136,41,0,0,0,0,0,0,17,2,0,0,3,0,3,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,0,0,152,41,0,0,0,0,0,0,18,2,0,0,2,0,2,0,3,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,39,0,0,0,176,41,0,0,0,0,0,0,19,2,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,40,0,0,0,200,41,0,0,0,0,0,0,20,2,0,0,6,0,6,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,41,0,1,0,224,41,0,0,0,0,0,0,188,2,0,0,253,255,253,255,1,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,65,0,0,1,248,41,0,0,0,0,0,0,227,128,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,31,0,0,0,8,42,0,0,0,0,0,0,228,128,0,0,254,255,255,255,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,32,0,0,0,24,42,0,0,0,0,0,0,229,128,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,35,0,0,0,40,42,0,0,0,0,0,0,230,128,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,36,0,0,0,56,42,0,0,0,0,0,0,20,130,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,1,0,72,42,0,0,0,0,0,0,21,130,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,1,0,88,42,0,0,0,0,0,0,22,130,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,104,42,0,0,0,0,0,0,23,130,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,120,42,0,0,0,0,0,0,24,130,0,0,1,0,1,0,11,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,65,0,1,0,144,42,0,0,0,0,0,0,25,130,0,0,16,0,16,0,11,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,1,0,168,42,0,0,0,0,0,0,26,130,0,0,16,0,16,0,11,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,1,0,192,42,0,0,0,0,0,0,152,130,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,216,42,0,0,0,0,0,0,187,131,0,0,253,255,253,255,4,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,65,0,0,1,232,42,0,0,0,0,0,0,73,134,0,0,253,255,253,255,1,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,65,0,0,1,248,42,0,0,0,0,0,0,105,135,0,0,1,0,1,0,18,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,65,0,0,0,8,43,0,0,104,3,0,0,115,135,0,0,253,255,253,255,7,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,65,0,0,1,24,43,0,0,0,0,0,0,37,136,0,0,1,0,1,0,18,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,65,0,0,0,40,43,0,0,0,0,0,0,92,136,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,65,0,1,0,56,43,0,0,0,0,0,0,93,136,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,65,0,1,0,72,43,0,0,0,0,0,0,94,136,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,65,0,1,0,88,43,0,0,0,0,0,0,95,136,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,65,0,1,0,104,43,0,0,0,0,0,0,63,146,0,0,1,0,1,0,12,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,112,43,0,0,0,0,0,0,5,160,0,0,1,0,1,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,120,43,0,0,0,0,0,0,18,198,0,0,4,0,4,0,1,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,0,0,152,43,0,0,0,0,0,0,19,198,0,0,4,0,4,0,1,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,0,0,168,43,0,0,0,0,0,0,20,198,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,192,43,0,0,0,0,0,0,21,198,0,0,255,255,255,255,1,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,216,43,0,0,0,0,0,0,22,198,0,0,255,255,255,255,1,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,0,1,240,43,0,0,0,0,0,0,23,198,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,0,0,0,44,0,0,0,0,0,0,24,198,0,0,255,255,255,255,3,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,65,0,0,1,16,44,0,0,0,0,0,0,25,198,0,0,2,0,2,0,3,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,65,0,0,0,40,44,0,0,0,0,0,0,26,198,0,0,255,255,255,255,5,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,64,44,0,0,0,0,0,0,27,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,80,44,0,0,0,0,0,0,28,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,104,44,0,0,0,0,0,0,29,198,0,0,255,255,255,255,4,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,65,0,0,1,128,44,0,0,0,0,0,0,30,198,0,0,2,0,2,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,0,0,144,44,0,0,0,0,0,0,92,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,160,44,0,0,0,0,0,0,31,198,0,0,2,0,2,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,0,0,184,44,0,0,0,0,0,0,32,198,0,0,2,0,2,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,0,0,208,44,0,0,0,0,0,0,33,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,224,44,0,0,0,0,0,0,34,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,240,44,0,0,0,0,0,0,35,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,0,45,0,0,0,0,0,0,36,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,24,45,0,0,0,0,0,0,37,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,48,45,0,0,0,0,0,0,38,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,72,45,0,0,0,0,0,0,39,198,0,0,255,255,255,255,5,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,96,45,0,0,0,0,0,0,40,198,0,0,255,255,255,255,5,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,112,45,0,0,0,0,0,0,41,198,0,0,2,0,2,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,0,0,128,45,0,0,0,0,0,0,42,198,0,0,1,0,1,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,144,45,0,0,0,0,0,0,43,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,168,45,0,0,0,0,0,0,44,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,184,45,0,0,0,0,0,0,45,198,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,0,0,208,45,0,0,0,0,0,0,46,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,224,45,0,0,0,0,0,0,47,198,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,248,45,0,0,0,0,0,0,48,198,0,0,4,0,4,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,0,0,16,46,0,0,0,0,0,0,49,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,32,46,0,0,0,0,0,0,50,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,56,46,0,0,0,0,0,0,51,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,80,46,0,0,0,0,0,0,52,198,0,0,255,255,255,255,1,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,0,1,96,46,0,0,0,0,0,0,53,198,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,0,0,112,46,0,0,0,0,0,0,90,198,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,0,0,128,46,0,0,0,0,0,0,91,198,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,0,0,152,46,0,0,0,0,0,0,93,198,0,0,16,0,16,0,1,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,0,0,176,46,0,0,0,0,0,0,139,198,0,0,255,255,255,255,1,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,192,46,0,0,0,0,0,0,140,198,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,0,1,216,46,0,0,0,0,0,0,141,198,0,0,4,0,4,0,4,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,65,0,0,0,240,46,0,0,0,0,0,0,142,198,0,0,255,255,255,255,4,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,65,0,0,1,0,47,0,0,0,0,0,0,143,198,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,0,1,16,47,0,0,0,0,0,0,144,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,40,47,0,0,0,0,0,0,145,198,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,0,1,64,47,0,0,0,0,0,0,146,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,88,47,0,0,0,0,0,0,27,0,1,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,112,47,0,0,0,0,0,0,90,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,0,0,128,47,0,0,0,0,0,0,144,1,0,0,1,0,1,0,13,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,0,0,136,47,0,0,0,0,0,0,145,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,0,0,160,47,0,0,0,0,0,0,146,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,65,0,0,0,176,47,0,0,0,0,0,0,147,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,0,0,192,47,0,0,0,0,0,0,148,1,0,0,4,0,4,0,1,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,0,0,208,47,0,0,0,0,0,0,149,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,65,0,0,0,224,47,0,0,0,0,0,0,177,1,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,240,47,0,0,0,0,0,0,178,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,65,0,0,1,248,47,0,0,0,0,0,0,179,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,0,0,8,48,0,0,0,0,0,0,47,2,0,0,255,255,255,255,4,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,65,0,0,1,24,48,0,0,0,0,0,0,172,135,0,0,2,0,2,0,4,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,65,0,0,0,40,48,0,0,0,0,0,0,0,0,0,0,83,117,98,102,105,108,101,84,121,112,101,0,0,0,0,0,79,108,100,83,117,98,102,105,108,101,84,121,112,101,0,0,73,109,97,103,101,87,105,100,116,104,0,0,0,0,0,0,73,109,97,103,101,76,101,110,103,116,104,0,0,0,0,0,66,105,116,115,80,101,114,83,97,109,112,108,101,0,0,0,67,111,109,112,114,101,115,115,105,111,110,0,0,0,0,0,80,104,111,116,111,109,101,116,114,105,99,73,110,116,101,114,112,114,101,116,97,116,105,111,110,0,0,0,0,0,0,0,84,104,114,101,115,104,104,111,108,100,105,110,103,0,0,0,67,101,108,108,87,105,100,116,104,0,0,0,0,0,0,0,67,101,108,108,76,101,110,103,116,104,0,0,0,0,0,0,70,105,108,108,79,114,100,101,114,0,0,0,0,0,0,0,68,111,99,117,109,101,110,116,78,97,109,101,0,0,0,0,73,109,97,103,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,0,0,0,77,97,107,101,0,0,0,0,77,111,100,101,108,0,0,0,83,116,114,105,112,79,102,102,115,101,116,115,0,0,0,0,79,114,105,101,110,116,97,116,105,111,110,0,0,0,0,0,83,97,109,112,108,101,115,80,101,114,80,105,120,101,108,0,82,111,119,115,80,101,114,83,116,114,105,112,0,0,0,0,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,0,77,105,110,83,97,109,112,108,101,86,97,108,117,101,0,0,77,97,120,83,97,109,112,108,101,86,97,108,117,101,0,0,88,82,101,115,111,108,117,116,105,111,110,0,0,0,0,0,89,82,101,115,111,108,117,116,105,111,110,0,0,0,0,0,80,108,97,110,97,114,67,111,110,102,105,103,117,114,97,116,105,111,110,0,0,0,0,0,80,97,103,101,78,97,109,101,0,0,0,0,0,0,0,0,88,80,111,115,105,116,105,111,110,0,0,0,0,0,0,0,89,80,111,115,105,116,105,111,110,0,0,0,0,0,0,0,70,114,101,101,79,102,102,115,101,116,115,0,0,0,0,0,70,114,101,101,66,121,116,101,67,111,117,110,116,115,0,0,71,114,97,121,82,101,115,112,111,110,115,101,85,110,105,116,0,0,0,0,0,0,0,0,71,114,97,121,82,101,115,112,111,110,115,101,67,117,114,118,101,0,0,0,0,0,0,0,82,101,115,111,108,117,116,105,111,110,85,110,105,116,0,0,80,97,103,101,78,117,109,98,101,114,0,0,0,0,0,0,67,111,108,111,114,82,101,115,112,111,110,115,101,85,110,105,116,0,0,0,0,0,0,0,84,114,97,110,115,102,101,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([70,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,83,111,102,116,119,97,114,101,0,0,0,0,0,0,0,0,68,97,116,101,84,105,109,101,0,0,0,0,0,0,0,0,65,114,116,105,115,116,0,0,72,111,115,116,67,111,109,112,117,116,101,114,0,0,0,0,87,104,105,116,101,80,111,105,110,116,0,0,0,0,0,0,80,114,105,109,97,114,121,67,104,114,111,109,97,116,105,99,105,116,105,101,115,0,0,0,67,111,108,111,114,77,97,112,0,0,0,0,0,0,0,0,72,97,108,102,116,111,110,101,72,105,110,116,115,0,0,0,84,105,108,101,87,105,100,116,104,0,0,0,0,0,0,0,84,105,108,101,76,101,110,103,116,104,0,0,0,0,0,0,84,105,108,101,79,102,102,115,101,116,115,0,0,0,0,0,84,105,108,101,66,121,116,101,67,111,117,110,116,115,0,0,83,117,98,73,70,68,0,0,73,110,107,83,101,116,0,0,73,110,107,78,97,109,101,115,0,0,0,0,0,0,0,0,78,117,109,98,101,114,79,102,73,110,107,115,0,0,0,0,68,111,116,82,97,110,103,101,0,0,0,0,0,0,0,0,84,97,114,103,101,116,80,114,105,110,116,101,114,0,0,0,69,120,116,114,97,83,97,109,112,108,101,115,0,0,0,0,83,97,109,112,108,101,70,111,114,109,97,116,0,0,0,0,83,77,105,110,83,97,109,112,108,101,86,97,108,117,101,0,83,77,97,120,83,97,109,112,108,101,86,97,108,117,101,0,67,108,105,112,80,97,116,104,0,0,0,0,0,0,0,0,88,67,108,105,112,80,97,116,104,85,110,105,116,115,0,0,89,67,108,105,112,80,97,116,104,85,110,105,116,115,0,0,89,67,98,67,114,67,111,101,102,102,105,99,105,101,110,116,115,0,0,0,0,0,0,0,89,67,98,67,114,83,117,98,115,97,109,112,108,105,110,103,0,0,0,0,0,0,0,0,89,67,98,67,114,80,111,115,105,116,105,111,110,105,110,103,0,0,0,0,0,0,0,0,82,101,102,101,114,101,110,99,101,66,108,97,99,107,87,104,105,116,101,0,0,0,0,0,88,77,76,80,97,99,107,101,116,0,0,0,0,0,0,0,77,97,116,116,101,105,110,103,0,0,0,0,0,0,0,0,68,97,116,97,84,121,112,101,0,0,0,0,0,0,0,0,73,109,97,103,101,68,101,112,116,104,0,0,0,0,0,0,84,105,108,101,68,101,112,116,104,0,0,0,0,0,0,0,73,109,97,103,101,70,117,108,108,87,105,100,116,104,0,0,73,109,97,103,101,70,117,108,108,76,101,110,103,116,104,0,84,101,120,116,117,114,101,70,111,114,109,97,116,0,0,0,84,101,120,116,117,114,101,87,114,97,112,77,111,100,101,115,0,0,0,0,0,0,0,0,70,105,101,108,100,79,102,86,105,101,119,67,111,116,97,110,103,101,110,116,0,0,0,0,77,97,116,114,105,120,87,111,114,108,100,84,111,83,99,114,101,101,110,0,0,0,0,0,77,97,116,114,105,120,87,111,114,108,100,84,111,67,97,109,101,114,97,0,0,0,0,0,67,111,112,121,114,105,103,104,116,0,0,0,0,0,0,0,82,105,99,104,84,73,70,70,73,80,84,67,0,0,0,0,80,104,111,116,111,115,104,111,112,0,0,0,0,0,0,0,69,88,73,70,73,70,68,79,102,102,115,101,116,0,0,0,73,67,67,32,80,114,111,102,105,108,101,0,0,0,0,0,71,80,83,73,70,68,79,102,102,115,101,116,0,0,0,0,70,97,120,82,101,99,118,80,97,114,97,109,115,0,0,0,70,97,120,83,117,98,65,100,100,114,101,115,115,0,0,0,70,97,120,82,101,99,118,84,105,109,101,0,0,0,0,0,70,97,120,68,99,115,0,0,83,116,111,78,105,116,115,0,73,110,116,101,114,111,112,101,114,97,98,105,108,105,116,121,73,70,68,79,102,102,115,101,116,0,0,0,0,0,0,0,68,78,71,86,101,114,115,105,111,110,0,0,0,0,0,0,68,78,71,66,97,99,107,119,97,114,100,86,101,114,115,105,111,110,0,0,0,0,0,0,85,110,105,113,117,101,67,97,109,101,114,97,77,111,100,101,108,0,0,0,0,0,0,0,76,111,99,97,108,105,122,101,100,67,97,109,101,114,97,77,111,100,101,108,0,0,0,0,67,70,65,80,108,97,110,101,67,111,108,111,114,0,0,0,67,70,65,76,97,121,111,117,116,0,0,0,0,0,0,0,76,105,110,101,97,114,105,122,97,116,105,111,110,84,97,98,108,101,0,0,0,0,0,0,66,108,97,99,107,76,101,118,101,108,82,101,112,101,97,116,68,105,109,0,0,0,0,0,66,108,97,99,107,76,101,118,101,108,0,0,0,0,0,0,66,108,97,99,107,76,101,118,101,108,68,101,108,116,97,72,0,0,0,0,0,0,0,0,66,108,97,99,107,76,101,118,101,108,68,101,108,116,97,86,0,0,0,0,0,0,0,0,87,104,105,116,101,76,101,118,101,108,0,0,0,0,0,0,68,101,102,97,117,108,116,83,99,97,108,101,0,0,0,0,66,101,115,116,81,117,97,108,105,116,121,83,99,97,108,101,0,0,0,0,0,0,0,0,68,101,102,97,117,108,116,67,114,111,112,79,114,105,103,105,110,0,0,0,0,0,0,0,68,101,102,97,117,108,116,67,114,111,112,83,105,122,101,0,67,111,108,111,114,77,97,116,114,105,120,49,0,0,0,0,67,111,108,111,114,77,97,116,114,105,120,50,0,0,0,0,67,97,109,101,114,97,67,97,108,105,98,114,97,116,105,111,110,49,0,0,0,0,0,0,67,97,109,101,114,97,67,97,108,105,98,114,97,116,105,111,110,50,0,0,0,0,0,0,82,101,100,117,99,116,105,111,110,77,97,116,114,105,120,49,0,0,0,0,0,0,0,0,82,101,100,117,99,116,105,111,110,77,97,116,114,105,120,50,0,0,0,0,0,0,0,0,65,110,97,108,111,103,66,97,108,97,110,99,101,0,0,0,65,115,83,104,111,116,78,101,117,116,114,97,108,0,0,0,65,115,83,104,111,116,87,104,105,116,101,88,89,0,0,0,66,97,115,101,108,105,110,101,69,120,112,111,115,117,114,101,0,0,0,0,0,0,0,0,66,97,115,101,108,105,110,101,78,111,105,115,101,0,0,0,66,97,115,101,108,105,110,101,83,104,97,114,112,110,101,115,115,0,0,0,0,0,0,0,66,97,121,101,114,71,114,101,101,110,83,112,108,105,116,0,76,105,110,101,97,114,82,101,115,112,111,110,115,101,76,105,109,105,116,0,0,0,0,0,67,97,109,101,114,97,83,101,114,105,97,108,78,117,109,98,101,114,0,0,0,0,0,0,76,101,110,115,73,110,102,111,0,0,0,0,0,0,0,0,67,104,114,111,109,97,66,108,117,114,82,97,100,105,117,115,0,0,0,0,0,0,0,0,65,110,116,105,65,108,105,97,115,83,116,114,101,110,103,116,104,0,0,0,0,0,0,0,83,104,97,100,111,119,83,99,97,108,101,0,0,0,0,0,68,78,71,80,114,105,118,97,116,101,68,97,116,97,0,0,77,97,107,101,114,78,111,116,101,83,97,102,101,116,121,0,67,97,108,105,98,114,97,116,105,111,110,73,108,108,117,109,105,110,97,110,116,49,0,0,67,97,108,105,98,114,97,116,105,111,110,73,108,108,117,109,105,110,97,110,116,50,0,0,82,97,119,68,97,116,97,85,110,105,113,117,101,73,68,0,79,114,105,103,105,110,97,108,82,97,119,70,105,108,101,78,97,109,101,0,0,0,0,0,79,114,105,103,105,110,97,108,82,97,119,70,105,108,101,68,97,116,97,0,0,0,0,0,65,99,116,105,118,101,65,114,101,97,0,0,0,0,0,0,77,97,115,107,101,100,65,114,101,97,115,0,0,0,0,0,65,115,83,104,111,116,73,67,67,80,114,111,102,105,108,101,0,0,0,0,0,0,0,0,65,115,83,104,111,116,80,114,101,80,114,111,102,105,108,101,77,97,116,114,105,120,0,0,67,117,114,114,101,110,116,73,67,67,80,114,111,102,105,108,101,0,0,0,0,0,0,0,67,117,114,114,101,110,116,80,114,101,80,114,111,102,105,108,101,77,97,116,114,105,120,0,80,101,114,83,97,109,112,108,101,0,0,0,0,0,0,0,73,110,100,101,120,101,100,0,71,108,111,98,97,108,80,97,114,97,109,101,116,101,114,115,73,70,68,0,0,0,0,0,80,114,111,102,105,108,101,84,121,112,101,0,0,0,0,0,70,97,120,80,114,111,102,105,108,101,0,0,0,0,0,0,67,111,100,105,110,103,77,101,116,104,111,100,115,0,0,0,86,101,114,115,105,111,110,89,101,97,114,0,0,0,0,0,77,111,100,101,78,117,109,98,101,114,0,0,0,0,0,0,68,101,99,111,100,101,0,0,73,109,97,103,101,66,97,115,101,67,111,108,111,114,0,0,84,56,50,79,112,116,105,111,110,115,0,0,0,0,0,0,83,116,114,105,112,82,111,119,67,111,117,110,116,115,0,0,73,109,97,103,101,76,97,121,101,114,0,0,0,0,0,0,84,73,70,70,82,101,97,100,68,105,114,101,99,116,111,114,121,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,100,105,114,101,99,116,111,114,121,32,97,116,32,111,102,102,115,101,116,32,37,108,117,0,0,67,111,109,112,114,101,115,115,105,111,110,0,0,0,0,0,85,110,107,110,111,119,110,32,102,105,101,108,100,32,119,105,116,104,32,116,97,103,32,37,100,32,40,48,120,37,120,41,32,101,110,99,111,117,110,116,101,114,101,100,0,0,0,0,82,101,103,105,115,116,101,114,105,110,103,32,97,110,111,110,121,109,111,117,115,32,102,105,101,108,100,32,119,105,116,104,32,116,97,103,32,37,100,32,40,48,120,37,120,41,32,102,97,105,108,101,100,0,0,0,102,105,105,32,33,61,32,70,65,73,76,69,68,95,70,73,73,0,0,0,0,0,0,0,116,105,102,95,100,105,114,114,101,97,100,46,99,0,0,0,84,73,70,70,82,101,97,100,68,105,114,101,99,116,111,114,121,0,0,0,0,0,0,0,80,108,97,110,97,114,99,111,110,102,105,103,32,116,97,103,32,118,97,108,117,101,32,97,115,115,117,109,101,100,32,105,110,99,111,114,114,101,99,116,44,32,97,115,115,117,109,105,110,103,32,100,97,116,97,32,105,115,32,99,111,110,116,105,103,32,105,110,115,116,101,97,100,32,111,102,32,99,104,117,110,107,121,0,0,0,0,0,73,109,97,103,101,76,101,110,103,116,104,0,0,0,0,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,122,101,114,111,32,110,117,109,98,101,114,32,111,102,32,37,115,0,116,105,108,101,115,0,0,0,115,116,114,105,112,115,0,0,84,105,108,101,79,102,102,115,101,116,115,0,0,0,0,0,83,116,114,105,112,79,102,102,115,101,116,115,0,0,0,0,117,110,107,110,111,119,110,32,116,97,103,110,97,109,101,0,80,104,111,116,111,109,101,116,114,105,99,32,116,97,103,32,105,115,32,109,105,115,115,105,110,103,44,32,97,115,115,117,109,105,110,103,32,100,97,116,97,32,105,115,32,89,67,98,67,114,0,0,0,0,0,0,80,104,111,116,111,109,101,116,114,105,99,32,116,97,103,32,118,97,108,117,101,32,97,115,115,117,109,101,100,32,105,110,99,111,114,114,101,99,116,44,32,97,115,115,117,109,105,110,103,32,100,97,116,97,32,105,115,32,89,67,98,67,114,32,105,110,115,116,101,97,100,32,111,102,32,82,71,66,0,0,66,105,116,115,80,101,114,83,97,109,112,108,101,32,116,97,103,32,105,115,32,109,105,115,115,105,110,103,44,32,97,115,115,117,109,105,110,103,32,56,32,98,105,116,115,32,112,101,114,32,115,97,109,112,108,101,0,0,0,0,0,0,0,0,83,97,109,112,108,101,115,80,101,114,80,105,120,101,108,32,116,97,103,32,105,115,32,109,105,115,115,105,110,103,44,32,97,115,115,117,109,105,110,103,32,99,111,114,114,101,99,116,32,83,97,109,112,108,101,115,80,101,114,80,105,120,101,108,32,118,97,108,117,101,32,105,115,32,51,0,0,0,0,0,83,97,109,112,108,101,115,80,101,114,80,105,120,101,108,32,116,97,103,32,105,115,32,109,105,115,115,105,110,103,44,32,97,112,112,108,121,105,110,103,32,99,111,114,114,101,99,116,32,83,97,109,112,108,101,115,80,101,114,80,105,120,101,108,32,118,97,108,117,101,32,111,102,32,51,0,0,0,0,0,67,111,108,111,114,109,97,112,0,0,0,0,0,0,0,0,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,0,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,105,115,32,109,105,115,115,105,110,103,32,114,101,113,117,105,114,101,100,32,34,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,34,32,102,105,101,108,100,44,32,99,97,108,99,117,108,97,116,105,110,103,32,102,114,111,109,32,105,109,97,103,101,108,101,110,103,116,104,0,0,0,0,0,0,0,0,66,111,103,117,115,32,34,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,34,32,102,105,101,108,100,44,32,105,103,110,111,114,105,110,103,32,97,110,100,32,99,97,108,99,117,108,97,116,105,110,103,32,102,114,111,109,32,105,109,97,103,101,108,101,110,103,116,104,0,0,0,0,0,0,0,0,87,114,111,110,103,32,34,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,34,32,102,105,101,108,100,44,32,105,103,110,111,114,105,110,103,32,97,110,100,32,99,97,108,99,117,108,97,116,105,110,103,32,102,114,111,109,32,105,109,97,103,101,108,101,110,103,116,104,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,122,101,114,111,32,115,99,97,110,108,105,110,101,32,115,105,122,101,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,122,101,114,111,32,116,105,108,101,32,115,105,122,101,0,0,0,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,122,101,114,111,32,115,116,114,105,112,32,115,105,122,101,0,0,0,116,100,45,62,116,100,95,112,108,97,110,97,114,99,111,110,102,105,103,32,61,61,32,80,76,65,78,65,82,67,79,78,70,73,71,95,67,79,78,84,73,71,0,0,0,0,0,0,67,104,111,112,85,112,83,105,110,103,108,101,85,110,99,111,109,112,114,101,115,115,101,100,83,116,114,105,112,0,0,0,102,111,114,32,99,104,111,112,112,101,100,32,34,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,34,32,97,114,114,97,121,0,0,0,0,0,102,111,114,32,99,104,111,112,112,101,100,32,34,83,116,114,105,112,79,102,102,115,101,116,115,34,32,97,114,114,97,121,0,0,0,0,0,0,0,0,115,105,122,101,62,48,0,0,84,73,70,70,82,101,97,100,68,105,114,69,110,116,114,121,68,97,116,97,0,0,0,0,84,73,70,70,70,101,116,99,104,83,116,114,105,112,84,104,105,110,103,0,0,0,0,0,102,111,114,32,115,116,114,105,112,32,97,114,114,97,121,0,40,116,109,115,105,122,101,95,116,41,100,97,116,97,115,105,122,101,62,48,0,0,0,0,84,73,70,70,82,101,97,100,68,105,114,69,110,116,114,121,65,114,114,97,121,0,0,0,82,101,97,100,68,105,114,69,110,116,114,121,65,114,114,97,121,0,0,0,0,0,0,0,84,73,70,70,70,101,116,99,104,78,111,114,109,97,108,84,97,103,0,0,0,0,0,0,84,73,70,70,70,101,116,99,104,78,111,114,109,97,108,84,97,103,0,0,0,0,0,0,78,111,32,100,101,102,105,110,105,116,105,111,110,32,102,111,117,110,100,32,102,111,114,32,116,97,103,32,37,100,0,0,102,105,112,45,62,115,101,116,95,102,105,101,108,100,95,116,121,112,101,33,61,84,73,70,70,95,83,69,84,71,69,84,95,79,84,72,69,82,0,0,102,105,112,45,62,115,101,116,95,102,105,101,108,100,95,116,121,112,101,33,61,84,73,70,70,95,83,69,84,71,69,84,95,73,78,84,0,0,0,0,102,105,112,45,62,102,105,101,108,100,95,112,97,115,115,99,111,117,110,116,61,61,48,0,65,83,67,73,73,32,118,97,108,117,101,32,102,111,114,32,116,97,103,32,34,37,115,34,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,32,105,110,32,118,97,108,117,101,59,32,118,97,108,117,101,32,105,110,99,111,114,114,101,99,116,108,121,32,116,114,117,110,99,97,116,101,100,32,100,117,114,105,110,103,32,114,101,97,100,105,110,103,32,100,117,101,32,116,111,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,108,105,109,105,116,97,116,105,111,110,115,0,0,0,0,0,0,65,83,67,73,73,32,118,97,108,117,101,32,102,111,114,32,116,97,103,32,34,37,115,34,32,100,111,101,115,32,110,111,116,32,101,110,100,32,105,110,32,110,117,108,108,32,98,121,116,101,0,0,0,0,0,0,102,105,112,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,49,0,102,105,112,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,50,0,105,110,99,111,114,114,101,99,116,32,99,111,117,110,116,32,102,111,114,32,102,105,101,108,100,32,34,37,115,34,44,32,101,120,112,101,99,116,101,100,32,50,44,32,103,111,116,32,37,100,0,0,0,0,0,0,102,105,112,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,62,61,49,0,105,110,99,111,114,114,101,99,116,32,99,111,117,110,116,32,102,111,114,32,102,105,101,108,100,32,34,37,115,34,44,32,101,120,112,101,99,116,101,100,32,37,100,44,32,103,111,116,32,37,100,0,0,0,0,0,102,105,112,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,84,73,70,70,95,86,65,82,73,65,66,76,69,0,0,0,0,0,102,105,112,45,62,102,105,101,108,100,95,112,97,115,115,99,111,117,110,116,61,61,49,0,102,105,112,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,84,73,70,70,95,86,65,82,73,65,66,76,69,50,0,0,0,0,48,0,0,0,0,0,0,0,84,73,70,70,70,101,116,99,104,68,105,114,101,99,116,111,114,121,0,0,0,0,0,0,112,100,105,114,0,0,0,0,84,73,70,70,70,101,116,99,104,68,105,114,101,99,116,111,114,121,0,0,0,0,0,0,37,115,58,32,83,101,101,107,32,101,114,114,111,114,32,97,99,99,101,115,115,105,110,103,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,0,37,115,58,32,67,97,110,32,110,111,116,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,0,0,0,83,97,110,105,116,121,32,99,104,101,99,107,32,111,110,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,32,102,97,105,108,101,100,44,32,116,104,105,115,32,105,115,32,112,114,111,98,97,98,108,121,32,110,111,116,32,97,32,118,97,108,105,100,32,73,70,68,32,111,102,102,115,101,116,0,116,111,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,0,0,37,46,49,48,48,115,58,32,67,97,110,32,110,111,116,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,0,0,0,0,0,67,97,110,32,110,111,116,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,0,0,0,0,0,0,0,83,97,110,105,116,121,32,99,104,101,99,107,32,111,110,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,32,102,97,105,108,101,100,44,32,122,101,114,111,32,116,97,103,32,100,105,114,101,99,116,111,114,105,101,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,67,97,110,32,110,111,116,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,0,0,0,0,0,102,111,114,32,73,70,68,32,108,105,115,116,0,0,0,0,77,105,115,115,105,110,103,82,101,113,117,105,114,101,100,0,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,105,115,32,109,105,115,115,105,110,103,32,114,101,113,117,105,114,101,100,32,34,37,115,34,32,102,105,101,108,100,0,0,0,69,115,116,105,109,97,116,101,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,0,102,111,114,32,34,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,34,32,97,114,114,97,121,0,0,0,0,0,67,97,110,110,111,116,32,100,101,116,101,114,109,105,110,101,32,115,105,122,101,32,111,102,32,117,110,107,110,111,119,110,32,116,97,103,32,116,121,112,101,32,37,100,0,0,0,0,84,73,70,70,82,101,97,100,68,105,114,101,99,116,111,114,121,67,104,101,99,107,79,114,100,101,114,0,0,0,0,0,73,110,118,97,108,105,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,59,32,116,97,103,115,32,97,114,101,32,110,111,116,32,115,111,114,116,101,100,32,105,110,32,97,115,99,101,110,100,105,110,103,32,111,114,100,101,114,0,0,73,110,99,111,114,114,101,99,116,32,99,111,117,110,116,32,102,111,114,32,34,37,115,34,0,0,0,0,0,0,0,0,73,110,99,111,109,112,97,116,105,98,108,101,32,116,121,112,101,32,102,111,114,32,34,37,115,34,0,0,0,0,0,0,73,79,32,101,114,114,111,114,32,100,117,114,105,110,103,32,114,101,97,100,105,110,103,32,111,102,32,34,37,115,34,0,73,110,99,111,114,114,101,99,116,32,118,97,108,117,101,32,102,111,114,32,34,37,115,34,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,100,105,102,102,101,114,101,110,116,32,118,97,108,117,101,115,32,112,101,114,32,115,97,109,112,108,101,32,102,111,114,32,34,37,115,34,0,0,0,0,0,0,83,97,110,105,116,121,32,99,104,101,99,107,32,111,110,32,115,105,122,101,32,111,102,32,34,37,115,34,32,118,97,108,117,101,32,102,97,105,108,101,100,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,114,101,97,100,105,110,103,32,111,102,32,34,37,115,34,0,0,0,84,73,70,70,82,101,97,100,68,105,114,69,110,116,114,121,79,117,116,112,117,116,69,114,114,0,0,0,0,0,0,0,73,110,99,111,114,114,101,99,116,32,99,111,117,110,116,32,102,111,114,32,34,37,115,34,59,32,116,97,103,32,105,103,110,111,114,101,100,0,0,0,73,110,99,111,109,112,97,116,105,98,108,101,32,116,121,112,101,32,102,111,114,32,34,37,115,34,59,32,116,97,103,32,105,103,110,111,114,101,100,0,73,79,32,101,114,114,111,114,32,100,117,114,105,110,103,32,114,101,97,100,105,110,103,32,111,102,32,34,37,115,34,59,32,116,97,103,32,105,103,110,111,114,101,100,0,0,0,0,73,110,99,111,114,114,101,99,116,32,118,97,108,117,101,32,102,111,114,32,34,37,115,34,59,32,116,97,103,32,105,103,110,111,114,101,100,0,0,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,100,105,102,102,101,114,101,110,116,32,118,97,108,117,101,115,32,112,101,114,32,115,97,109,112,108,101,32,102,111,114,32,34,37,115,34,59,32,116,97,103,32,105,103,110,111,114,101,100,0,83,97,110,105,116,121,32,99,104,101,99,107,32,111,110,32,115,105,122,101,32,111,102,32,34,37,115,34,32,118,97,108,117,101,32,102,97,105,108,101,100,59,32,116,97,103,32,105,103,110,111,114,101,100,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,114,101,97,100,105,110,103,32,111,102,32,34,37,115,34,59,32,116,97,103,32,105,103,110,111,114,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,111,114,114,121,44,32,114,101,113,117,101,115,116,101,100,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,32,105,115,32,110,111,116,32,99,111,110,102,105,103,117,114,101,100,0,0,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,105,109,97,103,101,115,32,119,105,116,104,32,37,100,45,98,105,116,32,115,97,109,112,108,101,115,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,110,101,101,100,101,100,32,37,115,32,116,97,103,0,0,0,80,104,111,116,111,109,101,116,114,105,99,73,110,116,101,114,112,114,101,116,97,116,105,111,110,0,0,0,0,0,0,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,99,111,110,116,105,103,117,111,117,115,32,100,97,116,97,32,119,105,116,104,32,37,115,61,37,100,44,32,97,110,100,32,37,115,61,37,100,32,97,110,100,32,66,105,116,115,47,83,97,109,112,108,101,61,37,100,0,0,83,97,109,112,108,101,115,47,112,105,120,101,108,0,0,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,82,71,66,32,105,109,97,103,101,32,119,105,116,104,32,37,115,61,37,100,0,0,0,0,0,0,67,111,108,111,114,32,99,104,97,110,110,101,108,115,0,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,115,101,112,97,114,97,116,101,100,32,105,109,97,103,101,32,119,105,116,104,32,37,115,61,37,100,0,0,0,0,0,0,0,0,73,110,107,83,101,116,0,0,83,111,114,114,121,44,32,76,111,103,76,32,100,97,116,97,32,109,117,115,116,32,104,97,118,101,32,37,115,61,37,100,0,0,0,0,0,0,0,0,67,111,109,112,114,101,115,115,105,111,110,0,0,0,0,0,83,111,114,114,121,44,32,76,111,103,76,117,118,32,100,97,116,97,32,109,117,115,116,32,104,97,118,101,32,37,115,61,37,100,32,111,114,32,37,100,0,0,0,0,0,0,0,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,76,111,103,76,117,118,32,105,109,97,103,101,115,32,119,105,116,104,32,37,115,61,37,100,0,0,80,108,97,110,97,114,99,111,110,102,105,103,117,114,97,116,105,111,110,0,0,0,0,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,105,109,97,103,101,32,119,105,116,104,32,37,115,61,37,100,0,0,77,105,115,115,105,110,103,32,114,101,113,117,105,114,101,100,32,34,67,111,108,111,114,109,97,112,34,32,116,97,103,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,102,111,114,32,99,111,108,111,114,109,97,112,32,99,111,112,121,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,105,109,97,103,101,0,0,0,0,0,78,111,32,34,103,101,116,34,32,114,111,117,116,105,110,101,32,115,101,116,117,112,0,0,78,111,32,34,112,117,116,34,32,114,111,117,116,105,110,101,32,115,101,116,117,112,108,59,32,112,114,111,98,97,98,108,121,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,105,109,97,103,101,32,102,111,114,109,97,116,0,0,0,37,115,0,0,0,0,0,0,105,110,105,116,89,67,98,67,114,67,111,110,118,101,114,115,105,111,110,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,89,67,98,67,114,45,62,82,71,66,32,99,111,110,118,101,114,115,105,111,110,32,115,116,97,116,101,0,0,0,0,0,0,0,0,66,117,105,108,100,77,97,112,66,105,116,100,101,112,116,104,49,54,84,111,56,0,0,0,105,109,103,45,62,66,105,116,100,101,112,116,104,49,54,84,111,56,61,61,78,85,76,76,0,0,0,0,0,0,0,0,116,105,102,95,103,101,116,105,109,97,103,101,46,99,0,0,66,117,105,108,100,77,97,112,66,105,116,100,101,112,116,104,49,54,84,111,56,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,66,117,105,108,100,77,97,112,85,97,84,111,65,97,0,0,105,109,103,45,62,85,97,84,111,65,97,61,61,78,85,76,76,0,0,0,0,0,0,0,66,117,105,108,100,77,97,112,85,97,84,111,65,97,0,0,73,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,32,105,110,32,37,115,0,0,103,116,83,116,114,105,112,83,101,112,97,114,97,116,101,0,78,111,32,115,112,97,99,101,32,102,111,114,32,116,105,108,101,32,98,117,102,102,101,114,0,0,0,0,0,0,0,0,103,116,84,105,108,101,83,101,112,97,114,97,116,101,0,0,105,110,105,116,67,73,69,76,97,98,67,111,110,118,101,114,115,105,111,110,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,67,73,69,32,76,42,97,42,98,42,45,62,82,71,66,32,99,111,110,118,101,114,115,105,111,110,32,115,116,97,116,101,46,0,0,139,108,79,64,134,201,196,191,128,72,255,190,126,29,120,191,197,32,240,63,195,100,42,61,211,188,99,61,96,229,80,190,199,75,135,63,0,0,200,66,0,0,200,66,0,0,200,66,255,0,0,0,255,0,0,0,255,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,154,153,25,64,154,153,25,64,154,153,25,64,0,0,0,0,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,67,73,69,32,76,42,97,42,98,42,45,62,82,71,66,32,99,111,110,118,101,114,115,105,111,110,32,115,116,97,116,101,46,0,0,65,115,115,117,109,105,110,103,32,56,45,98,105,116,32,99,111,108,111,114,109,97,112,0,78,111,32,115,112,97,99,101,32,102,111,114,32,80,97,108,101,116,116,101,32,109,97,112,112,105,110,103,32,116,97,98,108,101,0,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,112,104,111,116,111,109,101,116,114,105,99,32,99,111,110,118,101,114,115,105,111,110,32,116,97,98,108,101,0,0,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,66,38,87,32,109,97,112,112,105,110,103,32,116,97,98,108,101,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,115,116,114,105,112,32,98,117,102,102,101,114,0,0,0,0,0,0,0,34,37,115,34,58,32,66,97,100,32,109,111,100,101,0,0,84,73,70,70,67,108,105,101,110,116,79,112,101,110,0,0,110,46,97,49,54,61,61,49,0,0,0,0,0,0,0,0,116,105,102,95,111,112,101,110,46,99,0,0,0,0,0,0,84,73,70,70,67,108,105,101,110,116,79,112,101,110,0,0,37,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,40,84,73,70,70,32,115,116,114,117,99,116,117,114,101,41,0,0,0,0,0,0,79,110,101,32,111,102,32,116,104,101,32,99,108,105,101,110,116,32,112,114,111,99,101,100,117,114,101,115,32,105,115,32,78,85,76,76,32,112,111,105,110,116,101,114,46,0,0,0,67,97,110,110,111,116,32,114,101,97,100,32,84,73,70,70,32,104,101,97,100,101,114,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,84,73,70,70,32,104,101,97,100,101,114,0,0,0,0,0,0,0,78,111,116,32,97,32,84,73,70,70,32,111,114,32,77,68,73,32,102,105,108,101,44,32,98,97,100,32,109,97,103,105,99,32,110,117,109,98,101,114,32,37,100,32,40,48,120,37,120,41,0,0,0,0,0,0,78,111,116,32,97,32,84,73,70,70,32,102,105,108,101,44,32,98,97,100,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,32,37,100,32,40,48,120,37,120,41,0,0,0,78,111,116,32,97,32,84,73,70,70,32,102,105,108,101,44,32,98,97,100,32,66,105,103,84,73,70,70,32,111,102,102,115,101,116,115,105,122,101,32,37,100,32,40,48,120,37,120,41,0,0,0,0,0,0,0,78,111,116,32,97,32,84,73,70,70,32,102,105,108,101,44,32,98,97,100,32,66,105,103,84,73,70,70,32,117,110,117,115,101,100,32,37,100,32,40,48,120,37,120,41,0,0,0,40,116,111,102,102,95,116,41,116,105,102,45,62,116,105,102,95,115,105,122,101,61,61,110,0,0,0,0,0,0,0,0,84,73,70,70,82,101,97,100,69,110,99,111,100,101,100,83,116,114,105,112,0,0,0,0,37,108,117,58,32,83,116,114,105,112,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,0,0,0,0,0,0,0,73,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,84,73,70,70,70,105,108,108,83,116,114,105,112,0,0,0,73,110,118,97,108,105,100,32,115,116,114,105,112,32,98,121,116,101,32,99,111,117,110,116,32,37,108,108,117,44,32,115,116,114,105,112,32,37,108,117,0,0,0,0,0,0,0,0,82,101,97,100,32,101,114,114,111,114,32,111,110,32,115,116,114,105,112,32,37,108,117,59,32,103,111,116,32,37,108,108,117,32,98,121,116,101,115,44,32,101,120,112,101,99,116,101,100,32,37,108,108,117,0,0,68,97,116,97,32,98,117,102,102,101,114,32,116,111,111,32,115,109,97,108,108,32,116,111,32,104,111,108,100,32,115,116,114,105,112,32,37,108,117,0,84,73,70,70,82,101,97,100,69,110,99,111,100,101,100,84,105,108,101,0,0,0,0,0,37,108,117,58,32,84,105,108,101,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,84,73,70,70,70,105,108,108,84,105,108,101,0,0,0,0,37,108,108,117,58,32,73,110,118,97,108,105,100,32,116,105,108,101,32,98,121,116,101,32,99,111,117,110,116,44,32,116,105,108,101,32,37,108,117,0,68,97,116,97,32,98,117,102,102,101,114,32,116,111,111,32,115,109,97,108,108,32,116,111,32,104,111,108,100,32,116,105,108,101,32,37,108,117,0,0,84,73,70,70,82,101,97,100,66,117,102,102,101,114,83,101,116,117,112,0,0,0,0,0,40,116,105,102,45,62,116,105,102,95,102,108,97,103,115,38,84,73,70,70,95,78,79,82,69,65,68,82,65,87,41,61,61,48,0,0,0,0,0,0,116,105,102,95,114,101,97,100,46,99,0,0,0,0,0,0,84,73,70,70,82,101,97,100,66,117,102,102,101,114,83,101,116,117,112,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,100,97,116,97,32,98,117,102,102,101,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,0,0,0,0,0,0,0,0,40,99,99,32,38,32,49,41,32,61,61,32,48,0,0,0,95,84,73,70,70,83,119,97,98,49,54,66,105,116,68,97,116,97,0,0,0,0,0,0,40,99,99,32,37,32,51,41,32,61,61,32,48,0,0,0,95,84,73,70,70,83,119,97,98,50,52,66,105,116,68,97,116,97,0,0,0,0,0,0,40,99,99,32,38,32,51,41,32,61,61,32,48,0,0,0,95,84,73,70,70,83,119,97,98,51,50,66,105,116,68,97,116,97,0,0,0,0,0,0,40,99,99,32,38,32,55,41,32,61,61,32,48,0,0,0,95,84,73,70,70,83,119,97,98,54,52,66,105,116,68,97,116,97,0,0,0,0,0,0,70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,0,0,0,0,0,0,0,67,97,110,32,110,111,116,32,114,101,97,100,32,116,105,108,101,115,32,102,114,111,109,32,97,32,115,116,114,105,112,112,101,100,32,105,109,97,103,101,0,0,0,0,0,0,0,0,67,97,110,32,110,111,116,32,114,101,97,100,32,115,99,97,110,108,105,110,101,115,32,102,114,111,109,32,97,32,116,105,108,101,100,32,105,109,97,103,101,0,0,0,0,0,0,0,84,73,70,70,82,101,97,100,82,97,119,84,105,108,101,49,0,0,0,0,0,0,0,0,83,101,101,107,32,101,114,114,111,114,32,97,116,32,114,111,119,32,37,108,117,44,32,99,111,108,32,37,108,117,44,32,116,105,108,101,32,37,108,117,0,0,0,0,0,0,0,0,82,101,97,100,32,101,114,114,111,114,32,97,116,32,114,111,119,32,37,108,117,44,32,99,111,108,32,37,108,117,59,32,103,111,116,32,37,108,108,117,32,98,121,116,101,115,44,32,101,120,112,101,99,116,101,100,32,37,108,108,117,0,0,0,82,101,97,100,32,101,114,114,111,114,32,97,116,32,114,111,119,32,37,108,117,44,32,99,111,108,32,37,108,117,44,32,116,105,108,101,32,37,108,117,59,32,103,111,116,32,37,108,108,117,32,98,121,116,101,115,44,32,101,120,112,101,99,116,101,100,32,37,108,108,117,0,84,73,70,70,82,101,97,100,82,97,119,83,116,114,105,112,49,0,0,0,0,0,0,0,83,101,101,107,32,101,114,114,111,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,44,32,115,116,114,105,112,32,37,108,117,0,0,0,82,101,97,100,32,101,114,114,111,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,59,32,103,111,116,32,37,108,108,117,32,98,121,116,101,115,44,32,101,120,112,101,99,116,101,100,32,37,108,108,117,0,0,0,0,0,0,0,82,101,97,100,32,101,114,114,111,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,44,32,115,116,114,105,112,32,37,108,117,59,32,103,111,116,32,37,108,108,117,32,98,121,116,101,115,44,32,101,120,112,101,99,116,101,100,32,37,108,108,117,0,0,0,0,84,73,70,70,67,111,109,112,117,116,101,83,116,114,105,112,0,0,0,0,0,0,0,0,37,108,117,58,32,83,97,109,112,108,101,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,0,0,0,0,0,0,84,73,70,70,78,117,109,98,101,114,79,102,83,116,114,105,112,115,0,0,0,0,0,0,84,73,70,70,86,83,116,114,105,112,83,105,122,101,54,52,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,116,100,95,115,97,109,112,108,101,115,112,101,114,112,105,120,101,108,32,118,97,108,117,101,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,89,67,98,67,114,32,115,117,98,115,97,109,112,108,105,110,103,32,40,37,100,120,37,100,41,0,0,0,0,0,0,0,84,73,70,70,86,83,116,114,105,112,83,105,122,101,0,0,73,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,84,73,70,70,83,116,114,105,112,83,105,122,101,0,0,0,84,73,70,70,83,99,97,110,108,105,110,101,83,105,122,101,54,52,0,0,0,0,0,0,73,110,118,97,108,105,100,32,89,67,98,67,114,32,115,117,98,115,97,109,112,108,105,110,103,0,0,0,0,0,0,0,84,73,70,70,83,99,97,110,108,105,110,101,83,105,122,101,0,0,0,0,0,0,0,0,73,110,116,101,103,101,114,32,97,114,105,116,104,109,101,116,105,99,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243,11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251,7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247,15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,37,108,117,58,32,67,111,108,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,0,37,108,117,58,32,82,111,119,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,0,37,108,117,58,32,68,101,112,116,104,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,0,0,0,0,0,0,0,37,108,117,58,32,83,97,109,112,108,101,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,0,0,0,0,0,0,84,73,70,70,78,117,109,98,101,114,79,102,84,105,108,101,115,0,0,0,0,0,0,0,84,73,70,70,84,105,108,101,82,111,119,83,105,122,101,0,84,73,70,70,84,105,108,101,82,111,119,83,105,122,101,0,73,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,84,73,70,70,86,84,105,108,101,83,105,122,101,54,52,0,73,110,118,97,108,105,100,32,89,67,98,67,114,32,115,117,98,115,97,109,112,108,105,110,103,32,40,37,100,120,37,100,41,0,0,0,0,0,0,0,84,73,70,70,84,105,108,101,83,105,122,101,0,0,0,0,0,0,0,0,0,0,0,0,84,73,70,70,65,112,112,101,110,100,84,111,83,116,114,105,112,0,0,0,0,0,0,0,116,100,45,62,116,100,95,110,115,116,114,105,112,115,32,62,32,48,0,0,0,0,0,0,116,105,102,95,119,114,105,116,101,46,99,0,0,0,0,0,84,73,70,70,65,112,112,101,110,100,84,111,83,116,114,105,112,0,0,0,0,0,0,0,83,101,101,107,32,101,114,114,111,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,0,0,0,0,0,0,77,97,120,105,109,117,109,32,84,73,70,70,32,102,105,108,101,32,115,105,122,101,32,101,120,99,101,101,100,101,100,0,87,114,105,116,101,32,101,114,114,111,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,0,0,0,0,0,84,73,70,70,79,112,101,110,0,0,0,0,0,0,0,0,37,115,58,32,37,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([37,115,58,32,67,97,110,110,111,116,32,111,112,101,110,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,37,115,58,32,0,0,0,0,46,10,0,0,0,0,0,0,87,97,114,110,105,110,103,44,32,0,0,0,0,0,0,0,73,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,32,105,110,32,37,115,0,0,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,102,111,114,32,37,115,32,40,37,108,100,32,101,108,101,109,101,110,116,115,32,111,102,32,37,108,100,32,98,121,116,101,115,32,101,97,99,104,41,0,0,0,0,0,0,0,135,22,153,62,162,69,22,63,213,120,233,61,0,0,0,0,0,0,0,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,34,84,114,97,110,115,102,101,114,70,117,110,99,116,105,111,110,34,32,116,97,103,0,0,0,0,0,115,99,97,110,108,105,110,101,0,0,0,0,0,0,0,0,115,116,114,105,112,0,0,0,116,105,108,101,0,0,0,0,67,111,109,112,114,101,115,115,105,111,110,32,97,108,103,111,114,105,116,104,109,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,114,97,110,100,111,109,32,97,99,99,101,115,115,0,0,0,0,0,0,0,0,0,0,0,0,37,115,32,37,115,32,100,101,99,111,100,105,110,103,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,0,0,0,67,111,109,112,114,101,115,115,105,111,110,32,115,99,104,101,109,101,32,37,117,32,37,115,32,100,101,99,111,100,105,110,103,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,37,115,32,37,115,32,101,110,99,111,100,105,110,103,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,0,0,0,67,111,109,112,114,101,115,115,105,111,110,32,115,99,104,101,109,101,32,37,117,32,37,115,32,101,110,99,111,100,105,110,103,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,84,73,70,70,82,101,119,114,105,116,101,68,105,114,101,99,116,111,114,121,0,0,0,0,69,114,114,111,114,32,117,112,100,97,116,105,110,103,32,84,73,70,70,32,104,101,97,100,101,114,0,0,0,0,0,0,69,114,114,111,114,32,102,101,116,99,104,105,110,103,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,0,0,69,114,114,111,114,32,102,101,116,99,104,105,110,103,32,100,105,114,101,99,116,111,114,121,32,108,105,110,107,0,0,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,100,105,114,101,99,116,111,114,121,32,108,105,110,107,0,0,0,0,83,97,110,105,116,121,32,99,104,101,99,107,32,111,110,32,116,97,103,32,99,111,117,110,116,32,102,97,105,108,101,100,44,32,108,105,107,101,108,121,32,99,111,114,114,117,112,116,32,84,73,70,70,0,0,0,84,73,70,70,82,101,115,101,116,70,105,101,108,100,0,0,77,101,109,111,114,121,32,109,97,112,112,101,100,32,102,105,108,101,115,32,110,111,116,32,99,117,114,114,101,110,116,108,121,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,116,104,105,115,32,111,112,101,114,97,116,105,111,110,46,0,65,116,116,101,109,112,116,32,116,111,32,114,101,115,101,116,32,102,105,101,108,100,32,111,110,32,100,105,114,101,99,116,111,114,121,32,110,111,116,32,97,108,114,101,97,100,121,32,111,110,32,100,105,115,107,46,0,0,0,0,0,0,0,0,37,115,58,32,83,101,101,107,32,101,114,114,111,114,32,97,99,99,101,115,115,105,110,103,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,0,37,115,58,32,67,97,110,32,110,111,116,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,0,0,0,37,115,58,32,67,97,110,32,110,111,116,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,101,110,116,114,121,46,0,0,37,115,58,32,67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,116,97,103,32,37,100,46,0,0,0,0,0,0,102,111,114,32,102,105,101,108,100,32,98,117,102,102,101,114,46,0,0,0,0,0,0,0,86,97,108,117,101,32,101,120,99,101,101,100,115,32,51,50,98,105,116,32,114,97,110,103,101,32,111,102,32,111,117,116,112,117,116,32,116,121,112,101,46,0,0,0,0,0,0,0,37,115,58,32,67,97,110,32,110,111,116,32,119,114,105,116,101,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,101,110,116,114,121,46,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,83,101,99,0,0,0,69,114,114,111,114,32,112,111,115,116,45,101,110,99,111,100,105,110,103,32,98,101,102,111,114,101,32,100,105,114,101,99,116,111,114,121,32,119,114,105,116,101,0,0,0,0,0,0,69,114,114,111,114,32,102,108,117,115,104,105,110,103,32,100,97,116,97,32,98,101,102,111,114,101,32,100,105,114,101,99,116,111,114,121,32,119,114,105,116,101,0,0,0,0,0,0,111,45,62,102,105,101,108,100,95,116,121,112,101,61,61,84,73,70,70,95,65,83,67,73,73,0,0,0,0,0,0,0,116,105,102,95,100,105,114,119,114,105,116,101,46,99,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,83,101,99,0,0,0,111,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,84,73,70,70,95,86,65,82,73,65,66,76,69,0,0,0,0,0,0,0,111,45,62,102,105,101,108,100,95,112,97,115,115,99,111,117,110,116,61,61,48,0,0,0,111,45,62,102,105,101,108,100,95,116,121,112,101,61,61,84,73,70,70,95,83,72,79,82,84,0,0,0,0,0,0,0,111,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,49,0,0,0,111,45,62,102,105,101,108,100,95,116,121,112,101,61,61,84,73,70,70,95,76,79,78,71,0,0,0,0,0,0,0,0,111,45,62,102,105,101,108,100,95,116,121,112,101,61,61,84,73,70,70,95,85,78,68,69,70,73,78,69,68,0,0,0,111,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,84,73,70,70,95,86,65,82,73,65,66,76,69,50,0,0,0,0,0,0,111,45,62,102,105,101,108,100,95,112,97,115,115,99,111,117,110,116,61,61,49,0,0,0,48,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,77,97,120,105,109,117,109,32,84,73,70,70,32,102,105,108,101,32,115,105,122,101,32,101,120,99,101,101,100,101,100,0,110,97,60,110,100,105,114,0,73,79,32,101,114,114,111,114,32,119,114,105,116,105,110,103,32,100,105,114,101,99,116,111,114,121,0,0,0,0,0,0,84,73,70,70,76,105,110,107,68,105,114,101,99,116,111,114,121,0,0,0,0,0,0,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,83,117,98,73,70,68,32,100,105,114,101,99,116,111,114,121,32,108,105,110,107,0,0,0,0,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,84,73,70,70,32,104,101,97,100,101,114,0,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,73,102,100,73,102,100,56,65,114,114,97,121,0,0,0,0,0,0,0,65,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,118,97,108,117,101,32,108,97,114,103,101,114,32,116,104,97,110,32,48,120,70,70,70,70,70,70,70,70,32,105,110,32,67,108,97,115,115,105,99,32,84,73,70,70,32,102,105,108,101,46,0,0,0,0,0,99,111,117,110,116,60,48,120,52,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,73,102,100,65,114,114,97,121,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,68,97,116,97,0,0,0,0,0,0,0,100,105,114,91,109,93,46,116,100,105,114,95,116,97,103,33,61,116,97,103,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,68,97,116,97,0,0,0,0,0,0,0,73,79,32,101,114,114,111,114,32,119,114,105,116,105,110,103,32,116,97,103,32,100,97,116,97,0,0,0,0,0,0,0,100,97,116,97,108,101,110,103,116,104,60,48,120,56,48,48,48,48,48,48,48,85,76,0,99,111,117,110,116,60,48,120,50,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,73,102,100,56,65,114,114,97,121,0,0,0,116,105,102,45,62,116,105,102,95,102,108,97,103,115,38,84,73,70,70,95,66,73,71,84,73,70,70,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,68,111,117,98,108,101,65,114,114,97,121,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,70,108,111,97,116,65,114,114,97,121,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,83,114,97,116,105,111,110,97,108,65,114,114,97,121,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,83,108,111,110,103,56,65,114,114,97,121,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,76,111,110,103,56,65,114,114,97,121,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,83,108,111,110,103,65,114,114,97,121,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,76,111,110,103,65,114,114,97,121,0,0,0,99,111,117,110,116,60,48,120,56,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,83,115,104,111,114,116,65,114,114,97,121,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,83,117,98,105,102,100,0,0,0,0,0,112,97,32,33,61,32,48,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,83,117,98,105,102,100,0,0,0,0,0,42,112,97,32,60,61,32,48,120,70,70,70,70,70,70,70,70,85,76,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,84,114,97,110,115,102,101,114,102,117,110,99,116,105,111,110,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,83,104,111,114,116,65,114,114,97,121,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,82,97,116,105,111,110,97,108,65,114,114,97,121,0,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,83,97,109,112,108,101,102,111,114,109,97,116,65,114,114,97,121,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,111,108,111,114,109,97,112,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,76,111,110,103,76,111,110,103,56,65,114,114,97,121,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,83,104,111,114,116,80,101,114,83,97,109,112,108,101,0,0,0,0,0,118,97,108,117,101,62,61,48,46,48,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,82,97,116,105,111,110,97,108,0,0,0,0,78,111,110,101,0,0,0,0,76,90,87,0,0,0,0,0,80,97,99,107,66,105,116,115,0,0,0,0,0,0,0,0,84,104,117,110,100,101,114,83,99,97,110,0,0,0,0,0,78,101,88,84,0,0,0,0,74,80,69,71,0,0,0,0,79,108,100,45,115,116,121,108,101,32,74,80,69,71,0,0,67,67,73,84,84,32,82,76,69,0,0,0,0,0,0,0,67,67,73,84,84,32,82,76,69,47,87,0,0,0,0,0,67,67,73,84,84,32,71,114,111,117,112,32,51,0,0,0,67,67,73,84,84,32,71,114,111,117,112,32,52,0,0,0,73,83,79,32,74,66,73,71,0,0,0,0,0,0,0,0,68,101,102,108,97,116,101,0,65,100,111,98,101,68,101,102,108,97,116,101,0,0,0,0,80,105,120,97,114,76,111,103,0,0,0,0,0,0,0,0,83,71,73,76,111,103,0,0,83,71,73,76,111,103,50,52,0,0,0,0,0,0,0,0,76,90,77,65,0,0,0,0,152,91,0,0,1,0,0,0,3,0,0,0,160,91,0,0,5,0,0,0,4,0,0,0,168,91,0,0,5,128,0,0,5,0,0,0,184,91,0,0,41,128,0,0,6,0,0,0,200,91,0,0,254,127,0,0,7,0,0,0,208,91,0,0,7,0,0,0,8,0,0,0,216,91,0,0,6,0,0,0,8,0,0,0,232,91,0,0,2,0,0,0,9,0,0,0,248,91,0,0,3,128,0,0,10,0,0,0,8,92,0,0,3,0,0,0,11,0,0,0,24,92,0,0,4,0,0,0,12,0,0,0,40,92,0,0,101,135,0,0,8,0,0,0,56,92,0,0,178,128,0,0,8,0,0,0,64,92,0,0,8,0,0,0,8,0,0,0,80,92,0,0,141,128,0,0,8,0,0,0,96,92,0,0,116,135,0,0,13,0,0,0,104,92,0,0,117,135,0,0,13,0,0,0,120,92,0,0,109,136,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,37,115,32,99,111,109,112,114,101,115,115,105,111,110,32,115,117,112,112,111,114,116,32,105,115,32,110,111,116,32,99,111,110,102,105,103,117,114,101,100,0,0,0,0,0,0,0,0,110,32,62,32,48,0,0,0,116,105,102,95,100,117,109,112,109,111,100,101,46,99,0,0,68,117,109,112,77,111,100,101,69,110,99,111,100,101,0,0,68,117,109,112,77,111,100,101,68,101,99,111,100,101,0,0,78,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,102,111,114,32,115,99,97,110,108,105,110,101,32,37,108,117,44,32,101,120,112,101,99,116,101,100,32,97,32,114,101,113,117,101,115,116,32,102,111,114,32,97,116,32,109,111,115,116,32,37,108,108,100,32,98,121,116,101,115,44,32,103,111,116,32,97,32,114,101,113,117,101,115,116,32,102,111,114,32,37,108,108,100,32,98,121,116,101,115,0,0,0,0,0,0,0,8,0,53,0,0,0,6,0,7,0,1,0,4,0,7,0,2,0,4,0,8,0,3,0,4,0,11,0,4,0,4,0,12,0,5,0,4,0,14,0,6,0,4,0,15,0,7,0,5,0,19,0,8,0,5,0,20,0,9,0,5,0,7,0,10,0,5,0,8,0,11,0,6,0,8,0,12,0,6,0,3,0,13,0,6,0,52,0,14,0,6,0,53,0,15,0,6,0,42,0,16,0,6,0,43,0,17,0,7,0,39,0,18,0,7,0,12,0,19,0,7,0,8,0,20,0,7,0,23,0,21,0,7,0,3,0,22,0,7,0,4,0,23,0,7,0,40,0,24,0,7,0,43,0,25,0,7,0,19,0,26,0,7,0,36,0,27,0,7,0,24,0,28,0,8,0,2,0,29,0,8,0,3,0,30,0,8,0,26,0,31,0,8,0,27,0,32,0,8,0,18,0,33,0,8,0,19,0,34,0,8,0,20,0,35,0,8,0,21,0,36,0,8,0,22,0,37,0,8,0,23,0,38,0,8,0,40,0,39,0,8,0,41,0,40,0,8,0,42,0,41,0,8,0,43,0,42,0,8,0,44,0,43,0,8,0,45,0,44,0,8,0,4,0,45,0,8,0,5,0,46,0,8,0,10,0,47,0,8,0,11,0,48,0,8,0,82,0,49,0,8,0,83,0,50,0,8,0,84,0,51,0,8,0,85,0,52,0,8,0,36,0,53,0,8,0,37,0,54,0,8,0,88,0,55,0,8,0,89,0,56,0,8,0,90,0,57,0,8,0,91,0,58,0,8,0,74,0,59,0,8,0,75,0,60,0,8,0,50,0,61,0,8,0,51,0,62,0,8,0,52,0,63,0,5,0,27,0,64,0,5,0,18,0,128,0,6,0,23,0,192,0,7,0,55,0,0,1,8,0,54,0,64,1,8,0,55,0,128,1,8,0,100,0,192,1,8,0,101,0,0,2,8,0,104,0,64,2,8,0,103,0,128,2,9,0,204,0,192,2,9,0,205,0,0,3,9,0,210,0,64,3,9,0,211,0,128,3,9,0,212,0,192,3,9,0,213,0,0,4,9,0,214,0,64,4,9,0,215,0,128,4,9,0,216,0,192,4,9,0,217,0,0,5,9,0,218,0,64,5,9,0,219,0,128,5,9,0,152,0,192,5,9,0,153,0,0,6,9,0,154,0,64,6,6,0,24,0,128,6,9,0,155,0,192,6,11,0,8,0,0,7,11,0,12,0,64,7,11,0,13,0,128,7,12,0,18,0,192,7,12,0,19,0,0,8,12,0,20,0,64,8,12,0,21,0,128,8,12,0,22,0,192,8,12,0,23,0,0,9,12,0,28,0,64,9,12,0,29,0,128,9,12,0,30,0,192,9,12,0,31,0,0,10,12,0,1,0,255,255,9,0,1,0,254,255,10,0,1,0,254,255,11,0,1,0,254,255,12,0,0,0,254,255,0,0,10,0,55,0,0,0,3,0,2,0,1,0,2,0,3,0,2,0,2,0,2,0,3,0,3,0,3,0,4,0,4,0,3,0,5,0,4,0,2,0,6,0,5,0,3,0,7,0,6,0,5,0,8,0,6,0,4,0,9,0,7,0,4,0,10,0,7,0,5,0,11,0,7,0,7,0,12,0,8,0,4,0,13,0,8,0,7,0,14,0,9,0,24,0,15,0,10,0,23,0,16,0,10,0,24,0,17,0,10,0,8,0,18,0,11,0,103,0,19,0,11,0,104,0,20,0,11,0,108,0,21,0,11,0,55,0,22,0,11,0,40,0,23,0,11,0,23,0,24,0,11,0,24,0,25,0,12,0,202,0,26,0,12,0,203,0,27,0,12,0,204,0,28,0,12,0,205,0,29,0,12,0,104,0,30,0,12,0,105,0,31,0,12,0,106,0,32,0,12,0,107,0,33,0,12,0,210,0,34,0,12,0,211,0,35,0,12,0,212,0,36,0,12,0,213,0,37,0,12,0,214,0,38,0,12,0,215,0,39,0,12,0,108,0,40,0,12,0,109,0,41,0,12,0,218,0,42,0,12,0,219,0,43,0,12,0,84,0,44,0,12,0,85,0,45,0,12,0,86,0,46,0,12,0,87,0,47,0,12,0,100,0,48,0,12,0,101,0,49,0,12,0,82,0,50,0,12,0,83,0,51,0,12,0,36,0,52,0,12,0,55,0,53,0,12,0,56,0,54,0,12,0,39,0,55,0,12,0,40,0,56,0,12,0,88,0,57,0,12,0,89,0,58,0,12,0,43,0,59,0,12,0,44,0,60,0,12,0,90,0,61,0,12,0,102,0,62,0,12,0,103,0,63,0,10,0,15,0,64,0,12,0,200,0,128,0,12,0,201,0,192,0,12,0,91,0,0,1,12,0,51,0,64,1,12,0,52,0,128,1,12,0,53,0,192,1,13,0,108,0,0,2,13,0,109,0,64,2,13,0,74,0,128,2,13,0,75,0,192,2,13,0,76,0,0,3,13,0,77,0,64,3,13,0,114,0,128,3,13,0,115,0,192,3,13,0,116,0,0,4,13,0,117,0,64,4,13,0,118,0,128,4,13,0,119,0,192,4,13,0,82,0,0,5,13,0,83,0,64,5,13,0,84,0,128,5,13,0,85,0,192,5,13,0,90,0,0,6,13,0,91,0,64,6,13,0,100,0,128,6,13,0,101,0,192,6,11,0,8,0,0,7,11,0,12,0,64,7,11,0,13,0,128,7,12,0,18,0,192,7,12,0,19,0,0,8,12,0,20,0,64,8,12,0,21,0,128,8,12,0,22,0,192,8,12,0,23,0,0,9,12,0,28,0,64,9,12,0,29,0,128,9,12,0,30,0,192,9,12,0,31,0,0,10,12,0,1,0,255,255,9,0,1,0,254,255,10,0,1,0,254,255,11,0,1,0,254,255,12,0,0,0,254,255,0,0,0,128,192,224,240,248,252,254,255,0,0,0,0,0,0,0,120,32,61,61,32,108,97,115,116,120,0,0,0,0,0,0,116,105,102,95,102,97,120,51,46,99,0,0,0,0,0,0,95,84,73,70,70,70,97,120,51,102,105,108,108,114,117,110,115,0,0,0,0,0,0,0,36,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,73,0,0,0,216,104,0,0,0,0,0,0,0,0,0,0,84,73,70,70,73,110,105,116,67,67,73,84,84,70,97,120,51,0,0,0,0,0,0,0,77,101,114,103,105,110,103,32,67,67,73,84,84,32,70,97,120,32,51,32,99,111,100,101,99,45,115,112,101,99,105,102,105,99,32,116,97,103,115,32,102,97,105,108,101,100,0,0,37,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,73,0,0,0,200,104,0,0,0,0,0,0,0,0,0,0,84,73,70,70,73,110,105,116,67,67,73,84,84,70,97,120,52,0,0,0,0,0,0,0,77,101,114,103,105,110,103,32,67,67,73,84,84,32,70,97,120,32,52,32,99,111,100,101,99,45,115,112,101,99,105,102,105,99,32,116,97,103,115,32,102,97,105,108,101,100,0,0,70,97,120,51,68,101,99,111,100,101,82,76,69,0,0,0,70,114,97,99,116,105,111,110,97,108,32,115,99,97,110,108,105,110,101,115,32,99,97,110,110,111,116,32,98,101,32,114,101,97,100,0,0,0,0,0,37,115,32,97,116,32,108,105,110,101,32,37,117,32,111,102,32,37,115,32,37,117,32,40,103,111,116,32,37,117,44,32,101,120,112,101,99,116,101,100,32,37,117,41,0,0,0,0,80,114,101,109,97,116,117,114,101,32,69,79,76,0,0,0,76,105,110,101,32,108,101,110,103,116,104,32,109,105,115,109,97,116,99,104,0,0,0,0,116,105,108,101,0,0,0,0,115,116,114,105,112,0,0,0,80,114,101,109,97,116,117,114,101,32,69,79,70,32,97,116,32,108,105,110,101,32,37,117,32,111,102,32,37,115,32,37,117,32,40,120,32,37,117,41,0,0,0,0,0,0,0,0,66,97,100,32,99,111,100,101,32,119,111,114,100,32,97,116,32,108,105,110,101,32,37,117,32,111,102,32,37,115,32,37,117,32,40,120,32,37,117,41,0,0,0,0,0,0,0,0,108,101,110,103,116,104,32,60,32,57,0,0,0,0,0,0,70,97,120,51,80,117,116,66,105,116,115,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,0,0,0,0,70,97,120,52,69,110,99,111,100,101,0,0,0,0,0,0,70,114,97,99,116,105,111,110,97,108,32,115,99,97,110,108,105,110,101,115,32,99,97,110,110,111,116,32,98,101,32,119,114,105,116,116,101,110,0,0,3,0,1,0,0,0,0,0,7,0,3,0,0,0,6,0,3,0,0,0,3,0,3,0,0,0,1,0,1,0,0,0,3,0,2,0,0,0,6,0,2,0,0,0,7,0,2,0,0,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,112,117,116,115,112,97,110,0,116,101,45,62,114,117,110,108,101,110,32,61,61,32,54,52,42,40,115,112,97,110,62,62,54,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,6,6,7,8,8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,97,120,52,68,101,99,111,100,101,0,0,0,0,0,0,85,110,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,32,40,110,111,116,32,115,117,112,112,111,114,116,101,100,41,32,97,116,32,108,105,110,101,32,37,117,32,111,102,32,37,115,32,37,117,32,40,120,32,37,117,41,0,0,0,0,71,114,111,117,112,52,79,112,116,105,111,110,115,0,0,0,71,114,111,117,112,51,79,112,116,105,111,110,115,0,0,0,73,110,105,116,67,67,73,84,84,70,97,120,51,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,216,108,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,224,108,0,0,0,0,0,0,70,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,66,0,1,0,240,108,0,0,0,0,0,0,71,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,67,0,1,0,0,109,0,0,0,0,0,0,72,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,68,0,1,0,16,109,0,0,0,0,0,0,0,0,0,0,73,110,105,116,67,67,73,84,84,70,97,120,51,0,0,0,77,101,114,103,105,110,103,32,99,111,109,109,111,110,32,67,67,73,84,84,32,70,97,120,32,99,111,100,101,99,45,115,112,101,99,105,102,105,99,32,116,97,103,115,32,102,97,105,108,101,100,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,115,116,97,116,101,32,98,108,111,99,107,0,0,0,0,0,0,0,0,115,112,32,33,61,32,48,0,70,97,120,51,67,108,101,97,110,117,112,0,0,0,0,0,70,97,120,51,69,110,99,111,100,101,0,0,0,0,0,0,116,112,97,114,109,32,60,32,57,0,0,0,0,0,0,0,70,97,120,51,80,117,116,69,79,76,0,0,0,0,0,0,115,112,32,33,61,32,78,85,76,76,0,0,0,0,0,0,70,97,120,51,80,114,101,69,110,99,111,100,101,0,0,0,70,97,120,51,68,101,99,111,100,101,49,68,0,0,0,0,70,97,120,51,80,114,101,68,101,99,111,100,101,0,0,0,70,97,120,51,83,101,116,117,112,83,116,97,116,101,0,0,66,105,116,115,47,115,97,109,112,108,101,32,109,117,115,116,32,98,101,32,49,32,102,111,114,32,71,114,111,117,112,32,51,47,52,32,101,110,99,111,100,105,110,103,47,100,101,99,111,100,105,110,103,0,0,0,82,111,119,32,112,105,120,101,108,115,32,105,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,32,40,114,111,119,112,105,120,101,108,115,32,37,117,41,0,0,0,0,0,0,102,111,114,32,71,114,111,117,112,32,51,47,52,32,114,117,110,32,97,114,114,97,121,115,0,0,0,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,71,114,111,117,112,32,51,47,52,32,114,101,102,101,114,101,110,99,101,32,108,105,110,101,0,0,0,70,97,120,51,68,101,99,111,100,101,50,68,0,0,0,0,70,97,120,51,80,114,105,110,116,68,105,114,0,0,0,0,32,0,0,0,0,0,0,0,32,32,71,114,111,117,112,32,52,32,79,112,116,105,111,110,115,58,0,0,0,0,0,0,37,115,117,110,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,0,0,0,0,0,32,32,71,114,111,117,112,32,51,32,79,112,116,105,111,110,115,58,0,0,0,0,0,0,37,115,50,45,100,32,101,110,99,111,100,105,110,103,0,0,43,0,0,0,0,0,0,0,37,115,69,79,76,32,112,97,100,100,105,110,103,0,0,0,32,40,37,108,117,32,61,32,48,120,37,108,120,41,10,0,32,32,70,97,120,32,68,97,116,97,58,0,0,0,0,0,32,99,108,101,97,110,0,0,32,114,101,99,101,105,118,101,114,32,114,101,103,101,110,101,114,97,116,101,100,0,0,0,32,117,110,99,111,114,114,101,99,116,101,100,32,101,114,114,111,114,115,0,0,0,0,0,32,40,37,117,32,61,32,48,120,37,120,41,10,0,0,0,32,32,66,97,100,32,70,97,120,32,76,105,110,101,115,58,32,37,108,117,10,0,0,0,32,32,67,111,110,115,101,99,117,116,105,118,101,32,66,97,100,32,70,97,120,32,76,105,110,101,115,58,32,37,108,117,10,0,0,0,0,0,0,0,70,97,120,51,86,83,101,116,70,105,101,108,100,0,0,0,115,112,45,62,118,115,101,116,112,97,114,101,110,116,32,33,61,32,48,0,0,0,0,0,70,97,120,51,86,71,101,116,70,105,101,108,100,0,0,0,70,97,120,77,111,100,101,0,70,97,120,70,105,108,108,70,117,110,99,0,0,0,0,0,66,97,100,70,97,120,76,105,110,101,115,0,0,0,0,0,67,108,101,97,110,70,97,120,68,97,116,97,0,0,0,0,67,111,110,115,101,99,117,116,105,118,101,66,97,100,70,97,120,76,105,110,101,115,0,0,12,7,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,5,6,0,0,2,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,5,7,0,0,3,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,4,6,0,0,2,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,6,7,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,5,6,0,0,2,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,4,7,0,0,3,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,4,6,0,0,2,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,12,11,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,11,0,0,0,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,11,0,0,64,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,64,8,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,64,9,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,192,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,11,0,0,128,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,192,8,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,192,9,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,12,11,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,11,0,0,0,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,11,0,0,64,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,128,8,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);
/* memory initializer */ allocate([7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,128,9,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,0,8,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,11,0,0,128,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,0,9,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,0,10,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51200);
/* memory initializer */ allocate([7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,12,11,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,0,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,23,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,20,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,25,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,128,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,56,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,30,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,64,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,57,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,21,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,54,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,52,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,48,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,64,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,44,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,36,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,128,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,28,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,60,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,40,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,64,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,192,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,50,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,34,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,128,6,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61440);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,26,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,128,5,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,32,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,128,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,61,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,42,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,0,4,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,0,3,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,62,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,192,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,46,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,38,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,0,2,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,19,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,24,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,22,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,192,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,12,11,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,0,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,23,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,20,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,25,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,192,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,0,5,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,31,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,64,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,58,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,21,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,128,3,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+71680);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,128,2,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,49,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,128,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,45,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,37,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,192,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,29,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,0,6,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,41,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,128,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,0,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,51,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,35,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,64,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,27,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,59,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,33,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,128,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,0,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,43,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,128,4,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,55,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,63,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,0,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,47,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,39,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,53,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81920);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,19,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,24,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,22,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,0,10,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,12,11,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,0,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,23,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,20,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,25,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,128,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,56,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,30,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,64,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,57,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,21,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,54,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,52,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,48,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,64,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,44,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,36,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,128,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,28,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,60,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,40,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,64,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+92160);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,192,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,50,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,34,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,192,6,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,26,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,192,5,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,32,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,128,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,61,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,42,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,64,4,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,64,3,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,62,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,192,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,46,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,38,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,64,2,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,19,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,24,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,22,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,192,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,12,11,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,0,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,23,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,20,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,25,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+102400);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,192,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,64,5,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,31,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,64,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,58,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,21,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,192,3,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,192,2,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,49,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,128,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,45,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,37,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,192,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,29,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,64,6,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,41,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,128,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,0,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,51,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,35,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,64,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,27,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,59,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,33,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,128,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,0,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,43,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,192,4,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+112640);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,55,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,63,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,0,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,47,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,39,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,53,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,19,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,24,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,22,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,0,10,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,95,155,125,62,4,0,0,0,52,161,121,62,6,0,4,0,3,124,119,62,7,0,10,0,62,149,115,62,9,0,17,0,88,145,113,62,10,0,26,0,132,185,109,62,12,0,36,0,27,213,105,62,14,0,48,0,112,176,103,62,15,0,62,0,57,181,99,62,17,0,77,0,41,179,97,62,18,0,94,0,240,220,91,62,21,0,112,0,179,209,89,62,22,0,133,0,63,199,87,62,23,0,155,0,59,229,81,62,26,0,178,0,144,219,79,62,27,0,204,0,226,6,76,62,29,0,231,0,181,55,72,62,31,0,4,1,152,52,70,62,32,0,35,1,97,111,66,62,34,0,67,1,104,175,62,62,36,0,101,1,104,175,62,62,36,0,137,1,102,249,58,62,38,0,173,1,144,76,55,62,40,0,211,1,92,173,51,62,42,0,251,1,8,33,48,62,44,0,37,2,8,33,48,62,44,0,81,2,160,168,44,62,46,0,125,2,160,168,44,62,46,0,171,2,52,128,39,62,49,0,217,2,12,115,34,62,52,0,10,3,12,115,34,62,52,0,62,3,12,115,34,62,52,0,114,3,174,129,29,62,55,0,166,3,174,129,29,62,55,0,221,3,226,172,24,62,58,0,20,4,226,172,24,62,58,0,78,4,2,44,18,62,62,0,136,4,2,44,18,62,62,0,198,4,2,44,18,62,62,0,4,5,167,150,13,62,65,0,66,5,167,150,13,62,65,0,131,5,167,150,13,62,65,0,196,5,134,86,7,62,69,0,5,6,134,86,7,62,69,0,74,6,159,59,1,62,73,0,143,6,159,59,1,62,73,0,216,6,159,59,1,62,73,0,33,7,80,138,246,61,77,0,106,7,80,138,246,61,77,0,183,7,80,138,246,61,77,0,4,8,80,138,246,61,77,0,81,8,159,88,231,61,82,0,158,8,159,88,231,61,82,0,240,8,159,88,231,61,82,0,66,9,191,14,220,61,86,0,148,9,191,14,220,61,86,0,234,9,191,14,220,61,86,0,64,10,191,14,220,61,86,0,150,10,161,128,205,61,91,0,236,10,161,128,205,61,91,0,71,11,161,128,205,61,91,0,162,11,108,209,194,61,95,0,253,11,108,209,194,61,95,0,92,12,108,209,194,61,95,0,187,12,108,209,194,61,95,0,26,13,12,202,180,61,100,0,121,13,12,202,180,61,100,0,221,13,12,202,180,61,100,0,65,14,12,202,180,61,100,0,165,14,136,245,166,61,105,0,9,15,136,245,166,61,105,0,114,15,136,245,166,61,105,0,219,15,136,245,166,61,105,0,68,16,185,80,153,61,110,0,173,16,185,80,153,61,110,0,27,17,185,80,153,61,110,0,137,17,185,80,153,61,110,0,247,17,161,219,139,61,115,0,101,18,161,219,139,61,115,0,216,18,161,219,139,61,115,0,75,19,161,219,139,61,115,0,190,19,144,50,130,61,119,0,49,20,144,50,130,61,119,0,168,20,144,50,130,61,119,0,31,21,144,50,130,61,119,0,150,21,120,94,106,61,124,0,13,22,120,94,106,61,124,0,137,22,120,94,106,61,124,0,5,23,120,94,106,61,124,0,129,23,166,213,80,61,129,0,253,23,166,213,80,61,129,0,126,24,166,213,80,61,129,0,255,24,166,213,80,61,129,0,128,25,166,213,80,61,129,0,1,26,18,190,55,61,134,0,130,26,18,190,55,61,134,0,8,27,18,190,55,61,134,0,142,27,18,190,55,61,134,0,20,28,199,45,38,61,138,0,154,28,199,45,38,61,138,0,36,29,199,45,38,61,138,0,174,29,199,45,38,61,138,0,56,30,52,216,20,61,142,0,194,30,52,216,20,61,142,0,80,31,52,216,20,61,142,0,222,31,52,216,20,61,142,0,108,32,47,164,3,61,146,0,250,32,47,164,3,61,146,0,140,33,47,164,3,61,146,0,30,34,47,164,3,61,146,0,176,34,27,241,228,60,150,0,66,35,27,241,228,60,150,0,216,35,27,241,228,60,150,0,110,36,75,120,194,60,154,0,4,37,75,120,194,60,154,0,158,37,75,120,194,60,154,0,56,38,75,120,194,60,154,0,210,38,218,198,159,60,158,0,108,39,218,198,159,60,158,0,10,40,218,198,159,60,158,0,168,40,65,17,139,60,161,0,70,41,65,17,139,60,161,0,231,41,65,17,139,60,161,0,136,42,65,17,139,60,161,0,41,43,207,19,79,60,165,0,202,43,207,19,79,60,165,0,111,44,207,19,79,60,165,0,20,45,75,177,35,60,168,0,185,45,75,177,35,60,168,0,97,46,75,177,35,60,168,0,9,47,216,183,19,60,170,0,177,47,216,183,19,60,170,0,91,48,216,183,19,60,170,0,5,49,250,183,203,59,173,0,175,49,250,183,203,59,173,0,92,50,188,4,167,59,175,0,9,51,188,4,167,59,175,0,184,51,188,4,167,59,175,0,103,52,18,23,128,59,177,0,22,53,18,23,128,59,177,0,199,53,175,90,25,59,177,0,120,54,197,144,28,59,170,0,41,55,34,252,139,58,164,0,211,55,122,169,216,58,157,0,119,56,14,245,59,58,150,0,20,57,218,140,211,58,143,0,170,57,201,142,141,57,136,0,57,58,97,193,253,57,129,0,193,58,138,146,144,58,123,0,66,59,155,202,162,58,115,0,189,59,170,182,155,58,109,0,48,60,136,131,132,58,103,0,157,60,47,220,57,58,97,0,4,61,137,207,157,57,89,0,101,61,193,85,30,59,82,0,190,61,187,14,85,59,76,0,16,62,216,186,84,59,69,0,92,62,58,177,135,59,62,0,161,62,69,101,195,59,55,0,223,62,116,209,16,60,47,0,22,63,64,222,43,60,40,0,69,63,0,55,139,60,31,0,109,63,133,208,193,60,21,0,140,63,84,73,70,70,73,110,105,116,83,71,73,76,111,103,0,0,115,99,104,101,109,101,32,61,61,32,67,79,77,80,82,69,83,83,73,79,78,95,83,71,73,76,79,71,50,52,32,124,124,32,115,99,104,101,109,101,32,61,61,32,67,79,77,80,82,69,83,83,73,79,78,95,83,71,73,76,79,71,0,0,116,105,102,95,108,117,118,46,99,0,0,0,0,0,0,0,84,73,70,70,73,110,105,116,83,71,73,76,111,103,0,0,24,0,1,0,0,0,0,0,3,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,1,0,136,251,1,0,0,0,0,0,25,0,1,0,0,0,0,0,3,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,1,0,152,251,1,0,0,0,0,0,77,101,114,103,105,110,103,32,83,71,73,76,111,103,32,99,111,100,101,99,45,115,112,101,99,105,102,105,99,32,116,97,103,115,32,102,97,105,108,101,100,0,0,0,0,0,0,0,37,115,58,32,78,111,32,115,112,97,99,101,32,102,111,114,32,76,111,103,76,117,118,32,115,116,97,116,101,32,98,108,111,99,107,0,0,0,0,0,76,111,103,76,117,118,86,83,101,116,70,105,101,108,100,0,85,110,107,110,111,119,110,32,100,97,116,97,32,102,111,114,109,97,116,32,37,100,32,102,111,114,32,76,111,103,76,117,118,32,99,111,109,112,114,101,115,115,105,111,110,0,0,0,85,110,107,110,111,119,110,32,101,110,99,111,100,105,110,103,32,37,100,32,102,111,114,32,76,111,103,76,117,118,32,99,111,109,112,114,101,115,115,105,111,110,0,0,0,0,0,0,115,112,32,33,61,32,48,0,76,111,103,76,117,118,67,108,101,97,110,117,112,0,0,0,99,99,37,114,111,119,108,101,110,32,61,61,32,48,0,0,76,111,103,76,117,118,69,110,99,111,100,101,84,105,108,101,0,0,0,0,0,0,0,0,76,111,103,76,117,118,69,110,99,111,100,101,83,116,114,105,112,0,0,0,0,0,0,0,76,111,103,76,117,118,83,101,116,117,112,69,110,99,111,100,101,0,0,0,0,0,0,0,73,110,97,112,112,114,111,112,114,105,97,116,101,32,112,104,111,116,111,109,101,116,114,105,99,32,105,110,116,101,114,112,114,101,116,97,116,105,111,110,32,37,100,32,102,111,114,32,83,71,73,76,111,103,32,99,111,109,112,114,101,115,115,105,111,110,59,32,37,115,0,0,109,117,115,116,32,98,101,32,101,105,116,104,101,114,32,76,111,103,76,85,86,32,111,114,32,76,111,103,76,0,0,0,83,71,73,76,111,103,32,99,111,109,112,114,101,115,115,105,111,110,32,115,117,112,112,111,114,116,101,100,32,111,110,108,121,32,102,111,114,32,37,115,44,32,111,114,32,114,97,119,32,100,97,116,97,0,0,0,89,44,32,76,0,0,0,0,88,89,90,44,32,76,117,118,0,0,0,0,0,0,0,0,115,32,61,61,32,48,0,0,76,111,103,76,49,54,69,110,99,111,100,101,0,0,0,0,115,112,32,33,61,32,78,85,76,76,0,0,0,0,0,0,115,112,45,62,116,98,117,102,108,101,110,32,62,61,32,110,112,105,120,101,108,115,0,0,76,111,103,76,49,54,73,110,105,116,83,116,97,116,101,0,76,111,103,76,49,54,73,110,105,116,83,116,97,116,101,0,116,100,45,62,116,100,95,112,104,111,116,111,109,101,116,114,105,99,32,61,61,32,80,72,79,84,79,77,69,84,82,73,67,95,76,79,71,76,0,0,78,111,32,115,117,112,112,111,114,116,32,102,111,114,32,99,111,110,118,101,114,116,105,110,103,32,117,115,101,114,32,100,97,116,97,32,102,111,114,109,97,116,32,116,111,32,76,111,103,76,0,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,83,71,73,76,111,103,32,116,114,97,110,115,108,97,116,105,111,110,32,98,117,102,102,101,114,0,0,76,111,103,76,117,118,69,110,99,111,100,101,51,50,0,0,76,111,103,76,117,118,69,110,99,111,100,101,50,52,0,0,76,111,103,76,117,118,73,110,105,116,83,116,97,116,101,0,76,111,103,76,117,118,73,110,105,116,83,116,97,116,101,0,116,100,45,62,116,100,95,112,104,111,116,111,109,101,116,114,105,99,32,61,61,32,80,72,79,84,79,77,69,84,82,73,67,95,76,79,71,76,85,86,0,0,0,0,0,0,0,0,83,71,73,76,111,103,32,99,111,109,112,114,101,115,115,105,111,110,32,99,97,110,110,111,116,32,104,97,110,100,108,101,32,110,111,110,45,99,111,110,116,105,103,117,111,117,115,32,100,97,116,97,0,0,0,0,78,111,32,115,117,112,112,111,114,116,32,102,111,114,32,99,111,110,118,101,114,116,105,110,103,32,117,115,101,114,32,100,97,116,97,32,102,111,114,109,97,116,32,116,111,32,76,111,103,76,117,118,0,0,0,0,76,111,103,76,117,118,68,101,99,111,100,101,84,105,108,101,0,0,0,0,0,0,0,0,76,111,103,76,117,118,68,101,99,111,100,101,83,116,114,105,112,0,0,0,0,0,0,0,76,111,103,76,117,118,83,101,116,117,112,68,101,99,111,100,101,0,0,0,0,0,0,0,76,111,103,76,49,54,68,101,99,111,100,101,0,0,0,0,76,111,103,76,49,54,68,101,99,111,100,101,0,0,0,0,78,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,97,116,32,114,111,119,32,37,108,117,32,40,115,104,111,114,116,32,37,108,108,117,32,112,105,120,101,108,115,41,0,0,76,111,103,76,117,118,68,101,99,111,100,101,51,50,0,0,76,111,103,76,117,118,68,101,99,111,100,101,51,50,0,0,76,111,103,76,117,118,68,101,99,111,100,101,50,52,0,0,76,111,103,76,117,118,68,101,99,111,100,101,50,52,0,0,83,71,73,76,111,103,68,97,116,97,70,109,116,0,0,0,83,71,73,76,111,103,69,110,99,111,100,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,73,70,70,73,110,105,116,76,90,87,0,0,0,0,0,115,99,104,101,109,101,32,61,61,32,67,79,77,80,82,69,83,83,73,79,78,95,76,90,87,0,0,0,0,0,0,0,116,105,102,95,108,122,119,46,99,0,0,0,0,0,0,0,84,73,70,70,73,110,105,116,76,90,87,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,76,90,87,32,115,116,97,116,101,32,98,108,111,99,107,0,0,0,0,116,105,102,45,62,116,105,102,95,100,97,116,97,32,33,61,32,48,0,0,0,0,0,0,76,90,87,67,108,101,97,110,117,112,0,0,0,0,0,0,115,112,45,62,101,110,99,95,104,97,115,104,116,97,98,32,33,61,32,78,85,76,76,0,76,90,87,69,110,99,111,100,101,0,0,0,0,0,0,0,110,98,105,116,115,32,60,61,32,66,73,84,83,95,77,65,88,0,0,0,0,0,0,0,115,112,32,33,61,32,78,85,76,76,0,0,0,0,0,0,76,90,87,80,114,101,69,110,99,111,100,101,0,0,0,0,76,90,87,83,101,116,117,112,69,110,99,111,100,101,0,0,76,90,87,83,101,116,117,112,69,110,99,111,100,101,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,76,90,87,32,104,97,115,104,32,116,97,98,108,101,0,0,0,0,0,76,90,87,68,101,99,111,100,101,0,0,0,0,0,0,0,76,90,87,68,101,99,111,100,101,0,0,0,0,0,0,0,115,112,45,62,100,101,99,95,99,111,100,101,116,97,98,32,33,61,32,78,85,76,76,0,76,90,87,68,101,99,111,100,101,58,32,83,116,114,105,112,32,37,100,32,110,111,116,32,116,101,114,109,105,110,97,116,101,100,32,119,105,116,104,32,69,79,73,32,99,111,100,101,0,0,0,0,0,0,0,0,76,90,87,68,101,99,111,100,101,58,32,67,111,114,114,117,112,116,101,100,32,76,90,87,32,116,97,98,108,101,32,97,116,32,115,99,97,110,108,105,110,101,32,37,100,0,0,0,67,111,114,114,117,112,116,101,100,32,76,90,87,32,116,97,98,108,101,32,97,116,32,115,99,97,110,108,105,110,101,32,37,100,0,0,0,0,0,0,87,114,111,110,103,32,108,101,110,103,116,104,32,111,102,32,100,101,99,111,100,101,100,32,115,116,114,105,110,103,58,32,100,97,116,97,32,112,114,111,98,97,98,108,121,32,99,111,114,114,117,112,116,101,100,32,97,116,32,115,99,97,110,108,105,110,101,32,37,100,0,0,111,99,99,32,62,61,32,108,101,110,0,0,0,0,0,0,78,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,97,116,32,115,99,97,110,108,105,110,101,32,37,100,32,40,115,104,111,114,116,32,37,108,108,117,32,98,121,116,101,115,41,0,0,0,0,0,0,0,66,111,103,117,115,32,101,110,99,111,100,105,110,103,44,32,108,111,111,112,32,105,110,32,116,104,101,32,99,111,100,101,32,116,97,98,108,101,59,32,115,99,97,110,108,105,110,101,32,37,100,0,0,0,0,0,76,90,87,80,114,101,68,101,99,111,100,101,0,0,0,0,76,90,87,80,114,101,68,101,99,111,100,101,0,0,0,0,79,108,100,45,115,116,121,108,101,32,76,90,87,32,99,111,100,101,115,44,32,99,111,110,118,101,114,116,32,102,105,108,101,0,0,0,0,0,0,0,76,90,87,68,101,99,111,100,101,67,111,109,112,97,116,0,76,90,87,68,101,99,111,100,101,67,111,109,112,97,116,0,111,99,99,32,62,61,32,99,111,100,101,112,45,62,108,101,110,103,116,104,0,0,0,0,76,90,87,83,101,116,117,112,68,101,99,111,100,101,0,0,76,90,87,83,101,116,117,112,68,101,99,111,100,101,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,76,90,87,32,99,111,100,101,32,116,97,98,108,101,0,0,0,0,0,78,101,88,84,68,101,99,111,100,101,0,0,0,0,0,0,70,114,97,99,116,105,111,110,97,108,32,115,99,97,110,108,105,110,101,115,32,99,97,110,110,111,116,32,98,101,32,114,101,97,100,0,0,0,0,0,78,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,102,111,114,32,115,99,97,110,108,105,110,101,32,37,108,100,0,0,0,0,0,0,0,0,80,97,99,107,66,105,116,115,68,101,99,111,100,101,0,0,68,105,115,99,97,114,100,105,110,103,32,37,108,117,32,98,121,116,101,115,32,116,111,32,97,118,111,105,100,32,98,117,102,102,101,114,32,111,118,101,114,114,117,110,0,0,0,0,84,101,114,109,105,110,97,116,105,110,103,32,80,97,99,107,66,105,116,115,68,101,99,111,100,101,32,100,117,101,32,116,111,32,108,97,99,107,32,111,102,32,100,97,116,97,46,0,78,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,102,111,114,32,115,99,97,110,108,105,110,101,32,37,108,117,0,0,0,0,0,0,0,0,115,112,32,33,61,32,48,0,116,105,102,95,112,114,101,100,105,99,116,46,99,0,0,0,84,73,70,70,80,114,101,100,105,99,116,111,114,73,110,105,116,0,0,0,0,0,0,0,61,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,66,0,0,0,80,6,2,0,0,0,0,0,0,0,0,0,77,101,114,103,105,110,103,32,80,114,101,100,105,99,116,111,114,32,99,111,100,101,99,45,115,112,101,99,105,102,105,99,32,116,97,103,115,32,102,97,105,108,101,100,0,0,0,0,84,73,70,70,80,114,101,100,105,99,116,111,114,67,108,101,97,110,117,112,0,0,0,0,40,99,99,37,40,98,112,115,42,115,116,114,105,100,101,41,41,61,61,48,0,0,0,0,102,112,68,105,102,102,0,0,80,114,101,100,105,99,116,111,114,69,110,99,111,100,101,84,105,108,101,0,0,0,0,0,115,112,32,33,61,32,78,85,76,76,0,0,0,0,0,0,80,114,101,100,105,99,116,111,114,69,110,99,111,100,101,84,105,108,101,0,0,0,0,0,115,112,45,62,101,110,99,111,100,101,112,102,117,110,99,32,33,61,32,78,85,76,76,0,115,112,45,62,101,110,99,111,100,101,116,105,108,101,32,33,61,32,78,85,76,76,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,110,103,32,37,108,100,32,98,121,116,101,32,116,101,109,112,32,98,117,102,102,101,114,46,0,0,114,111,119,115,105,122,101,32,62,32,48,0,0,0,0,0,40,99,99,48,37,114,111,119,115,105,122,101,41,61,61,48,0,0,0,0,0,0,0,0,80,114,101,100,105,99,116,111,114,69,110,99,111,100,101,82,111,119,0,0,0,0,0,0,115,112,45,62,101,110,99,111,100,101,114,111,119,32,33,61,32,78,85,76,76,0,0,0,40,99,99,37,40,52,42,115,116,114,105,100,101,41,41,61,61,48,0,0,0,0,0,0,104,111,114,68,105,102,102,51,50,0,0,0,0,0,0,0,40,99,99,37,40,50,42,115,116,114,105,100,101,41,41,61,61,48,0,0,0,0,0,0,104,111,114,68,105,102,102,49,54,0,0,0,0,0,0,0,40,99,99,37,115,116,114,105,100,101,41,61,61,48,0,0,104,111,114,68,105,102,102,56,0,0,0,0,0,0,0,0,80,114,101,100,105,99,116,111,114,83,101,116,117,112,0,0,72,111,114,105,122,111,110,116,97,108,32,100,105,102,102,101,114,101,110,99,105,110,103,32,34,80,114,101,100,105,99,116,111,114,34,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,119,105,116,104,32,37,100,45,98,105,116,32,115,97,109,112,108,101,115,0,0,0,70,108,111,97,116,105,110,103,32,112,111,105,110,116,32,34,80,114,101,100,105,99,116,111,114,34,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,119,105,116,104,32,37,100,32,100,97,116,97,32,102,111,114,109,97,116,0,0,0,0,34,80,114,101,100,105,99,116,111,114,34,32,118,97,108,117,101,32,37,100,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,102,112,65,99,99,0,0,0,115,119,97,98,72,111,114,65,99,99,51,50,0,0,0,0,115,119,97,98,72,111,114,65,99,99,49,54,0,0,0,0,80,114,101,100,105,99,116,111,114,68,101,99,111,100,101,84,105,108,101,0,0,0,0,0,115,112,45,62,100,101,99,111,100,101,116,105,108,101,32,33,61,32,78,85,76,76,0,0,40,111,99,99,48,37,114,111,119,115,105,122,101,41,61,61,48,0,0,0,0,0,0,0,115,112,45,62,100,101,99,111,100,101,112,102,117,110,99,32,33,61,32,78,85,76,76,0,80,114,101,100,105,99,116,111,114,68,101,99,111,100,101,82,111,119,0,0,0,0,0,0,115,112,45,62,100,101,99,111,100,101,114,111,119,32,33,61,32,78,85,76,76,0,0,0,104,111,114,65,99,99,51,50,0,0,0,0,0,0,0,0,104,111,114,65,99,99,49,54,0,0,0,0,0,0,0,0,104,111,114,65,99,99,56,0,32,32,80,114,101,100,105,99,116,111,114,58,32,0,0,0,110,111,110,101,32,0,0,0,104,111,114,105,122,111,110,116,97,108,32,100,105,102,102,101,114,101,110,99,105,110,103,32,0,0,0,0,0,0,0,0,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,112,114,101,100,105,99,116,111,114,32,0,0,0,0,0,0,0,37,117,32,40,48,120,37,120,41,10,0,0,0,0,0,0,80,114,101,100,105,99,116,111,114,86,83,101,116,70,105,101,108,100,0,0,0,0,0,0,115,112,45,62,118,115,101,116,112,97,114,101,110,116,32,33,61,32,78,85,76,76,0,0,80,114,101,100,105,99,116,111,114,86,71,101,116,70,105,101,108,100,0,0,0,0,0,0,115,112,45,62,118,103,101,116,112,97,114,101,110,116,32,33,61,32,78,85,76,76,0,0,80,114,101,100,105,99,116,111,114,0,0,0,0,0,0,0,84,104,117,110,100,101,114,68,101,99,111,100,101,82,111,119,0,0,0,0,0,0,0,0,70,114,97,99,116,105,111,110,97,108,32,115,99,97,110,108,105,110,101,115,32,99,97,110,110,111,116,32,98,101,32,114,101,97,100,0,0,0,0,0,84,104,117,110,100,101,114,68,101,99,111,100,101,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,253,255,255,255,254,255,255,255,255,255,255,255,37,115,32,100,97,116,97,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,32,40,37,108,108,117,32,33,61,32,37,108,108,117,41,0,0,78,111,116,32,101,110,111,117,103,104,0,0,0,0,0,0,84,111,111,32,109,117,99,104,0,0,0,0,0,0,0,0,84,104,117,110,100,101,114,83,101,116,117,112,68,101,99,111,100,101,0,0,0,0,0,0,87,114,111,110,103,32,98,105,116,115,112,101,114,115,97,109,112,108,101,32,118,97,108,117,101,32,40,37,100,41,44,32,84,104,117,110,100,101,114,32,100,101,99,111,100,101,114,32,111,110,108,121,32,115,117,112,112,111,114,116,115,32,52,98,105,116,115,32,112,101,114,32,115,97,109,112,108,101,46], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+122880);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+133504);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  var _SItoD=true;

  var _SItoF=true;

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _writeBmp(buf, size) {
          bmpOutput.push(Module.HEAPU8.buffer.slice(buf, buf + size));
      }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  var _floor=Math_floor;

  function _mmap(start, num, prot, flags, fd, offset) {
      /* FIXME: Since mmap is normally implemented at the kernel level,
       * this implementation simply uses malloc underneath the call to
       * mmap.
       */
      var MAP_PRIVATE = 2;
      var ptr;
      var allocated = false;
  
      if (!_mmap.mappings) _mmap.mappings = {};
  
      if (fd == -1) {
        ptr = _malloc(num);
        if (!ptr) return -1;
        _memset(ptr, 0, num);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -1;
        try {
          var res = FS.mmap(info, HEAPU8, start, num, offset, prot, flags);
          ptr = res.ptr;
          allocated = res.allocated;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }
  
      _mmap.mappings[ptr] = { malloc: ptr, num: num, allocated: allocated };
      return ptr;
    }

  var _sqrt=Math_sqrt;


  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _UItoD=true;

  function _munmap(start, num) {
      if (!_mmap.mappings) _mmap.mappings = {};
      // TODO: support unmmap'ing parts of allocations
      var info = _mmap.mappings[start];
      if (!info) return 0;
      if (num == info.num) {
        _mmap.mappings[start] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }

  
  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        if (e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
          // an error occurred while trying to look up the path; we should just report ENOTDIR
          e.setErrno(ERRNO_CODES.ENOTDIR);
        }
        FS.handleFSError(e);
        return -1;
      }
    }function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      return _stat(stream.path, buf);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  var _BDtoIHigh=true;

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  var _atan2=Math_atan2;

   
  Module["_strcpy"] = _strcpy;

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _UItoF=true;

FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  try {
    Module["dynCall_viiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_viiiiiiiiiiii": nullFunc_viiiiiiiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_viiiiiiiiiiii": invoke_viiiiiiiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_vfprintf": _vfprintf, "_lseek": _lseek, "__reallyNegative": __reallyNegative, "_fstat": _fstat, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___assert_fail": ___assert_fail, "_floor": _floor, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_open": _open, "_sbrk": _sbrk, "_strerror": _strerror, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sysconf": _sysconf, "_close": _close, "__formatString": __formatString, "_pread": _pread, "_printf": _printf, "_log": _log, "_write": _write, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_stat": _stat, "_recv": _recv, "_mkport": _mkport, "_read": _read, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_atan2": _atan2, "_writeBmp": _writeBmp, "_munmap": _munmap, "_mmap": _mmap, "_sqrt": _sqrt, "___setErrNo": ___setErrNo, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_viiiiiiiiiiii=env.nullFunc_viiiiiiiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_viiiiiiiiiiii=env.invoke_viiiiiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _exp=env._exp;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _vfprintf=env._vfprintf;
  var _lseek=env._lseek;
  var __reallyNegative=env.__reallyNegative;
  var _fstat=env._fstat;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___assert_fail=env.___assert_fail;
  var _floor=env._floor;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var _strerror=env._strerror;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var __formatString=env.__formatString;
  var _pread=env._pread;
  var _printf=env._printf;
  var _log=env._log;
  var _write=env._write;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _stat=env._stat;
  var _recv=env._recv;
  var _mkport=env._mkport;
  var _read=env._read;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _atan2=env._atan2;
  var _writeBmp=env._writeBmp;
  var _munmap=env._munmap;
  var _mmap=env._mmap;
  var _sqrt=env._sqrt;
  var ___setErrNo=env.___setErrNo;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _write_bmp($buf,$width,$height) {
 $buf = $buf|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bufsize = 0, $fileheader = 0, $i = 0, $infoheader = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fileheader = sp + 20|0;
 $infoheader = sp + 40|0;
 $0 = $buf;
 $1 = $width;
 $2 = $height;
 HEAP8[$fileheader>>0]=19778&255;HEAP8[$fileheader+1>>0]=19778>>8;
 $3 = $1;
 $4 = $2;
 $5 = Math_imul($3, $4)|0;
 $6 = $5<<2;
 $7 = (54 + ($6))|0;
 $8 = (($fileheader) + 2|0);
 HEAP8[$8>>0]=$7&255;HEAP8[$8+1>>0]=($7>>8)&255;HEAP8[$8+2>>0]=($7>>16)&255;HEAP8[$8+3>>0]=$7>>24;
 $9 = (($fileheader) + 6|0);
 HEAP8[$9>>0]=0&255;HEAP8[$9+1>>0]=0>>8;
 $10 = (($fileheader) + 8|0);
 HEAP8[$10>>0]=0&255;HEAP8[$10+1>>0]=0>>8;
 $11 = (($fileheader) + 10|0);
 HEAP8[$11>>0]=54&255;HEAP8[$11+1>>0]=(54>>8)&255;HEAP8[$11+2>>0]=(54>>16)&255;HEAP8[$11+3>>0]=54>>24;
 (_writeBmp(($fileheader|0),14)|0);
 HEAP8[$infoheader>>0]=40&255;HEAP8[$infoheader+1>>0]=(40>>8)&255;HEAP8[$infoheader+2>>0]=(40>>16)&255;HEAP8[$infoheader+3>>0]=40>>24;
 $12 = $1;
 $13 = (($infoheader) + 4|0);
 HEAP8[$13>>0]=$12&255;HEAP8[$13+1>>0]=($12>>8)&255;HEAP8[$13+2>>0]=($12>>16)&255;HEAP8[$13+3>>0]=$12>>24;
 $14 = $2;
 $15 = (($infoheader) + 8|0);
 HEAP8[$15>>0]=$14&255;HEAP8[$15+1>>0]=($14>>8)&255;HEAP8[$15+2>>0]=($14>>16)&255;HEAP8[$15+3>>0]=$14>>24;
 $16 = (($infoheader) + 12|0);
 HEAP8[$16>>0]=1&255;HEAP8[$16+1>>0]=1>>8;
 $17 = (($infoheader) + 14|0);
 HEAP8[$17>>0]=32&255;HEAP8[$17+1>>0]=32>>8;
 $18 = (($infoheader) + 16|0);
 HEAP8[$18>>0]=0&255;HEAP8[$18+1>>0]=(0>>8)&255;HEAP8[$18+2>>0]=(0>>16)&255;HEAP8[$18+3>>0]=0>>24;
 $19 = (($infoheader) + 20|0);
 HEAP8[$19>>0]=0&255;HEAP8[$19+1>>0]=(0>>8)&255;HEAP8[$19+2>>0]=(0>>16)&255;HEAP8[$19+3>>0]=0>>24;
 $20 = (($infoheader) + 24|0);
 HEAP8[$20>>0]=0&255;HEAP8[$20+1>>0]=(0>>8)&255;HEAP8[$20+2>>0]=(0>>16)&255;HEAP8[$20+3>>0]=0>>24;
 $21 = (($infoheader) + 28|0);
 HEAP8[$21>>0]=0&255;HEAP8[$21+1>>0]=(0>>8)&255;HEAP8[$21+2>>0]=(0>>16)&255;HEAP8[$21+3>>0]=0>>24;
 $22 = (($infoheader) + 32|0);
 HEAP8[$22>>0]=0&255;HEAP8[$22+1>>0]=(0>>8)&255;HEAP8[$22+2>>0]=(0>>16)&255;HEAP8[$22+3>>0]=0>>24;
 $23 = (($infoheader) + 36|0);
 HEAP8[$23>>0]=0&255;HEAP8[$23+1>>0]=(0>>8)&255;HEAP8[$23+2>>0]=(0>>16)&255;HEAP8[$23+3>>0]=0>>24;
 (_writeBmp(($infoheader|0),40)|0);
 $24 = $1;
 $25 = $2;
 $26 = Math_imul($24, $25)|0;
 $27 = $26<<2;
 $bufsize = $27;
 $i = 0;
 while(1) {
  $28 = $i;
  $29 = $bufsize;
  $30 = ($28|0)<($29|0);
  if (!($30)) {
   break;
  }
  $31 = $i;
  $32 = (($31) + 2)|0;
  $33 = $0;
  $34 = (($33) + ($32)|0);
  $35 = HEAP8[$34>>0]|0;
  $tmp = $35;
  $36 = $i;
  $37 = $0;
  $38 = (($37) + ($36)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $i;
  $41 = (($40) + 2)|0;
  $42 = $0;
  $43 = (($42) + ($41)|0);
  HEAP8[$43>>0] = $39;
  $44 = $tmp;
  $45 = $i;
  $46 = $0;
  $47 = (($46) + ($45)|0);
  HEAP8[$47>>0] = $44;
  $48 = $i;
  $49 = (($48) + 4)|0;
  $i = $49;
 }
 $50 = $0;
 $51 = $bufsize;
 (_writeBmp(($50|0),($51|0))|0);
 STACKTOP = sp;return;
}
function _tiff_to_bmp($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $height = 0, $image = 0, $row_pointers = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer8 = sp + 40|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 16|0;
 $width = sp + 60|0;
 $height = sp + 56|0;
 $1 = $filename;
 $2 = $1;
 $3 = (_TIFFOpen($2,8)|0);
 $image = $3;
 $4 = $image;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $6 = HEAP32[_stderr>>2]|0;
  (_fprintf(($6|0),(16|0),($vararg_buffer|0))|0);
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $7 = $image;
 HEAP32[$vararg_buffer1>>2] = $width;
 $8 = (_TIFFGetField($7,256,$vararg_buffer1)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $10 = HEAP32[_stderr>>2]|0;
  (_fprintf(($10|0),(40|0),($vararg_buffer3|0))|0);
  $11 = $image;
  _TIFFClose($11);
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $12 = $image;
 HEAP32[$vararg_buffer5>>2] = $height;
 $13 = (_TIFFGetField($12,257,$vararg_buffer5)|0);
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $15 = HEAP32[_stderr>>2]|0;
  (_fprintf(($15|0),(64|0),($vararg_buffer8|0))|0);
  $16 = $image;
  _TIFFClose($16);
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $17 = HEAP32[$width>>2]|0;
 $18 = HEAP32[$height>>2]|0;
 $19 = Math_imul($17, $18)|0;
 $20 = $19<<2;
 $21 = (_malloc($20)|0);
 $row_pointers = $21;
 $22 = $image;
 $23 = HEAP32[$width>>2]|0;
 $24 = HEAP32[$height>>2]|0;
 $25 = $row_pointers;
 $26 = (_TIFFReadRGBAImageOriented($22,$23,$24,$25,4,1)|0);
 $27 = ($26|0)!=(0);
 if ($27) {
  (_printf((128|0),($vararg_buffer12|0))|0);
  $31 = $row_pointers;
  $32 = HEAP32[$width>>2]|0;
  $33 = HEAP32[$height>>2]|0;
  _write_bmp($31,$32,$33);
  $34 = $row_pointers;
  _free($34);
  $35 = $image;
  _TIFFClose($35);
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 } else {
  $28 = HEAP32[_stderr>>2]|0;
  (_fprintf(($28|0),(88|0),($vararg_buffer10|0))|0);
  $29 = $row_pointers;
  _free($29);
  $30 = $image;
  _TIFFClose($30);
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _TIFFCleanup($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fld = 0, $i = 0, $i1 = 0, $link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  (_TIFFFlush($5)|0);
 }
 $6 = $0;
 $7 = (($6) + 564|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 FUNCTION_TABLE_vi[$8 & 255]($9);
 $10 = $0;
 _TIFFFreeDirectory($10);
 $11 = $0;
 $12 = (($11) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  __TIFFfree($17);
 }
 while(1) {
  $18 = $0;
  $19 = (($18) + 680|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0|0);
  if (!($21)) {
   break;
  }
  $22 = $0;
  $23 = (($22) + 680|0);
  $24 = HEAP32[$23>>2]|0;
  $link = $24;
  $25 = $link;
  $26 = HEAP32[$25>>2]|0;
  $27 = $0;
  $28 = (($27) + 680|0);
  HEAP32[$28>>2] = $26;
  $29 = $link;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  __TIFFfree($31);
  $32 = $link;
  __TIFFfree($32);
 }
 $33 = $0;
 $34 = (($33) + 588|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $39 & 512;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = $0;
   $43 = (($42) + 588|0);
   $44 = HEAP32[$43>>2]|0;
   __TIFFfree($44);
  }
 }
 $45 = $0;
 $46 = (($45) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 & 2048;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $0;
  $51 = (($50) + 624|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $0;
  $54 = (($53) + 628|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $0;
  $57 = (($56) + 612|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $0;
  $60 = (($59) + 616|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)<(0);
  $63 = $62 << 31 >> 31;
  FUNCTION_TABLE_viiii[$52 & 127]($55,$58,$61,$63);
 }
 $64 = $0;
 $65 = (($64) + 656|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0|0);
 if ($67) {
  $68 = $0;
  $69 = (($68) + 660|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70>>>0)>(0);
  if ($71) {
   $i = 0;
   while(1) {
    $72 = $i;
    $73 = $0;
    $74 = (($73) + 660|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($72>>>0)<($75>>>0);
    if (!($76)) {
     break;
    }
    $77 = $i;
    $78 = $0;
    $79 = (($78) + 656|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + ($77<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $fld = $82;
    $83 = $fld;
    $84 = (($83) + 24|0);
    $85 = HEAP16[$84>>1]|0;
    $86 = $85&65535;
    $87 = ($86|0)==(65);
    if ($87) {
     $88 = $fld;
     $89 = (($88) + 28|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (_strncmp(144,$90,4)|0);
     $92 = ($91|0)==(0);
     if ($92) {
      $93 = $fld;
      $94 = (($93) + 28|0);
      $95 = HEAP32[$94>>2]|0;
      __TIFFfree($95);
      $96 = $fld;
      __TIFFfree($96);
     }
    }
    $97 = $i;
    $98 = (($97) + 1)|0;
    $i = $98;
   }
   $99 = $0;
   $100 = (($99) + 656|0);
   $101 = HEAP32[$100>>2]|0;
   __TIFFfree($101);
  }
 }
 $102 = $0;
 $103 = (($102) + 688|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104>>>0)>(0);
 if (!($105)) {
  $131 = $0;
  __TIFFfree($131);
  STACKTOP = sp;return;
 }
 $i1 = 0;
 while(1) {
  $106 = $i1;
  $107 = $0;
  $108 = (($107) + 688|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($106>>>0)<($109>>>0);
  if (!($110)) {
   break;
  }
  $111 = $i1;
  $112 = $0;
  $113 = (($112) + 684|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + ($111<<4)|0);
  $116 = (($115) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($117|0)!=(0);
  if ($118) {
   $119 = $i1;
   $120 = $0;
   $121 = (($120) + 684|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($122) + ($119<<4)|0);
   $124 = (($123) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   __TIFFfree($125);
  }
  $126 = $i1;
  $127 = (($126) + 1)|0;
  $i1 = $127;
 }
 $128 = $0;
 $129 = (($128) + 684|0);
 $130 = HEAP32[$129>>2]|0;
 __TIFFfree($130);
 $131 = $0;
 __TIFFfree($131);
 STACKTOP = sp;return;
}
function _TIFFClose($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $closeproc = 0, $fd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 644|0);
 $3 = HEAP32[$2>>2]|0;
 $closeproc = $3;
 $4 = $0;
 $5 = (($4) + 628|0);
 $6 = HEAP32[$5>>2]|0;
 $fd = $6;
 $7 = $0;
 _TIFFCleanup($7);
 $8 = $closeproc;
 $9 = $fd;
 (FUNCTION_TABLE_ii[$8 & 255]($9)|0);
 STACKTOP = sp;return;
}
function __TIFFsetNString($cpp,$cp,$n) {
 $cpp = $cpp|0;
 $cp = $cp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpp;
 $1 = $cp;
 $2 = $n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _setByteArray($3,$4,$5,1);
 STACKTOP = sp;return;
}
function __TIFFsetShortArray($wpp,$wp,$n) {
 $wpp = $wpp|0;
 $wp = $wp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wpp;
 $1 = $wp;
 $2 = $n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _setByteArray($3,$4,$5,2);
 STACKTOP = sp;return;
}
function __TIFFsetLong8Array($lpp,$lp,$n) {
 $lpp = $lpp|0;
 $lp = $lp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lpp;
 $1 = $lp;
 $2 = $n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _setByteArray($3,$4,$5,8);
 STACKTOP = sp;return;
}
function __TIFFsetFloatArray($fpp,$fp,$n) {
 $fpp = $fpp|0;
 $fp = $fp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fpp;
 $1 = $fp;
 $2 = $n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _setByteArray($3,$4,$5,4);
 STACKTOP = sp;return;
}
function __TIFFsetDoubleArray($dpp,$dp,$n) {
 $dpp = $dpp|0;
 $dp = $dp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dpp;
 $1 = $dp;
 $2 = $n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _setByteArray($3,$4,$5,8);
 STACKTOP = sp;return;
}
function _TIFFSetField($tif,$tag,$varargs) {
 $tif = $tif|0;
 $tag = $tag|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ap = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp + 8|0;
 $0 = $tif;
 $1 = $tag;
 HEAP32[$ap>>2] = $varargs;
 $2 = $0;
 $3 = $1;
 $4 = (_TIFFVSetField($2,$3,$ap)|0);
 $status = $4;
 $5 = $status;
 STACKTOP = sp;return ($5|0);
}
function _TIFFVSetField($tif,$tag,$ap) {
 $tif = $tif|0;
 $tag = $tag|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $tag;
 $2 = $ap;
 $3 = $0;
 $4 = $1;
 $5 = (_OkToChangeTag($3,$4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 668|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  $11 = $1;
  $12 = $2;
  $13 = (FUNCTION_TABLE_iiii[$9 & 255]($10,$11,$12)|0);
  $14 = $13;
  STACKTOP = sp;return ($14|0);
 } else {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _TIFFGetField($tif,$tag,$varargs) {
 $tif = $tif|0;
 $tag = $tag|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ap = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 $0 = $tif;
 $1 = $tag;
 HEAP32[$ap>>2] = $varargs;
 $2 = $0;
 $3 = $1;
 $4 = (_TIFFVGetField($2,$3,$ap)|0);
 $status = $4;
 $5 = $status;
 STACKTOP = sp;return ($5|0);
}
function _TIFFVGetField($tif,$tag,$ap) {
 $tif = $tif|0;
 $tag = $tag|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $tag;
 $2 = $ap;
 $3 = $0;
 $4 = $1;
 $5 = (_TIFFFindField($3,$4,0)|0);
 $fip = $5;
 $6 = $fip;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $8 = $1;
   $9 = ($8>>>0)>(65535);
   if (!($9)) {
    $10 = $fip;
    $11 = (($10) + 24|0);
    $12 = HEAP16[$11>>1]|0;
    $13 = $12&65535;
    $14 = (($13|0) / 32)&-1;
    $15 = $0;
    $16 = (($15) + 40|0);
    $17 = (($16) + ($14<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $fip;
    $20 = (($19) + 24|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21&65535;
    $23 = $22 & 31;
    $24 = 1 << $23;
    $25 = $18 & $24;
    $26 = ($25|0)!=(0);
    if (!($26)) {
     break;
    }
   }
   $27 = $0;
   $28 = (($27) + 668|0);
   $29 = (($28) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $0;
   $32 = $1;
   $33 = $2;
   $34 = (FUNCTION_TABLE_iiii[$30 & 255]($31,$32,$33)|0);
   $35 = $34;
   STACKTOP = sp;return ($35|0);
  }
 } while(0);
 $35 = 0;
 STACKTOP = sp;return ($35|0);
}
function _TIFFFreeDirectory($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $td = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 40|0);
 $td = $2;
 $3 = $td;
 __TIFFmemset($3,0,4);
 $4 = $td;
 $5 = (($4) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $td;
  $9 = (($8) + 68|0);
  $10 = HEAP32[$9>>2]|0;
  __TIFFfree($10);
  $11 = $td;
  $12 = (($11) + 68|0);
  HEAP32[$12>>2] = 0;
 }
 $13 = $td;
 $14 = (($13) + 72|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $td;
  $18 = (($17) + 72|0);
  $19 = HEAP32[$18>>2]|0;
  __TIFFfree($19);
  $20 = $td;
  $21 = (($20) + 72|0);
  HEAP32[$21>>2] = 0;
 }
 $22 = $td;
 $23 = (($22) + 100|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $td;
  $27 = (($26) + 100|0);
  $28 = HEAP32[$27>>2]|0;
  __TIFFfree($28);
  $29 = $td;
  $30 = (($29) + 100|0);
  HEAP32[$30>>2] = 0;
 }
 $31 = $td;
 $32 = (($31) + 100|0);
 $33 = (($32) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if ($35) {
  $36 = $td;
  $37 = (($36) + 100|0);
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  __TIFFfree($39);
  $40 = $td;
  $41 = (($40) + 100|0);
  $42 = (($41) + 4|0);
  HEAP32[$42>>2] = 0;
 }
 $43 = $td;
 $44 = (($43) + 100|0);
 $45 = (($44) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $td;
  $49 = (($48) + 100|0);
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  __TIFFfree($51);
  $52 = $td;
  $53 = (($52) + 100|0);
  $54 = (($53) + 8|0);
  HEAP32[$54>>2] = 0;
 }
 $55 = $td;
 $56 = (($55) + 120|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0|0);
 if ($58) {
  $59 = $td;
  $60 = (($59) + 120|0);
  $61 = HEAP32[$60>>2]|0;
  __TIFFfree($61);
  $62 = $td;
  $63 = (($62) + 120|0);
  HEAP32[$63>>2] = 0;
 }
 $64 = $td;
 $65 = (($64) + 148|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0|0);
 if ($67) {
  $68 = $td;
  $69 = (($68) + 148|0);
  $70 = HEAP32[$69>>2]|0;
  __TIFFfree($70);
  $71 = $td;
  $72 = (($71) + 148|0);
  HEAP32[$72>>2] = 0;
 }
 $73 = $td;
 $74 = (($73) + 180|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)!=(0|0);
 if ($76) {
  $77 = $td;
  $78 = (($77) + 180|0);
  $79 = HEAP32[$78>>2]|0;
  __TIFFfree($79);
  $80 = $td;
  $81 = (($80) + 180|0);
  HEAP32[$81>>2] = 0;
 }
 $82 = $td;
 $83 = (($82) + 172|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)!=(0|0);
 if ($85) {
  $86 = $td;
  $87 = (($86) + 172|0);
  $88 = HEAP32[$87>>2]|0;
  __TIFFfree($88);
  $89 = $td;
  $90 = (($89) + 172|0);
  HEAP32[$90>>2] = 0;
 }
 $91 = $td;
 $92 = (($91) + 160|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)!=(0|0);
 if ($94) {
  $95 = $td;
  $96 = (($95) + 160|0);
  $97 = HEAP32[$96>>2]|0;
  __TIFFfree($97);
  $98 = $td;
  $99 = (($98) + 160|0);
  HEAP32[$99>>2] = 0;
 }
 $100 = $td;
 $101 = (($100) + 160|0);
 $102 = (($101) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)!=(0|0);
 if ($104) {
  $105 = $td;
  $106 = (($105) + 160|0);
  $107 = (($106) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  __TIFFfree($108);
  $109 = $td;
  $110 = (($109) + 160|0);
  $111 = (($110) + 4|0);
  HEAP32[$111>>2] = 0;
 }
 $112 = $td;
 $113 = (($112) + 160|0);
 $114 = (($113) + 8|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($115|0)!=(0|0);
 if ($116) {
  $117 = $td;
  $118 = (($117) + 160|0);
  $119 = (($118) + 8|0);
  $120 = HEAP32[$119>>2]|0;
  __TIFFfree($120);
  $121 = $td;
  $122 = (($121) + 160|0);
  $123 = (($122) + 8|0);
  HEAP32[$123>>2] = 0;
 }
 $124 = $td;
 $125 = (($124) + 132|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ($126|0)!=(0|0);
 if ($127) {
  $128 = $td;
  $129 = (($128) + 132|0);
  $130 = HEAP32[$129>>2]|0;
  __TIFFfree($130);
  $131 = $td;
  $132 = (($131) + 132|0);
  HEAP32[$132>>2] = 0;
 }
 $133 = $td;
 $134 = (($133) + 136|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = $td;
  $138 = (($137) + 136|0);
  $139 = HEAP32[$138>>2]|0;
  __TIFFfree($139);
  $140 = $td;
  $141 = (($140) + 136|0);
  HEAP32[$141>>2] = 0;
 }
 $142 = $0;
 $143 = (($142) + 40|0);
 $144 = (($143) + 4|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $145 & -129;
 HEAP32[$144>>2] = $146;
 $147 = $0;
 $148 = (($147) + 40|0);
 $149 = (($148) + 4|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = $150 & -257;
 HEAP32[$149>>2] = $151;
 $i = 0;
 while(1) {
  $152 = $i;
  $153 = $td;
  $154 = (($153) + 184|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($152|0)<($155|0);
  if (!($156)) {
   break;
  }
  $157 = $i;
  $158 = $td;
  $159 = (($158) + 188|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + (($157*12)|0)|0);
  $162 = (($161) + 8|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ($163|0)!=(0|0);
  if ($164) {
   $165 = $i;
   $166 = $td;
   $167 = (($166) + 188|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) + (($165*12)|0)|0);
   $170 = (($169) + 8|0);
   $171 = HEAP32[$170>>2]|0;
   __TIFFfree($171);
  }
  $172 = $i;
  $173 = (($172) + 1)|0;
  $i = $173;
 }
 $174 = $td;
 $175 = (($174) + 184|0);
 HEAP32[$175>>2] = 0;
 $176 = $td;
 $177 = (($176) + 188|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = ($178|0)!=(0|0);
 if (!($179)) {
  STACKTOP = sp;return;
 }
 $180 = $td;
 $181 = (($180) + 188|0);
 $182 = HEAP32[$181>>2]|0;
 __TIFFfree($182);
 $183 = $td;
 $184 = (($183) + 188|0);
 HEAP32[$184>>2] = 0;
 STACKTOP = sp;return;
}
function _TIFFCreateDirectory($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 (_TIFFDefaultDirectory($1)|0);
 $2 = $0;
 $3 = (($2) + 16|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $0;
 $9 = (($8) + 24|0);
 $10 = $9;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = $0;
 $15 = (($14) + 456|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = $0;
 $21 = (($20) + 444|0);
 HEAP32[$21>>2] = -1;
 $22 = $0;
 $23 = (($22) + 452|0);
 HEAP32[$23>>2] = -1;
 STACKTOP = sp;return 0;
}
function _TIFFDefaultDirectory($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $td = 0, $tiffFieldArray = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 40|0);
 $td = $2;
 $3 = (__TIFFGetFields()|0);
 $tiffFieldArray = $3;
 $4 = $0;
 $5 = $tiffFieldArray;
 __TIFFSetupFields($4,$5);
 $6 = $td;
 __TIFFmemset($6,0,192);
 $7 = $td;
 $8 = (($7) + 54|0);
 HEAP16[$8>>1] = 1;
 $9 = $td;
 $10 = (($9) + 44|0);
 HEAP16[$10>>1] = 1;
 $11 = $td;
 $12 = (($11) + 52|0);
 HEAP16[$12>>1] = 1;
 $13 = $td;
 $14 = (($13) + 56|0);
 HEAP16[$14>>1] = 1;
 $15 = $td;
 $16 = (($15) + 58|0);
 HEAP16[$16>>1] = 1;
 $17 = $td;
 $18 = (($17) + 60|0);
 HEAP32[$18>>2] = -1;
 $19 = $td;
 $20 = (($19) + 28|0);
 HEAP32[$20>>2] = 0;
 $21 = $td;
 $22 = (($21) + 32|0);
 HEAP32[$22>>2] = 0;
 $23 = $td;
 $24 = (($23) + 36|0);
 HEAP32[$24>>2] = 1;
 $25 = $td;
 $26 = (($25) + 140|0);
 HEAP32[$26>>2] = 1;
 $27 = $td;
 $28 = (($27) + 84|0);
 HEAP16[$28>>1] = 2;
 $29 = $td;
 $30 = (($29) + 46|0);
 HEAP16[$30>>1] = 1;
 $31 = $td;
 $32 = (($31) + 24|0);
 HEAP32[$32>>2] = 1;
 $33 = $td;
 $34 = (($33) + 152|0);
 HEAP16[$34>>1] = 2;
 $35 = $td;
 $36 = (($35) + 152|0);
 $37 = (($36) + 2|0);
 HEAP16[$37>>1] = 2;
 $38 = $td;
 $39 = (($38) + 156|0);
 HEAP16[$39>>1] = 1;
 $40 = $0;
 $41 = (($40) + 652|0);
 HEAP32[$41>>2] = 15;
 $42 = $0;
 $43 = (($42) + 664|0);
 HEAP32[$43>>2] = 0;
 $44 = $0;
 $45 = (($44) + 668|0);
 HEAP32[$45>>2] = 16;
 $46 = $0;
 $47 = (($46) + 668|0);
 $48 = (($47) + 4|0);
 HEAP32[$48>>2] = 17;
 $49 = $0;
 $50 = (($49) + 668|0);
 $51 = (($50) + 8|0);
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[152>>2]|0;
 $53 = ($52|0)!=(0|0);
 if (!($53)) {
  $56 = $0;
  HEAP32[$vararg_buffer>>2] = 1;
  (_TIFFSetField($56,259,$vararg_buffer)|0);
  $57 = $0;
  $58 = (($57) + 12|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $59 & -9;
  HEAP32[$58>>2] = $60;
  $61 = $0;
  $62 = (($61) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $63 & -1025;
  HEAP32[$62>>2] = $64;
  STACKTOP = sp;return 1;
 }
 $54 = HEAP32[152>>2]|0;
 $55 = $0;
 FUNCTION_TABLE_vi[$54 & 255]($55);
 $56 = $0;
 HEAP32[$vararg_buffer>>2] = 1;
 (_TIFFSetField($56,259,$vararg_buffer)|0);
 $57 = $0;
 $58 = (($57) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $59 & -9;
 HEAP32[$58>>2] = $60;
 $61 = $0;
 $62 = (($61) + 12|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $63 & -1025;
 HEAP32[$62>>2] = $64;
 STACKTOP = sp;return 1;
}
function _setByteArray($vpp,$vp,$nmemb,$elem_size) {
 $vpp = $vpp|0;
 $vp = $vp|0;
 $nmemb = $nmemb|0;
 $elem_size = $elem_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vpp;
 $1 = $vp;
 $2 = $nmemb;
 $3 = $elem_size;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  __TIFFfree($8);
  $9 = $0;
  HEAP32[$9>>2] = 0;
 }
 $10 = $1;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 $13 = $3;
 $14 = Math_imul($12, $13)|0;
 $bytes = $14;
 $15 = $3;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $bytes;
  $18 = $3;
  $19 = (($17>>>0) / ($18>>>0))&-1;
  $20 = $2;
  $21 = ($19|0)==($20|0);
  if ($21) {
   $22 = $bytes;
   $23 = (__TIFFmalloc($22)|0);
   $24 = $0;
   HEAP32[$24>>2] = $23;
  }
 }
 $25 = $0;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $0;
  $29 = HEAP32[$28>>2]|0;
  $30 = $1;
  $31 = $bytes;
  __TIFFmemcpy($29,$30,$31);
 }
 STACKTOP = sp;return;
}
function _OkToChangeTag($tif,$tag) {
 $tif = $tif|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fip = 0, $vararg_buffer = 0, $vararg_buffer3 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $tag;
 $3 = $1;
 $4 = $2;
 $5 = (_TIFFFindField($3,$4,0)|0);
 $fip = $5;
 $6 = $fip;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $8 = $1;
  $9 = (($8) + 628|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = ($13>>>0)>(65535);
  $15 = $14 ? 240 : 248;
  $16 = $2;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $16;
  _TIFFErrorExt($10,704,784,$vararg_buffer);
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $17 = $2;
 $18 = ($17|0)!=(257);
 if ($18) {
  $19 = $1;
  $20 = (($19) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 64;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = $fip;
   $25 = (($24) + 26|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26<<24>>24)!=(0);
   if (!($27)) {
    $28 = $1;
    $29 = (($28) + 628|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $1;
    $32 = HEAP32[$31>>2]|0;
    $33 = $fip;
    $34 = (($33) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $32;
    $vararg_ptr6 = (($vararg_buffer3) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $35;
    _TIFFErrorExt($30,704,808,$vararg_buffer3);
    $0 = 0;
    $36 = $0;
    STACKTOP = sp;return ($36|0);
   }
  }
 }
 $0 = 1;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function __TIFFVSetField($tif,$tag,$ap) {
 $tif = $tif|0;
 $tag = $tag|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0.0, $887 = 0.0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0.0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current101 = 0, $arglist_current104 = 0, $arglist_current107 = 0, $arglist_current11 = 0;
 var $arglist_current110 = 0, $arglist_current113 = 0, $arglist_current116 = 0, $arglist_current122 = 0, $arglist_current125 = 0, $arglist_current128 = 0, $arglist_current131 = 0, $arglist_current134 = 0, $arglist_current137 = 0, $arglist_current14 = 0, $arglist_current140 = 0, $arglist_current143 = 0, $arglist_current159 = 0, $arglist_current162 = 0, $arglist_current165 = 0, $arglist_current168 = 0, $arglist_current17 = 0, $arglist_current171 = 0, $arglist_current181 = 0, $arglist_current184 = 0;
 var $arglist_current187 = 0, $arglist_current190 = 0, $arglist_current193 = 0, $arglist_current196 = 0, $arglist_current199 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current202 = 0, $arglist_current205 = 0, $arglist_current208 = 0, $arglist_current211 = 0, $arglist_current214 = 0, $arglist_current217 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0;
 var $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current65 = 0, $arglist_current68 = 0, $arglist_current71 = 0, $arglist_current74 = 0, $arglist_current77 = 0, $arglist_current8 = 0, $arglist_current80 = 0, $arglist_current83 = 0, $arglist_current86 = 0, $arglist_current89 = 0, $arglist_current92 = 0, $arglist_current95 = 0;
 var $arglist_next = 0, $arglist_next102 = 0, $arglist_next105 = 0, $arglist_next108 = 0, $arglist_next111 = 0, $arglist_next114 = 0, $arglist_next117 = 0, $arglist_next12 = 0, $arglist_next123 = 0, $arglist_next126 = 0, $arglist_next129 = 0, $arglist_next132 = 0, $arglist_next135 = 0, $arglist_next138 = 0, $arglist_next141 = 0, $arglist_next144 = 0, $arglist_next15 = 0, $arglist_next160 = 0, $arglist_next163 = 0, $arglist_next166 = 0;
 var $arglist_next169 = 0, $arglist_next172 = 0, $arglist_next18 = 0, $arglist_next182 = 0, $arglist_next185 = 0, $arglist_next188 = 0, $arglist_next191 = 0, $arglist_next194 = 0, $arglist_next197 = 0, $arglist_next200 = 0, $arglist_next203 = 0, $arglist_next206 = 0, $arglist_next209 = 0, $arglist_next21 = 0, $arglist_next212 = 0, $arglist_next215 = 0, $arglist_next218 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0;
 var $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next66 = 0, $arglist_next69 = 0, $arglist_next72 = 0, $arglist_next75 = 0, $arglist_next78 = 0, $arglist_next81 = 0, $arglist_next84 = 0;
 var $arglist_next87 = 0, $arglist_next9 = 0, $arglist_next90 = 0, $arglist_next93 = 0, $arglist_next96 = 0, $fip = 0, $fip12 = 0, $fip13 = 0, $fip14 = 0, $i = 0, $iCustom = 0, $ma = 0, $mb = 0, $new_customValues = 0, $s = 0, $standard_tag = 0, $status = 0, $sv = 0, $td = 0, $tv = 0;
 var $tv_size = 0, $v = 0, $v1 = 0, $v10 = 0, $v11 = 0, $v2 = 0, $v3 = 0, $v32 = 0, $v4 = 0, $v5 = 0, $v6 = 0, $v7 = 0, $v8 = 0, $v9 = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer118 = 0, $vararg_buffer145 = 0, $vararg_buffer150 = 0, $vararg_buffer153 = 0;
 var $vararg_buffer173 = 0, $vararg_buffer219 = 0, $vararg_buffer224 = 0, $vararg_buffer97 = 0, $vararg_ptr148 = 0, $vararg_ptr149 = 0, $vararg_ptr156 = 0, $vararg_ptr157 = 0, $vararg_ptr176 = 0, $vararg_ptr177 = 0, $vararg_ptr178 = 0, $vararg_ptr179 = 0, $vararg_ptr222 = 0, $vararg_ptr223 = 0, $vararg_ptr227 = 0, $vararg_ptr228 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer224 = sp + 104|0;
 $vararg_buffer219 = sp + 48|0;
 $vararg_buffer173 = sp;
 $vararg_buffer153 = sp + 80|0;
 $vararg_buffer150 = sp + 96|0;
 $vararg_buffer145 = sp + 128|0;
 $vararg_buffer118 = sp + 40|0;
 $vararg_buffer97 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $v = sp + 148|0;
 $sv = sp + 240|0;
 $v1 = sp + 244|0;
 $v2 = sp + 252|0;
 $v3 = sp + 253|0;
 $v4 = sp + 248|0;
 $v5 = sp + 250|0;
 $v6 = sp + 228|0;
 $v7 = sp + 232|0;
 $v8 = sp + 120|0;
 $v9 = sp + 32|0;
 $v10 = sp + 160|0;
 $v11 = sp + 24|0;
 $1 = $tif;
 $2 = $tag;
 $3 = $ap;
 $4 = $1;
 $5 = (($4) + 40|0);
 $td = $5;
 $status = 1;
 $6 = $1;
 $7 = $2;
 $8 = (_TIFFFindField($6,$7,0)|0);
 $fip = $8;
 $9 = $2;
 $standard_tag = $9;
 $10 = $fip;
 $11 = (($10) + 24|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ($13|0)==(65);
 if ($14) {
  $standard_tag = 0;
 }
 $15 = $standard_tag;
 L4: do {
  if ((($15|0) == 254)) {
   $16 = $3;
   $arglist_current = HEAP32[$16>>2]|0;
   $17 = HEAP32[$arglist_current>>2]|0;
   $arglist_next = (($arglist_current) + 4|0);
   HEAP32[$16>>2] = $arglist_next;
   $18 = $td;
   $19 = (($18) + 40|0);
   HEAP32[$19>>2] = $17;
   label = 210;
  } else if ((($15|0) == 256)) {
   $20 = $3;
   $arglist_current2 = HEAP32[$20>>2]|0;
   $21 = HEAP32[$arglist_current2>>2]|0;
   $arglist_next3 = (($arglist_current2) + 4|0);
   HEAP32[$20>>2] = $arglist_next3;
   $22 = $td;
   $23 = (($22) + 16|0);
   HEAP32[$23>>2] = $21;
   label = 210;
  } else if ((($15|0) == 257)) {
   $24 = $3;
   $arglist_current5 = HEAP32[$24>>2]|0;
   $25 = HEAP32[$arglist_current5>>2]|0;
   $arglist_next6 = (($arglist_current5) + 4|0);
   HEAP32[$24>>2] = $arglist_next6;
   $26 = $td;
   $27 = (($26) + 20|0);
   HEAP32[$27>>2] = $25;
   label = 210;
  } else if ((($15|0) == 258)) {
   $28 = $3;
   $arglist_current8 = HEAP32[$28>>2]|0;
   $29 = HEAP32[$arglist_current8>>2]|0;
   $arglist_next9 = (($arglist_current8) + 4|0);
   HEAP32[$28>>2] = $arglist_next9;
   $30 = $29&65535;
   $31 = $td;
   $32 = (($31) + 44|0);
   HEAP16[$32>>1] = $30;
   $33 = $1;
   $34 = (($33) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 & 128;
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $td;
    $39 = (($38) + 44|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40&65535;
    $42 = ($41|0)==(8);
    if ($42) {
     $43 = $1;
     $44 = (($43) + 652|0);
     HEAP32[$44>>2] = 15;
    } else {
     $45 = $td;
     $46 = (($45) + 44|0);
     $47 = HEAP16[$46>>1]|0;
     $48 = $47&65535;
     $49 = ($48|0)==(16);
     if ($49) {
      $50 = $1;
      $51 = (($50) + 652|0);
      HEAP32[$51>>2] = 18;
     } else {
      $52 = $td;
      $53 = (($52) + 44|0);
      $54 = HEAP16[$53>>1]|0;
      $55 = $54&65535;
      $56 = ($55|0)==(24);
      if ($56) {
       $57 = $1;
       $58 = (($57) + 652|0);
       HEAP32[$58>>2] = 19;
      } else {
       $59 = $td;
       $60 = (($59) + 44|0);
       $61 = HEAP16[$60>>1]|0;
       $62 = $61&65535;
       $63 = ($62|0)==(32);
       if ($63) {
        $64 = $1;
        $65 = (($64) + 652|0);
        HEAP32[$65>>2] = 20;
       } else {
        $66 = $td;
        $67 = (($66) + 44|0);
        $68 = HEAP16[$67>>1]|0;
        $69 = $68&65535;
        $70 = ($69|0)==(64);
        if ($70) {
         $71 = $1;
         $72 = (($71) + 652|0);
         HEAP32[$72>>2] = 21;
        } else {
         $73 = $td;
         $74 = (($73) + 44|0);
         $75 = HEAP16[$74>>1]|0;
         $76 = $75&65535;
         $77 = ($76|0)==(128);
         if ($77) {
          $78 = $1;
          $79 = (($78) + 652|0);
          HEAP32[$79>>2] = 21;
         }
        }
       }
      }
     }
    }
   }
   label = 210;
  } else if ((($15|0) == 259)) {
   $80 = $3;
   $arglist_current11 = HEAP32[$80>>2]|0;
   $81 = HEAP32[$arglist_current11>>2]|0;
   $arglist_next12 = (($arglist_current11) + 4|0);
   HEAP32[$80>>2] = $arglist_next12;
   $82 = $81&65535;
   $83 = $82&65535;
   HEAP32[$v>>2] = $83;
   $84 = $1;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $86 & 128;
   $88 = ($87|0)!=(0);
   do {
    if ($88) {
     $89 = $td;
     $90 = (($89) + 48|0);
     $91 = HEAP16[$90>>1]|0;
     $92 = $91&65535;
     $93 = HEAP32[$v>>2]|0;
     $94 = ($92|0)==($93|0);
     if ($94) {
      label = 210;
      break L4;
     } else {
      $95 = $1;
      $96 = (($95) + 564|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = $1;
      FUNCTION_TABLE_vi[$97 & 255]($98);
      $99 = $1;
      $100 = (($99) + 12|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = $101 & -33;
      HEAP32[$100>>2] = $102;
      break;
     }
    }
   } while(0);
   $103 = $1;
   $104 = HEAP32[$v>>2]|0;
   $105 = (_TIFFSetCompressionScheme($103,$104)|0);
   $status = $105;
   $106 = ($105|0)!=(0);
   if ($106) {
    $107 = HEAP32[$v>>2]|0;
    $108 = $107&65535;
    $109 = $td;
    $110 = (($109) + 48|0);
    HEAP16[$110>>1] = $108;
   } else {
    $status = 0;
   }
   label = 210;
  } else if ((($15|0) == 262)) {
   $111 = $3;
   $arglist_current14 = HEAP32[$111>>2]|0;
   $112 = HEAP32[$arglist_current14>>2]|0;
   $arglist_next15 = (($arglist_current14) + 4|0);
   HEAP32[$111>>2] = $arglist_next15;
   $113 = $112&65535;
   $114 = $td;
   $115 = (($114) + 50|0);
   HEAP16[$115>>1] = $113;
   label = 210;
  } else if ((($15|0) == 263)) {
   $116 = $3;
   $arglist_current17 = HEAP32[$116>>2]|0;
   $117 = HEAP32[$arglist_current17>>2]|0;
   $arglist_next18 = (($arglist_current17) + 4|0);
   HEAP32[$116>>2] = $arglist_next18;
   $118 = $117&65535;
   $119 = $td;
   $120 = (($119) + 52|0);
   HEAP16[$120>>1] = $118;
   label = 210;
  } else if ((($15|0) == 266)) {
   $121 = $3;
   $arglist_current20 = HEAP32[$121>>2]|0;
   $122 = HEAP32[$arglist_current20>>2]|0;
   $arglist_next21 = (($arglist_current20) + 4|0);
   HEAP32[$121>>2] = $arglist_next21;
   $123 = $122&65535;
   $124 = $123&65535;
   HEAP32[$v>>2] = $124;
   $125 = HEAP32[$v>>2]|0;
   $126 = ($125|0)!=(2);
   if ($126) {
    $127 = HEAP32[$v>>2]|0;
    $128 = ($127|0)!=(1);
    if ($128) {
     label = 216;
     break L4;
    }
   }
   $129 = HEAP32[$v>>2]|0;
   $130 = $129&65535;
   $131 = $td;
   $132 = (($131) + 54|0);
   HEAP16[$132>>1] = $130;
   label = 210;
  } else if ((($15|0) == 274)) {
   $133 = $3;
   $arglist_current23 = HEAP32[$133>>2]|0;
   $134 = HEAP32[$arglist_current23>>2]|0;
   $arglist_next24 = (($arglist_current23) + 4|0);
   HEAP32[$133>>2] = $arglist_next24;
   $135 = $134&65535;
   $136 = $135&65535;
   HEAP32[$v>>2] = $136;
   $137 = HEAP32[$v>>2]|0;
   $138 = ($137>>>0)<(1);
   if (!($138)) {
    $139 = HEAP32[$v>>2]|0;
    $140 = (8)<($139>>>0);
    if (!($140)) {
     $141 = HEAP32[$v>>2]|0;
     $142 = $141&65535;
     $143 = $td;
     $144 = (($143) + 56|0);
     HEAP16[$144>>1] = $142;
     label = 210;
     break L4;
    }
   }
   label = 216;
  } else if ((($15|0) == 277)) {
   $145 = $3;
   $arglist_current26 = HEAP32[$145>>2]|0;
   $146 = HEAP32[$arglist_current26>>2]|0;
   $arglist_next27 = (($arglist_current26) + 4|0);
   HEAP32[$145>>2] = $arglist_next27;
   $147 = $146&65535;
   $148 = $147&65535;
   HEAP32[$v>>2] = $148;
   $149 = HEAP32[$v>>2]|0;
   $150 = ($149|0)==(0);
   if ($150) {
    label = 216;
    break L4;
   } else {
    $151 = HEAP32[$v>>2]|0;
    $152 = $151&65535;
    $153 = $td;
    $154 = (($153) + 58|0);
    HEAP16[$154>>1] = $152;
    label = 210;
    break L4;
   }
  } else if ((($15|0) == 278)) {
   $155 = $3;
   $arglist_current29 = HEAP32[$155>>2]|0;
   $156 = HEAP32[$arglist_current29>>2]|0;
   $arglist_next30 = (($arglist_current29) + 4|0);
   HEAP32[$155>>2] = $arglist_next30;
   $v32 = $156;
   $157 = $v32;
   $158 = ($157|0)==(0);
   if ($158) {
    label = 220;
    break L4;
   }
   $159 = $v32;
   $160 = $td;
   $161 = (($160) + 60|0);
   HEAP32[$161>>2] = $159;
   $162 = $1;
   $163 = (($162) + 40|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = $164 & 4;
   $166 = ($165|0)!=(0);
   if (!($166)) {
    $167 = $v32;
    $168 = $td;
    $169 = (($168) + 32|0);
    HEAP32[$169>>2] = $167;
    $170 = $td;
    $171 = (($170) + 16|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = $td;
    $174 = (($173) + 28|0);
    HEAP32[$174>>2] = $172;
   }
   label = 210;
  } else if ((($15|0) == 280)) {
   $175 = $3;
   $arglist_current32 = HEAP32[$175>>2]|0;
   $176 = HEAP32[$arglist_current32>>2]|0;
   $arglist_next33 = (($arglist_current32) + 4|0);
   HEAP32[$175>>2] = $arglist_next33;
   $177 = $176&65535;
   $178 = $td;
   $179 = (($178) + 64|0);
   HEAP16[$179>>1] = $177;
   label = 210;
  } else if ((($15|0) == 281)) {
   $180 = $3;
   $arglist_current35 = HEAP32[$180>>2]|0;
   $181 = HEAP32[$arglist_current35>>2]|0;
   $arglist_next36 = (($arglist_current35) + 4|0);
   HEAP32[$180>>2] = $arglist_next36;
   $182 = $181&65535;
   $183 = $td;
   $184 = (($183) + 66|0);
   HEAP16[$184>>1] = $182;
   label = 210;
  } else if ((($15|0) == 340)) {
   $185 = $1;
   $186 = (($185) + 12|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = $187 & 4194304;
   $189 = ($188|0)!=(0);
   if ($189) {
    $190 = $td;
    $191 = (($190) + 68|0);
    $192 = $3;
    $arglist_current38 = HEAP32[$192>>2]|0;
    $193 = HEAP32[$arglist_current38>>2]|0;
    $arglist_next39 = (($arglist_current38) + 4|0);
    HEAP32[$192>>2] = $arglist_next39;
    $194 = $td;
    $195 = (($194) + 58|0);
    $196 = HEAP16[$195>>1]|0;
    $197 = $196&65535;
    __TIFFsetDoubleArray($191,$193,$197);
   } else {
    $198 = $td;
    $199 = (($198) + 68|0);
    $200 = $3;
    $arglist_current41 = HEAP32[$200>>2]|0;
    HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current41>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current41+4>>2];$201 = +HEAPF64[tempDoublePtr>>3];
    $arglist_next42 = (($arglist_current41) + 8|0);
    HEAP32[$200>>2] = $arglist_next42;
    $202 = $td;
    $203 = (($202) + 58|0);
    $204 = HEAP16[$203>>1]|0;
    $205 = $204&65535;
    _setDoubleArrayOneValue($199,$201,$205);
   }
   label = 210;
  } else if ((($15|0) == 341)) {
   $206 = $1;
   $207 = (($206) + 12|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $208 & 4194304;
   $210 = ($209|0)!=(0);
   if ($210) {
    $211 = $td;
    $212 = (($211) + 72|0);
    $213 = $3;
    $arglist_current44 = HEAP32[$213>>2]|0;
    $214 = HEAP32[$arglist_current44>>2]|0;
    $arglist_next45 = (($arglist_current44) + 4|0);
    HEAP32[$213>>2] = $arglist_next45;
    $215 = $td;
    $216 = (($215) + 58|0);
    $217 = HEAP16[$216>>1]|0;
    $218 = $217&65535;
    __TIFFsetDoubleArray($212,$214,$218);
   } else {
    $219 = $td;
    $220 = (($219) + 72|0);
    $221 = $3;
    $arglist_current47 = HEAP32[$221>>2]|0;
    HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current47>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current47+4>>2];$222 = +HEAPF64[tempDoublePtr>>3];
    $arglist_next48 = (($arglist_current47) + 8|0);
    HEAP32[$221>>2] = $arglist_next48;
    $223 = $td;
    $224 = (($223) + 58|0);
    $225 = HEAP16[$224>>1]|0;
    $226 = $225&65535;
    _setDoubleArrayOneValue($220,$222,$226);
   }
   label = 210;
  } else if ((($15|0) == 282)) {
   $227 = $3;
   $arglist_current50 = HEAP32[$227>>2]|0;
   HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current50>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current50+4>>2];$228 = +HEAPF64[tempDoublePtr>>3];
   $arglist_next51 = (($arglist_current50) + 8|0);
   HEAP32[$227>>2] = $arglist_next51;
   $229 = $228;
   $230 = $td;
   $231 = (($230) + 76|0);
   HEAPF32[$231>>2] = $229;
   label = 210;
  } else if ((($15|0) == 283)) {
   $232 = $3;
   $arglist_current53 = HEAP32[$232>>2]|0;
   HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current53>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current53+4>>2];$233 = +HEAPF64[tempDoublePtr>>3];
   $arglist_next54 = (($arglist_current53) + 8|0);
   HEAP32[$232>>2] = $arglist_next54;
   $234 = $233;
   $235 = $td;
   $236 = (($235) + 80|0);
   HEAPF32[$236>>2] = $234;
   label = 210;
  } else if ((($15|0) == 284)) {
   $237 = $3;
   $arglist_current56 = HEAP32[$237>>2]|0;
   $238 = HEAP32[$arglist_current56>>2]|0;
   $arglist_next57 = (($arglist_current56) + 4|0);
   HEAP32[$237>>2] = $arglist_next57;
   $239 = $238&65535;
   $240 = $239&65535;
   HEAP32[$v>>2] = $240;
   $241 = HEAP32[$v>>2]|0;
   $242 = ($241|0)!=(1);
   if ($242) {
    $243 = HEAP32[$v>>2]|0;
    $244 = ($243|0)!=(2);
    if ($244) {
     label = 216;
     break L4;
    }
   }
   $245 = HEAP32[$v>>2]|0;
   $246 = $245&65535;
   $247 = $td;
   $248 = (($247) + 86|0);
   HEAP16[$248>>1] = $246;
   label = 210;
  } else if ((($15|0) == 286)) {
   $249 = $3;
   $arglist_current59 = HEAP32[$249>>2]|0;
   HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$250 = +HEAPF64[tempDoublePtr>>3];
   $arglist_next60 = (($arglist_current59) + 8|0);
   HEAP32[$249>>2] = $arglist_next60;
   $251 = $250;
   $252 = $td;
   $253 = (($252) + 88|0);
   HEAPF32[$253>>2] = $251;
   label = 210;
  } else if ((($15|0) == 287)) {
   $254 = $3;
   $arglist_current62 = HEAP32[$254>>2]|0;
   HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$255 = +HEAPF64[tempDoublePtr>>3];
   $arglist_next63 = (($arglist_current62) + 8|0);
   HEAP32[$254>>2] = $arglist_next63;
   $256 = $255;
   $257 = $td;
   $258 = (($257) + 92|0);
   HEAPF32[$258>>2] = $256;
   label = 210;
  } else if ((($15|0) == 296)) {
   $259 = $3;
   $arglist_current65 = HEAP32[$259>>2]|0;
   $260 = HEAP32[$arglist_current65>>2]|0;
   $arglist_next66 = (($arglist_current65) + 4|0);
   HEAP32[$259>>2] = $arglist_next66;
   $261 = $260&65535;
   $262 = $261&65535;
   HEAP32[$v>>2] = $262;
   $263 = HEAP32[$v>>2]|0;
   $264 = ($263>>>0)<(1);
   if (!($264)) {
    $265 = HEAP32[$v>>2]|0;
    $266 = (3)<($265>>>0);
    if (!($266)) {
     $267 = HEAP32[$v>>2]|0;
     $268 = $267&65535;
     $269 = $td;
     $270 = (($269) + 84|0);
     HEAP16[$270>>1] = $268;
     label = 210;
     break L4;
    }
   }
   label = 216;
  } else if ((($15|0) == 297)) {
   $271 = $3;
   $arglist_current68 = HEAP32[$271>>2]|0;
   $272 = HEAP32[$arglist_current68>>2]|0;
   $arglist_next69 = (($arglist_current68) + 4|0);
   HEAP32[$271>>2] = $arglist_next69;
   $273 = $272&65535;
   $274 = $td;
   $275 = (($274) + 96|0);
   HEAP16[$275>>1] = $273;
   $276 = $3;
   $arglist_current71 = HEAP32[$276>>2]|0;
   $277 = HEAP32[$arglist_current71>>2]|0;
   $arglist_next72 = (($arglist_current71) + 4|0);
   HEAP32[$276>>2] = $arglist_next72;
   $278 = $277&65535;
   $279 = $td;
   $280 = (($279) + 96|0);
   $281 = (($280) + 2|0);
   HEAP16[$281>>1] = $278;
   label = 210;
  } else if ((($15|0) == 321)) {
   $282 = $3;
   $arglist_current74 = HEAP32[$282>>2]|0;
   $283 = HEAP32[$arglist_current74>>2]|0;
   $arglist_next75 = (($arglist_current74) + 4|0);
   HEAP32[$282>>2] = $arglist_next75;
   $284 = $283&65535;
   $285 = $td;
   $286 = (($285) + 112|0);
   HEAP16[$286>>1] = $284;
   $287 = $3;
   $arglist_current77 = HEAP32[$287>>2]|0;
   $288 = HEAP32[$arglist_current77>>2]|0;
   $arglist_next78 = (($arglist_current77) + 4|0);
   HEAP32[$287>>2] = $arglist_next78;
   $289 = $288&65535;
   $290 = $td;
   $291 = (($290) + 112|0);
   $292 = (($291) + 2|0);
   HEAP16[$292>>1] = $289;
   label = 210;
  } else if ((($15|0) == 338)) {
   $315 = $td;
   $316 = $3;
   $317 = (_setExtraSamples($315,$316,$v)|0);
   $318 = ($317|0)!=(0);
   if ($318) {
    label = 210;
    break L4;
   } else {
    label = 216;
    break L4;
   }
  } else if ((($15|0) == 320)) {
   $293 = $td;
   $294 = (($293) + 44|0);
   $295 = HEAP16[$294>>1]|0;
   $296 = $295&65535;
   $297 = 1 << $296;
   $v32 = $297;
   $298 = $td;
   $299 = (($298) + 100|0);
   $300 = $3;
   $arglist_current80 = HEAP32[$300>>2]|0;
   $301 = HEAP32[$arglist_current80>>2]|0;
   $arglist_next81 = (($arglist_current80) + 4|0);
   HEAP32[$300>>2] = $arglist_next81;
   $302 = $v32;
   __TIFFsetShortArray($299,$301,$302);
   $303 = $td;
   $304 = (($303) + 100|0);
   $305 = (($304) + 4|0);
   $306 = $3;
   $arglist_current83 = HEAP32[$306>>2]|0;
   $307 = HEAP32[$arglist_current83>>2]|0;
   $arglist_next84 = (($arglist_current83) + 4|0);
   HEAP32[$306>>2] = $arglist_next84;
   $308 = $v32;
   __TIFFsetShortArray($305,$307,$308);
   $309 = $td;
   $310 = (($309) + 100|0);
   $311 = (($310) + 8|0);
   $312 = $3;
   $arglist_current86 = HEAP32[$312>>2]|0;
   $313 = HEAP32[$arglist_current86>>2]|0;
   $arglist_next87 = (($arglist_current86) + 4|0);
   HEAP32[$312>>2] = $arglist_next87;
   $314 = $v32;
   __TIFFsetShortArray($311,$313,$314);
   label = 210;
  } else if ((($15|0) == 32995)) {
   $319 = $3;
   $arglist_current89 = HEAP32[$319>>2]|0;
   $320 = HEAP32[$arglist_current89>>2]|0;
   $arglist_next90 = (($arglist_current89) + 4|0);
   HEAP32[$319>>2] = $arglist_next90;
   $321 = $320&65535;
   $322 = $321&65535;
   $323 = ($322|0)!=(0);
   $324 = $323&1;
   $325 = $324&65535;
   $326 = $td;
   $327 = (($326) + 116|0);
   HEAP16[$327>>1] = $325;
   $328 = $td;
   $329 = (($328) + 116|0);
   $330 = HEAP16[$329>>1]|0;
   $331 = ($330<<16>>16)!=(0);
   if ($331) {
    HEAP16[$sv>>1] = 1;
    $332 = $td;
    $333 = (($332) + 120|0);
    __TIFFsetShortArray($333,$sv,1);
   }
   label = 210;
  } else if ((($15|0) == 322)) {
   $334 = $3;
   $arglist_current92 = HEAP32[$334>>2]|0;
   $335 = HEAP32[$arglist_current92>>2]|0;
   $arglist_next93 = (($arglist_current92) + 4|0);
   HEAP32[$334>>2] = $arglist_next93;
   $v32 = $335;
   $336 = $v32;
   $337 = (($336>>>0) % 16)&-1;
   $338 = ($337|0)!=(0);
   do {
    if ($338) {
     $339 = $1;
     $340 = (($339) + 8|0);
     $341 = HEAP32[$340>>2]|0;
     $342 = ($341|0)!=(0);
     if ($342) {
      label = 220;
      break L4;
     } else {
      $343 = $1;
      $344 = (($343) + 628|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = $1;
      $347 = HEAP32[$346>>2]|0;
      $348 = $v32;
      HEAP32[$vararg_buffer>>2] = $348;
      _TIFFWarningExt($345,$347,312,$vararg_buffer);
      break;
     }
    }
   } while(0);
   $349 = $v32;
   $350 = $td;
   $351 = (($350) + 28|0);
   HEAP32[$351>>2] = $349;
   $352 = $1;
   $353 = (($352) + 12|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = $354 | 1024;
   HEAP32[$353>>2] = $355;
   label = 210;
  } else if ((($15|0) == 323)) {
   $356 = $3;
   $arglist_current95 = HEAP32[$356>>2]|0;
   $357 = HEAP32[$arglist_current95>>2]|0;
   $arglist_next96 = (($arglist_current95) + 4|0);
   HEAP32[$356>>2] = $arglist_next96;
   $v32 = $357;
   $358 = $v32;
   $359 = (($358>>>0) % 16)&-1;
   $360 = ($359|0)!=(0);
   do {
    if ($360) {
     $361 = $1;
     $362 = (($361) + 8|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = ($363|0)!=(0);
     if ($364) {
      label = 220;
      break L4;
     } else {
      $365 = $1;
      $366 = (($365) + 628|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = $1;
      $369 = HEAP32[$368>>2]|0;
      $370 = $v32;
      HEAP32[$vararg_buffer97>>2] = $370;
      _TIFFWarningExt($367,$369,352,$vararg_buffer97);
      break;
     }
    }
   } while(0);
   $371 = $v32;
   $372 = $td;
   $373 = (($372) + 32|0);
   HEAP32[$373>>2] = $371;
   $374 = $1;
   $375 = (($374) + 12|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = $376 | 1024;
   HEAP32[$375>>2] = $377;
   label = 210;
  } else if ((($15|0) == 32998)) {
   $378 = $3;
   $arglist_current101 = HEAP32[$378>>2]|0;
   $379 = HEAP32[$arglist_current101>>2]|0;
   $arglist_next102 = (($arglist_current101) + 4|0);
   HEAP32[$378>>2] = $arglist_next102;
   $v32 = $379;
   $380 = $v32;
   $381 = ($380|0)==(0);
   if ($381) {
    label = 220;
    break L4;
   } else {
    $382 = $v32;
    $383 = $td;
    $384 = (($383) + 36|0);
    HEAP32[$384>>2] = $382;
    label = 210;
    break L4;
   }
  } else if ((($15|0) == 32996)) {
   $385 = $3;
   $arglist_current104 = HEAP32[$385>>2]|0;
   $386 = HEAP32[$arglist_current104>>2]|0;
   $arglist_next105 = (($arglist_current104) + 4|0);
   HEAP32[$385>>2] = $arglist_next105;
   $387 = $386&65535;
   $388 = $387&65535;
   HEAP32[$v>>2] = $388;
   $389 = HEAP32[$v>>2]|0;
   if ((($389|0) == 0)) {
    HEAP32[$v>>2] = 4;
   } else if ((($389|0) == 1)) {
    HEAP32[$v>>2] = 2;
   } else if ((($389|0) == 2)) {
    HEAP32[$v>>2] = 1;
   } else if ((($389|0) == 3)) {
    HEAP32[$v>>2] = 3;
   } else {
    label = 216;
    break L4;
   }
   $390 = HEAP32[$v>>2]|0;
   $391 = $390&65535;
   $392 = $td;
   $393 = (($392) + 46|0);
   HEAP16[$393>>1] = $391;
   label = 210;
  } else if ((($15|0) == 339)) {
   $394 = $3;
   $arglist_current107 = HEAP32[$394>>2]|0;
   $395 = HEAP32[$arglist_current107>>2]|0;
   $arglist_next108 = (($arglist_current107) + 4|0);
   HEAP32[$394>>2] = $arglist_next108;
   $396 = $395&65535;
   $397 = $396&65535;
   HEAP32[$v>>2] = $397;
   $398 = HEAP32[$v>>2]|0;
   $399 = ($398>>>0)<(1);
   if (!($399)) {
    $400 = HEAP32[$v>>2]|0;
    $401 = (6)<($400>>>0);
    if (!($401)) {
     $402 = HEAP32[$v>>2]|0;
     $403 = $402&65535;
     $404 = $td;
     $405 = (($404) + 46|0);
     HEAP16[$405>>1] = $403;
     $406 = $td;
     $407 = (($406) + 46|0);
     $408 = HEAP16[$407>>1]|0;
     $409 = $408&65535;
     $410 = ($409|0)==(5);
     if ($410) {
      $411 = $td;
      $412 = (($411) + 44|0);
      $413 = HEAP16[$412>>1]|0;
      $414 = $413&65535;
      $415 = ($414|0)==(32);
      if ($415) {
       $416 = $1;
       $417 = (($416) + 652|0);
       $418 = HEAP32[$417>>2]|0;
       $419 = ($418|0)==(20|0);
       if ($419) {
        $420 = $1;
        $421 = (($420) + 652|0);
        HEAP32[$421>>2] = 18;
       } else {
        label = 112;
       }
      } else {
       label = 112;
      }
     } else {
      label = 112;
     }
     if ((label|0) == 112) {
      $422 = $td;
      $423 = (($422) + 46|0);
      $424 = HEAP16[$423>>1]|0;
      $425 = $424&65535;
      $426 = ($425|0)==(5);
      if ($426) {
       label = 114;
      } else {
       $427 = $td;
       $428 = (($427) + 46|0);
       $429 = HEAP16[$428>>1]|0;
       $430 = $429&65535;
       $431 = ($430|0)==(6);
       if ($431) {
        label = 114;
       }
      }
      if ((label|0) == 114) {
       $432 = $td;
       $433 = (($432) + 44|0);
       $434 = HEAP16[$433>>1]|0;
       $435 = $434&65535;
       $436 = ($435|0)==(64);
       if ($436) {
        $437 = $1;
        $438 = (($437) + 652|0);
        $439 = HEAP32[$438>>2]|0;
        $440 = ($439|0)==(21|0);
        if ($440) {
         $441 = $1;
         $442 = (($441) + 652|0);
         HEAP32[$442>>2] = 20;
        }
       }
      }
     }
     label = 210;
     break L4;
    }
   }
   label = 216;
  } else if ((($15|0) == 32997)) {
   $443 = $3;
   $arglist_current110 = HEAP32[$443>>2]|0;
   $444 = HEAP32[$arglist_current110>>2]|0;
   $arglist_next111 = (($arglist_current110) + 4|0);
   HEAP32[$443>>2] = $arglist_next111;
   $445 = $td;
   $446 = (($445) + 24|0);
   HEAP32[$446>>2] = $444;
   label = 210;
  } else if ((($15|0) == 330)) {
   $447 = $1;
   $448 = (($447) + 12|0);
   $449 = HEAP32[$448>>2]|0;
   $450 = $449 & 8192;
   $451 = ($450|0)==(0);
   if ($451) {
    $452 = $3;
    $arglist_current113 = HEAP32[$452>>2]|0;
    $453 = HEAP32[$arglist_current113>>2]|0;
    $arglist_next114 = (($arglist_current113) + 4|0);
    HEAP32[$452>>2] = $arglist_next114;
    $454 = $453&65535;
    $455 = $td;
    $456 = (($455) + 144|0);
    HEAP16[$456>>1] = $454;
    $457 = $td;
    $458 = (($457) + 148|0);
    $459 = $3;
    $arglist_current116 = HEAP32[$459>>2]|0;
    $460 = HEAP32[$arglist_current116>>2]|0;
    $arglist_next117 = (($arglist_current116) + 4|0);
    HEAP32[$459>>2] = $arglist_next117;
    $461 = $td;
    $462 = (($461) + 144|0);
    $463 = HEAP16[$462>>1]|0;
    $464 = $463&65535;
    __TIFFsetLong8Array($458,$460,$464);
   } else {
    $465 = $1;
    $466 = (($465) + 628|0);
    $467 = HEAP32[$466>>2]|0;
    $468 = $1;
    $469 = HEAP32[$468>>2]|0;
    HEAP32[$vararg_buffer118>>2] = $469;
    _TIFFErrorExt($467,296,400,$vararg_buffer118);
    $status = 0;
   }
   label = 210;
  } else if ((($15|0) == 531)) {
   $470 = $3;
   $arglist_current122 = HEAP32[$470>>2]|0;
   $471 = HEAP32[$arglist_current122>>2]|0;
   $arglist_next123 = (($arglist_current122) + 4|0);
   HEAP32[$470>>2] = $arglist_next123;
   $472 = $471&65535;
   $473 = $td;
   $474 = (($473) + 156|0);
   HEAP16[$474>>1] = $472;
   label = 210;
  } else if ((($15|0) == 530)) {
   $475 = $3;
   $arglist_current125 = HEAP32[$475>>2]|0;
   $476 = HEAP32[$arglist_current125>>2]|0;
   $arglist_next126 = (($arglist_current125) + 4|0);
   HEAP32[$475>>2] = $arglist_next126;
   $477 = $476&65535;
   $478 = $td;
   $479 = (($478) + 152|0);
   HEAP16[$479>>1] = $477;
   $480 = $3;
   $arglist_current128 = HEAP32[$480>>2]|0;
   $481 = HEAP32[$arglist_current128>>2]|0;
   $arglist_next129 = (($arglist_current128) + 4|0);
   HEAP32[$480>>2] = $arglist_next129;
   $482 = $481&65535;
   $483 = $td;
   $484 = (($483) + 152|0);
   $485 = (($484) + 2|0);
   HEAP16[$485>>1] = $482;
   label = 210;
  } else if ((($15|0) == 301)) {
   $486 = $td;
   $487 = (($486) + 58|0);
   $488 = HEAP16[$487>>1]|0;
   $489 = $488&65535;
   $490 = $td;
   $491 = (($490) + 116|0);
   $492 = HEAP16[$491>>1]|0;
   $493 = $492&65535;
   $494 = (($489) - ($493))|0;
   $495 = ($494|0)>(1);
   $496 = $495 ? 3 : 1;
   HEAP32[$v>>2] = $496;
   $i = 0;
   while(1) {
    $497 = $i;
    $498 = HEAP32[$v>>2]|0;
    $499 = ($497>>>0)<($498>>>0);
    if (!($499)) {
     break;
    }
    $500 = $i;
    $501 = $td;
    $502 = (($501) + 160|0);
    $503 = (($502) + ($500<<2)|0);
    $504 = $3;
    $arglist_current131 = HEAP32[$504>>2]|0;
    $505 = HEAP32[$arglist_current131>>2]|0;
    $arglist_next132 = (($arglist_current131) + 4|0);
    HEAP32[$504>>2] = $arglist_next132;
    $506 = $td;
    $507 = (($506) + 44|0);
    $508 = HEAP16[$507>>1]|0;
    $509 = $508&65535;
    $510 = 1 << $509;
    __TIFFsetShortArray($503,$505,$510);
    $511 = $i;
    $512 = (($511) + 1)|0;
    $i = $512;
   }
   label = 210;
  } else if ((($15|0) == 532)) {
   $513 = $td;
   $514 = (($513) + 172|0);
   $515 = $3;
   $arglist_current134 = HEAP32[$515>>2]|0;
   $516 = HEAP32[$arglist_current134>>2]|0;
   $arglist_next135 = (($arglist_current134) + 4|0);
   HEAP32[$515>>2] = $arglist_next135;
   __TIFFsetFloatArray($514,$516,6);
   label = 210;
  } else if ((($15|0) == 333)) {
   $517 = $3;
   $arglist_current137 = HEAP32[$517>>2]|0;
   $518 = HEAP32[$arglist_current137>>2]|0;
   $arglist_next138 = (($arglist_current137) + 4|0);
   HEAP32[$517>>2] = $arglist_next138;
   $519 = $518&65535;
   $520 = $519&65535;
   HEAP32[$v>>2] = $520;
   $521 = $3;
   $arglist_current140 = HEAP32[$521>>2]|0;
   $522 = HEAP32[$arglist_current140>>2]|0;
   $arglist_next141 = (($arglist_current140) + 4|0);
   HEAP32[$521>>2] = $arglist_next141;
   $s = $522;
   $523 = $1;
   $524 = HEAP32[$v>>2]|0;
   $525 = $s;
   $526 = (_checkInkNamesString($523,$524,$525)|0);
   HEAP32[$v>>2] = $526;
   $527 = HEAP32[$v>>2]|0;
   $528 = ($527>>>0)>(0);
   $529 = $528&1;
   $status = $529;
   $530 = HEAP32[$v>>2]|0;
   $531 = ($530>>>0)>(0);
   if ($531) {
    $532 = $td;
    $533 = (($532) + 180|0);
    $534 = $s;
    $535 = HEAP32[$v>>2]|0;
    __TIFFsetNString($533,$534,$535);
    $536 = HEAP32[$v>>2]|0;
    $537 = $td;
    $538 = (($537) + 176|0);
    HEAP32[$538>>2] = $536;
   }
   label = 210;
  } else if ((($15|0) == 65563)) {
   $539 = $3;
   $arglist_current143 = HEAP32[$539>>2]|0;
   $540 = HEAP32[$arglist_current143>>2]|0;
   $arglist_next144 = (($arglist_current143) + 4|0);
   HEAP32[$539>>2] = $arglist_next144;
   $541 = $540&65535;
   $542 = $541&65535;
   HEAP32[$v>>2] = $542;
   $543 = HEAP32[$v>>2]|0;
   $544 = ($543|0)==(1);
   if ($544) {
    $545 = $1;
    $546 = (($545) + 12|0);
    $547 = HEAP32[$546>>2]|0;
    $548 = $547 | 4194304;
    HEAP32[$546>>2] = $548;
   } else {
    $549 = $1;
    $550 = (($549) + 12|0);
    $551 = HEAP32[$550>>2]|0;
    $552 = $551 & -4194305;
    HEAP32[$550>>2] = $552;
   }
   label = 210;
  } else {
   $553 = $fip;
   $554 = ($553|0)==(0|0);
   if (!($554)) {
    $555 = $fip;
    $556 = (($555) + 24|0);
    $557 = HEAP16[$556>>1]|0;
    $558 = $557&65535;
    $559 = ($558|0)!=(65);
    if (!($559)) {
     $tv = 0;
     $iCustom = 0;
     while(1) {
      $574 = $iCustom;
      $575 = $td;
      $576 = (($575) + 184|0);
      $577 = HEAP32[$576>>2]|0;
      $578 = ($574|0)<($577|0);
      if (!($578)) {
       break;
      }
      $579 = $iCustom;
      $580 = $td;
      $581 = (($580) + 188|0);
      $582 = HEAP32[$581>>2]|0;
      $583 = (($582) + (($579*12)|0)|0);
      $584 = HEAP32[$583>>2]|0;
      $585 = HEAP32[$584>>2]|0;
      $586 = $2;
      $587 = ($585|0)==($586|0);
      if ($587) {
       label = 148;
       break;
      }
      $602 = $iCustom;
      $603 = (($602) + 1)|0;
      $iCustom = $603;
     }
     if ((label|0) == 148) {
      $588 = $td;
      $589 = (($588) + 188|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $iCustom;
      $592 = (($590) + (($591*12)|0)|0);
      $tv = $592;
      $593 = $tv;
      $594 = (($593) + 8|0);
      $595 = HEAP32[$594>>2]|0;
      $596 = ($595|0)!=(0|0);
      if ($596) {
       $597 = $tv;
       $598 = (($597) + 8|0);
       $599 = HEAP32[$598>>2]|0;
       __TIFFfree($599);
       $600 = $tv;
       $601 = (($600) + 8|0);
       HEAP32[$601>>2] = 0;
      }
     }
     $604 = $tv;
     $605 = ($604|0)==(0|0);
     do {
      if ($605) {
       $606 = $td;
       $607 = (($606) + 184|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = (($608) + 1)|0;
       HEAP32[$607>>2] = $609;
       $610 = $td;
       $611 = (($610) + 188|0);
       $612 = HEAP32[$611>>2]|0;
       $613 = $td;
       $614 = (($613) + 184|0);
       $615 = HEAP32[$614>>2]|0;
       $616 = ($615*12)|0;
       $617 = (__TIFFrealloc($612,$616)|0);
       $new_customValues = $617;
       $618 = $new_customValues;
       $619 = ($618|0)!=(0|0);
       if ($619) {
        $625 = $new_customValues;
        $626 = $td;
        $627 = (($626) + 188|0);
        HEAP32[$627>>2] = $625;
        $628 = $td;
        $629 = (($628) + 188|0);
        $630 = HEAP32[$629>>2]|0;
        $631 = $td;
        $632 = (($631) + 184|0);
        $633 = HEAP32[$632>>2]|0;
        $634 = (($633) - 1)|0;
        $635 = (($630) + (($634*12)|0)|0);
        $tv = $635;
        $636 = $fip;
        $637 = $tv;
        HEAP32[$637>>2] = $636;
        $638 = $tv;
        $639 = (($638) + 8|0);
        HEAP32[$639>>2] = 0;
        $640 = $tv;
        $641 = (($640) + 4|0);
        HEAP32[$641>>2] = 0;
        break;
       } else {
        $620 = $1;
        $621 = (($620) + 628|0);
        $622 = HEAP32[$621>>2]|0;
        $623 = $1;
        $624 = HEAP32[$623>>2]|0;
        HEAP32[$vararg_buffer150>>2] = $624;
        _TIFFErrorExt($622,296,432,$vararg_buffer150);
        $status = 0;
        break L4;
       }
      }
     } while(0);
     $642 = $fip;
     $643 = (($642) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = (__TIFFDataSize($644)|0);
     $tv_size = $645;
     $646 = $tv_size;
     $647 = ($646|0)==(0);
     if ($647) {
      $status = 0;
      $648 = $1;
      $649 = (($648) + 628|0);
      $650 = HEAP32[$649>>2]|0;
      $651 = $1;
      $652 = HEAP32[$651>>2]|0;
      $653 = $fip;
      $654 = (($653) + 8|0);
      $655 = HEAP32[$654>>2]|0;
      $656 = $fip;
      $657 = (($656) + 28|0);
      $658 = HEAP32[$657>>2]|0;
      HEAP32[$vararg_buffer153>>2] = $652;
      $vararg_ptr156 = (($vararg_buffer153) + 4|0);
      HEAP32[$vararg_ptr156>>2] = $655;
      $vararg_ptr157 = (($vararg_buffer153) + 8|0);
      HEAP32[$vararg_ptr157>>2] = $658;
      _TIFFErrorExt($650,296,488,$vararg_buffer153);
      break L4;
     }
     $659 = $fip;
     $660 = (($659) + 8|0);
     $661 = HEAP32[$660>>2]|0;
     $662 = ($661|0)==(2);
     if ($662) {
      $663 = $fip;
      $664 = (($663) + 27|0);
      $665 = HEAP8[$664>>0]|0;
      $666 = ($665<<24>>24)!=(0);
      do {
       if ($666) {
        $667 = $fip;
        $668 = (($667) + 6|0);
        $669 = HEAP16[$668>>1]|0;
        $670 = $669 << 16 >> 16;
        $671 = ($670|0)==(-3);
        if ($671) {
         $672 = $3;
         $arglist_current159 = HEAP32[$672>>2]|0;
         $673 = HEAP32[$arglist_current159>>2]|0;
         $arglist_next160 = (($arglist_current159) + 4|0);
         HEAP32[$672>>2] = $arglist_next160;
         $ma = $673;
         $674 = $3;
         $arglist_current162 = HEAP32[$674>>2]|0;
         $675 = HEAP32[$arglist_current162>>2]|0;
         $arglist_next163 = (($arglist_current162) + 4|0);
         HEAP32[$674>>2] = $arglist_next163;
         $mb = $675;
         break;
        } else {
         ___assert_fail((520|0),(160|0),521,(560|0));
         // unreachable;
        }
       } else {
        $676 = $3;
        $arglist_current165 = HEAP32[$676>>2]|0;
        $677 = HEAP32[$arglist_current165>>2]|0;
        $arglist_next166 = (($arglist_current165) + 4|0);
        HEAP32[$676>>2] = $arglist_next166;
        $mb = $677;
        $678 = $mb;
        $679 = (_strlen(($678|0))|0);
        $680 = (($679) + 1)|0;
        $ma = $680;
       }
      } while(0);
      $681 = $ma;
      $682 = $tv;
      $683 = (($682) + 4|0);
      HEAP32[$683>>2] = $681;
      $684 = $tv;
      $685 = (($684) + 8|0);
      $686 = $mb;
      $687 = $ma;
      _setByteArray($685,$686,$687,1);
     } else {
      $688 = $fip;
      $689 = (($688) + 27|0);
      $690 = HEAP8[$689>>0]|0;
      $691 = ($690<<24>>24)!=(0);
      if ($691) {
       $692 = $fip;
       $693 = (($692) + 6|0);
       $694 = HEAP16[$693>>1]|0;
       $695 = $694 << 16 >> 16;
       $696 = ($695|0)==(-3);
       if ($696) {
        $697 = $3;
        $arglist_current168 = HEAP32[$697>>2]|0;
        $698 = HEAP32[$arglist_current168>>2]|0;
        $arglist_next169 = (($arglist_current168) + 4|0);
        HEAP32[$697>>2] = $arglist_next169;
        $699 = $tv;
        $700 = (($699) + 4|0);
        HEAP32[$700>>2] = $698;
       } else {
        $701 = $3;
        $arglist_current171 = HEAP32[$701>>2]|0;
        $702 = HEAP32[$arglist_current171>>2]|0;
        $arglist_next172 = (($arglist_current171) + 4|0);
        HEAP32[$701>>2] = $arglist_next172;
        $703 = $tv;
        $704 = (($703) + 4|0);
        HEAP32[$704>>2] = $702;
       }
      } else {
       $705 = $fip;
       $706 = (($705) + 6|0);
       $707 = HEAP16[$706>>1]|0;
       $708 = $707 << 16 >> 16;
       $709 = ($708|0)==(-1);
       if ($709) {
        label = 173;
       } else {
        $710 = $fip;
        $711 = (($710) + 6|0);
        $712 = HEAP16[$711>>1]|0;
        $713 = $712 << 16 >> 16;
        $714 = ($713|0)==(-3);
        if ($714) {
         label = 173;
        } else {
         $717 = $fip;
         $718 = (($717) + 6|0);
         $719 = HEAP16[$718>>1]|0;
         $720 = $719 << 16 >> 16;
         $721 = ($720|0)==(-2);
         if ($721) {
          $722 = $td;
          $723 = (($722) + 58|0);
          $724 = HEAP16[$723>>1]|0;
          $725 = $724&65535;
          $726 = $tv;
          $727 = (($726) + 4|0);
          HEAP32[$727>>2] = $725;
         } else {
          $728 = $fip;
          $729 = (($728) + 6|0);
          $730 = HEAP16[$729>>1]|0;
          $731 = $730 << 16 >> 16;
          $732 = $tv;
          $733 = (($732) + 4|0);
          HEAP32[$733>>2] = $731;
         }
        }
       }
       if ((label|0) == 173) {
        $715 = $tv;
        $716 = (($715) + 4|0);
        HEAP32[$716>>2] = 1;
       }
      }
      $734 = $tv;
      $735 = (($734) + 4|0);
      $736 = HEAP32[$735>>2]|0;
      $737 = ($736|0)==(0);
      if ($737) {
       $status = 0;
       $738 = $1;
       $739 = (($738) + 628|0);
       $740 = HEAP32[$739>>2]|0;
       $741 = $1;
       $742 = HEAP32[$741>>2]|0;
       $743 = $fip;
       $744 = (($743) + 28|0);
       $745 = HEAP32[$744>>2]|0;
       $746 = $fip;
       $747 = (($746) + 8|0);
       $748 = HEAP32[$747>>2]|0;
       $749 = $fip;
       $750 = (($749) + 6|0);
       $751 = HEAP16[$750>>1]|0;
       $752 = $751 << 16 >> 16;
       $753 = $fip;
       $754 = (($753) + 27|0);
       $755 = HEAP8[$754>>0]|0;
       $756 = $755&255;
       HEAP32[$vararg_buffer173>>2] = $742;
       $vararg_ptr176 = (($vararg_buffer173) + 4|0);
       HEAP32[$vararg_ptr176>>2] = $745;
       $vararg_ptr177 = (($vararg_buffer173) + 8|0);
       HEAP32[$vararg_ptr177>>2] = $748;
       $vararg_ptr178 = (($vararg_buffer173) + 12|0);
       HEAP32[$vararg_ptr178>>2] = $752;
       $vararg_ptr179 = (($vararg_buffer173) + 16|0);
       HEAP32[$vararg_ptr179>>2] = $756;
       _TIFFErrorExt($740,296,576,$vararg_buffer173);
       break L4;
      }
      $757 = $1;
      $758 = $tv;
      $759 = (($758) + 4|0);
      $760 = HEAP32[$759>>2]|0;
      $761 = $tv_size;
      $762 = (__TIFFCheckMalloc($757,$760,$761,640)|0);
      $763 = $tv;
      $764 = (($763) + 8|0);
      HEAP32[$764>>2] = $762;
      $765 = $tv;
      $766 = (($765) + 8|0);
      $767 = HEAP32[$766>>2]|0;
      $768 = ($767|0)!=(0|0);
      if (!($768)) {
       $status = 0;
       break L4;
      }
      $769 = $fip;
      $770 = HEAP32[$769>>2]|0;
      $771 = ($770|0)==(336);
      if ($771) {
       $772 = $fip;
       $773 = (($772) + 28|0);
       $774 = HEAP32[$773>>2]|0;
       $775 = (_strcmp($774,264)|0);
       $776 = ($775|0)==(0);
       if ($776) {
        $777 = $3;
        $arglist_current181 = HEAP32[$777>>2]|0;
        $778 = HEAP32[$arglist_current181>>2]|0;
        $arglist_next182 = (($arglist_current181) + 4|0);
        HEAP32[$777>>2] = $arglist_next182;
        $779 = $778&65535;
        HEAP16[$v1>>1] = $779;
        $780 = $3;
        $arglist_current184 = HEAP32[$780>>2]|0;
        $781 = HEAP32[$arglist_current184>>2]|0;
        $arglist_next185 = (($arglist_current184) + 4|0);
        HEAP32[$780>>2] = $arglist_next185;
        $782 = $781&65535;
        $783 = (($v1) + 2|0);
        HEAP16[$783>>1] = $782;
        $784 = $tv;
        $785 = (($784) + 8|0);
        $786 = HEAP32[$785>>2]|0;
        __TIFFmemcpy($786,$v1,4);
       } else {
        label = 186;
       }
      } else {
       label = 186;
      }
      if ((label|0) == 186) {
       $787 = $fip;
       $788 = (($787) + 27|0);
       $789 = HEAP8[$788>>0]|0;
       $790 = $789&255;
       $791 = ($790|0)!=(0);
       if ($791) {
        label = 191;
       } else {
        $792 = $fip;
        $793 = (($792) + 6|0);
        $794 = HEAP16[$793>>1]|0;
        $795 = $794 << 16 >> 16;
        $796 = ($795|0)==(-1);
        if ($796) {
         label = 191;
        } else {
         $797 = $fip;
         $798 = (($797) + 6|0);
         $799 = HEAP16[$798>>1]|0;
         $800 = $799 << 16 >> 16;
         $801 = ($800|0)==(-3);
         if ($801) {
          label = 191;
         } else {
          $802 = $fip;
          $803 = (($802) + 6|0);
          $804 = HEAP16[$803>>1]|0;
          $805 = $804 << 16 >> 16;
          $806 = ($805|0)==(-2);
          if ($806) {
           label = 191;
          } else {
           $807 = $tv;
           $808 = (($807) + 4|0);
           $809 = HEAP32[$808>>2]|0;
           $810 = ($809|0)>(1);
           if ($810) {
            label = 191;
           } else {
            $821 = $tv;
            $822 = (($821) + 8|0);
            $823 = HEAP32[$822>>2]|0;
            $val = $823;
            $824 = $tv;
            $825 = (($824) + 4|0);
            $826 = HEAP32[$825>>2]|0;
            $827 = ($826|0)==(1);
            if (!($827)) {
             ___assert_fail((280|0),(160|0),589,(560|0));
             // unreachable;
            }
            $828 = $fip;
            $829 = (($828) + 8|0);
            $830 = HEAP32[$829>>2]|0;
            do {
             switch ($830|0) {
             case 7: case 1:  {
              $831 = $3;
              $arglist_current190 = HEAP32[$831>>2]|0;
              $832 = HEAP32[$arglist_current190>>2]|0;
              $arglist_next191 = (($arglist_current190) + 4|0);
              HEAP32[$831>>2] = $arglist_next191;
              $833 = $832&255;
              HEAP8[$v2>>0] = $833;
              $834 = $val;
              $835 = $tv_size;
              __TIFFmemcpy($834,$v2,$835);
              break;
             }
             case 6:  {
              $836 = $3;
              $arglist_current193 = HEAP32[$836>>2]|0;
              $837 = HEAP32[$arglist_current193>>2]|0;
              $arglist_next194 = (($arglist_current193) + 4|0);
              HEAP32[$836>>2] = $arglist_next194;
              $838 = $837&255;
              HEAP8[$v3>>0] = $838;
              $839 = $val;
              $840 = $tv_size;
              __TIFFmemcpy($839,$v3,$840);
              break;
             }
             case 3:  {
              $841 = $3;
              $arglist_current196 = HEAP32[$841>>2]|0;
              $842 = HEAP32[$arglist_current196>>2]|0;
              $arglist_next197 = (($arglist_current196) + 4|0);
              HEAP32[$841>>2] = $arglist_next197;
              $843 = $842&65535;
              HEAP16[$v4>>1] = $843;
              $844 = $val;
              $845 = $tv_size;
              __TIFFmemcpy($844,$v4,$845);
              break;
             }
             case 8:  {
              $846 = $3;
              $arglist_current199 = HEAP32[$846>>2]|0;
              $847 = HEAP32[$arglist_current199>>2]|0;
              $arglist_next200 = (($arglist_current199) + 4|0);
              HEAP32[$846>>2] = $arglist_next200;
              $848 = $847&65535;
              HEAP16[$v5>>1] = $848;
              $849 = $val;
              $850 = $tv_size;
              __TIFFmemcpy($849,$v5,$850);
              break;
             }
             case 13: case 4:  {
              $851 = $3;
              $arglist_current202 = HEAP32[$851>>2]|0;
              $852 = HEAP32[$arglist_current202>>2]|0;
              $arglist_next203 = (($arglist_current202) + 4|0);
              HEAP32[$851>>2] = $arglist_next203;
              HEAP32[$v6>>2] = $852;
              $853 = $val;
              $854 = $tv_size;
              __TIFFmemcpy($853,$v6,$854);
              break;
             }
             case 9:  {
              $855 = $3;
              $arglist_current205 = HEAP32[$855>>2]|0;
              $856 = HEAP32[$arglist_current205>>2]|0;
              $arglist_next206 = (($arglist_current205) + 4|0);
              HEAP32[$855>>2] = $arglist_next206;
              HEAP32[$v7>>2] = $856;
              $857 = $val;
              $858 = $tv_size;
              __TIFFmemcpy($857,$v7,$858);
              break;
             }
             case 18: case 16:  {
              $859 = $3;
              $arglist_current208 = HEAP32[$859>>2]|0;
              $860 = $arglist_current208;
              $861 = $860;
              $862 = HEAP32[$861>>2]|0;
              $863 = (($860) + 4)|0;
              $864 = $863;
              $865 = HEAP32[$864>>2]|0;
              $arglist_next209 = (($arglist_current208) + 8|0);
              HEAP32[$859>>2] = $arglist_next209;
              $866 = $v8;
              $867 = $866;
              HEAP32[$867>>2] = $862;
              $868 = (($866) + 4)|0;
              $869 = $868;
              HEAP32[$869>>2] = $865;
              $870 = $val;
              $871 = $tv_size;
              __TIFFmemcpy($870,$v8,$871);
              break;
             }
             case 17:  {
              $872 = $3;
              $arglist_current211 = HEAP32[$872>>2]|0;
              $873 = $arglist_current211;
              $874 = $873;
              $875 = HEAP32[$874>>2]|0;
              $876 = (($873) + 4)|0;
              $877 = $876;
              $878 = HEAP32[$877>>2]|0;
              $arglist_next212 = (($arglist_current211) + 8|0);
              HEAP32[$872>>2] = $arglist_next212;
              $879 = $v9;
              $880 = $879;
              HEAP32[$880>>2] = $875;
              $881 = (($879) + 4)|0;
              $882 = $881;
              HEAP32[$882>>2] = $878;
              $883 = $val;
              $884 = $tv_size;
              __TIFFmemcpy($883,$v9,$884);
              break;
             }
             case 11: case 10: case 5:  {
              $885 = $3;
              $arglist_current214 = HEAP32[$885>>2]|0;
              HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current214>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current214+4>>2];$886 = +HEAPF64[tempDoublePtr>>3];
              $arglist_next215 = (($arglist_current214) + 8|0);
              HEAP32[$885>>2] = $arglist_next215;
              $887 = $886;
              HEAPF32[$v10>>2] = $887;
              $888 = $val;
              $889 = $tv_size;
              __TIFFmemcpy($888,$v10,$889);
              break;
             }
             case 12:  {
              $890 = $3;
              $arglist_current217 = HEAP32[$890>>2]|0;
              HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current217>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current217+4>>2];$891 = +HEAPF64[tempDoublePtr>>3];
              $arglist_next218 = (($arglist_current217) + 8|0);
              HEAP32[$890>>2] = $arglist_next218;
              HEAPF64[$v11>>3] = $891;
              $892 = $val;
              $893 = $tv_size;
              __TIFFmemcpy($892,$v11,$893);
              break;
             }
             default: {
              $894 = $val;
              $895 = $tv_size;
              __TIFFmemset($894,0,$895);
              $status = 0;
             }
             }
            } while(0);
           }
          }
         }
        }
       }
       if ((label|0) == 191) {
        $811 = $tv;
        $812 = (($811) + 8|0);
        $813 = HEAP32[$812>>2]|0;
        $814 = $3;
        $arglist_current187 = HEAP32[$814>>2]|0;
        $815 = HEAP32[$arglist_current187>>2]|0;
        $arglist_next188 = (($arglist_current187) + 4|0);
        HEAP32[$814>>2] = $arglist_next188;
        $816 = $tv;
        $817 = (($816) + 4|0);
        $818 = HEAP32[$817>>2]|0;
        $819 = $tv_size;
        $820 = Math_imul($818, $819)|0;
        __TIFFmemcpy($813,$815,$820);
       }
      }
     }
     label = 210;
     break L4;
    }
   }
   $560 = $1;
   $561 = (($560) + 628|0);
   $562 = HEAP32[$561>>2]|0;
   $563 = $1;
   $564 = HEAP32[$563>>2]|0;
   $565 = $2;
   $566 = ($565>>>0)>(65535);
   $567 = $566 ? 240 : 248;
   $568 = $fip;
   $569 = ($568|0)!=(0|0);
   if ($569) {
    $570 = $fip;
    $571 = (($570) + 28|0);
    $572 = HEAP32[$571>>2]|0;
    $573 = $572;
   } else {
    $573 = 256;
   }
   HEAP32[$vararg_buffer145>>2] = $564;
   $vararg_ptr148 = (($vararg_buffer145) + 4|0);
   HEAP32[$vararg_ptr148>>2] = $567;
   $vararg_ptr149 = (($vararg_buffer145) + 8|0);
   HEAP32[$vararg_ptr149>>2] = $573;
   _TIFFErrorExt($562,296,192,$vararg_buffer145);
   $status = 0;
   label = 210;
  }
 } while(0);
 if ((label|0) == 210) {
  $896 = $status;
  $897 = ($896|0)!=(0);
  if ($897) {
   $898 = $1;
   $899 = $2;
   $900 = (_TIFFFieldWithTag($898,$899)|0);
   $fip12 = $900;
   $901 = $fip12;
   $902 = ($901|0)!=(0|0);
   if ($902) {
    $903 = $fip12;
    $904 = (($903) + 24|0);
    $905 = HEAP16[$904>>1]|0;
    $906 = $905&65535;
    $907 = $906 & 31;
    $908 = 1 << $907;
    $909 = $fip12;
    $910 = (($909) + 24|0);
    $911 = HEAP16[$910>>1]|0;
    $912 = $911&65535;
    $913 = (($912|0) / 32)&-1;
    $914 = $1;
    $915 = (($914) + 40|0);
    $916 = (($915) + ($913<<2)|0);
    $917 = HEAP32[$916>>2]|0;
    $918 = $917 | $908;
    HEAP32[$916>>2] = $918;
   }
   $919 = $1;
   $920 = (($919) + 12|0);
   $921 = HEAP32[$920>>2]|0;
   $922 = $921 | 8;
   HEAP32[$920>>2] = $922;
  }
 }
 else if ((label|0) == 216) {
  $924 = $1;
  $925 = $2;
  $926 = (_TIFFFieldWithTag($924,$925)|0);
  $fip13 = $926;
  $927 = $1;
  $928 = (($927) + 628|0);
  $929 = HEAP32[$928>>2]|0;
  $930 = $1;
  $931 = HEAP32[$930>>2]|0;
  $932 = HEAP32[$v>>2]|0;
  $933 = $fip13;
  $934 = ($933|0)!=(0|0);
  if ($934) {
   $935 = $fip13;
   $936 = (($935) + 28|0);
   $937 = HEAP32[$936>>2]|0;
   $938 = $937;
  } else {
   $938 = 256;
  }
  HEAP32[$vararg_buffer219>>2] = $931;
  $vararg_ptr222 = (($vararg_buffer219) + 4|0);
  HEAP32[$vararg_ptr222>>2] = $932;
  $vararg_ptr223 = (($vararg_buffer219) + 8|0);
  HEAP32[$vararg_ptr223>>2] = $938;
  _TIFFErrorExt($929,296,672,$vararg_buffer219);
  $0 = 0;
  $954 = $0;
  STACKTOP = sp;return ($954|0);
 }
 else if ((label|0) == 220) {
  $939 = $1;
  $940 = $2;
  $941 = (_TIFFFieldWithTag($939,$940)|0);
  $fip14 = $941;
  $942 = $1;
  $943 = (($942) + 628|0);
  $944 = HEAP32[$943>>2]|0;
  $945 = $1;
  $946 = HEAP32[$945>>2]|0;
  $947 = $v32;
  $948 = $fip14;
  $949 = ($948|0)!=(0|0);
  if ($949) {
   $950 = $fip14;
   $951 = (($950) + 28|0);
   $952 = HEAP32[$951>>2]|0;
   $953 = $952;
  } else {
   $953 = 256;
  }
  HEAP32[$vararg_buffer224>>2] = $946;
  $vararg_ptr227 = (($vararg_buffer224) + 4|0);
  HEAP32[$vararg_ptr227>>2] = $947;
  $vararg_ptr228 = (($vararg_buffer224) + 8|0);
  HEAP32[$vararg_ptr228>>2] = $953;
  _TIFFErrorExt($944,296,672,$vararg_buffer224);
  $0 = 0;
  $954 = $0;
  STACKTOP = sp;return ($954|0);
 }
 $923 = $status;
 $0 = $923;
 $954 = $0;
 STACKTOP = sp;return ($954|0);
}
function __TIFFVGetField($tif,$tag,$ap) {
 $tif = $tif|0;
 $tag = $tag|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0.0, $543 = 0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current101 = 0, $arglist_current104 = 0, $arglist_current107 = 0, $arglist_current11 = 0, $arglist_current110 = 0, $arglist_current113 = 0, $arglist_current116 = 0;
 var $arglist_current119 = 0, $arglist_current122 = 0, $arglist_current125 = 0, $arglist_current128 = 0, $arglist_current131 = 0, $arglist_current134 = 0, $arglist_current137 = 0, $arglist_current14 = 0, $arglist_current140 = 0, $arglist_current143 = 0, $arglist_current146 = 0, $arglist_current149 = 0, $arglist_current152 = 0, $arglist_current155 = 0, $arglist_current158 = 0, $arglist_current163 = 0, $arglist_current166 = 0, $arglist_current169 = 0, $arglist_current17 = 0, $arglist_current172 = 0;
 var $arglist_current175 = 0, $arglist_current178 = 0, $arglist_current181 = 0, $arglist_current184 = 0, $arglist_current187 = 0, $arglist_current190 = 0, $arglist_current193 = 0, $arglist_current196 = 0, $arglist_current199 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current202 = 0, $arglist_current205 = 0, $arglist_current208 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0;
 var $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current65 = 0, $arglist_current68 = 0, $arglist_current71 = 0, $arglist_current74 = 0, $arglist_current77 = 0, $arglist_current8 = 0, $arglist_current80 = 0, $arglist_current83 = 0, $arglist_current86 = 0, $arglist_current89 = 0, $arglist_current92 = 0;
 var $arglist_current95 = 0, $arglist_current98 = 0, $arglist_next = 0, $arglist_next102 = 0, $arglist_next105 = 0, $arglist_next108 = 0, $arglist_next111 = 0, $arglist_next114 = 0, $arglist_next117 = 0, $arglist_next12 = 0, $arglist_next120 = 0, $arglist_next123 = 0, $arglist_next126 = 0, $arglist_next129 = 0, $arglist_next132 = 0, $arglist_next135 = 0, $arglist_next138 = 0, $arglist_next141 = 0, $arglist_next144 = 0, $arglist_next147 = 0;
 var $arglist_next15 = 0, $arglist_next150 = 0, $arglist_next153 = 0, $arglist_next156 = 0, $arglist_next159 = 0, $arglist_next164 = 0, $arglist_next167 = 0, $arglist_next170 = 0, $arglist_next173 = 0, $arglist_next176 = 0, $arglist_next179 = 0, $arglist_next18 = 0, $arglist_next182 = 0, $arglist_next185 = 0, $arglist_next188 = 0, $arglist_next191 = 0, $arglist_next194 = 0, $arglist_next197 = 0, $arglist_next200 = 0, $arglist_next203 = 0;
 var $arglist_next206 = 0, $arglist_next209 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next66 = 0;
 var $arglist_next69 = 0, $arglist_next72 = 0, $arglist_next75 = 0, $arglist_next78 = 0, $arglist_next81 = 0, $arglist_next84 = 0, $arglist_next87 = 0, $arglist_next9 = 0, $arglist_next90 = 0, $arglist_next93 = 0, $arglist_next96 = 0, $arglist_next99 = 0, $fip = 0, $i = 0, $i1 = 0, $i3 = 0, $ret_val = 0, $standard_tag = 0, $td = 0, $tv = 0;
 var $v = 0.0, $v2 = 0.0, $val = 0, $vararg_buffer = 0, $vararg_ptr160 = 0, $vararg_ptr161 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $0 = $tif;
 $1 = $tag;
 $2 = $ap;
 $3 = $0;
 $4 = (($3) + 40|0);
 $td = $4;
 $ret_val = 1;
 $5 = $1;
 $standard_tag = $5;
 $6 = $0;
 $7 = $1;
 $8 = (_TIFFFindField($6,$7,0)|0);
 $fip = $8;
 $9 = $fip;
 $10 = (($9) + 24|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ($12|0)==(65);
 if ($13) {
  $standard_tag = 0;
 }
 $14 = $standard_tag;
 do {
  if ((($14|0) == 256)) {
   $20 = $td;
   $21 = (($20) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $2;
   $arglist_current2 = HEAP32[$23>>2]|0;
   $24 = HEAP32[$arglist_current2>>2]|0;
   $arglist_next3 = (($arglist_current2) + 4|0);
   HEAP32[$23>>2] = $arglist_next3;
   HEAP32[$24>>2] = $22;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 257)) {
   $25 = $td;
   $26 = (($25) + 20|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $2;
   $arglist_current5 = HEAP32[$28>>2]|0;
   $29 = HEAP32[$arglist_current5>>2]|0;
   $arglist_next6 = (($arglist_current5) + 4|0);
   HEAP32[$28>>2] = $arglist_next6;
   HEAP32[$29>>2] = $27;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 277)) {
   $60 = $td;
   $61 = (($60) + 58|0);
   $62 = HEAP16[$61>>1]|0;
   $63 = $2;
   $arglist_current26 = HEAP32[$63>>2]|0;
   $64 = HEAP32[$arglist_current26>>2]|0;
   $arglist_next27 = (($arglist_current26) + 4|0);
   HEAP32[$63>>2] = $arglist_next27;
   HEAP16[$64>>1] = $62;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 254)) {
   $15 = $td;
   $16 = (($15) + 40|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $2;
   $arglist_current = HEAP32[$18>>2]|0;
   $19 = HEAP32[$arglist_current>>2]|0;
   $arglist_next = (($arglist_current) + 4|0);
   HEAP32[$18>>2] = $arglist_next;
   HEAP32[$19>>2] = $17;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 266)) {
   $50 = $td;
   $51 = (($50) + 54|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $2;
   $arglist_current20 = HEAP32[$53>>2]|0;
   $54 = HEAP32[$arglist_current20>>2]|0;
   $arglist_next21 = (($arglist_current20) + 4|0);
   HEAP32[$53>>2] = $arglist_next21;
   HEAP16[$54>>1] = $52;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 274)) {
   $55 = $td;
   $56 = (($55) + 56|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $2;
   $arglist_current23 = HEAP32[$58>>2]|0;
   $59 = HEAP32[$arglist_current23>>2]|0;
   $arglist_next24 = (($arglist_current23) + 4|0);
   HEAP32[$58>>2] = $arglist_next24;
   HEAP16[$59>>1] = $57;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 263)) {
   $45 = $td;
   $46 = (($45) + 52|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $2;
   $arglist_current17 = HEAP32[$48>>2]|0;
   $49 = HEAP32[$arglist_current17>>2]|0;
   $arglist_next18 = (($arglist_current17) + 4|0);
   HEAP32[$48>>2] = $arglist_next18;
   HEAP16[$49>>1] = $47;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 262)) {
   $40 = $td;
   $41 = (($40) + 50|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $2;
   $arglist_current14 = HEAP32[$43>>2]|0;
   $44 = HEAP32[$arglist_current14>>2]|0;
   $arglist_next15 = (($arglist_current14) + 4|0);
   HEAP32[$43>>2] = $arglist_next15;
   HEAP16[$44>>1] = $42;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 258)) {
   $30 = $td;
   $31 = (($30) + 44|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $2;
   $arglist_current8 = HEAP32[$33>>2]|0;
   $34 = HEAP32[$arglist_current8>>2]|0;
   $arglist_next9 = (($arglist_current8) + 4|0);
   HEAP32[$33>>2] = $arglist_next9;
   HEAP16[$34>>1] = $32;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 259)) {
   $35 = $td;
   $36 = (($35) + 48|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $2;
   $arglist_current11 = HEAP32[$38>>2]|0;
   $39 = HEAP32[$arglist_current11>>2]|0;
   $arglist_next12 = (($arglist_current11) + 4|0);
   HEAP32[$38>>2] = $arglist_next12;
   HEAP16[$39>>1] = $37;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 530)) {
   $323 = $td;
   $324 = (($323) + 152|0);
   $325 = HEAP16[$324>>1]|0;
   $326 = $2;
   $arglist_current140 = HEAP32[$326>>2]|0;
   $327 = HEAP32[$arglist_current140>>2]|0;
   $arglist_next141 = (($arglist_current140) + 4|0);
   HEAP32[$326>>2] = $arglist_next141;
   HEAP16[$327>>1] = $325;
   $328 = $td;
   $329 = (($328) + 152|0);
   $330 = (($329) + 2|0);
   $331 = HEAP16[$330>>1]|0;
   $332 = $2;
   $arglist_current143 = HEAP32[$332>>2]|0;
   $333 = HEAP32[$arglist_current143>>2]|0;
   $arglist_next144 = (($arglist_current143) + 4|0);
   HEAP32[$332>>2] = $arglist_next144;
   HEAP16[$333>>1] = $331;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 301)) {
   $334 = $td;
   $335 = (($334) + 160|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = $2;
   $arglist_current146 = HEAP32[$337>>2]|0;
   $338 = HEAP32[$arglist_current146>>2]|0;
   $arglist_next147 = (($arglist_current146) + 4|0);
   HEAP32[$337>>2] = $arglist_next147;
   HEAP32[$338>>2] = $336;
   $339 = $td;
   $340 = (($339) + 58|0);
   $341 = HEAP16[$340>>1]|0;
   $342 = $341&65535;
   $343 = $td;
   $344 = (($343) + 116|0);
   $345 = HEAP16[$344>>1]|0;
   $346 = $345&65535;
   $347 = (($342) - ($346))|0;
   $348 = ($347|0)>(1);
   if ($348) {
    $349 = $td;
    $350 = (($349) + 160|0);
    $351 = (($350) + 4|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = $2;
    $arglist_current149 = HEAP32[$353>>2]|0;
    $354 = HEAP32[$arglist_current149>>2]|0;
    $arglist_next150 = (($arglist_current149) + 4|0);
    HEAP32[$353>>2] = $arglist_next150;
    HEAP32[$354>>2] = $352;
    $355 = $td;
    $356 = (($355) + 160|0);
    $357 = (($356) + 8|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = $2;
    $arglist_current152 = HEAP32[$359>>2]|0;
    $360 = HEAP32[$arglist_current152>>2]|0;
    $arglist_next153 = (($arglist_current152) + 4|0);
    HEAP32[$359>>2] = $arglist_next153;
    HEAP32[$360>>2] = $358;
   }
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 532)) {
   $361 = $td;
   $362 = (($361) + 172|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = $2;
   $arglist_current155 = HEAP32[$364>>2]|0;
   $365 = HEAP32[$arglist_current155>>2]|0;
   $arglist_next156 = (($arglist_current155) + 4|0);
   HEAP32[$364>>2] = $arglist_next156;
   HEAP32[$365>>2] = $363;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 333)) {
   $366 = $td;
   $367 = (($366) + 180|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = $2;
   $arglist_current158 = HEAP32[$369>>2]|0;
   $370 = HEAP32[$arglist_current158>>2]|0;
   $arglist_next159 = (($arglist_current158) + 4|0);
   HEAP32[$369>>2] = $arglist_next159;
   HEAP32[$370>>2] = $368;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 278)) {
   $65 = $td;
   $66 = (($65) + 60|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $2;
   $arglist_current29 = HEAP32[$68>>2]|0;
   $69 = HEAP32[$arglist_current29>>2]|0;
   $arglist_next30 = (($arglist_current29) + 4|0);
   HEAP32[$68>>2] = $arglist_next30;
   HEAP32[$69>>2] = $67;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 280)) {
   $70 = $td;
   $71 = (($70) + 64|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $2;
   $arglist_current32 = HEAP32[$73>>2]|0;
   $74 = HEAP32[$arglist_current32>>2]|0;
   $arglist_next33 = (($arglist_current32) + 4|0);
   HEAP32[$73>>2] = $arglist_next33;
   HEAP16[$74>>1] = $72;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 281)) {
   $75 = $td;
   $76 = (($75) + 66|0);
   $77 = HEAP16[$76>>1]|0;
   $78 = $2;
   $arglist_current35 = HEAP32[$78>>2]|0;
   $79 = HEAP32[$arglist_current35>>2]|0;
   $arglist_next36 = (($arglist_current35) + 4|0);
   HEAP32[$78>>2] = $arglist_next36;
   HEAP16[$79>>1] = $77;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 340)) {
   $80 = $0;
   $81 = (($80) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $82 & 4194304;
   $84 = ($83|0)!=(0);
   if ($84) {
    $85 = $td;
    $86 = (($85) + 68|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $2;
    $arglist_current38 = HEAP32[$88>>2]|0;
    $89 = HEAP32[$arglist_current38>>2]|0;
    $arglist_next39 = (($arglist_current38) + 4|0);
    HEAP32[$88>>2] = $arglist_next39;
    HEAP32[$89>>2] = $87;
   } else {
    $90 = $td;
    $91 = (($90) + 68|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = +HEAPF64[$92>>3];
    $v = $93;
    $i = 1;
    while(1) {
     $94 = $i;
     $95 = $94&65535;
     $96 = $td;
     $97 = (($96) + 58|0);
     $98 = HEAP16[$97>>1]|0;
     $99 = $98&65535;
     $100 = ($95|0)<($99|0);
     if (!($100)) {
      break;
     }
     $101 = $i;
     $102 = $101&65535;
     $103 = $td;
     $104 = (($103) + 68|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (($105) + ($102<<3)|0);
     $107 = +HEAPF64[$106>>3];
     $108 = $v;
     $109 = $107 < $108;
     if ($109) {
      $110 = $i;
      $111 = $110&65535;
      $112 = $td;
      $113 = (($112) + 68|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = (($114) + ($111<<3)|0);
      $116 = +HEAPF64[$115>>3];
      $v = $116;
     }
     $117 = $i;
     $118 = (($117) + 1)<<16>>16;
     $i = $118;
    }
    $119 = $v;
    $120 = $2;
    $arglist_current41 = HEAP32[$120>>2]|0;
    $121 = HEAP32[$arglist_current41>>2]|0;
    $arglist_next42 = (($arglist_current41) + 4|0);
    HEAP32[$120>>2] = $arglist_next42;
    HEAPF64[$121>>3] = $119;
   }
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 341)) {
   $122 = $0;
   $123 = (($122) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $124 & 4194304;
   $126 = ($125|0)!=(0);
   if ($126) {
    $127 = $td;
    $128 = (($127) + 72|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $2;
    $arglist_current44 = HEAP32[$130>>2]|0;
    $131 = HEAP32[$arglist_current44>>2]|0;
    $arglist_next45 = (($arglist_current44) + 4|0);
    HEAP32[$130>>2] = $arglist_next45;
    HEAP32[$131>>2] = $129;
   } else {
    $132 = $td;
    $133 = (($132) + 72|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = +HEAPF64[$134>>3];
    $v2 = $135;
    $i1 = 1;
    while(1) {
     $136 = $i1;
     $137 = $136&65535;
     $138 = $td;
     $139 = (($138) + 58|0);
     $140 = HEAP16[$139>>1]|0;
     $141 = $140&65535;
     $142 = ($137|0)<($141|0);
     if (!($142)) {
      break;
     }
     $143 = $i1;
     $144 = $143&65535;
     $145 = $td;
     $146 = (($145) + 72|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (($147) + ($144<<3)|0);
     $149 = +HEAPF64[$148>>3];
     $150 = $v2;
     $151 = $149 > $150;
     if ($151) {
      $152 = $i1;
      $153 = $152&65535;
      $154 = $td;
      $155 = (($154) + 72|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = (($156) + ($153<<3)|0);
      $158 = +HEAPF64[$157>>3];
      $v2 = $158;
     }
     $159 = $i1;
     $160 = (($159) + 1)<<16>>16;
     $i1 = $160;
    }
    $161 = $v2;
    $162 = $2;
    $arglist_current47 = HEAP32[$162>>2]|0;
    $163 = HEAP32[$arglist_current47>>2]|0;
    $arglist_next48 = (($arglist_current47) + 4|0);
    HEAP32[$162>>2] = $arglist_next48;
    HEAPF64[$163>>3] = $161;
   }
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 282)) {
   $164 = $td;
   $165 = (($164) + 76|0);
   $166 = +HEAPF32[$165>>2];
   $167 = $2;
   $arglist_current50 = HEAP32[$167>>2]|0;
   $168 = HEAP32[$arglist_current50>>2]|0;
   $arglist_next51 = (($arglist_current50) + 4|0);
   HEAP32[$167>>2] = $arglist_next51;
   HEAPF32[$168>>2] = $166;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 283)) {
   $169 = $td;
   $170 = (($169) + 80|0);
   $171 = +HEAPF32[$170>>2];
   $172 = $2;
   $arglist_current53 = HEAP32[$172>>2]|0;
   $173 = HEAP32[$arglist_current53>>2]|0;
   $arglist_next54 = (($arglist_current53) + 4|0);
   HEAP32[$172>>2] = $arglist_next54;
   HEAPF32[$173>>2] = $171;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 284)) {
   $174 = $td;
   $175 = (($174) + 86|0);
   $176 = HEAP16[$175>>1]|0;
   $177 = $2;
   $arglist_current56 = HEAP32[$177>>2]|0;
   $178 = HEAP32[$arglist_current56>>2]|0;
   $arglist_next57 = (($arglist_current56) + 4|0);
   HEAP32[$177>>2] = $arglist_next57;
   HEAP16[$178>>1] = $176;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 286)) {
   $179 = $td;
   $180 = (($179) + 88|0);
   $181 = +HEAPF32[$180>>2];
   $182 = $2;
   $arglist_current59 = HEAP32[$182>>2]|0;
   $183 = HEAP32[$arglist_current59>>2]|0;
   $arglist_next60 = (($arglist_current59) + 4|0);
   HEAP32[$182>>2] = $arglist_next60;
   HEAPF32[$183>>2] = $181;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 287)) {
   $184 = $td;
   $185 = (($184) + 92|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $2;
   $arglist_current62 = HEAP32[$187>>2]|0;
   $188 = HEAP32[$arglist_current62>>2]|0;
   $arglist_next63 = (($arglist_current62) + 4|0);
   HEAP32[$187>>2] = $arglist_next63;
   HEAPF32[$188>>2] = $186;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 296)) {
   $189 = $td;
   $190 = (($189) + 84|0);
   $191 = HEAP16[$190>>1]|0;
   $192 = $2;
   $arglist_current65 = HEAP32[$192>>2]|0;
   $193 = HEAP32[$arglist_current65>>2]|0;
   $arglist_next66 = (($arglist_current65) + 4|0);
   HEAP32[$192>>2] = $arglist_next66;
   HEAP16[$193>>1] = $191;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 297)) {
   $194 = $td;
   $195 = (($194) + 96|0);
   $196 = HEAP16[$195>>1]|0;
   $197 = $2;
   $arglist_current68 = HEAP32[$197>>2]|0;
   $198 = HEAP32[$arglist_current68>>2]|0;
   $arglist_next69 = (($arglist_current68) + 4|0);
   HEAP32[$197>>2] = $arglist_next69;
   HEAP16[$198>>1] = $196;
   $199 = $td;
   $200 = (($199) + 96|0);
   $201 = (($200) + 2|0);
   $202 = HEAP16[$201>>1]|0;
   $203 = $2;
   $arglist_current71 = HEAP32[$203>>2]|0;
   $204 = HEAP32[$arglist_current71>>2]|0;
   $arglist_next72 = (($arglist_current71) + 4|0);
   HEAP32[$203>>2] = $arglist_next72;
   HEAP16[$204>>1] = $202;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 321)) {
   $205 = $td;
   $206 = (($205) + 112|0);
   $207 = HEAP16[$206>>1]|0;
   $208 = $2;
   $arglist_current74 = HEAP32[$208>>2]|0;
   $209 = HEAP32[$arglist_current74>>2]|0;
   $arglist_next75 = (($arglist_current74) + 4|0);
   HEAP32[$208>>2] = $arglist_next75;
   HEAP16[$209>>1] = $207;
   $210 = $td;
   $211 = (($210) + 112|0);
   $212 = (($211) + 2|0);
   $213 = HEAP16[$212>>1]|0;
   $214 = $2;
   $arglist_current77 = HEAP32[$214>>2]|0;
   $215 = HEAP32[$arglist_current77>>2]|0;
   $arglist_next78 = (($arglist_current77) + 4|0);
   HEAP32[$214>>2] = $arglist_next78;
   HEAP16[$215>>1] = $213;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 320)) {
   $216 = $td;
   $217 = (($216) + 100|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = $2;
   $arglist_current80 = HEAP32[$219>>2]|0;
   $220 = HEAP32[$arglist_current80>>2]|0;
   $arglist_next81 = (($arglist_current80) + 4|0);
   HEAP32[$219>>2] = $arglist_next81;
   HEAP32[$220>>2] = $218;
   $221 = $td;
   $222 = (($221) + 100|0);
   $223 = (($222) + 4|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = $2;
   $arglist_current83 = HEAP32[$225>>2]|0;
   $226 = HEAP32[$arglist_current83>>2]|0;
   $arglist_next84 = (($arglist_current83) + 4|0);
   HEAP32[$225>>2] = $arglist_next84;
   HEAP32[$226>>2] = $224;
   $227 = $td;
   $228 = (($227) + 100|0);
   $229 = (($228) + 8|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $2;
   $arglist_current86 = HEAP32[$231>>2]|0;
   $232 = HEAP32[$arglist_current86>>2]|0;
   $arglist_next87 = (($arglist_current86) + 4|0);
   HEAP32[$231>>2] = $arglist_next87;
   HEAP32[$232>>2] = $230;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 324) | (($14|0) == 273)) {
   $233 = $0;
   (__TIFFFillStriles($233)|0);
   $234 = $td;
   $235 = (($234) + 132|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = $2;
   $arglist_current89 = HEAP32[$237>>2]|0;
   $238 = HEAP32[$arglist_current89>>2]|0;
   $arglist_next90 = (($arglist_current89) + 4|0);
   HEAP32[$237>>2] = $arglist_next90;
   HEAP32[$238>>2] = $236;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 325) | (($14|0) == 279)) {
   $239 = $0;
   (__TIFFFillStriles($239)|0);
   $240 = $td;
   $241 = (($240) + 136|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = $2;
   $arglist_current92 = HEAP32[$243>>2]|0;
   $244 = HEAP32[$arglist_current92>>2]|0;
   $arglist_next93 = (($arglist_current92) + 4|0);
   HEAP32[$243>>2] = $arglist_next93;
   HEAP32[$244>>2] = $242;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 32995)) {
   $245 = $td;
   $246 = (($245) + 116|0);
   $247 = HEAP16[$246>>1]|0;
   $248 = $247&65535;
   $249 = ($248|0)==(1);
   if ($249) {
    $250 = $td;
    $251 = (($250) + 120|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = HEAP16[$252>>1]|0;
    $254 = $253&65535;
    $255 = ($254|0)==(1);
    $257 = $255;
   } else {
    $257 = 0;
   }
   $256 = $257&1;
   $258 = $256&65535;
   $259 = $2;
   $arglist_current95 = HEAP32[$259>>2]|0;
   $260 = HEAP32[$arglist_current95>>2]|0;
   $arglist_next96 = (($arglist_current95) + 4|0);
   HEAP32[$259>>2] = $arglist_next96;
   HEAP16[$260>>1] = $258;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 338)) {
   $261 = $td;
   $262 = (($261) + 116|0);
   $263 = HEAP16[$262>>1]|0;
   $264 = $2;
   $arglist_current98 = HEAP32[$264>>2]|0;
   $265 = HEAP32[$arglist_current98>>2]|0;
   $arglist_next99 = (($arglist_current98) + 4|0);
   HEAP32[$264>>2] = $arglist_next99;
   HEAP16[$265>>1] = $263;
   $266 = $td;
   $267 = (($266) + 120|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = $2;
   $arglist_current101 = HEAP32[$269>>2]|0;
   $270 = HEAP32[$arglist_current101>>2]|0;
   $arglist_next102 = (($arglist_current101) + 4|0);
   HEAP32[$269>>2] = $arglist_next102;
   HEAP32[$270>>2] = $268;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 322)) {
   $271 = $td;
   $272 = (($271) + 28|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = $2;
   $arglist_current104 = HEAP32[$274>>2]|0;
   $275 = HEAP32[$arglist_current104>>2]|0;
   $arglist_next105 = (($arglist_current104) + 4|0);
   HEAP32[$274>>2] = $arglist_next105;
   HEAP32[$275>>2] = $273;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 323)) {
   $276 = $td;
   $277 = (($276) + 32|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = $2;
   $arglist_current107 = HEAP32[$279>>2]|0;
   $280 = HEAP32[$arglist_current107>>2]|0;
   $arglist_next108 = (($arglist_current107) + 4|0);
   HEAP32[$279>>2] = $arglist_next108;
   HEAP32[$280>>2] = $278;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 32998)) {
   $281 = $td;
   $282 = (($281) + 36|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $2;
   $arglist_current110 = HEAP32[$284>>2]|0;
   $285 = HEAP32[$arglist_current110>>2]|0;
   $arglist_next111 = (($arglist_current110) + 4|0);
   HEAP32[$284>>2] = $arglist_next111;
   HEAP32[$285>>2] = $283;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 32996)) {
   $286 = $td;
   $287 = (($286) + 46|0);
   $288 = HEAP16[$287>>1]|0;
   $289 = $288&65535;
   if ((($289|0) == 1)) {
    $290 = $2;
    $arglist_current113 = HEAP32[$290>>2]|0;
    $291 = HEAP32[$arglist_current113>>2]|0;
    $arglist_next114 = (($arglist_current113) + 4|0);
    HEAP32[$290>>2] = $arglist_next114;
    HEAP16[$291>>1] = 2;
   } else if ((($289|0) == 2)) {
    $292 = $2;
    $arglist_current116 = HEAP32[$292>>2]|0;
    $293 = HEAP32[$arglist_current116>>2]|0;
    $arglist_next117 = (($arglist_current116) + 4|0);
    HEAP32[$292>>2] = $arglist_next117;
    HEAP16[$293>>1] = 1;
   } else if ((($289|0) == 3)) {
    $294 = $2;
    $arglist_current119 = HEAP32[$294>>2]|0;
    $295 = HEAP32[$arglist_current119>>2]|0;
    $arglist_next120 = (($arglist_current119) + 4|0);
    HEAP32[$294>>2] = $arglist_next120;
    HEAP16[$295>>1] = 3;
   } else if ((($289|0) == 4)) {
    $296 = $2;
    $arglist_current122 = HEAP32[$296>>2]|0;
    $297 = HEAP32[$arglist_current122>>2]|0;
    $arglist_next123 = (($arglist_current122) + 4|0);
    HEAP32[$296>>2] = $arglist_next123;
    HEAP16[$297>>1] = 0;
   }
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 339)) {
   $298 = $td;
   $299 = (($298) + 46|0);
   $300 = HEAP16[$299>>1]|0;
   $301 = $2;
   $arglist_current125 = HEAP32[$301>>2]|0;
   $302 = HEAP32[$arglist_current125>>2]|0;
   $arglist_next126 = (($arglist_current125) + 4|0);
   HEAP32[$301>>2] = $arglist_next126;
   HEAP16[$302>>1] = $300;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 32997)) {
   $303 = $td;
   $304 = (($303) + 24|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = $2;
   $arglist_current128 = HEAP32[$306>>2]|0;
   $307 = HEAP32[$arglist_current128>>2]|0;
   $arglist_next129 = (($arglist_current128) + 4|0);
   HEAP32[$306>>2] = $arglist_next129;
   HEAP32[$307>>2] = $305;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 330)) {
   $308 = $td;
   $309 = (($308) + 144|0);
   $310 = HEAP16[$309>>1]|0;
   $311 = $2;
   $arglist_current131 = HEAP32[$311>>2]|0;
   $312 = HEAP32[$arglist_current131>>2]|0;
   $arglist_next132 = (($arglist_current131) + 4|0);
   HEAP32[$311>>2] = $arglist_next132;
   HEAP16[$312>>1] = $310;
   $313 = $td;
   $314 = (($313) + 148|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = $2;
   $arglist_current134 = HEAP32[$316>>2]|0;
   $317 = HEAP32[$arglist_current134>>2]|0;
   $arglist_next135 = (($arglist_current134) + 4|0);
   HEAP32[$316>>2] = $arglist_next135;
   HEAP32[$317>>2] = $315;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else if ((($14|0) == 531)) {
   $318 = $td;
   $319 = (($318) + 156|0);
   $320 = HEAP16[$319>>1]|0;
   $321 = $2;
   $arglist_current137 = HEAP32[$321>>2]|0;
   $322 = HEAP32[$arglist_current137>>2]|0;
   $arglist_next138 = (($arglist_current137) + 4|0);
   HEAP32[$321>>2] = $arglist_next138;
   HEAP16[$322>>1] = $320;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  } else {
   $371 = $fip;
   $372 = ($371|0)==(0|0);
   if (!($372)) {
    $373 = $fip;
    $374 = (($373) + 24|0);
    $375 = HEAP16[$374>>1]|0;
    $376 = $375&65535;
    $377 = ($376|0)!=(65);
    if (!($377)) {
     $ret_val = 0;
     $i3 = 0;
     while(1) {
      $392 = $i3;
      $393 = $td;
      $394 = (($393) + 184|0);
      $395 = HEAP32[$394>>2]|0;
      $396 = ($392|0)<($395|0);
      if (!($396)) {
       break;
      }
      $397 = $td;
      $398 = (($397) + 188|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = $i3;
      $401 = (($399) + (($400*12)|0)|0);
      $tv = $401;
      $402 = $tv;
      $403 = HEAP32[$402>>2]|0;
      $404 = HEAP32[$403>>2]|0;
      $405 = $1;
      $406 = ($404|0)!=($405|0);
      if (!($406)) {
       label = 81;
       break;
      }
      $549 = $i3;
      $550 = (($549) + 1)|0;
      $i3 = $550;
     }
     if ((label|0) == 81) {
      $407 = $fip;
      $408 = (($407) + 27|0);
      $409 = HEAP8[$408>>0]|0;
      $410 = ($409<<24>>24)!=(0);
      if ($410) {
       $411 = $fip;
       $412 = (($411) + 4|0);
       $413 = HEAP16[$412>>1]|0;
       $414 = $413 << 16 >> 16;
       $415 = ($414|0)==(-3);
       if ($415) {
        $416 = $tv;
        $417 = (($416) + 4|0);
        $418 = HEAP32[$417>>2]|0;
        $419 = $2;
        $arglist_current163 = HEAP32[$419>>2]|0;
        $420 = HEAP32[$arglist_current163>>2]|0;
        $arglist_next164 = (($arglist_current163) + 4|0);
        HEAP32[$419>>2] = $arglist_next164;
        HEAP32[$420>>2] = $418;
       } else {
        $421 = $tv;
        $422 = (($421) + 4|0);
        $423 = HEAP32[$422>>2]|0;
        $424 = $423&65535;
        $425 = $2;
        $arglist_current166 = HEAP32[$425>>2]|0;
        $426 = HEAP32[$arglist_current166>>2]|0;
        $arglist_next167 = (($arglist_current166) + 4|0);
        HEAP32[$425>>2] = $arglist_next167;
        HEAP16[$426>>1] = $424;
       }
       $427 = $tv;
       $428 = (($427) + 8|0);
       $429 = HEAP32[$428>>2]|0;
       $430 = $2;
       $arglist_current169 = HEAP32[$430>>2]|0;
       $431 = HEAP32[$arglist_current169>>2]|0;
       $arglist_next170 = (($arglist_current169) + 4|0);
       HEAP32[$430>>2] = $arglist_next170;
       HEAP32[$431>>2] = $429;
       $ret_val = 1;
      } else {
       $432 = $fip;
       $433 = HEAP32[$432>>2]|0;
       $434 = ($433|0)==(336);
       if ($434) {
        $435 = $fip;
        $436 = (($435) + 28|0);
        $437 = HEAP32[$436>>2]|0;
        $438 = (_strcmp($437,264)|0);
        $439 = ($438|0)==(0);
        if ($439) {
         $440 = $tv;
         $441 = (($440) + 8|0);
         $442 = HEAP32[$441>>2]|0;
         $443 = HEAP16[$442>>1]|0;
         $444 = $2;
         $arglist_current172 = HEAP32[$444>>2]|0;
         $445 = HEAP32[$arglist_current172>>2]|0;
         $arglist_next173 = (($arglist_current172) + 4|0);
         HEAP32[$444>>2] = $arglist_next173;
         HEAP16[$445>>1] = $443;
         $446 = $tv;
         $447 = (($446) + 8|0);
         $448 = HEAP32[$447>>2]|0;
         $449 = (($448) + 2|0);
         $450 = HEAP16[$449>>1]|0;
         $451 = $2;
         $arglist_current175 = HEAP32[$451>>2]|0;
         $452 = HEAP32[$arglist_current175>>2]|0;
         $arglist_next176 = (($arglist_current175) + 4|0);
         HEAP32[$451>>2] = $arglist_next176;
         HEAP16[$452>>1] = $450;
         $ret_val = 1;
        } else {
         label = 89;
        }
       } else {
        label = 89;
       }
       if ((label|0) == 89) {
        $453 = $fip;
        $454 = (($453) + 8|0);
        $455 = HEAP32[$454>>2]|0;
        $456 = ($455|0)==(2);
        if ($456) {
         label = 94;
        } else {
         $457 = $fip;
         $458 = (($457) + 4|0);
         $459 = HEAP16[$458>>1]|0;
         $460 = $459 << 16 >> 16;
         $461 = ($460|0)==(-1);
         if ($461) {
          label = 94;
         } else {
          $462 = $fip;
          $463 = (($462) + 4|0);
          $464 = HEAP16[$463>>1]|0;
          $465 = $464 << 16 >> 16;
          $466 = ($465|0)==(-3);
          if ($466) {
           label = 94;
          } else {
           $467 = $fip;
           $468 = (($467) + 4|0);
           $469 = HEAP16[$468>>1]|0;
           $470 = $469 << 16 >> 16;
           $471 = ($470|0)==(-2);
           if ($471) {
            label = 94;
           } else {
            $472 = $tv;
            $473 = (($472) + 4|0);
            $474 = HEAP32[$473>>2]|0;
            $475 = ($474|0)>(1);
            if ($475) {
             label = 94;
            } else {
             $481 = $tv;
             $482 = (($481) + 8|0);
             $483 = HEAP32[$482>>2]|0;
             $val = $483;
             $484 = $tv;
             $485 = (($484) + 4|0);
             $486 = HEAP32[$485>>2]|0;
             $487 = ($486|0)==(1);
             if (!($487)) {
              ___assert_fail((280|0),(160|0),1057,(176|0));
              // unreachable;
             }
             $488 = $fip;
             $489 = (($488) + 8|0);
             $490 = HEAP32[$489>>2]|0;
             do {
              switch ($490|0) {
              case 7: case 1:  {
               $491 = $val;
               $492 = HEAP8[$491>>0]|0;
               $493 = $2;
               $arglist_current181 = HEAP32[$493>>2]|0;
               $494 = HEAP32[$arglist_current181>>2]|0;
               $arglist_next182 = (($arglist_current181) + 4|0);
               HEAP32[$493>>2] = $arglist_next182;
               HEAP8[$494>>0] = $492;
               $ret_val = 1;
               break;
              }
              case 6:  {
               $495 = $val;
               $496 = HEAP8[$495>>0]|0;
               $497 = $2;
               $arglist_current184 = HEAP32[$497>>2]|0;
               $498 = HEAP32[$arglist_current184>>2]|0;
               $arglist_next185 = (($arglist_current184) + 4|0);
               HEAP32[$497>>2] = $arglist_next185;
               HEAP8[$498>>0] = $496;
               $ret_val = 1;
               break;
              }
              case 3:  {
               $499 = $val;
               $500 = HEAP16[$499>>1]|0;
               $501 = $2;
               $arglist_current187 = HEAP32[$501>>2]|0;
               $502 = HEAP32[$arglist_current187>>2]|0;
               $arglist_next188 = (($arglist_current187) + 4|0);
               HEAP32[$501>>2] = $arglist_next188;
               HEAP16[$502>>1] = $500;
               $ret_val = 1;
               break;
              }
              case 8:  {
               $503 = $val;
               $504 = HEAP16[$503>>1]|0;
               $505 = $2;
               $arglist_current190 = HEAP32[$505>>2]|0;
               $506 = HEAP32[$arglist_current190>>2]|0;
               $arglist_next191 = (($arglist_current190) + 4|0);
               HEAP32[$505>>2] = $arglist_next191;
               HEAP16[$506>>1] = $504;
               $ret_val = 1;
               break;
              }
              case 13: case 4:  {
               $507 = $val;
               $508 = HEAP32[$507>>2]|0;
               $509 = $2;
               $arglist_current193 = HEAP32[$509>>2]|0;
               $510 = HEAP32[$arglist_current193>>2]|0;
               $arglist_next194 = (($arglist_current193) + 4|0);
               HEAP32[$509>>2] = $arglist_next194;
               HEAP32[$510>>2] = $508;
               $ret_val = 1;
               break;
              }
              case 9:  {
               $511 = $val;
               $512 = HEAP32[$511>>2]|0;
               $513 = $2;
               $arglist_current196 = HEAP32[$513>>2]|0;
               $514 = HEAP32[$arglist_current196>>2]|0;
               $arglist_next197 = (($arglist_current196) + 4|0);
               HEAP32[$513>>2] = $arglist_next197;
               HEAP32[$514>>2] = $512;
               $ret_val = 1;
               break;
              }
              case 18: case 16:  {
               $515 = $val;
               $516 = $515;
               $517 = $516;
               $518 = HEAP32[$517>>2]|0;
               $519 = (($516) + 4)|0;
               $520 = $519;
               $521 = HEAP32[$520>>2]|0;
               $522 = $2;
               $arglist_current199 = HEAP32[$522>>2]|0;
               $523 = HEAP32[$arglist_current199>>2]|0;
               $arglist_next200 = (($arglist_current199) + 4|0);
               HEAP32[$522>>2] = $arglist_next200;
               $524 = $523;
               $525 = $524;
               HEAP32[$525>>2] = $518;
               $526 = (($524) + 4)|0;
               $527 = $526;
               HEAP32[$527>>2] = $521;
               $ret_val = 1;
               break;
              }
              case 17:  {
               $528 = $val;
               $529 = $528;
               $530 = $529;
               $531 = HEAP32[$530>>2]|0;
               $532 = (($529) + 4)|0;
               $533 = $532;
               $534 = HEAP32[$533>>2]|0;
               $535 = $2;
               $arglist_current202 = HEAP32[$535>>2]|0;
               $536 = HEAP32[$arglist_current202>>2]|0;
               $arglist_next203 = (($arglist_current202) + 4|0);
               HEAP32[$535>>2] = $arglist_next203;
               $537 = $536;
               $538 = $537;
               HEAP32[$538>>2] = $531;
               $539 = (($537) + 4)|0;
               $540 = $539;
               HEAP32[$540>>2] = $534;
               $ret_val = 1;
               break;
              }
              case 11: case 10: case 5:  {
               $541 = $val;
               $542 = +HEAPF32[$541>>2];
               $543 = $2;
               $arglist_current205 = HEAP32[$543>>2]|0;
               $544 = HEAP32[$arglist_current205>>2]|0;
               $arglist_next206 = (($arglist_current205) + 4|0);
               HEAP32[$543>>2] = $arglist_next206;
               HEAPF32[$544>>2] = $542;
               $ret_val = 1;
               break;
              }
              case 12:  {
               $545 = $val;
               $546 = +HEAPF64[$545>>3];
               $547 = $2;
               $arglist_current208 = HEAP32[$547>>2]|0;
               $548 = HEAP32[$arglist_current208>>2]|0;
               $arglist_next209 = (($arglist_current208) + 4|0);
               HEAP32[$547>>2] = $arglist_next209;
               HEAPF64[$548>>3] = $546;
               $ret_val = 1;
               break;
              }
              default: {
               $ret_val = 0;
              }
              }
             } while(0);
            }
           }
          }
         }
        }
        if ((label|0) == 94) {
         $476 = $tv;
         $477 = (($476) + 8|0);
         $478 = HEAP32[$477>>2]|0;
         $479 = $2;
         $arglist_current178 = HEAP32[$479>>2]|0;
         $480 = HEAP32[$arglist_current178>>2]|0;
         $arglist_next179 = (($arglist_current178) + 4|0);
         HEAP32[$479>>2] = $arglist_next179;
         HEAP32[$480>>2] = $478;
         $ret_val = 1;
        }
       }
      }
     }
     $551 = $ret_val;
     STACKTOP = sp;return ($551|0);
    }
   }
   $378 = $0;
   $379 = (($378) + 628|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = $0;
   $382 = HEAP32[$381>>2]|0;
   $383 = $1;
   $384 = ($383>>>0)>(65535);
   $385 = $384 ? 240 : 248;
   $386 = $fip;
   $387 = ($386|0)!=(0|0);
   if ($387) {
    $388 = $fip;
    $389 = (($388) + 28|0);
    $390 = HEAP32[$389>>2]|0;
    $391 = $390;
   } else {
    $391 = 256;
   }
   HEAP32[$vararg_buffer>>2] = $382;
   $vararg_ptr160 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr160>>2] = $385;
   $vararg_ptr161 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr161>>2] = $391;
   _TIFFErrorExt($380,176,192,$vararg_buffer);
   $ret_val = 0;
   $551 = $ret_val;
   STACKTOP = sp;return ($551|0);
  }
 } while(0);
 return (0)|0;
}
function _setDoubleArrayOneValue($vpp,$value,$nmemb) {
 $vpp = $vpp|0;
 $value = +$value;
 $nmemb = $nmemb|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vpp;
 $1 = $value;
 $2 = $nmemb;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  __TIFFfree($7);
 }
 $8 = $2;
 $9 = $8<<3;
 $10 = (__TIFFmalloc($9)|0);
 $11 = $0;
 HEAP32[$11>>2] = $10;
 $12 = $0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $1;
  $19 = $2;
  $20 = $0;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($19<<3)|0);
  HEAPF64[$22>>3] = $18;
 }
 STACKTOP = sp;return;
}
function _setExtraSamples($td,$ap,$v) {
 $td = $td|0;
 $ap = $ap|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0;
 var $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $i = 0, $va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $td;
 $2 = $ap;
 $3 = $v;
 $4 = $2;
 $arglist_current = HEAP32[$4>>2]|0;
 $5 = HEAP32[$arglist_current>>2]|0;
 $arglist_next = (($arglist_current) + 4|0);
 HEAP32[$4>>2] = $arglist_next;
 $6 = $5&65535;
 $7 = $6&65535;
 $8 = $3;
 HEAP32[$8>>2] = $7;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10&65535;
 $12 = $11&65535;
 $13 = $1;
 $14 = (($13) + 58|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($12|0)>($16|0);
 if ($17) {
  $0 = 0;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $18 = $2;
 $arglist_current2 = HEAP32[$18>>2]|0;
 $19 = HEAP32[$arglist_current2>>2]|0;
 $arglist_next3 = (($arglist_current2) + 4|0);
 HEAP32[$18>>2] = $arglist_next3;
 $va = $19;
 $20 = $3;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21>>>0)>(0);
 if ($22) {
  $23 = $va;
  $24 = ($23|0)==(0|0);
  if ($24) {
   $0 = 0;
   $58 = $0;
   STACKTOP = sp;return ($58|0);
  }
 }
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = $3;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($25>>>0)<($27>>>0);
  if (!($28)) {
   label = 15;
   break;
  }
  $29 = $i;
  $30 = $va;
  $31 = (($30) + ($29<<1)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $34 = ($33|0)>(2);
  if ($34) {
   $35 = $i;
   $36 = $va;
   $37 = (($36) + ($35<<1)|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38&65535;
   $40 = ($39|0)==(999);
   if (!($40)) {
    label = 11;
    break;
   }
   $41 = $i;
   $42 = $va;
   $43 = (($42) + ($41<<1)|0);
   HEAP16[$43>>1] = 2;
  }
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 if ((label|0) == 11) {
  $0 = 0;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 else if ((label|0) == 15) {
  $46 = $3;
  $47 = HEAP32[$46>>2]|0;
  $48 = $47&65535;
  $49 = $1;
  $50 = (($49) + 116|0);
  HEAP16[$50>>1] = $48;
  $51 = $1;
  $52 = (($51) + 120|0);
  $53 = $va;
  $54 = $1;
  $55 = (($54) + 116|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&65535;
  __TIFFsetShortArray($52,$53,$57);
  $0 = 1;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function _checkInkNamesString($tif,$slen,$s) {
 $tif = $tif|0;
 $slen = $slen|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $ep = 0, $i = 0, $td = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $slen;
 $3 = $s;
 $4 = $1;
 $5 = (($4) + 40|0);
 $td = $5;
 $6 = $td;
 $7 = (($6) + 58|0);
 $8 = HEAP16[$7>>1]|0;
 $i = $8;
 $9 = $2;
 $10 = ($9>>>0)>(0);
 do {
  if ($10) {
   $11 = $3;
   $12 = $2;
   $13 = (($11) + ($12)|0);
   $ep = $13;
   $14 = $3;
   $cp = $14;
   while(1) {
    $15 = $i;
    $16 = $15&65535;
    $17 = ($16|0)>(0);
    if (!($17)) {
     break;
    }
    while(1) {
     $18 = $cp;
     $19 = $ep;
     $20 = ($18>>>0)<($19>>>0);
     if (!($20)) {
      break;
     }
     $21 = $cp;
     $22 = HEAP8[$21>>0]|0;
     $23 = $22 << 24 >> 24;
     $24 = ($23|0)!=(0);
     if (!($24)) {
      break;
     }
     $25 = $cp;
     $26 = (($25) + 1|0);
     $cp = $26;
    }
    $27 = $cp;
    $28 = $ep;
    $29 = ($27>>>0)>=($28>>>0);
    if ($29) {
     label = 10;
     break;
    }
    $30 = $cp;
    $31 = (($30) + 1|0);
    $cp = $31;
    $32 = $i;
    $33 = (($32) + -1)<<16>>16;
    $i = $33;
   }
   if ((label|0) == 10) {
    break;
   }
   $34 = $cp;
   $35 = $3;
   $36 = $34;
   $37 = $35;
   $38 = (($36) - ($37))|0;
   $0 = $38;
   $55 = $0;
   STACKTOP = sp;return ($55|0);
  } else {
  }
 } while(0);
 $39 = $1;
 $40 = (($39) + 628|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = HEAP32[$42>>2]|0;
 $44 = $td;
 $45 = (($44) + 58|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = $td;
 $49 = (($48) + 58|0);
 $50 = HEAP16[$49>>1]|0;
 $51 = $50&65535;
 $52 = $i;
 $53 = $52&65535;
 $54 = (($51) - ($53))|0;
 HEAP32[$vararg_buffer>>2] = $43;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $47;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $54;
 _TIFFErrorExt($41,704,720,$vararg_buffer);
 $0 = 0;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function __TIFFGetFields() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (856|0);
}
function __TIFFSetupFields($tif,$fieldarray) {
 $tif = $tif|0;
 $fieldarray = $fieldarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fld = 0, $i = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $fieldarray;
 $2 = $0;
 $3 = (($2) + 656|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = (($6) + 660|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8>>>0)>(0);
  if ($9) {
   $i = 0;
   while(1) {
    $10 = $i;
    $11 = $0;
    $12 = (($11) + 660|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($10>>>0)<($13>>>0);
    if (!($14)) {
     break;
    }
    $15 = $i;
    $16 = $0;
    $17 = (($16) + 656|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + ($15<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $fld = $20;
    $21 = $fld;
    $22 = (($21) + 24|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = $23&65535;
    $25 = ($24|0)==(65);
    if ($25) {
     $26 = $fld;
     $27 = (($26) + 28|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (_strncmp(888,$28,4)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      $31 = $fld;
      $32 = (($31) + 28|0);
      $33 = HEAP32[$32>>2]|0;
      __TIFFfree($33);
      $34 = $fld;
      __TIFFfree($34);
     }
    }
    $35 = $i;
    $36 = (($35) + 1)|0;
    $i = $36;
   }
   $37 = $0;
   $38 = (($37) + 656|0);
   $39 = HEAP32[$38>>2]|0;
   __TIFFfree($39);
   $40 = $0;
   $41 = (($40) + 656|0);
   HEAP32[$41>>2] = 0;
   $42 = $0;
   $43 = (($42) + 660|0);
   HEAP32[$43>>2] = 0;
  }
 }
 $44 = $0;
 $45 = $1;
 $46 = (($45) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $1;
 $49 = (($48) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (__TIFFMergeFields($44,$47,$50)|0);
 $52 = ($51|0)!=(0);
 if ($52) {
  STACKTOP = sp;return;
 }
 $53 = $0;
 $54 = (($53) + 628|0);
 $55 = HEAP32[$54>>2]|0;
 _TIFFErrorExt($55,896,920,$vararg_buffer);
 STACKTOP = sp;return;
}
function __TIFFMergeFields($tif,$info,$n) {
 $tif = $tif|0;
 $info = $info|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $fip = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $info;
 $3 = $n;
 $4 = $1;
 $5 = (($4) + 664|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = (($6) + 656|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  $11 = (($10) + 660|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12>>>0)>(0);
  if ($13) {
   $14 = $1;
   $15 = $1;
   $16 = (($15) + 656|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $1;
   $19 = (($18) + 660|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $3;
   $22 = (($20) + ($21))|0;
   $23 = (__TIFFCheckRealloc($14,$17,$22,4,976)|0);
   $24 = $1;
   $25 = (($24) + 656|0);
   HEAP32[$25>>2] = $23;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $26 = $1;
  $27 = $3;
  $28 = (__TIFFCheckMalloc($26,$27,4,976)|0);
  $29 = $1;
  $30 = (($29) + 656|0);
  HEAP32[$30>>2] = $28;
 }
 $31 = $1;
 $32 = (($31) + 656|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $35 = $1;
  $36 = (($35) + 628|0);
  $37 = HEAP32[$36>>2]|0;
  _TIFFErrorExt($37,952,1000,$vararg_buffer);
  $0 = 0;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = $3;
  $40 = ($38>>>0)<($39>>>0);
  if (!($40)) {
   break;
  }
  $41 = $1;
  $42 = $i;
  $43 = $2;
  $44 = (($43) + (($42*36)|0)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (_TIFFFindField($41,$45,0)|0);
  $fip = $46;
  $47 = $fip;
  $48 = ($47|0)!=(0|0);
  if (!($48)) {
   $49 = $2;
   $50 = $i;
   $51 = (($49) + (($50*36)|0)|0);
   $52 = $1;
   $53 = (($52) + 660|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $1;
   $56 = (($55) + 656|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + ($54<<2)|0);
   HEAP32[$58>>2] = $51;
   $59 = $1;
   $60 = (($59) + 660|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 1)|0;
   HEAP32[$60>>2] = $62;
  }
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 $65 = $1;
 $66 = (($65) + 656|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $1;
 $69 = (($68) + 660|0);
 $70 = HEAP32[$69>>2]|0;
 _qsort($67,$70,4,22);
 $71 = $3;
 $0 = $71;
 $72 = $0;
 STACKTOP = sp;return ($72|0);
}
function _TIFFFindField($tif,$tag,$dt) {
 $tif = $tif|0;
 $tag = $tag|0;
 $dt = $dt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $pkey = 0, $ret = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key = sp + 4|0;
 $pkey = sp;
 $1 = $tif;
 $2 = $tag;
 $3 = $dt;
 dest=$key+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$pkey>>2] = $key;
 $4 = $1;
 $5 = (($4) + 664|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $8 = $1;
   $9 = (($8) + 664|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = $2;
   $13 = ($11|0)==($12|0);
   if ($13) {
    $14 = $3;
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = $3;
     $17 = $1;
     $18 = (($17) + 664|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($19) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($16|0)==($21|0);
     if (!($22)) {
      break;
     }
    }
    $23 = $1;
    $24 = (($23) + 664|0);
    $25 = HEAP32[$24>>2]|0;
    $0 = $25;
    $47 = $0;
    STACKTOP = sp;return ($47|0);
   }
  }
 } while(0);
 $26 = $1;
 $27 = (($26) + 656|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $30 = $2;
 HEAP32[$key>>2] = $30;
 $31 = $3;
 $32 = (($key) + 8|0);
 HEAP32[$32>>2] = $31;
 $33 = $1;
 $34 = (($33) + 656|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $1;
 $37 = (($36) + 660|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (_bsearch($pkey,$35,$38,4,22)|0);
 $ret = $39;
 $40 = $ret;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = $ret;
  $43 = HEAP32[$42>>2]|0;
  $46 = $43;
 } else {
  $46 = 0;
 }
 $44 = $1;
 $45 = (($44) + 664|0);
 HEAP32[$45>>2] = $46;
 $0 = $46;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _TIFFDataWidth($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 switch ($2|0) {
 case 18: case 17: case 16: case 12: case 10: case 5:  {
  $0 = 8;
  break;
 }
 case 7: case 6: case 2: case 1: case 0:  {
  $0 = 1;
  break;
 }
 case 8: case 3:  {
  $0 = 2;
  break;
 }
 case 13: case 11: case 9: case 4:  {
  $0 = 4;
  break;
 }
 default: {
  $0 = 0;
 }
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function __TIFFDataSize($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 switch ($2|0) {
 case 18: case 17: case 16: case 12:  {
  $0 = 8;
  break;
 }
 case 7: case 2: case 6: case 1:  {
  $0 = 1;
  break;
 }
 case 8: case 3:  {
  $0 = 2;
  break;
 }
 case 10: case 5: case 13: case 11: case 9: case 4:  {
  $0 = 4;
  break;
 }
 default: {
  $0 = 0;
 }
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _TIFFFieldWithTag($tif,$tag) {
 $tif = $tif|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fip = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $tag;
 $2 = $0;
 $3 = $1;
 $4 = (_TIFFFindField($2,$3,0)|0);
 $fip = $4;
 $5 = $fip;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $11 = $fip;
  STACKTOP = sp;return ($11|0);
 }
 $7 = $0;
 $8 = (($7) + 628|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 HEAP32[$vararg_buffer>>2] = $10;
 _TIFFErrorExt($9,1032,1056,$vararg_buffer);
 $11 = $fip;
 STACKTOP = sp;return ($11|0);
}
function __TIFFCreateAnonField($tif,$tag,$field_type) {
 $tif = $tif|0;
 $tag = $tag|0;
 $field_type = $field_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $fld = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $tag;
 $3 = $field_type;
 $4 = (__TIFFmalloc(36)|0);
 $fld = $4;
 $5 = $fld;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 0;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 $7 = $fld;
 __TIFFmemset($7,0,36);
 $8 = $2;
 $9 = $fld;
 HEAP32[$9>>2] = $8;
 $10 = $fld;
 $11 = (($10) + 4|0);
 HEAP16[$11>>1] = -3;
 $12 = $fld;
 $13 = (($12) + 6|0);
 HEAP16[$13>>1] = -3;
 $14 = $3;
 $15 = $fld;
 $16 = (($15) + 8|0);
 HEAP32[$16>>2] = $14;
 $17 = $fld;
 $18 = (($17) + 12|0);
 HEAP32[$18>>2] = 0;
 $19 = $3;
 do {
  switch ($19|0) {
  case 6:  {
   $40 = $fld;
   $41 = (($40) + 16|0);
   HEAP32[$41>>2] = 41;
   $42 = $fld;
   $43 = (($42) + 20|0);
   HEAP32[$43>>2] = 41;
   break;
  }
  case 8:  {
   $44 = $fld;
   $45 = (($44) + 16|0);
   HEAP32[$45>>2] = 43;
   $46 = $fld;
   $47 = (($46) + 20|0);
   HEAP32[$47>>2] = 43;
   break;
  }
  case 9:  {
   $48 = $fld;
   $49 = (($48) + 16|0);
   HEAP32[$49>>2] = 45;
   $50 = $fld;
   $51 = (($50) + 20|0);
   HEAP32[$51>>2] = 45;
   break;
  }
  case 12:  {
   $52 = $fld;
   $53 = (($52) + 16|0);
   HEAP32[$53>>2] = 49;
   $54 = $fld;
   $55 = (($54) + 20|0);
   HEAP32[$55>>2] = 49;
   break;
  }
  case 2:  {
   $24 = $fld;
   $25 = (($24) + 16|0);
   HEAP32[$25>>2] = 39;
   $26 = $fld;
   $27 = (($26) + 20|0);
   HEAP32[$27>>2] = 39;
   break;
  }
  case 3:  {
   $28 = $fld;
   $29 = (($28) + 16|0);
   HEAP32[$29>>2] = 42;
   $30 = $fld;
   $31 = (($30) + 20|0);
   HEAP32[$31>>2] = 42;
   break;
  }
  case 4:  {
   $32 = $fld;
   $33 = (($32) + 16|0);
   HEAP32[$33>>2] = 44;
   $34 = $fld;
   $35 = (($34) + 20|0);
   HEAP32[$35>>2] = 44;
   break;
  }
  case 18: case 13:  {
   $56 = $fld;
   $57 = (($56) + 16|0);
   HEAP32[$57>>2] = 50;
   $58 = $fld;
   $59 = (($58) + 20|0);
   HEAP32[$59>>2] = 50;
   break;
  }
  case 16:  {
   $60 = $fld;
   $61 = (($60) + 16|0);
   HEAP32[$61>>2] = 46;
   $62 = $fld;
   $63 = (($62) + 20|0);
   HEAP32[$63>>2] = 46;
   break;
  }
  case 17:  {
   $64 = $fld;
   $65 = (($64) + 16|0);
   HEAP32[$65>>2] = 47;
   $66 = $fld;
   $67 = (($66) + 20|0);
   HEAP32[$67>>2] = 47;
   break;
  }
  case 11: case 10: case 5:  {
   $36 = $fld;
   $37 = (($36) + 16|0);
   HEAP32[$37>>2] = 48;
   $38 = $fld;
   $39 = (($38) + 20|0);
   HEAP32[$39>>2] = 48;
   break;
  }
  case 7: case 1:  {
   $20 = $fld;
   $21 = (($20) + 16|0);
   HEAP32[$21>>2] = 40;
   $22 = $fld;
   $23 = (($22) + 20|0);
   HEAP32[$23>>2] = 40;
   break;
  }
  default: {
   $68 = $fld;
   $69 = (($68) + 16|0);
   HEAP32[$69>>2] = 0;
   $70 = $fld;
   $71 = (($70) + 20|0);
   HEAP32[$71>>2] = 0;
  }
  }
 } while(0);
 $72 = $fld;
 $73 = (($72) + 24|0);
 HEAP16[$73>>1] = 65;
 $74 = $fld;
 $75 = (($74) + 26|0);
 HEAP8[$75>>0] = 1;
 $76 = $fld;
 $77 = (($76) + 27|0);
 HEAP8[$77>>0] = 1;
 $78 = (__TIFFmalloc(32)|0);
 $79 = $fld;
 $80 = (($79) + 28|0);
 HEAP32[$80>>2] = $78;
 $81 = $fld;
 $82 = (($81) + 28|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(0|0);
 if ($84) {
  $85 = $fld;
  __TIFFfree($85);
  $0 = 0;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 } else {
  $86 = $fld;
  $87 = (($86) + 32|0);
  HEAP32[$87>>2] = 0;
  $88 = $fld;
  $89 = (($88) + 28|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $2;
  HEAP32[$vararg_buffer>>2] = $91;
  (_sprintf($90,1096,$vararg_buffer)|0);
  $92 = $fld;
  $0 = $92;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 return (0)|0;
}
function _tagCompare($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ta = 0, $tb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $ta = $4;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $tb = $6;
 $7 = $ta;
 $8 = HEAP32[$7>>2]|0;
 $9 = $tb;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)!=($10|0);
 if ($11) {
  $12 = $ta;
  $13 = HEAP32[$12>>2]|0;
  $14 = $tb;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) - ($15))|0;
  $0 = $16;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $17 = $ta;
 $18 = (($17) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $28 = 0;
 } else {
  $21 = $tb;
  $22 = (($21) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $ta;
  $25 = (($24) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($23) - ($26))|0;
  $28 = $27;
 }
 $0 = $28;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _TIFFReadDirectory($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $countpersample = 0, $countrequired = 0, $data = 0, $di = 0, $dir = 0, $dircount = 0, $dp = 0, $err = 0, $err2 = 0, $err3 = 0, $err4 = 0, $fii = 0;
 var $fip = 0, $incrementpersample = 0, $m = 0, $ma = 0, $mb = 0, $na = 0, $nb = 0, $nextdiroff = 0, $saved_flags = 0, $strip = 0, $value = 0, $value1 = 0, $value5 = 0, $value6 = 0, $valueo = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0;
 var $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer64 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0;
 var $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer72 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer72 = sp + 24|0;
 $vararg_buffer70 = sp + 72|0;
 $vararg_buffer68 = sp + 64|0;
 $vararg_buffer66 = sp + 208|0;
 $vararg_buffer64 = sp + 192|0;
 $vararg_buffer62 = sp + 16|0;
 $vararg_buffer59 = sp + 232|0;
 $vararg_buffer56 = sp + 136|0;
 $vararg_buffer54 = sp + 32|0;
 $vararg_buffer51 = sp + 40|0;
 $vararg_buffer49 = sp + 168|0;
 $vararg_buffer46 = sp + 184|0;
 $vararg_buffer44 = sp + 200|0;
 $vararg_buffer42 = sp + 216|0;
 $vararg_buffer39 = sp + 224|0;
 $vararg_buffer37 = sp + 128|0;
 $vararg_buffer34 = sp + 88|0;
 $vararg_buffer29 = sp + 96|0;
 $vararg_buffer26 = sp + 112|0;
 $vararg_buffer23 = sp + 120|0;
 $vararg_buffer20 = sp + 8|0;
 $vararg_buffer18 = sp + 144|0;
 $vararg_buffer14 = sp + 160|0;
 $vararg_buffer10 = sp + 48|0;
 $vararg_buffer7 = sp + 152|0;
 $vararg_buffer4 = sp;
 $vararg_buffer1 = sp + 56|0;
 $vararg_buffer = sp + 176|0;
 $dir = sp + 268|0;
 $fii = sp + 284|0;
 $nextdiroff = sp + 80|0;
 $value = sp + 328|0;
 $value1 = sp + 324|0;
 $data = sp + 288|0;
 $value5 = sp + 308|0;
 $valueo = sp + 322|0;
 $1 = $tif;
 HEAP32[$fii>>2] = -1;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (($10) + 16|0);
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $6;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $9;
 $16 = $1;
 $17 = $1;
 $18 = (($17) + 24|0);
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_TIFFCheckDirOffset($16,$21,$24)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $0 = 0;
  $1167 = $0;
  STACKTOP = sp;return ($1167|0);
 }
 $27 = $1;
 $28 = (($27) + 564|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 FUNCTION_TABLE_vi[$29 & 255]($30);
 $31 = $1;
 $32 = (($31) + 448|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = (($33) + 1)<<16>>16;
 HEAP16[$32>>1] = $34;
 $35 = $1;
 $36 = (($35) + 24|0);
 $37 = $36;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = $nextdiroff;
 $44 = $43;
 HEAP32[$44>>2] = $39;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = $42;
 $47 = $1;
 $48 = $nextdiroff;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = $1;
 $55 = (($54) + 24|0);
 $56 = (_TIFFFetchDirectory($47,$50,$53,$dir,$55)|0);
 $dircount = $56;
 $57 = $dircount;
 $58 = ($57<<16>>16)!=(0);
 if (!($58)) {
  $59 = $1;
  $60 = (($59) + 628|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $nextdiroff;
  $63 = $62;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($62) + 4)|0;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = $vararg_buffer;
  $69 = $68;
  HEAP32[$69>>2] = $64;
  $70 = (($68) + 4)|0;
  $71 = $70;
  HEAP32[$71>>2] = $67;
  _TIFFErrorExt($61,12344,12368,$vararg_buffer);
  $0 = 0;
  $1167 = $0;
  STACKTOP = sp;return ($1167|0);
 }
 $72 = $1;
 $73 = HEAP32[$dir>>2]|0;
 $74 = $dircount;
 _TIFFReadDirectoryCheckOrder($72,$73,$74);
 $75 = HEAP32[$dir>>2]|0;
 $ma = $75;
 $mb = 0;
 while(1) {
  $76 = $mb;
  $77 = $76&65535;
  $78 = $dircount;
  $79 = $78&65535;
  $80 = ($77|0)<($79|0);
  if (!($80)) {
   break;
  }
  $81 = $ma;
  $82 = (($81) + 24|0);
  $na = $82;
  $83 = $mb;
  $84 = $83&65535;
  $85 = (($84) + 1)|0;
  $86 = $85&65535;
  $nb = $86;
  while(1) {
   $87 = $nb;
   $88 = $87&65535;
   $89 = $dircount;
   $90 = $89&65535;
   $91 = ($88|0)<($90|0);
   if (!($91)) {
    break;
   }
   $92 = $ma;
   $93 = HEAP16[$92>>1]|0;
   $94 = $93&65535;
   $95 = $na;
   $96 = HEAP16[$95>>1]|0;
   $97 = $96&65535;
   $98 = ($94|0)==($97|0);
   if ($98) {
    $99 = $na;
    HEAP16[$99>>1] = 0;
   }
   $100 = $na;
   $101 = (($100) + 24|0);
   $na = $101;
   $102 = $nb;
   $103 = (($102) + 1)<<16>>16;
   $nb = $103;
  }
  $104 = $ma;
  $105 = (($104) + 24|0);
  $ma = $105;
  $106 = $mb;
  $107 = (($106) + 1)<<16>>16;
  $mb = $107;
 }
 $108 = $1;
 $109 = (($108) + 12|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & -65;
 HEAP32[$109>>2] = $111;
 $112 = $1;
 $113 = (($112) + 12|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & -1048577;
 HEAP32[$113>>2] = $115;
 $116 = $1;
 _TIFFFreeDirectory($116);
 $117 = $1;
 (_TIFFDefaultDirectory($117)|0);
 $118 = $1;
 HEAP32[$vararg_buffer1>>2] = 1;
 (_TIFFSetField($118,284,$vararg_buffer1)|0);
 $119 = $1;
 $120 = HEAP32[$dir>>2]|0;
 $121 = $dircount;
 $122 = (_TIFFReadDirectoryFindEntry($119,$120,$121,277)|0);
 $dp = $122;
 $123 = $dp;
 $124 = ($123|0)!=(0|0);
 do {
  if ($124) {
   $125 = $1;
   $126 = $dp;
   $127 = (_TIFFFetchNormalTag($125,$126,0)|0);
   $128 = ($127|0)!=(0);
   if ($128) {
    $129 = $dp;
    HEAP16[$129>>1] = 0;
    label = 19;
    break;
   } else {
    break;
   }
  } else {
   label = 19;
  }
 } while(0);
 L27: do {
  if ((label|0) == 19) {
   $130 = $1;
   $131 = HEAP32[$dir>>2]|0;
   $132 = $dircount;
   $133 = (_TIFFReadDirectoryFindEntry($130,$131,$132,259)|0);
   $dp = $133;
   $134 = $dp;
   $135 = ($134|0)!=(0|0);
   do {
    if ($135) {
     $136 = $1;
     $137 = $dp;
     $138 = (_TIFFReadDirEntryShort($136,$137,$value)|0);
     $err = $138;
     $139 = $err;
     $140 = ($139|0)==(1);
     if ($140) {
      $141 = $1;
      $142 = $dp;
      $143 = (_TIFFReadDirEntryPersampleShort($141,$142,$value)|0);
      $err = $143;
     }
     $144 = $err;
     $145 = ($144|0)!=(0);
     if ($145) {
      $146 = $1;
      $147 = $err;
      _TIFFReadDirEntryOutputErr($146,$147,12344,12408,0);
      break L27;
     }
     $148 = $1;
     $149 = HEAP16[$value>>1]|0;
     $150 = $149&65535;
     HEAP32[$vararg_buffer4>>2] = $150;
     $151 = (_TIFFSetField($148,259,$vararg_buffer4)|0);
     $152 = ($151|0)!=(0);
     if ($152) {
      $153 = $dp;
      HEAP16[$153>>1] = 0;
      break;
     } else {
      break L27;
     }
    } else {
     $154 = $1;
     HEAP32[$vararg_buffer7>>2] = 1;
     $155 = (_TIFFSetField($154,259,$vararg_buffer7)|0);
     $156 = ($155|0)!=(0);
     if ($156) {
      break;
     } else {
      break L27;
     }
    }
   } while(0);
   $di = 0;
   $157 = HEAP32[$dir>>2]|0;
   $dp = $157;
   while(1) {
    $158 = $di;
    $159 = $158&65535;
    $160 = $dircount;
    $161 = $160&65535;
    $162 = ($159|0)<($161|0);
    if (!($162)) {
     label = 53;
     break;
    }
    $163 = $dp;
    $164 = HEAP16[$163>>1]|0;
    $165 = $164&65535;
    $166 = ($165|0)!=(0);
    if ($166) {
     $167 = $1;
     $168 = $dp;
     $169 = HEAP16[$168>>1]|0;
     _TIFFReadDirectoryFindFieldInfo($167,$169,$fii);
     $170 = HEAP32[$fii>>2]|0;
     $171 = ($170|0)==(-1);
     if ($171) {
      $172 = $1;
      $173 = (($172) + 628|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = $dp;
      $176 = HEAP16[$175>>1]|0;
      $177 = $176&65535;
      $178 = $dp;
      $179 = HEAP16[$178>>1]|0;
      $180 = $179&65535;
      HEAP32[$vararg_buffer10>>2] = $177;
      $vararg_ptr13 = (($vararg_buffer10) + 4|0);
      HEAP32[$vararg_ptr13>>2] = $180;
      _TIFFWarningExt($174,12344,12424,$vararg_buffer10);
      $181 = $1;
      $182 = $1;
      $183 = $dp;
      $184 = HEAP16[$183>>1]|0;
      $185 = $184&65535;
      $186 = $dp;
      $187 = (($186) + 2|0);
      $188 = HEAP16[$187>>1]|0;
      $189 = $188&65535;
      $190 = (__TIFFCreateAnonField($182,$185,$189)|0);
      $191 = (__TIFFMergeFields($181,$190,1)|0);
      $192 = ($191|0)!=(0);
      if ($192) {
       $203 = $1;
       $204 = $dp;
       $205 = HEAP16[$204>>1]|0;
       _TIFFReadDirectoryFindFieldInfo($203,$205,$fii);
       $206 = HEAP32[$fii>>2]|0;
       $207 = ($206|0)!=(-1);
       if (!($207)) {
        label = 37;
        break;
       }
      } else {
       $193 = $1;
       $194 = (($193) + 628|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $dp;
       $197 = HEAP16[$196>>1]|0;
       $198 = $197&65535;
       $199 = $dp;
       $200 = HEAP16[$199>>1]|0;
       $201 = $200&65535;
       HEAP32[$vararg_buffer14>>2] = $198;
       $vararg_ptr17 = (($vararg_buffer14) + 4|0);
       HEAP32[$vararg_ptr17>>2] = $201;
       _TIFFWarningExt($195,12344,12472,$vararg_buffer14);
       $202 = $dp;
       HEAP16[$202>>1] = 0;
      }
     }
    }
    $208 = $dp;
    $209 = HEAP16[$208>>1]|0;
    $210 = $209&65535;
    $211 = ($210|0)!=(0);
    if ($211) {
     $212 = HEAP32[$fii>>2]|0;
     $213 = $1;
     $214 = (($213) + 656|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = (($215) + ($212<<2)|0);
     $217 = HEAP32[$216>>2]|0;
     $fip = $217;
     $218 = $fip;
     $219 = (($218) + 24|0);
     $220 = HEAP16[$219>>1]|0;
     $221 = $220&65535;
     $222 = ($221|0)==(0);
     if ($222) {
      $223 = $dp;
      HEAP16[$223>>1] = 0;
     } else {
      $224 = $dp;
      $225 = HEAP16[$224>>1]|0;
      $226 = $225&65535;
      if ((($226|0) == 325) | (($226|0) == 324) | (($226|0) == 279) | (($226|0) == 273)) {
       $227 = $fip;
       $228 = (($227) + 24|0);
       $229 = HEAP16[$228>>1]|0;
       $230 = $229&65535;
       $231 = $230 & 31;
       $232 = 1 << $231;
       $233 = $fip;
       $234 = (($233) + 24|0);
       $235 = HEAP16[$234>>1]|0;
       $236 = $235&65535;
       $237 = (($236|0) / 32)&-1;
       $238 = $1;
       $239 = (($238) + 40|0);
       $240 = (($239) + ($237<<2)|0);
       $241 = HEAP32[$240>>2]|0;
       $242 = $241 | $232;
       HEAP32[$240>>2] = $242;
      } else if ((($226|0) == 338) | (($226|0) == 278) | (($226|0) == 284) | (($226|0) == 32998) | (($226|0) == 322) | (($226|0) == 323) | (($226|0) == 32997) | (($226|0) == 257) | (($226|0) == 256)) {
       $243 = $1;
       $244 = $dp;
       $245 = (_TIFFFetchNormalTag($243,$244,0)|0);
       $246 = ($245|0)!=(0);
       if (!($246)) {
        label = 47;
        break;
       }
       $247 = $dp;
       HEAP16[$247>>1] = 0;
      }
     }
    }
    $248 = $di;
    $249 = (($248) + 1)<<16>>16;
    $di = $249;
    $250 = $dp;
    $251 = (($250) + 24|0);
    $dp = $251;
   }
   if ((label|0) == 37) {
    ___assert_fail((12528|0),(12552|0),3559,(12568|0));
    // unreachable;
   }
   else if ((label|0) == 47) {
    break;
   }
   else if ((label|0) == 53) {
    $252 = $1;
    $253 = (($252) + 40|0);
    $254 = (($253) + 48|0);
    $255 = HEAP16[$254>>1]|0;
    $256 = $255&65535;
    $257 = ($256|0)==(6);
    if ($257) {
     $258 = $1;
     $259 = (($258) + 40|0);
     $260 = (($259) + 86|0);
     $261 = HEAP16[$260>>1]|0;
     $262 = $261&65535;
     $263 = ($262|0)==(2);
     if ($263) {
      $264 = $1;
      $265 = (__TIFFFillStriles($264)|0);
      $266 = ($265|0)!=(0);
      if (!($266)) {
       break;
      }
      $267 = $1;
      $268 = HEAP32[$dir>>2]|0;
      $269 = $dircount;
      $270 = (_TIFFReadDirectoryFindEntry($267,$268,$269,273)|0);
      $dp = $270;
      $271 = $dp;
      $272 = ($271|0)!=(0|0);
      if ($272) {
       $273 = $dp;
       $274 = (($273) + 8|0);
       $275 = $274;
       $276 = $275;
       $277 = HEAP32[$276>>2]|0;
       $278 = (($275) + 4)|0;
       $279 = $278;
       $280 = HEAP32[$279>>2]|0;
       $281 = ($277|0)==(1);
       $282 = ($280|0)==(0);
       $283 = $281 & $282;
       if ($283) {
        $284 = $1;
        $285 = HEAP32[$dir>>2]|0;
        $286 = $dircount;
        $287 = (_TIFFReadDirectoryFindEntry($284,$285,$286,279)|0);
        $dp = $287;
        $288 = $dp;
        $289 = ($288|0)!=(0|0);
        if ($289) {
         $290 = $dp;
         $291 = (($290) + 8|0);
         $292 = $291;
         $293 = $292;
         $294 = HEAP32[$293>>2]|0;
         $295 = (($292) + 4)|0;
         $296 = $295;
         $297 = HEAP32[$296>>2]|0;
         $298 = ($294|0)==(1);
         $299 = ($297|0)==(0);
         $300 = $298 & $299;
         if ($300) {
          $301 = $1;
          $302 = (($301) + 40|0);
          $303 = (($302) + 86|0);
          HEAP16[$303>>1] = 1;
          $304 = $1;
          $305 = (($304) + 628|0);
          $306 = HEAP32[$305>>2]|0;
          _TIFFWarningExt($306,12344,12592,$vararg_buffer18);
         }
        }
       }
      }
     }
    }
    $307 = $1;
    $308 = (($307) + 40|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = $309 & 2;
    $311 = ($310|0)!=(0);
    if (!($311)) {
     $312 = $1;
     _MissingRequired($312,12680);
     break;
    }
    $313 = $1;
    $314 = (($313) + 40|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = $315 & 4;
    $317 = ($316|0)!=(0);
    if ($317) {
     $348 = $1;
     $349 = (_TIFFNumberOfTiles($348)|0);
     $350 = $1;
     $351 = (($350) + 40|0);
     $352 = (($351) + 128|0);
     HEAP32[$352>>2] = $349;
     $353 = $1;
     $354 = (($353) + 12|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = $355 | 1024;
     HEAP32[$354>>2] = $356;
    } else {
     $318 = $1;
     $319 = (_TIFFNumberOfStrips($318)|0);
     $320 = $1;
     $321 = (($320) + 40|0);
     $322 = (($321) + 128|0);
     HEAP32[$322>>2] = $319;
     $323 = $1;
     $324 = (($323) + 40|0);
     $325 = (($324) + 16|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = $1;
     $328 = (($327) + 40|0);
     $329 = (($328) + 28|0);
     HEAP32[$329>>2] = $326;
     $330 = $1;
     $331 = (($330) + 40|0);
     $332 = (($331) + 60|0);
     $333 = HEAP32[$332>>2]|0;
     $334 = $1;
     $335 = (($334) + 40|0);
     $336 = (($335) + 32|0);
     HEAP32[$336>>2] = $333;
     $337 = $1;
     $338 = (($337) + 40|0);
     $339 = (($338) + 24|0);
     $340 = HEAP32[$339>>2]|0;
     $341 = $1;
     $342 = (($341) + 40|0);
     $343 = (($342) + 36|0);
     HEAP32[$343>>2] = $340;
     $344 = $1;
     $345 = (($344) + 12|0);
     $346 = HEAP32[$345>>2]|0;
     $347 = $346 & -1025;
     HEAP32[$345>>2] = $347;
    }
    $357 = $1;
    $358 = (($357) + 40|0);
    $359 = (($358) + 128|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = ($360|0)!=(0);
    if (!($361)) {
     $362 = $1;
     $363 = (($362) + 628|0);
     $364 = HEAP32[$363>>2]|0;
     $365 = $1;
     $366 = (($365) + 12|0);
     $367 = HEAP32[$366>>2]|0;
     $368 = $367 & 1024;
     $369 = ($368|0)!=(0);
     $370 = $369 ? 12728 : 12736;
     HEAP32[$vararg_buffer20>>2] = $370;
     _TIFFErrorExt($364,12344,12696,$vararg_buffer20);
     break;
    }
    $371 = $1;
    $372 = (($371) + 40|0);
    $373 = (($372) + 128|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = $1;
    $376 = (($375) + 40|0);
    $377 = (($376) + 124|0);
    HEAP32[$377>>2] = $374;
    $378 = $1;
    $379 = (($378) + 40|0);
    $380 = (($379) + 86|0);
    $381 = HEAP16[$380>>1]|0;
    $382 = $381&65535;
    $383 = ($382|0)==(2);
    if ($383) {
     $384 = $1;
     $385 = (($384) + 40|0);
     $386 = (($385) + 58|0);
     $387 = HEAP16[$386>>1]|0;
     $388 = $387&65535;
     $389 = $1;
     $390 = (($389) + 40|0);
     $391 = (($390) + 124|0);
     $392 = HEAP32[$391>>2]|0;
     $393 = (($392>>>0) / ($388>>>0))&-1;
     HEAP32[$391>>2] = $393;
    }
    $394 = $1;
    $395 = (($394) + 40|0);
    $396 = HEAP32[$395>>2]|0;
    $397 = $396 & 33554432;
    $398 = ($397|0)!=(0);
    do {
     if (!($398)) {
      $399 = $1;
      $400 = (($399) + 40|0);
      $401 = (($400) + 48|0);
      $402 = HEAP16[$401>>1]|0;
      $403 = $402&65535;
      $404 = ($403|0)==(6);
      if ($404) {
       $405 = $1;
       $406 = (($405) + 12|0);
       $407 = HEAP32[$406>>2]|0;
       $408 = $407 & 1024;
       $409 = ($408|0)!=(0);
       $410 = $409&1;
       $411 = ($410|0)==(0);
       if ($411) {
        $412 = $1;
        $413 = (($412) + 40|0);
        $414 = (($413) + 128|0);
        $415 = HEAP32[$414>>2]|0;
        $416 = ($415|0)==(1);
        if ($416) {
         $417 = $1;
         $418 = (($417) + 40|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 33554432;
         HEAP32[$418>>2] = $420;
         break;
        }
       }
      }
      $421 = $1;
      $422 = $1;
      $423 = (($422) + 12|0);
      $424 = HEAP32[$423>>2]|0;
      $425 = $424 & 1024;
      $426 = ($425|0)!=(0);
      $427 = $426 ? 12744 : 12760;
      _MissingRequired($421,$427);
      break L27;
     }
    } while(0);
    $di = 0;
    $428 = HEAP32[$dir>>2]|0;
    $dp = $428;
    while(1) {
     $429 = $di;
     $430 = $429&65535;
     $431 = $dircount;
     $432 = $431&65535;
     $433 = ($430|0)<($432|0);
     if (!($433)) {
      label = 137;
      break;
     }
     $434 = $dp;
     $435 = HEAP16[$434>>1]|0;
     $436 = $435&65535;
     if ((($436|0) == 0)) {
     } else if ((($436|0) == 339) | (($436|0) == 32996) | (($436|0) == 258) | (($436|0) == 281) | (($436|0) == 280)) {
      $437 = $1;
      $438 = $dp;
      $439 = (_TIFFReadDirEntryShort($437,$438,$value1)|0);
      $err2 = $439;
      $440 = $err2;
      $441 = ($440|0)==(1);
      if ($441) {
       $442 = $1;
       $443 = $dp;
       $444 = (_TIFFReadDirEntryPersampleShort($442,$443,$value1)|0);
       $err2 = $444;
      }
      $445 = $err2;
      $446 = ($445|0)!=(0);
      if ($446) {
       label = 87;
       break;
      }
      $460 = $1;
      $461 = $dp;
      $462 = HEAP16[$461>>1]|0;
      $463 = $462&65535;
      $464 = HEAP16[$value1>>1]|0;
      $465 = $464&65535;
      HEAP32[$vararg_buffer23>>2] = $465;
      $466 = (_TIFFSetField($460,$463,$vararg_buffer23)|0);
      $467 = ($466|0)!=(0);
      if (!($467)) {
       label = 92;
       break;
      }
     } else if ((($436|0) == 341) | (($436|0) == 340)) {
      $468 = $dp;
      $469 = (($468) + 8|0);
      $470 = $469;
      $471 = $470;
      $472 = HEAP32[$471>>2]|0;
      $473 = (($470) + 4)|0;
      $474 = $473;
      $475 = HEAP32[$474>>2]|0;
      $476 = $1;
      $477 = (($476) + 40|0);
      $478 = (($477) + 58|0);
      $479 = HEAP16[$478>>1]|0;
      $480 = $479&65535;
      $481 = ($472|0)!=($480|0);
      $482 = ($475|0)!=(0);
      $483 = $481 | $482;
      if ($483) {
       $err3 = 1;
      } else {
       $484 = $1;
       $485 = $dp;
       $486 = (_TIFFReadDirEntryDoubleArray($484,$485,$data)|0);
       $err3 = $486;
      }
      $487 = $err3;
      $488 = ($487|0)!=(0);
      if ($488) {
       label = 98;
       break;
      }
      $502 = $1;
      $503 = (($502) + 12|0);
      $504 = HEAP32[$503>>2]|0;
      $saved_flags = $504;
      $505 = $1;
      $506 = (($505) + 12|0);
      $507 = HEAP32[$506>>2]|0;
      $508 = $507 | 4194304;
      HEAP32[$506>>2] = $508;
      $509 = $1;
      $510 = $dp;
      $511 = HEAP16[$510>>1]|0;
      $512 = $511&65535;
      $513 = HEAP32[$data>>2]|0;
      HEAP32[$vararg_buffer26>>2] = $513;
      $514 = (_TIFFSetField($509,$512,$vararg_buffer26)|0);
      $m = $514;
      $515 = $saved_flags;
      $516 = $1;
      $517 = (($516) + 12|0);
      HEAP32[$517>>2] = $515;
      $518 = HEAP32[$data>>2]|0;
      __TIFFfree($518);
      $519 = $m;
      $520 = ($519|0)!=(0);
      if (!($520)) {
       label = 103;
       break;
      }
     } else if ((($436|0) == 324) | (($436|0) == 273)) {
      $521 = $1;
      $522 = $dp;
      $523 = $1;
      $524 = (($523) + 40|0);
      $525 = (($524) + 128|0);
      $526 = HEAP32[$525>>2]|0;
      $527 = $1;
      $528 = (($527) + 40|0);
      $529 = (($528) + 132|0);
      $530 = (_TIFFFetchStripThing($521,$522,$526,$529)|0);
      $531 = ($530|0)!=(0);
      if (!($531)) {
       label = 106;
       break;
      }
     } else if ((($436|0) == 325) | (($436|0) == 279)) {
      $532 = $1;
      $533 = $dp;
      $534 = $1;
      $535 = (($534) + 40|0);
      $536 = (($535) + 128|0);
      $537 = HEAP32[$536>>2]|0;
      $538 = $1;
      $539 = (($538) + 40|0);
      $540 = (($539) + 136|0);
      $541 = (_TIFFFetchStripThing($532,$533,$537,$540)|0);
      $542 = ($541|0)!=(0);
      if (!($542)) {
       label = 109;
       break;
      }
     } else if ((($436|0) == 301) | (($436|0) == 320)) {
      HEAP32[$value5>>2] = 0;
      $543 = $1;
      $544 = (($543) + 40|0);
      $545 = (($544) + 44|0);
      $546 = HEAP16[$545>>1]|0;
      $547 = $546&65535;
      $548 = 1 << $547;
      $countpersample = $548;
      $549 = $dp;
      $550 = HEAP16[$549>>1]|0;
      $551 = $550&65535;
      $552 = ($551|0)==(301);
      if ($552) {
       $553 = $dp;
       $554 = (($553) + 8|0);
       $555 = $554;
       $556 = $555;
       $557 = HEAP32[$556>>2]|0;
       $558 = (($555) + 4)|0;
       $559 = $558;
       $560 = HEAP32[$559>>2]|0;
       $561 = $countpersample;
       $562 = ($557|0)==($561|0);
       $563 = ($560|0)==(0);
       $564 = $562 & $563;
       if ($564) {
        $565 = $countpersample;
        $countrequired = $565;
        $incrementpersample = 0;
       } else {
        label = 114;
       }
      } else {
       label = 114;
      }
      if ((label|0) == 114) {
       label = 0;
       $566 = $countpersample;
       $567 = ($566*3)|0;
       $countrequired = $567;
       $568 = $countpersample;
       $incrementpersample = $568;
      }
      $569 = $dp;
      $570 = (($569) + 8|0);
      $571 = $570;
      $572 = $571;
      $573 = HEAP32[$572>>2]|0;
      $574 = (($571) + 4)|0;
      $575 = $574;
      $576 = HEAP32[$575>>2]|0;
      $577 = $countrequired;
      $578 = ($573|0)!=($577|0);
      $579 = ($576|0)!=(0);
      $580 = $578 | $579;
      if ($580) {
       $err4 = 1;
      } else {
       $581 = $1;
       $582 = $dp;
       $583 = (_TIFFReadDirEntryShortArray($581,$582,$value5)|0);
       $err4 = $583;
      }
      $584 = $err4;
      $585 = ($584|0)!=(0);
      if ($585) {
       $586 = $1;
       $587 = $dp;
       $588 = HEAP16[$587>>1]|0;
       $589 = $588&65535;
       $590 = (_TIFFFieldWithTag($586,$589)|0);
       $fip = $590;
       $591 = $1;
       $592 = $err4;
       $593 = $fip;
       $594 = ($593|0)!=(0|0);
       if ($594) {
        $595 = $fip;
        $596 = (($595) + 28|0);
        $597 = HEAP32[$596>>2]|0;
        $598 = $597;
       } else {
        $598 = 12776;
       }
       _TIFFReadDirEntryOutputErr($591,$592,12344,$598,1);
      } else {
       $599 = $1;
       $600 = $dp;
       $601 = HEAP16[$600>>1]|0;
       $602 = $601&65535;
       $603 = HEAP32[$value5>>2]|0;
       $604 = HEAP32[$value5>>2]|0;
       $605 = $incrementpersample;
       $606 = (($604) + ($605<<1)|0);
       $607 = HEAP32[$value5>>2]|0;
       $608 = $incrementpersample;
       $609 = $608<<1;
       $610 = (($607) + ($609<<1)|0);
       HEAP32[$vararg_buffer29>>2] = $603;
       $vararg_ptr32 = (($vararg_buffer29) + 4|0);
       HEAP32[$vararg_ptr32>>2] = $606;
       $vararg_ptr33 = (($vararg_buffer29) + 8|0);
       HEAP32[$vararg_ptr33>>2] = $610;
       (_TIFFSetField($599,$602,$vararg_buffer29)|0);
       $611 = HEAP32[$value5>>2]|0;
       __TIFFfree($611);
      }
     } else if ((($436|0) == 255)) {
      $612 = $1;
      $613 = $dp;
      $614 = (_TIFFReadDirEntryShort($612,$613,$valueo)|0);
      $615 = ($614|0)==(0);
      if ($615) {
       $616 = HEAP16[$valueo>>1]|0;
       $617 = $616&65535;
       if ((($617|0) == 2)) {
        $value6 = 1;
       } else if ((($617|0) == 3)) {
        $value6 = 2;
       } else {
        $value6 = 0;
       }
       $618 = $value6;
       $619 = ($618|0)!=(0);
       if ($619) {
        $620 = $1;
        $621 = $value6;
        HEAP32[$vararg_buffer34>>2] = $621;
        (_TIFFSetField($620,254,$vararg_buffer34)|0);
       }
      }
     } else {
      $622 = $1;
      $623 = $dp;
      (_TIFFFetchNormalTag($622,$623,1)|0);
     }
     $624 = $di;
     $625 = (($624) + 1)<<16>>16;
     $di = $625;
     $626 = $dp;
     $627 = (($626) + 24|0);
     $dp = $627;
    }
    if ((label|0) == 87) {
     $447 = $1;
     $448 = $dp;
     $449 = HEAP16[$448>>1]|0;
     $450 = $449&65535;
     $451 = (_TIFFFieldWithTag($447,$450)|0);
     $fip = $451;
     $452 = $1;
     $453 = $err2;
     $454 = $fip;
     $455 = ($454|0)!=(0|0);
     if ($455) {
      $456 = $fip;
      $457 = (($456) + 28|0);
      $458 = HEAP32[$457>>2]|0;
      $459 = $458;
     } else {
      $459 = 12776;
     }
     _TIFFReadDirEntryOutputErr($452,$453,12344,$459,0);
     break;
    }
    else if ((label|0) == 92) {
     break;
    }
    else if ((label|0) == 98) {
     $489 = $1;
     $490 = $dp;
     $491 = HEAP16[$490>>1]|0;
     $492 = $491&65535;
     $493 = (_TIFFFieldWithTag($489,$492)|0);
     $fip = $493;
     $494 = $1;
     $495 = $err3;
     $496 = $fip;
     $497 = ($496|0)!=(0|0);
     if ($497) {
      $498 = $fip;
      $499 = (($498) + 28|0);
      $500 = HEAP32[$499>>2]|0;
      $501 = $500;
     } else {
      $501 = 12776;
     }
     _TIFFReadDirEntryOutputErr($494,$495,12344,$501,0);
     break;
    }
    else if ((label|0) == 103) {
     break;
    }
    else if ((label|0) == 106) {
     break;
    }
    else if ((label|0) == 109) {
     break;
    }
    else if ((label|0) == 137) {
     $628 = $1;
     $629 = (($628) + 40|0);
     $630 = (($629) + 48|0);
     $631 = HEAP16[$630>>1]|0;
     $632 = $631&65535;
     $633 = ($632|0)==(6);
     if ($633) {
      $634 = $1;
      $635 = (($634) + 40|0);
      $636 = HEAP32[$635>>2]|0;
      $637 = $636 & 256;
      $638 = ($637|0)!=(0);
      do {
       if ($638) {
        $645 = $1;
        $646 = (($645) + 40|0);
        $647 = (($646) + 50|0);
        $648 = HEAP16[$647>>1]|0;
        $649 = $648&65535;
        $650 = ($649|0)==(2);
        if ($650) {
         $651 = $1;
         $652 = (($651) + 40|0);
         $653 = (($652) + 50|0);
         HEAP16[$653>>1] = 6;
         $654 = $1;
         $655 = (($654) + 628|0);
         $656 = HEAP32[$655>>2]|0;
         _TIFFWarningExt($656,12344,12848,$vararg_buffer42);
        }
       } else {
        $639 = $1;
        $640 = (($639) + 628|0);
        $641 = HEAP32[$640>>2]|0;
        _TIFFWarningExt($641,12344,12792,$vararg_buffer37);
        $642 = $1;
        HEAP32[$vararg_buffer39>>2] = 6;
        $643 = (_TIFFSetField($642,262,$vararg_buffer39)|0);
        $644 = ($643|0)!=(0);
        if ($644) {
         break;
        } else {
         break L27;
        }
       }
      } while(0);
      $657 = $1;
      $658 = (($657) + 40|0);
      $659 = HEAP32[$658>>2]|0;
      $660 = $659 & 64;
      $661 = ($660|0)!=(0);
      do {
       if (!($661)) {
        $662 = $1;
        $663 = (($662) + 628|0);
        $664 = HEAP32[$663>>2]|0;
        _TIFFWarningExt($664,12344,12928,$vararg_buffer44);
        $665 = $1;
        HEAP32[$vararg_buffer46>>2] = 8;
        $666 = (_TIFFSetField($665,258,$vararg_buffer46)|0);
        $667 = ($666|0)!=(0);
        if ($667) {
         break;
        } else {
         break L27;
        }
       }
      } while(0);
      $668 = $1;
      $669 = (($668) + 40|0);
      $670 = HEAP32[$669>>2]|0;
      $671 = $670 & 65536;
      $672 = ($671|0)!=(0);
      if (!($672)) {
       $673 = $1;
       $674 = (($673) + 40|0);
       $675 = (($674) + 50|0);
       $676 = HEAP16[$675>>1]|0;
       $677 = $676&65535;
       $678 = ($677|0)==(2);
       do {
        if ($678) {
         $679 = $1;
         $680 = (($679) + 628|0);
         $681 = HEAP32[$680>>2]|0;
         _TIFFWarningExt($681,12344,12992,$vararg_buffer49);
         $682 = $1;
         HEAP32[$vararg_buffer51>>2] = 3;
         $683 = (_TIFFSetField($682,277,$vararg_buffer51)|0);
         $684 = ($683|0)!=(0);
         if ($684) {
          break;
         } else {
          break L27;
         }
        }
       } while(0);
       $685 = $1;
       $686 = (($685) + 40|0);
       $687 = (($686) + 50|0);
       $688 = HEAP16[$687>>1]|0;
       $689 = $688&65535;
       $690 = ($689|0)==(6);
       do {
        if ($690) {
         $691 = $1;
         $692 = (($691) + 628|0);
         $693 = HEAP32[$692>>2]|0;
         _TIFFWarningExt($693,12344,13072,$vararg_buffer54);
         $694 = $1;
         HEAP32[$vararg_buffer56>>2] = 3;
         $695 = (_TIFFSetField($694,277,$vararg_buffer56)|0);
         $696 = ($695|0)!=(0);
         if ($696) {
          break;
         } else {
          break L27;
         }
        } else {
         $697 = $1;
         $698 = (($697) + 40|0);
         $699 = (($698) + 50|0);
         $700 = HEAP16[$699>>1]|0;
         $701 = $700&65535;
         $702 = ($701|0)==(0);
         if ($702) {
          label = 160;
         } else {
          $703 = $1;
          $704 = (($703) + 40|0);
          $705 = (($704) + 50|0);
          $706 = HEAP16[$705>>1]|0;
          $707 = $706&65535;
          $708 = ($707|0)==(1);
          if ($708) {
           label = 160;
          }
         }
         do {
          if ((label|0) == 160) {
           $709 = $1;
           HEAP32[$vararg_buffer59>>2] = 1;
           $710 = (_TIFFSetField($709,277,$vararg_buffer59)|0);
           $711 = ($710|0)!=(0);
           if ($711) {
            break;
           } else {
            break L27;
           }
          }
         } while(0);
        }
       } while(0);
      }
     }
     $712 = $1;
     $713 = (($712) + 40|0);
     $714 = (($713) + 50|0);
     $715 = HEAP16[$714>>1]|0;
     $716 = $715&65535;
     $717 = ($716|0)==(3);
     if ($717) {
      $718 = $1;
      $719 = (($718) + 40|0);
      $720 = HEAP32[$719>>2]|0;
      $721 = $720 & 67108864;
      $722 = ($721|0)!=(0);
      if (!($722)) {
       $723 = $1;
       $724 = (($723) + 40|0);
       $725 = (($724) + 44|0);
       $726 = HEAP16[$725>>1]|0;
       $727 = $726&65535;
       $728 = ($727|0)>=(8);
       if ($728) {
        $729 = $1;
        $730 = (($729) + 40|0);
        $731 = (($730) + 58|0);
        $732 = HEAP16[$731>>1]|0;
        $733 = $732&65535;
        $734 = ($733|0)==(3);
        if ($734) {
         $735 = $1;
         $736 = (($735) + 40|0);
         $737 = (($736) + 50|0);
         HEAP16[$737>>1] = 2;
        } else {
         label = 171;
        }
       } else {
        label = 171;
       }
       if ((label|0) == 171) {
        $738 = $1;
        $739 = (($738) + 40|0);
        $740 = (($739) + 44|0);
        $741 = HEAP16[$740>>1]|0;
        $742 = $741&65535;
        $743 = ($742|0)>=(8);
        if (!($743)) {
         $747 = $1;
         _MissingRequired($747,13152);
         break;
        }
        $744 = $1;
        $745 = (($744) + 40|0);
        $746 = (($745) + 50|0);
        HEAP16[$746>>1] = 1;
       }
      }
     }
     $748 = $1;
     $749 = (($748) + 40|0);
     $750 = (($749) + 48|0);
     $751 = HEAP16[$750>>1]|0;
     $752 = $751&65535;
     $753 = ($752|0)!=(6);
     if ($753) {
      $754 = $1;
      $755 = (($754) + 40|0);
      $756 = HEAP32[$755>>2]|0;
      $757 = $756 & 16777216;
      $758 = ($757|0)!=(0);
      L244: do {
       if ($758) {
        $795 = $1;
        $796 = (($795) + 40|0);
        $797 = (($796) + 128|0);
        $798 = HEAP32[$797>>2]|0;
        $799 = ($798|0)==(1);
        L258: do {
         if ($799) {
          $800 = $1;
          $801 = (__TIFFFillStriles($800)|0);
          $802 = ($801|0)!=(0);
          if (!($802)) {
           label = 199;
           break;
          }
          $803 = $1;
          $804 = (($803) + 40|0);
          $805 = (($804) + 132|0);
          $806 = HEAP32[$805>>2]|0;
          $807 = $806;
          $808 = $807;
          $809 = HEAP32[$808>>2]|0;
          $810 = (($807) + 4)|0;
          $811 = $810;
          $812 = HEAP32[$811>>2]|0;
          $813 = ($809|0)!=(0);
          $814 = ($812|0)!=(0);
          $815 = $813 | $814;
          if (!($815)) {
           label = 199;
           break;
          }
          $816 = $1;
          $817 = (($816) + 40|0);
          $818 = (($817) + 136|0);
          $819 = HEAP32[$818>>2]|0;
          $820 = $819;
          $821 = $820;
          $822 = HEAP32[$821>>2]|0;
          $823 = (($820) + 4)|0;
          $824 = $823;
          $825 = HEAP32[$824>>2]|0;
          $826 = ($822|0)==(0);
          $827 = ($825|0)==(0);
          $828 = $826 & $827;
          if ($828) {
           $829 = $1;
           $830 = (($829) + 40|0);
           $831 = (($830) + 132|0);
           $832 = HEAP32[$831>>2]|0;
           $833 = $832;
           $834 = $833;
           $835 = HEAP32[$834>>2]|0;
           $836 = (($833) + 4)|0;
           $837 = $836;
           $838 = HEAP32[$837>>2]|0;
           $839 = ($835|0)!=(0);
           $840 = ($838|0)!=(0);
           $841 = $839 | $840;
           if (!($841)) {
            label = 191;
           }
          } else {
           label = 191;
          }
          do {
           if ((label|0) == 191) {
            $842 = $1;
            $843 = (($842) + 40|0);
            $844 = (($843) + 48|0);
            $845 = HEAP16[$844>>1]|0;
            $846 = $845&65535;
            $847 = ($846|0)==(1);
            if ($847) {
             $848 = $1;
             $849 = (($848) + 40|0);
             $850 = (($849) + 136|0);
             $851 = HEAP32[$850>>2]|0;
             $852 = $851;
             $853 = $852;
             $854 = HEAP32[$853>>2]|0;
             $855 = (($852) + 4)|0;
             $856 = $855;
             $857 = HEAP32[$856>>2]|0;
             $858 = $1;
             $859 = (($858) + 648|0);
             $860 = HEAP32[$859>>2]|0;
             $861 = $1;
             $862 = (($861) + 628|0);
             $863 = HEAP32[$862>>2]|0;
             $864 = (FUNCTION_TABLE_ii[$860 & 255]($863)|0);
             $865 = tempRet0;
             $866 = $1;
             $867 = (($866) + 40|0);
             $868 = (($867) + 132|0);
             $869 = HEAP32[$868>>2]|0;
             $870 = $869;
             $871 = $870;
             $872 = HEAP32[$871>>2]|0;
             $873 = (($870) + 4)|0;
             $874 = $873;
             $875 = HEAP32[$874>>2]|0;
             $876 = (_i64Subtract(($864|0),($865|0),($872|0),($875|0))|0);
             $877 = tempRet0;
             $878 = ($857>>>0)>($877>>>0);
             $879 = ($854>>>0)>($876>>>0);
             $880 = ($857|0)==($877|0);
             $881 = $880 & $879;
             $882 = $878 | $881;
             if ($882) {
              break;
             }
            }
            $883 = $1;
            $884 = (($883) + 8|0);
            $885 = HEAP32[$884>>2]|0;
            $886 = ($885|0)==(0);
            if (!($886)) {
             label = 199;
             break L258;
            }
            $887 = $1;
            $888 = (($887) + 40|0);
            $889 = (($888) + 48|0);
            $890 = HEAP16[$889>>1]|0;
            $891 = $890&65535;
            $892 = ($891|0)==(1);
            if (!($892)) {
             label = 199;
             break L258;
            }
            $893 = $1;
            $894 = (($893) + 40|0);
            $895 = (($894) + 136|0);
            $896 = HEAP32[$895>>2]|0;
            $897 = $896;
            $898 = $897;
            $899 = HEAP32[$898>>2]|0;
            $900 = (($897) + 4)|0;
            $901 = $900;
            $902 = HEAP32[$901>>2]|0;
            $903 = $1;
            $904 = (_TIFFScanlineSize64($903)|0);
            $905 = tempRet0;
            $906 = $1;
            $907 = (($906) + 40|0);
            $908 = (($907) + 20|0);
            $909 = HEAP32[$908>>2]|0;
            $910 = (___muldi3(($904|0),($905|0),($909|0),0)|0);
            $911 = tempRet0;
            $912 = ($902>>>0)<($911>>>0);
            $913 = ($899>>>0)<($910>>>0);
            $914 = ($902|0)==($911|0);
            $915 = $914 & $913;
            $916 = $912 | $915;
            if (!($916)) {
             label = 199;
             break L258;
            }
           }
          } while(0);
          $917 = $1;
          $918 = (($917) + 628|0);
          $919 = HEAP32[$918>>2]|0;
          _TIFFWarningExt($919,12344,13280,$vararg_buffer64);
          $920 = $1;
          $921 = HEAP32[$dir>>2]|0;
          $922 = $dircount;
          $923 = (_EstimateStripByteCounts($920,$921,$922)|0);
          $924 = ($923|0)<(0);
          if ($924) {
           break L27;
          } else {
           break;
          }
         } else {
          label = 199;
         }
        } while(0);
        if ((label|0) == 199) {
         $925 = $1;
         $926 = (($925) + 40|0);
         $927 = (($926) + 86|0);
         $928 = HEAP16[$927>>1]|0;
         $929 = $928&65535;
         $930 = ($929|0)==(1);
         do {
          if ($930) {
           $931 = $1;
           $932 = (($931) + 40|0);
           $933 = (($932) + 128|0);
           $934 = HEAP32[$933>>2]|0;
           $935 = ($934>>>0)>(2);
           if (!($935)) {
            break;
           }
           $936 = $1;
           $937 = (($936) + 40|0);
           $938 = (($937) + 48|0);
           $939 = HEAP16[$938>>1]|0;
           $940 = $939&65535;
           $941 = ($940|0)==(1);
           if (!($941)) {
            break;
           }
           $942 = $1;
           $943 = (($942) + 40|0);
           $944 = (($943) + 136|0);
           $945 = HEAP32[$944>>2]|0;
           $946 = $945;
           $947 = $946;
           $948 = HEAP32[$947>>2]|0;
           $949 = (($946) + 4)|0;
           $950 = $949;
           $951 = HEAP32[$950>>2]|0;
           $952 = $1;
           $953 = (($952) + 40|0);
           $954 = (($953) + 136|0);
           $955 = HEAP32[$954>>2]|0;
           $956 = (($955) + 8|0);
           $957 = $956;
           $958 = $957;
           $959 = HEAP32[$958>>2]|0;
           $960 = (($957) + 4)|0;
           $961 = $960;
           $962 = HEAP32[$961>>2]|0;
           $963 = ($948|0)!=($959|0);
           $964 = ($951|0)!=($962|0);
           $965 = $963 | $964;
           if (!($965)) {
            break;
           }
           $966 = $1;
           $967 = (($966) + 40|0);
           $968 = (($967) + 136|0);
           $969 = HEAP32[$968>>2]|0;
           $970 = $969;
           $971 = $970;
           $972 = HEAP32[$971>>2]|0;
           $973 = (($970) + 4)|0;
           $974 = $973;
           $975 = HEAP32[$974>>2]|0;
           $976 = ($972|0)!=(0);
           $977 = ($975|0)!=(0);
           $978 = $976 | $977;
           if (!($978)) {
            break;
           }
           $979 = $1;
           $980 = (($979) + 40|0);
           $981 = (($980) + 136|0);
           $982 = HEAP32[$981>>2]|0;
           $983 = (($982) + 8|0);
           $984 = $983;
           $985 = $984;
           $986 = HEAP32[$985>>2]|0;
           $987 = (($984) + 4)|0;
           $988 = $987;
           $989 = HEAP32[$988>>2]|0;
           $990 = ($986|0)!=(0);
           $991 = ($989|0)!=(0);
           $992 = $990 | $991;
           if (!($992)) {
            break;
           }
           $993 = $1;
           $994 = (($993) + 628|0);
           $995 = HEAP32[$994>>2]|0;
           _TIFFWarningExt($995,12344,13360,$vararg_buffer66);
           $996 = $1;
           $997 = HEAP32[$dir>>2]|0;
           $998 = $dircount;
           $999 = (_EstimateStripByteCounts($996,$997,$998)|0);
           $1000 = ($999|0)<(0);
           if ($1000) {
            break L27;
           } else {
            break;
           }
          }
         } while(0);
        }
       } else {
        $759 = $1;
        $760 = (($759) + 40|0);
        $761 = (($760) + 86|0);
        $762 = HEAP16[$761>>1]|0;
        $763 = $762&65535;
        $764 = ($763|0)==(1);
        if ($764) {
         $765 = $1;
         $766 = (($765) + 40|0);
         $767 = (($766) + 128|0);
         $768 = HEAP32[$767>>2]|0;
         $769 = ($768>>>0)>(1);
         if (!($769)) {
          label = 180;
         }
        } else {
         label = 180;
        }
        do {
         if ((label|0) == 180) {
          $770 = $1;
          $771 = (($770) + 40|0);
          $772 = (($771) + 86|0);
          $773 = HEAP16[$772>>1]|0;
          $774 = $773&65535;
          $775 = ($774|0)==(2);
          if ($775) {
           $776 = $1;
           $777 = (($776) + 40|0);
           $778 = (($777) + 128|0);
           $779 = HEAP32[$778>>2]|0;
           $780 = $1;
           $781 = (($780) + 40|0);
           $782 = (($781) + 58|0);
           $783 = HEAP16[$782>>1]|0;
           $784 = $783&65535;
           $785 = ($779|0)!=($784|0);
           if ($785) {
            break;
           }
          }
          $787 = $1;
          $788 = (($787) + 628|0);
          $789 = HEAP32[$788>>2]|0;
          _TIFFWarningExt($789,12344,13184,$vararg_buffer62);
          $790 = $1;
          $791 = HEAP32[$dir>>2]|0;
          $792 = $dircount;
          $793 = (_EstimateStripByteCounts($790,$791,$792)|0);
          $794 = ($793|0)<(0);
          if ($794) {
           break L27;
          } else {
           break L244;
          }
         }
        } while(0);
        $786 = $1;
        _MissingRequired($786,13168);
        break L27;
       }
      } while(0);
     }
     $1001 = HEAP32[$dir>>2]|0;
     $1002 = ($1001|0)!=(0|0);
     if ($1002) {
      $1003 = HEAP32[$dir>>2]|0;
      __TIFFfree($1003);
      HEAP32[$dir>>2] = 0;
     }
     $1004 = $1;
     $1005 = (($1004) + 40|0);
     $1006 = HEAP32[$1005>>2]|0;
     $1007 = $1006 & 524288;
     $1008 = ($1007|0)!=(0);
     if (!($1008)) {
      $1009 = $1;
      $1010 = (($1009) + 40|0);
      $1011 = (($1010) + 44|0);
      $1012 = HEAP16[$1011>>1]|0;
      $1013 = $1012&65535;
      $1014 = ($1013|0)>=(16);
      if ($1014) {
       $1015 = $1;
       $1016 = (($1015) + 40|0);
       $1017 = (($1016) + 66|0);
       HEAP16[$1017>>1] = -1;
      } else {
       $1018 = $1;
       $1019 = (($1018) + 40|0);
       $1020 = (($1019) + 44|0);
       $1021 = HEAP16[$1020>>1]|0;
       $1022 = $1021&65535;
       $1023 = 1 << $1022;
       $1024 = (($1023) - 1)|0;
       $1025 = $1024&65535;
       $1026 = $1;
       $1027 = (($1026) + 40|0);
       $1028 = (($1027) + 66|0);
       HEAP16[$1028>>1] = $1025;
      }
     }
     $1029 = $1;
     $1030 = (($1029) + 40|0);
     $1031 = (($1030) + 128|0);
     $1032 = HEAP32[$1031>>2]|0;
     $1033 = ($1032>>>0)>(1);
     if ($1033) {
      $1034 = $1;
      $1035 = (($1034) + 40|0);
      $1036 = (($1035) + 140|0);
      HEAP32[$1036>>2] = 1;
      $strip = 1;
      while(1) {
       $1037 = $strip;
       $1038 = $1;
       $1039 = (($1038) + 40|0);
       $1040 = (($1039) + 128|0);
       $1041 = HEAP32[$1040>>2]|0;
       $1042 = ($1037>>>0)<($1041>>>0);
       if (!($1042)) {
        break;
       }
       $1043 = $strip;
       $1044 = (($1043) - 1)|0;
       $1045 = $1;
       $1046 = (($1045) + 40|0);
       $1047 = (($1046) + 132|0);
       $1048 = HEAP32[$1047>>2]|0;
       $1049 = (($1048) + ($1044<<3)|0);
       $1050 = $1049;
       $1051 = $1050;
       $1052 = HEAP32[$1051>>2]|0;
       $1053 = (($1050) + 4)|0;
       $1054 = $1053;
       $1055 = HEAP32[$1054>>2]|0;
       $1056 = $strip;
       $1057 = $1;
       $1058 = (($1057) + 40|0);
       $1059 = (($1058) + 132|0);
       $1060 = HEAP32[$1059>>2]|0;
       $1061 = (($1060) + ($1056<<3)|0);
       $1062 = $1061;
       $1063 = $1062;
       $1064 = HEAP32[$1063>>2]|0;
       $1065 = (($1062) + 4)|0;
       $1066 = $1065;
       $1067 = HEAP32[$1066>>2]|0;
       $1068 = ($1055>>>0)>($1067>>>0);
       $1069 = ($1052>>>0)>($1064>>>0);
       $1070 = ($1055|0)==($1067|0);
       $1071 = $1070 & $1069;
       $1072 = $1068 | $1071;
       if ($1072) {
        label = 222;
        break;
       }
       $1076 = $strip;
       $1077 = (($1076) + 1)|0;
       $strip = $1077;
      }
      if ((label|0) == 222) {
       $1073 = $1;
       $1074 = (($1073) + 40|0);
       $1075 = (($1074) + 140|0);
       HEAP32[$1075>>2] = 0;
      }
     }
     $1078 = $1;
     $1079 = (($1078) + 504|0);
     $1080 = HEAP32[$1079>>2]|0;
     $1081 = $1;
     (FUNCTION_TABLE_ii[$1080 & 255]($1081)|0);
     $1082 = $1;
     $1083 = (($1082) + 40|0);
     $1084 = (($1083) + 86|0);
     $1085 = HEAP16[$1084>>1]|0;
     $1086 = $1085&65535;
     $1087 = ($1086|0)==(1);
     L312: do {
      if ($1087) {
       $1088 = $1;
       $1089 = (($1088) + 40|0);
       $1090 = (($1089) + 128|0);
       $1091 = HEAP32[$1090>>2]|0;
       $1092 = ($1091|0)==(1);
       if (!($1092)) {
        break;
       }
       $1093 = $1;
       $1094 = (($1093) + 40|0);
       $1095 = (($1094) + 48|0);
       $1096 = HEAP16[$1095>>1]|0;
       $1097 = $1096&65535;
       $1098 = ($1097|0)==(1);
       if (!($1098)) {
        break;
       }
       $1099 = $1;
       $1100 = (($1099) + 12|0);
       $1101 = HEAP32[$1100>>2]|0;
       $1102 = $1101 & 33792;
       $1103 = ($1102|0)==(32768);
       if (!($1103)) {
        break;
       }
       $1104 = $1;
       $1105 = (__TIFFFillStriles($1104)|0);
       $1106 = ($1105|0)!=(0);
       do {
        if ($1106) {
         $1107 = $1;
         $1108 = (($1107) + 40|0);
         $1109 = (($1108) + 136|0);
         $1110 = HEAP32[$1109>>2]|0;
         $1111 = ($1110|0)!=(0|0);
         if (!($1111)) {
          break;
         }
         $1112 = $1;
         _ChopUpSingleUncompressedStrip($1112);
         break L312;
        }
       } while(0);
       $0 = 0;
       $1167 = $0;
       STACKTOP = sp;return ($1167|0);
      }
     } while(0);
     $1113 = $1;
     $1114 = (($1113) + 12|0);
     $1115 = HEAP32[$1114>>2]|0;
     $1116 = $1115 & -9;
     HEAP32[$1114>>2] = $1116;
     $1117 = $1;
     $1118 = (($1117) + 12|0);
     $1119 = HEAP32[$1118>>2]|0;
     $1120 = $1119 & -2097153;
     HEAP32[$1118>>2] = $1120;
     $1121 = $1;
     $1122 = (($1121) + 444|0);
     HEAP32[$1122>>2] = -1;
     $1123 = $1;
     $1124 = (($1123) + 452|0);
     HEAP32[$1124>>2] = -1;
     $1125 = $1;
     $1126 = (($1125) + 488|0);
     HEAP32[$1126>>2] = -1;
     $1127 = $1;
     $1128 = (($1127) + 492|0);
     HEAP32[$1128>>2] = -1;
     $1129 = $1;
     $1130 = (($1129) + 496|0);
     HEAP32[$1130>>2] = -1;
     $1131 = $1;
     $1132 = (_TIFFScanlineSize($1131)|0);
     $1133 = $1;
     $1134 = (($1133) + 580|0);
     HEAP32[$1134>>2] = $1132;
     $1135 = $1;
     $1136 = (($1135) + 580|0);
     $1137 = HEAP32[$1136>>2]|0;
     $1138 = ($1137|0)!=(0);
     if (!($1138)) {
      $1139 = $1;
      $1140 = (($1139) + 628|0);
      $1141 = HEAP32[$1140>>2]|0;
      _TIFFErrorExt($1141,12344,13440,$vararg_buffer68);
      $0 = 0;
      $1167 = $0;
      STACKTOP = sp;return ($1167|0);
     }
     $1142 = $1;
     $1143 = (($1142) + 12|0);
     $1144 = HEAP32[$1143>>2]|0;
     $1145 = $1144 & 1024;
     $1146 = ($1145|0)!=(0);
     do {
      if ($1146) {
       $1147 = $1;
       $1148 = (_TIFFTileSize($1147)|0);
       $1149 = $1;
       $1150 = (($1149) + 496|0);
       HEAP32[$1150>>2] = $1148;
       $1151 = $1;
       $1152 = (($1151) + 496|0);
       $1153 = HEAP32[$1152>>2]|0;
       $1154 = ($1153|0)!=(0);
       if ($1154) {
        break;
       }
       $1155 = $1;
       $1156 = (($1155) + 628|0);
       $1157 = HEAP32[$1156>>2]|0;
       _TIFFErrorExt($1157,12344,13480,$vararg_buffer70);
       $0 = 0;
       $1167 = $0;
       STACKTOP = sp;return ($1167|0);
      } else {
       $1158 = $1;
       $1159 = (_TIFFStripSize($1158)|0);
       $1160 = ($1159|0)!=(0);
       if ($1160) {
        break;
       }
       $1161 = $1;
       $1162 = (($1161) + 628|0);
       $1163 = HEAP32[$1162>>2]|0;
       _TIFFErrorExt($1163,12344,13512,$vararg_buffer72);
       $0 = 0;
       $1167 = $0;
       STACKTOP = sp;return ($1167|0);
      }
     } while(0);
     $0 = 1;
     $1167 = $0;
     STACKTOP = sp;return ($1167|0);
    }
   }
  }
 } while(0);
 $1164 = HEAP32[$dir>>2]|0;
 $1165 = ($1164|0)!=(0|0);
 if ($1165) {
  $1166 = HEAP32[$dir>>2]|0;
  __TIFFfree($1166);
 }
 $0 = 0;
 $1167 = $0;
 STACKTOP = sp;return ($1167|0);
}
function __TIFFFillStriles($tif) {
 $tif = $tif|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 STACKTOP = sp;return 1;
}
function _TIFFCheckDirOffset($tif,$0,$1) {
 $tif = $tif|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n = 0, $new_dirlist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $3 = $tif;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $4;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 if ($17) {
  $2 = 0;
  $106 = $2;
  STACKTOP = sp;return ($106|0);
 }
 $n = 0;
 while(1) {
  $18 = $n;
  $19 = $18&65535;
  $20 = $3;
  $21 = (($20) + 38|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = ($19|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $3;
  $26 = (($25) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   break;
  }
  $29 = $n;
  $30 = $29&65535;
  $31 = $3;
  $32 = (($31) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<3)|0);
  $35 = $34;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = $4;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = ($37|0)==($43|0);
  $48 = ($40|0)==($46|0);
  $49 = $47 & $48;
  if ($49) {
   label = 7;
   break;
  }
  $50 = $n;
  $51 = (($50) + 1)<<16>>16;
  $n = $51;
 }
 if ((label|0) == 7) {
  $2 = 0;
  $106 = $2;
  STACKTOP = sp;return ($106|0);
 }
 $52 = $3;
 $53 = (($52) + 38|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = (($54) + 1)<<16>>16;
 HEAP16[$53>>1] = $55;
 $56 = $3;
 $57 = (($56) + 38|0);
 $58 = HEAP16[$57>>1]|0;
 $59 = $58&65535;
 $60 = $3;
 $61 = (($60) + 36|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = $62&65535;
 $64 = ($59|0)>($63|0);
 do {
  if ($64) {
   $65 = $3;
   $66 = $3;
   $67 = (($66) + 32|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $3;
   $70 = (($69) + 38|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71&65535;
   $73 = (__TIFFCheckRealloc($65,$68,$72,16,14952)|0);
   $new_dirlist = $73;
   $74 = $new_dirlist;
   $75 = ($74|0)!=(0|0);
   if ($75) {
    $76 = $3;
    $77 = (($76) + 38|0);
    $78 = HEAP16[$77>>1]|0;
    $79 = $78&65535;
    $80 = $79<<1;
    $81 = $80&65535;
    $82 = $3;
    $83 = (($82) + 36|0);
    HEAP16[$83>>1] = $81;
    $84 = $new_dirlist;
    $85 = $3;
    $86 = (($85) + 32|0);
    HEAP32[$86>>2] = $84;
    break;
   }
   $2 = 0;
   $106 = $2;
   STACKTOP = sp;return ($106|0);
  }
 } while(0);
 $87 = $4;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = (($87) + 4)|0;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = $3;
 $94 = (($93) + 38|0);
 $95 = HEAP16[$94>>1]|0;
 $96 = $95&65535;
 $97 = (($96) - 1)|0;
 $98 = $3;
 $99 = (($98) + 32|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + ($97<<3)|0);
 $102 = $101;
 $103 = $102;
 HEAP32[$103>>2] = $89;
 $104 = (($102) + 4)|0;
 $105 = $104;
 HEAP32[$105>>2] = $92;
 $2 = 1;
 $106 = $2;
 STACKTOP = sp;return ($106|0);
}
function _TIFFFetchDirectory($tif,$0,$1,$pdir,$nextdiroff) {
 $tif = $tif|0;
 $0 = $0|0;
 $1 = $1|0;
 $pdir = $pdir|0;
 $nextdiroff = $nextdiroff|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $dir = 0, $dircount16 = 0, $dircount64 = 0, $dircount642 = 0, $dirsize = 0, $m = 0, $m1 = 0, $ma = 0, $mb = 0, $n = 0, $nextdiroff32 = 0, $nextdiroff323 = 0, $off = 0, $origdir = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0;
 var $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 32|0;
 $vararg_buffer24 = sp + 40|0;
 $vararg_buffer22 = sp + 48|0;
 $vararg_buffer20 = sp + 120|0;
 $vararg_buffer18 = sp + 88|0;
 $vararg_buffer16 = sp + 80|0;
 $vararg_buffer14 = sp + 96|0;
 $vararg_buffer11 = sp + 112|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer4 = sp + 56|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp;
 $4 = sp + 104|0;
 $dircount16 = sp + 178|0;
 $dircount64 = sp + 64|0;
 $nextdiroff32 = sp + 128|0;
 $dircount642 = sp + 72|0;
 $nextdiroff323 = sp + 172|0;
 $3 = $tif;
 $7 = $4;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $5 = $pdir;
 $6 = $nextdiroff;
 $11 = $5;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((14544|0),(12552|0),4453,(14552|0));
  // unreachable;
 }
 $13 = $4;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = (($19) + 16|0);
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $15;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $18;
 $25 = $6;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $6;
  $28 = $27;
  $29 = $28;
  HEAP32[$29>>2] = 0;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = 0;
 }
 $32 = $3;
 $33 = (($32) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & 2048;
 $36 = ($35|0)!=(0);
 do {
  if ($36) {
   $213 = $3;
   $214 = (($213) + 16|0);
   $215 = $214;
   $216 = $215;
   $217 = HEAP32[$216>>2]|0;
   $218 = (($215) + 4)|0;
   $219 = $218;
   $220 = HEAP32[$219>>2]|0;
   $off = $217;
   $221 = $off;
   $222 = ($221|0)<(0);
   $223 = $222 << 31 >> 31;
   $224 = $3;
   $225 = (($224) + 16|0);
   $226 = $225;
   $227 = $226;
   $228 = HEAP32[$227>>2]|0;
   $229 = (($226) + 4)|0;
   $230 = $229;
   $231 = HEAP32[$230>>2]|0;
   $232 = ($221|0)!=($228|0);
   $233 = ($223|0)!=($231|0);
   $234 = $232 | $233;
   if ($234) {
    $235 = $3;
    $236 = (($235) + 628|0);
    $237 = HEAP32[$236>>2]|0;
    _TIFFErrorExt($237,14520,14800,$vararg_buffer14);
    $2 = 0;
    $541 = $2;
    STACKTOP = sp;return ($541|0);
   }
   $238 = $3;
   $239 = (($238) + 12|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = $240 & 524288;
   $242 = ($241|0)!=(0);
   do {
    if ($242) {
     $276 = $off;
     $277 = (($276) + 8)|0;
     $m1 = $277;
     $278 = $m1;
     $279 = $off;
     $280 = ($278|0)<($279|0);
     if (!($280)) {
      $281 = $m1;
      $282 = ($281|0)<(8);
      if (!($282)) {
       $283 = $m1;
       $284 = $3;
       $285 = (($284) + 616|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($283|0)>($286|0);
       if (!($287)) {
        $291 = $3;
        $292 = (($291) + 612|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = $off;
        $295 = (($293) + ($294)|0);
        __TIFFmemcpy($dircount642,$295,8);
        $296 = $off;
        $297 = (($296) + 8)|0;
        $off = $297;
        $298 = $3;
        $299 = (($298) + 12|0);
        $300 = HEAP32[$299>>2]|0;
        $301 = $300 & 128;
        $302 = ($301|0)!=(0);
        if ($302) {
         _TIFFSwabLong8($dircount642);
        }
        $303 = $dircount642;
        $304 = $303;
        $305 = HEAP32[$304>>2]|0;
        $306 = (($303) + 4)|0;
        $307 = $306;
        $308 = HEAP32[$307>>2]|0;
        $309 = ($308>>>0)>(0);
        $310 = ($305>>>0)>(4096);
        $311 = ($308|0)==(0);
        $312 = $311 & $310;
        $313 = $309 | $312;
        if (!($313)) {
         $317 = $dircount642;
         $318 = $317;
         $319 = HEAP32[$318>>2]|0;
         $320 = (($317) + 4)|0;
         $321 = $320;
         $322 = HEAP32[$321>>2]|0;
         $323 = $319&65535;
         HEAP16[$dircount16>>1] = $323;
         $dirsize = 20;
         break;
        }
        $314 = $3;
        $315 = (($314) + 628|0);
        $316 = HEAP32[$315>>2]|0;
        _TIFFErrorExt($316,14520,14656,$vararg_buffer22);
        $2 = 0;
        $541 = $2;
        STACKTOP = sp;return ($541|0);
       }
      }
     }
     $288 = $3;
     $289 = (($288) + 628|0);
     $290 = HEAP32[$289>>2]|0;
     _TIFFErrorExt($290,14520,14800,$vararg_buffer20);
     $2 = 0;
     $541 = $2;
     STACKTOP = sp;return ($541|0);
    } else {
     $243 = $off;
     $244 = (($243) + 2)|0;
     $m = $244;
     $245 = $m;
     $246 = $off;
     $247 = ($245|0)<($246|0);
     if (!($247)) {
      $248 = $m;
      $249 = ($248|0)<(2);
      if (!($249)) {
       $250 = $m;
       $251 = $3;
       $252 = (($251) + 616|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = ($250|0)>($253|0);
       if (!($254)) {
        $258 = $3;
        $259 = (($258) + 612|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $off;
        $262 = (($260) + ($261)|0);
        __TIFFmemcpy($dircount16,$262,2);
        $263 = $off;
        $264 = (($263) + 2)|0;
        $off = $264;
        $265 = $3;
        $266 = (($265) + 12|0);
        $267 = HEAP32[$266>>2]|0;
        $268 = $267 & 128;
        $269 = ($268|0)!=(0);
        if ($269) {
         _TIFFSwabShort($dircount16);
        }
        $270 = HEAP16[$dircount16>>1]|0;
        $271 = $270&65535;
        $272 = ($271|0)>(4096);
        if (!($272)) {
         $dirsize = 12;
         break;
        }
        $273 = $3;
        $274 = (($273) + 628|0);
        $275 = HEAP32[$274>>2]|0;
        _TIFFErrorExt($275,14520,14656,$vararg_buffer18);
        $2 = 0;
        $541 = $2;
        STACKTOP = sp;return ($541|0);
       }
      }
     }
     $255 = $3;
     $256 = (($255) + 628|0);
     $257 = HEAP32[$256>>2]|0;
     _TIFFErrorExt($257,14520,14800,$vararg_buffer16);
     $2 = 0;
     $541 = $2;
     STACKTOP = sp;return ($541|0);
    }
   } while(0);
   $324 = HEAP16[$dircount16>>1]|0;
   $325 = $324&65535;
   $326 = ($325|0)==(0);
   if ($326) {
    $327 = $3;
    $328 = (($327) + 628|0);
    $329 = HEAP32[$328>>2]|0;
    _TIFFErrorExt($329,14520,14840,$vararg_buffer24);
    $2 = 0;
    $541 = $2;
    STACKTOP = sp;return ($541|0);
   }
   $330 = $3;
   $331 = HEAP16[$dircount16>>1]|0;
   $332 = $331&65535;
   $333 = $dirsize;
   $334 = (__TIFFCheckMalloc($330,$332,$333,14736)|0);
   $origdir = $334;
   $335 = $origdir;
   $336 = ($335|0)==(0|0);
   if ($336) {
    $2 = 0;
    $541 = $2;
    STACKTOP = sp;return ($541|0);
   }
   $337 = $off;
   $338 = HEAP16[$dircount16>>1]|0;
   $339 = $338&65535;
   $340 = $dirsize;
   $341 = Math_imul($339, $340)|0;
   $342 = (($337) + ($341))|0;
   $m = $342;
   $343 = $m;
   $344 = $off;
   $345 = ($343|0)<($344|0);
   if (!($345)) {
    $346 = $m;
    $347 = HEAP16[$dircount16>>1]|0;
    $348 = $347&65535;
    $349 = $dirsize;
    $350 = Math_imul($348, $349)|0;
    $351 = ($346|0)<($350|0);
    if (!($351)) {
     $352 = $m;
     $353 = $3;
     $354 = (($353) + 616|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = ($352|0)>($355|0);
     if (!($356)) {
      $361 = $origdir;
      $362 = $3;
      $363 = (($362) + 612|0);
      $364 = HEAP32[$363>>2]|0;
      $365 = $off;
      $366 = (($364) + ($365)|0);
      $367 = HEAP16[$dircount16>>1]|0;
      $368 = $367&65535;
      $369 = $dirsize;
      $370 = Math_imul($368, $369)|0;
      __TIFFmemcpy($361,$366,$370);
      $371 = $6;
      $372 = ($371|0)!=(0|0);
      if ($372) {
       $373 = HEAP16[$dircount16>>1]|0;
       $374 = $373&65535;
       $375 = $dirsize;
       $376 = Math_imul($374, $375)|0;
       $377 = $off;
       $378 = (($377) + ($376))|0;
       $off = $378;
       $379 = $3;
       $380 = (($379) + 12|0);
       $381 = HEAP32[$380>>2]|0;
       $382 = $381 & 524288;
       $383 = ($382|0)!=(0);
       if ($383) {
        $412 = $off;
        $413 = (($412) + 8)|0;
        $m = $413;
        $414 = $m;
        $415 = $off;
        $416 = ($414|0)<($415|0);
        if ($416) {
         label = 86;
        } else {
         $417 = $m;
         $418 = ($417|0)<(8);
         if ($418) {
          label = 86;
         } else {
          $419 = $m;
          $420 = $3;
          $421 = (($420) + 616|0);
          $422 = HEAP32[$421>>2]|0;
          $423 = ($419|0)>($422|0);
          if ($423) {
           label = 86;
          } else {
           $429 = $6;
           $430 = $3;
           $431 = (($430) + 612|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = $off;
           $434 = (($432) + ($433)|0);
           __TIFFmemcpy($429,$434,8);
          }
         }
        }
        if ((label|0) == 86) {
         $424 = $6;
         $425 = $424;
         $426 = $425;
         HEAP32[$426>>2] = 0;
         $427 = (($425) + 4)|0;
         $428 = $427;
         HEAP32[$428>>2] = 0;
        }
        $435 = $3;
        $436 = (($435) + 12|0);
        $437 = HEAP32[$436>>2]|0;
        $438 = $437 & 128;
        $439 = ($438|0)!=(0);
        if ($439) {
         $440 = $6;
         _TIFFSwabLong8($440);
        }
       } else {
        $384 = $off;
        $385 = (($384) + 4)|0;
        $m = $385;
        $386 = $m;
        $387 = $off;
        $388 = ($386|0)<($387|0);
        if ($388) {
         label = 78;
        } else {
         $389 = $m;
         $390 = ($389|0)<(4);
         if ($390) {
          label = 78;
         } else {
          $391 = $m;
          $392 = $3;
          $393 = (($392) + 616|0);
          $394 = HEAP32[$393>>2]|0;
          $395 = ($391|0)>($394|0);
          if ($395) {
           label = 78;
          } else {
           $396 = $3;
           $397 = (($396) + 612|0);
           $398 = HEAP32[$397>>2]|0;
           $399 = $off;
           $400 = (($398) + ($399)|0);
           __TIFFmemcpy($nextdiroff323,$400,4);
          }
         }
        }
        if ((label|0) == 78) {
         HEAP32[$nextdiroff323>>2] = 0;
        }
        $401 = $3;
        $402 = (($401) + 12|0);
        $403 = HEAP32[$402>>2]|0;
        $404 = $403 & 128;
        $405 = ($404|0)!=(0);
        if ($405) {
         _TIFFSwabLong($nextdiroff323);
        }
        $406 = HEAP32[$nextdiroff323>>2]|0;
        $407 = $6;
        $408 = $407;
        $409 = $408;
        HEAP32[$409>>2] = $406;
        $410 = (($408) + 4)|0;
        $411 = $410;
        HEAP32[$411>>2] = 0;
       }
      }
      break;
     }
    }
   }
   $357 = $3;
   $358 = (($357) + 628|0);
   $359 = HEAP32[$358>>2]|0;
   _TIFFErrorExt($359,14520,14920,$vararg_buffer26);
   $360 = $origdir;
   __TIFFfree($360);
   $2 = 0;
   $541 = $2;
   STACKTOP = sp;return ($541|0);
  } else {
   $37 = $3;
   $38 = (($37) + 640|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $3;
   $41 = (($40) + 628|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $3;
   $44 = (($43) + 16|0);
   $45 = $44;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($45) + 4)|0;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = (FUNCTION_TABLE_iiiii[$39 & 255]($42,$47,$50,0)|0);
   $52 = tempRet0;
   $53 = $3;
   $54 = (($53) + 16|0);
   $55 = $54;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 4)|0;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = ($51|0)==($57|0);
   $62 = ($52|0)==($60|0);
   $63 = $61 & $62;
   if (!($63)) {
    $64 = $3;
    $65 = (($64) + 628|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $3;
    $68 = HEAP32[$67>>2]|0;
    HEAP32[$vararg_buffer>>2] = $68;
    _TIFFErrorExt($66,14520,14576,$vararg_buffer);
    $2 = 0;
    $541 = $2;
    STACKTOP = sp;return ($541|0);
   }
   $69 = $3;
   $70 = (($69) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $71 & 524288;
   $73 = ($72|0)!=(0);
   do {
    if ($73) {
     $98 = $3;
     $99 = (($98) + 632|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $3;
     $102 = (($101) + 628|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (FUNCTION_TABLE_iiii[$100 & 255]($103,$dircount64,8)|0);
     $105 = ($104|0)==(8);
     if (!($105)) {
      $106 = $3;
      $107 = (($106) + 628|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = $3;
      $110 = HEAP32[$109>>2]|0;
      HEAP32[$vararg_buffer6>>2] = $110;
      _TIFFErrorExt($108,14520,14616,$vararg_buffer6);
      $2 = 0;
      $541 = $2;
      STACKTOP = sp;return ($541|0);
     }
     $111 = $3;
     $112 = (($111) + 12|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = $113 & 128;
     $115 = ($114|0)!=(0);
     if ($115) {
      _TIFFSwabLong8($dircount64);
     }
     $116 = $dircount64;
     $117 = $116;
     $118 = HEAP32[$117>>2]|0;
     $119 = (($116) + 4)|0;
     $120 = $119;
     $121 = HEAP32[$120>>2]|0;
     $122 = ($121>>>0)>(0);
     $123 = ($118>>>0)>(4096);
     $124 = ($121|0)==(0);
     $125 = $124 & $123;
     $126 = $122 | $125;
     if (!($126)) {
      $130 = $dircount64;
      $131 = $130;
      $132 = HEAP32[$131>>2]|0;
      $133 = (($130) + 4)|0;
      $134 = $133;
      $135 = HEAP32[$134>>2]|0;
      $136 = $132&65535;
      HEAP16[$dircount16>>1] = $136;
      $dirsize = 20;
      break;
     }
     $127 = $3;
     $128 = (($127) + 628|0);
     $129 = HEAP32[$128>>2]|0;
     _TIFFErrorExt($129,14520,14656,$vararg_buffer9);
     $2 = 0;
     $541 = $2;
     STACKTOP = sp;return ($541|0);
    } else {
     $74 = $3;
     $75 = (($74) + 632|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $3;
     $78 = (($77) + 628|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (FUNCTION_TABLE_iiii[$76 & 255]($79,$dircount16,2)|0);
     $81 = ($80|0)==(2);
     if (!($81)) {
      $82 = $3;
      $83 = (($82) + 628|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $3;
      $86 = HEAP32[$85>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $86;
      _TIFFErrorExt($84,14520,14616,$vararg_buffer1);
      $2 = 0;
      $541 = $2;
      STACKTOP = sp;return ($541|0);
     }
     $87 = $3;
     $88 = (($87) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $89 & 128;
     $91 = ($90|0)!=(0);
     if ($91) {
      _TIFFSwabShort($dircount16);
     }
     $92 = HEAP16[$dircount16>>1]|0;
     $93 = $92&65535;
     $94 = ($93|0)>(4096);
     if (!($94)) {
      $dirsize = 12;
      break;
     }
     $95 = $3;
     $96 = (($95) + 628|0);
     $97 = HEAP32[$96>>2]|0;
     _TIFFErrorExt($97,14520,14656,$vararg_buffer4);
     $2 = 0;
     $541 = $2;
     STACKTOP = sp;return ($541|0);
    }
   } while(0);
   $137 = $3;
   $138 = HEAP16[$dircount16>>1]|0;
   $139 = $138&65535;
   $140 = $dirsize;
   $141 = (__TIFFCheckMalloc($137,$139,$140,14736)|0);
   $origdir = $141;
   $142 = $origdir;
   $143 = ($142|0)==(0|0);
   if ($143) {
    $2 = 0;
    $541 = $2;
    STACKTOP = sp;return ($541|0);
   }
   $144 = $3;
   $145 = (($144) + 632|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $3;
   $148 = (($147) + 628|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $origdir;
   $151 = HEAP16[$dircount16>>1]|0;
   $152 = $151&65535;
   $153 = $dirsize;
   $154 = Math_imul($152, $153)|0;
   $155 = (FUNCTION_TABLE_iiii[$146 & 255]($149,$150,$154)|0);
   $156 = HEAP16[$dircount16>>1]|0;
   $157 = $156&65535;
   $158 = $dirsize;
   $159 = Math_imul($157, $158)|0;
   $160 = ($155|0)==($159|0);
   if (!($160)) {
    $161 = $3;
    $162 = (($161) + 628|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = $3;
    $165 = HEAP32[$164>>2]|0;
    HEAP32[$vararg_buffer11>>2] = $165;
    _TIFFErrorExt($163,14520,14760,$vararg_buffer11);
    $166 = $origdir;
    __TIFFfree($166);
    $2 = 0;
    $541 = $2;
    STACKTOP = sp;return ($541|0);
   }
   $167 = $6;
   $168 = ($167|0)!=(0|0);
   if ($168) {
    $169 = $3;
    $170 = (($169) + 12|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $171 & 524288;
    $173 = ($172|0)!=(0);
    if ($173) {
     $193 = $3;
     $194 = (($193) + 632|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = $3;
     $197 = (($196) + 628|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = $6;
     $200 = (FUNCTION_TABLE_iiii[$195 & 255]($198,$199,8)|0);
     $201 = ($200|0)==(8);
     if (!($201)) {
      $202 = $6;
      $203 = $202;
      $204 = $203;
      HEAP32[$204>>2] = 0;
      $205 = (($203) + 4)|0;
      $206 = $205;
      HEAP32[$206>>2] = 0;
     }
     $207 = $3;
     $208 = (($207) + 12|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = $209 & 128;
     $211 = ($210|0)!=(0);
     if ($211) {
      $212 = $6;
      _TIFFSwabLong8($212);
     }
    } else {
     $174 = $3;
     $175 = (($174) + 632|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = $3;
     $178 = (($177) + 628|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = (FUNCTION_TABLE_iiii[$176 & 255]($179,$nextdiroff32,4)|0);
     $181 = ($180|0)==(4);
     if (!($181)) {
      HEAP32[$nextdiroff32>>2] = 0;
     }
     $182 = $3;
     $183 = (($182) + 12|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $184 & 128;
     $186 = ($185|0)!=(0);
     if ($186) {
      _TIFFSwabLong($nextdiroff32);
     }
     $187 = HEAP32[$nextdiroff32>>2]|0;
     $188 = $6;
     $189 = $188;
     $190 = $189;
     HEAP32[$190>>2] = $187;
     $191 = (($189) + 4)|0;
     $192 = $191;
     HEAP32[$192>>2] = 0;
    }
   }
  }
 } while(0);
 $441 = $3;
 $442 = HEAP16[$dircount16>>1]|0;
 $443 = $442&65535;
 $444 = (__TIFFCheckMalloc($441,$443,24,14736)|0);
 $dir = $444;
 $445 = $dir;
 $446 = ($445|0)==(0|0);
 if ($446) {
  $447 = $origdir;
  __TIFFfree($447);
  $2 = 0;
  $541 = $2;
  STACKTOP = sp;return ($541|0);
 }
 $448 = $origdir;
 $ma = $448;
 $449 = $dir;
 $mb = $449;
 $n = 0;
 while(1) {
  $450 = $n;
  $451 = $450&65535;
  $452 = HEAP16[$dircount16>>1]|0;
  $453 = $452&65535;
  $454 = ($451|0)<($453|0);
  if (!($454)) {
   break;
  }
  $455 = $3;
  $456 = (($455) + 12|0);
  $457 = HEAP32[$456>>2]|0;
  $458 = $457 & 128;
  $459 = ($458|0)!=(0);
  if ($459) {
   $460 = $ma;
   _TIFFSwabShort($460);
  }
  $461 = $ma;
  $462 = HEAP16[$461>>1]|0;
  $463 = $mb;
  HEAP16[$463>>1] = $462;
  $464 = $ma;
  $465 = (($464) + 2|0);
  $ma = $465;
  $466 = $3;
  $467 = (($466) + 12|0);
  $468 = HEAP32[$467>>2]|0;
  $469 = $468 & 128;
  $470 = ($469|0)!=(0);
  if ($470) {
   $471 = $ma;
   _TIFFSwabShort($471);
  }
  $472 = $ma;
  $473 = HEAP16[$472>>1]|0;
  $474 = $mb;
  $475 = (($474) + 2|0);
  HEAP16[$475>>1] = $473;
  $476 = $ma;
  $477 = (($476) + 2|0);
  $ma = $477;
  $478 = $3;
  $479 = (($478) + 12|0);
  $480 = HEAP32[$479>>2]|0;
  $481 = $480 & 524288;
  $482 = ($481|0)!=(0);
  if ($482) {
   $505 = $3;
   $506 = (($505) + 12|0);
   $507 = HEAP32[$506>>2]|0;
   $508 = $507 & 128;
   $509 = ($508|0)!=(0);
   if ($509) {
    $510 = $ma;
    _TIFFSwabLong8($510);
   }
   $511 = $ma;
   $512 = (_TIFFReadUInt64($511)|0);
   $513 = tempRet0;
   $514 = $mb;
   $515 = (($514) + 8|0);
   $516 = $515;
   $517 = $516;
   HEAP32[$517>>2] = $512;
   $518 = (($516) + 4)|0;
   $519 = $518;
   HEAP32[$519>>2] = $513;
   $520 = $ma;
   $521 = (($520) + 8|0);
   $ma = $521;
   $522 = $ma;
   $523 = (_TIFFReadUInt64($522)|0);
   $524 = tempRet0;
   $525 = $mb;
   $526 = (($525) + 16|0);
   $527 = $526;
   $528 = $527;
   HEAP32[$528>>2] = $523;
   $529 = (($527) + 4)|0;
   $530 = $529;
   HEAP32[$530>>2] = $524;
   $531 = $ma;
   $532 = (($531) + 8|0);
   $ma = $532;
  } else {
   $483 = $3;
   $484 = (($483) + 12|0);
   $485 = HEAP32[$484>>2]|0;
   $486 = $485 & 128;
   $487 = ($486|0)!=(0);
   if ($487) {
    $488 = $ma;
    _TIFFSwabLong($488);
   }
   $489 = $ma;
   $490 = HEAP32[$489>>2]|0;
   $491 = $mb;
   $492 = (($491) + 8|0);
   $493 = $492;
   $494 = $493;
   HEAP32[$494>>2] = $490;
   $495 = (($493) + 4)|0;
   $496 = $495;
   HEAP32[$496>>2] = 0;
   $497 = $ma;
   $498 = (($497) + 4|0);
   $ma = $498;
   $499 = $ma;
   $500 = HEAP32[$499>>2]|0;
   $501 = $mb;
   $502 = (($501) + 16|0);
   HEAP32[$502>>2] = $500;
   $503 = $ma;
   $504 = (($503) + 4|0);
   $ma = $504;
  }
  $533 = $mb;
  $534 = (($533) + 24|0);
  $mb = $534;
  $535 = $n;
  $536 = (($535) + 1)<<16>>16;
  $n = $536;
 }
 $537 = $origdir;
 __TIFFfree($537);
 $538 = $dir;
 $539 = $5;
 HEAP32[$539>>2] = $538;
 $540 = HEAP16[$dircount16>>1]|0;
 $2 = $540;
 $541 = $2;
 STACKTOP = sp;return ($541|0);
}
function _TIFFReadDirectoryCheckOrder($tif,$dir,$dircount) {
 $tif = $tif|0;
 $dir = $dir|0;
 $dircount = $dircount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $n = 0, $o = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $dir;
 $2 = $dircount;
 $m = 0;
 $n = 0;
 $3 = $1;
 $o = $3;
 while(1) {
  $4 = $n;
  $5 = $4&65535;
  $6 = $2;
  $7 = $6&65535;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   label = 7;
   break;
  }
  $9 = $o;
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = $m;
  $13 = $12&65535;
  $14 = ($11|0)<($13|0);
  if ($14) {
   break;
  }
  $18 = $o;
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = (($20) + 1)|0;
  $22 = $21&65535;
  $m = $22;
  $23 = $n;
  $24 = (($23) + 1)<<16>>16;
  $n = $24;
  $25 = $o;
  $26 = (($25) + 24|0);
  $o = $26;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 $15 = $0;
 $16 = (($15) + 628|0);
 $17 = HEAP32[$16>>2]|0;
 _TIFFWarningExt($17,15136,15168,$vararg_buffer);
 STACKTOP = sp;return;
}
function _TIFFReadDirectoryFindEntry($tif,$dir,$dircount,$tagid) {
 $tif = $tif|0;
 $dir = $dir|0;
 $dircount = $dircount|0;
 $tagid = $tagid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $m = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $dir;
 $3 = $dircount;
 $4 = $tagid;
 $5 = $2;
 $m = $5;
 $n = 0;
 while(1) {
  $6 = $n;
  $7 = $6&65535;
  $8 = $3;
  $9 = $8&65535;
  $10 = ($7|0)<($9|0);
  if (!($10)) {
   label = 7;
   break;
  }
  $11 = $m;
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = $4;
  $15 = $14&65535;
  $16 = ($13|0)==($15|0);
  if ($16) {
   label = 4;
   break;
  }
  $18 = $m;
  $19 = (($18) + 24|0);
  $m = $19;
  $20 = $n;
  $21 = (($20) + 1)<<16>>16;
  $n = $21;
 }
 if ((label|0) == 4) {
  $17 = $m;
  $0 = $17;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _TIFFFetchNormalTag($tif,$dp,$recover) {
 $tif = $tif|0;
 $dp = $dp|0;
 $recover = $recover|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $data = 0;
 var $data1 = 0, $data11 = 0, $data13 = 0, $data15 = 0, $data17 = 0, $data19 = 0, $data2 = 0, $data21 = 0, $data23 = 0, $data25 = 0, $data27 = 0, $data29 = 0, $data3 = 0, $data31 = 0, $data33 = 0, $data35 = 0, $data37 = 0, $data39 = 0, $data4 = 0, $data41 = 0;
 var $data43 = 0, $data45 = 0, $data47 = 0, $data49 = 0, $data5 = 0, $data51 = 0, $data53 = 0, $data55 = 0, $data6 = 0, $data7 = 0, $data8 = 0, $data9 = 0, $err = 0, $fii = 0, $fip = 0, $m = 0, $m10 = 0, $m12 = 0, $m14 = 0, $m16 = 0;
 var $m18 = 0, $m20 = 0, $m22 = 0, $m24 = 0, $m26 = 0, $m28 = 0, $m30 = 0, $m32 = 0, $m34 = 0, $m36 = 0, $m38 = 0, $m40 = 0, $m42 = 0, $m44 = 0, $m46 = 0, $m48 = 0, $m50 = 0, $m52 = 0, $m54 = 0, $m56 = 0;
 var $ma = 0, $mb = 0, $n = 0, $o = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer100 = 0, $vararg_buffer104 = 0, $vararg_buffer108 = 0, $vararg_buffer112 = 0, $vararg_buffer116 = 0, $vararg_buffer120 = 0, $vararg_buffer124 = 0, $vararg_buffer128 = 0, $vararg_buffer13 = 0, $vararg_buffer132 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer60 = 0, $vararg_buffer64 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, $vararg_buffer72 = 0, $vararg_buffer76 = 0, $vararg_buffer80 = 0, $vararg_buffer84 = 0, $vararg_buffer88 = 0;
 var $vararg_buffer92 = 0, $vararg_buffer96 = 0, $vararg_ptr103 = 0, $vararg_ptr107 = 0, $vararg_ptr111 = 0, $vararg_ptr115 = 0, $vararg_ptr119 = 0, $vararg_ptr123 = 0, $vararg_ptr127 = 0, $vararg_ptr131 = 0, $vararg_ptr135 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr59 = 0, $vararg_ptr63 = 0, $vararg_ptr67 = 0, $vararg_ptr71 = 0, $vararg_ptr75 = 0;
 var $vararg_ptr79 = 0, $vararg_ptr83 = 0, $vararg_ptr87 = 0, $vararg_ptr91 = 0, $vararg_ptr95 = 0, $vararg_ptr99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer132 = sp + 328|0;
 $vararg_buffer128 = sp + 224|0;
 $vararg_buffer124 = sp + 256|0;
 $vararg_buffer120 = sp + 8|0;
 $vararg_buffer116 = sp + 96|0;
 $vararg_buffer112 = sp + 288|0;
 $vararg_buffer108 = sp + 280|0;
 $vararg_buffer104 = sp + 312|0;
 $vararg_buffer100 = sp + 112|0;
 $vararg_buffer96 = sp + 40|0;
 $vararg_buffer92 = sp + 304|0;
 $vararg_buffer88 = sp + 192|0;
 $vararg_buffer84 = sp + 176|0;
 $vararg_buffer80 = sp + 272|0;
 $vararg_buffer76 = sp + 208|0;
 $vararg_buffer72 = sp + 128|0;
 $vararg_buffer68 = sp + 144|0;
 $vararg_buffer64 = sp + 136|0;
 $vararg_buffer60 = sp + 264|0;
 $vararg_buffer56 = sp + 240|0;
 $vararg_buffer53 = sp + 120|0;
 $vararg_buffer50 = sp + 48|0;
 $vararg_buffer47 = sp + 200|0;
 $vararg_buffer44 = sp;
 $vararg_buffer39 = sp + 152|0;
 $vararg_buffer35 = sp + 64|0;
 $vararg_buffer31 = sp + 72|0;
 $vararg_buffer28 = sp + 24|0;
 $vararg_buffer25 = sp + 296|0;
 $vararg_buffer22 = sp + 184|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer16 = sp + 320|0;
 $vararg_buffer13 = sp + 216|0;
 $vararg_buffer10 = sp + 88|0;
 $vararg_buffer7 = sp + 232|0;
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 248|0;
 $vararg_buffer = sp + 104|0;
 $fii = sp + 416|0;
 $data = sp + 408|0;
 $data1 = sp + 594|0;
 $data2 = sp + 592|0;
 $data3 = sp + 364|0;
 $data4 = sp + 56|0;
 $data5 = sp + 360|0;
 $data6 = sp + 168|0;
 $data7 = sp + 16|0;
 $data8 = sp + 352|0;
 $data9 = sp + 344|0;
 $data11 = sp + 336|0;
 $data13 = sp + 532|0;
 $data15 = sp + 524|0;
 $data17 = sp + 512|0;
 $data19 = sp + 504|0;
 $data21 = sp + 492|0;
 $data23 = sp + 484|0;
 $data25 = sp + 468|0;
 $data27 = sp + 456|0;
 $data29 = sp + 436|0;
 $data31 = sp + 476|0;
 $data33 = sp + 552|0;
 $data35 = sp + 560|0;
 $data37 = sp + 568|0;
 $data39 = sp + 576|0;
 $data41 = sp + 404|0;
 $data43 = sp + 588|0;
 $data45 = sp + 448|0;
 $data47 = sp + 420|0;
 $data49 = sp + 536|0;
 $data51 = sp + 540|0;
 $data53 = sp + 444|0;
 $data55 = sp + 368|0;
 $1 = $tif;
 $2 = $dp;
 $3 = $recover;
 $fip = 0;
 $4 = $1;
 $5 = $2;
 $6 = HEAP16[$5>>1]|0;
 _TIFFReadDirectoryFindFieldInfo($4,$6,$fii);
 $7 = HEAP32[$fii>>2]|0;
 $8 = ($7|0)==(-1);
 if ($8) {
  $9 = $1;
  $10 = (($9) + 628|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  HEAP32[$vararg_buffer>>2] = $14;
  _TIFFErrorExt($11,13872,13896,$vararg_buffer);
  $0 = 0;
  $1398 = $0;
  STACKTOP = sp;return ($1398|0);
 }
 $15 = HEAP32[$fii>>2]|0;
 $16 = $1;
 $17 = (($16) + 656|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($15<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $fip = $20;
 $21 = $fip;
 $22 = (($21) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(51);
 if (!($24)) {
  ___assert_fail((13928|0),(12552|0),4711,(13872|0));
  // unreachable;
 }
 $25 = $fip;
 $26 = (($25) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(13);
 if (!($28)) {
  ___assert_fail((13968|0),(12552|0),4712,(13872|0));
  // unreachable;
 }
 $err = 0;
 $29 = $fip;
 $30 = (($29) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 do {
  switch ($31|0) {
  case 6:  {
   $213 = $fip;
   $214 = (($213) + 4|0);
   $215 = HEAP16[$214>>1]|0;
   $216 = $215 << 16 >> 16;
   $217 = ($216|0)==(1);
   if (!($217)) {
    ___assert_fail((14224|0),(12552|0),4796,(13872|0));
    // unreachable;
   }
   $218 = $fip;
   $219 = (($218) + 27|0);
   $220 = HEAP8[$219>>0]|0;
   $221 = $220&255;
   $222 = ($221|0)==(0);
   if (!($222)) {
    ___assert_fail((14008|0),(12552|0),4797,(13872|0));
    // unreachable;
   }
   $223 = $1;
   $224 = $2;
   $225 = (_TIFFReadDirEntryLong($223,$224,$data3)|0);
   $err = $225;
   $226 = $err;
   $227 = ($226|0)==(0);
   do {
    if ($227) {
     $228 = $1;
     $229 = $2;
     $230 = HEAP16[$229>>1]|0;
     $231 = $230&65535;
     $232 = HEAP32[$data3>>2]|0;
     HEAP32[$vararg_buffer16>>2] = $232;
     $233 = (_TIFFSetField($228,$231,$vararg_buffer16)|0);
     $234 = ($233|0)!=(0);
     if ($234) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 20:  {
   $501 = $fip;
   $502 = (($501) + 4|0);
   $503 = HEAP16[$502>>1]|0;
   $504 = $503 << 16 >> 16;
   $505 = ($504|0)>=(1);
   if (!($505)) {
    ___assert_fail((14328|0),(12552|0),4931,(13872|0));
    // unreachable;
   }
   $506 = $fip;
   $507 = (($506) + 27|0);
   $508 = HEAP8[$507>>0]|0;
   $509 = $508&255;
   $510 = ($509|0)==(0);
   if (!($510)) {
    ___assert_fail((14008|0),(12552|0),4932,(13872|0));
    // unreachable;
   }
   $511 = $2;
   $512 = (($511) + 8|0);
   $513 = $512;
   $514 = $513;
   $515 = HEAP32[$514>>2]|0;
   $516 = (($513) + 4)|0;
   $517 = $516;
   $518 = HEAP32[$517>>2]|0;
   $519 = $fip;
   $520 = (($519) + 4|0);
   $521 = HEAP16[$520>>1]|0;
   $522 = $521 << 16 >> 16;
   $523 = ($522|0)<(0);
   $524 = $523 << 31 >> 31;
   $525 = ($515|0)!=($522|0);
   $526 = ($518|0)!=($524|0);
   $527 = $525 | $526;
   if ($527) {
   } else {
    $528 = $1;
    $529 = $2;
    $530 = (_TIFFReadDirEntryLongArray($528,$529,$data13)|0);
    $err = $530;
    $531 = $err;
    $532 = ($531|0)==(0);
    do {
     if ($532) {
      $533 = $1;
      $534 = $2;
      $535 = HEAP16[$534>>1]|0;
      $536 = $535&65535;
      $537 = HEAP32[$data13>>2]|0;
      HEAP32[$vararg_buffer50>>2] = $537;
      $538 = (_TIFFSetField($533,$536,$vararg_buffer50)|0);
      $m14 = $538;
      $539 = HEAP32[$data13>>2]|0;
      $540 = ($539|0)!=(0|0);
      if ($540) {
       $541 = HEAP32[$data13>>2]|0;
       __TIFFfree($541);
      }
      $542 = $m14;
      $543 = ($542|0)!=(0);
      if ($543) {
       break;
      }
      $0 = 0;
      $1398 = $0;
      STACKTOP = sp;return ($1398|0);
     }
    } while(0);
   }
   break;
  }
  case 8:  {
   $235 = $fip;
   $236 = (($235) + 4|0);
   $237 = HEAP16[$236>>1]|0;
   $238 = $237 << 16 >> 16;
   $239 = ($238|0)==(1);
   if (!($239)) {
    ___assert_fail((14224|0),(12552|0),4809,(13872|0));
    // unreachable;
   }
   $240 = $fip;
   $241 = (($240) + 27|0);
   $242 = HEAP8[$241>>0]|0;
   $243 = $242&255;
   $244 = ($243|0)==(0);
   if (!($244)) {
    ___assert_fail((14008|0),(12552|0),4810,(13872|0));
    // unreachable;
   }
   $245 = $1;
   $246 = $2;
   $247 = (_TIFFReadDirEntryLong8($245,$246,$data4)|0);
   $err = $247;
   $248 = $err;
   $249 = ($248|0)==(0);
   do {
    if ($249) {
     $250 = $1;
     $251 = $2;
     $252 = HEAP16[$251>>1]|0;
     $253 = $252&65535;
     $254 = $data4;
     $255 = $254;
     $256 = HEAP32[$255>>2]|0;
     $257 = (($254) + 4)|0;
     $258 = $257;
     $259 = HEAP32[$258>>2]|0;
     $260 = $vararg_buffer19;
     $261 = $260;
     HEAP32[$261>>2] = $256;
     $262 = (($260) + 4)|0;
     $263 = $262;
     HEAP32[$263>>2] = $259;
     $264 = (_TIFFSetField($250,$253,$vararg_buffer19)|0);
     $265 = ($264|0)!=(0);
     if ($265) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 10:  {
   $266 = $fip;
   $267 = (($266) + 4|0);
   $268 = HEAP16[$267>>1]|0;
   $269 = $268 << 16 >> 16;
   $270 = ($269|0)==(1);
   if (!($270)) {
    ___assert_fail((14224|0),(12552|0),4822,(13872|0));
    // unreachable;
   }
   $271 = $fip;
   $272 = (($271) + 27|0);
   $273 = HEAP8[$272>>0]|0;
   $274 = $273&255;
   $275 = ($274|0)==(0);
   if (!($275)) {
    ___assert_fail((14008|0),(12552|0),4823,(13872|0));
    // unreachable;
   }
   $276 = $1;
   $277 = $2;
   $278 = (_TIFFReadDirEntryFloat($276,$277,$data5)|0);
   $err = $278;
   $279 = $err;
   $280 = ($279|0)==(0);
   do {
    if ($280) {
     $281 = $1;
     $282 = $2;
     $283 = HEAP16[$282>>1]|0;
     $284 = $283&65535;
     $285 = +HEAPF32[$data5>>2];
     $286 = $285;
     HEAPF64[tempDoublePtr>>3]=$286;HEAP32[$vararg_buffer22>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer22+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $287 = (_TIFFSetField($281,$284,$vararg_buffer22)|0);
     $288 = ($287|0)!=(0);
     if ($288) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 11:  {
   $289 = $fip;
   $290 = (($289) + 4|0);
   $291 = HEAP16[$290>>1]|0;
   $292 = $291 << 16 >> 16;
   $293 = ($292|0)==(1);
   if (!($293)) {
    ___assert_fail((14224|0),(12552|0),4835,(13872|0));
    // unreachable;
   }
   $294 = $fip;
   $295 = (($294) + 27|0);
   $296 = HEAP8[$295>>0]|0;
   $297 = $296&255;
   $298 = ($297|0)==(0);
   if (!($298)) {
    ___assert_fail((14008|0),(12552|0),4836,(13872|0));
    // unreachable;
   }
   $299 = $1;
   $300 = $2;
   $301 = (_TIFFReadDirEntryDouble($299,$300,$data6)|0);
   $err = $301;
   $302 = $err;
   $303 = ($302|0)==(0);
   do {
    if ($303) {
     $304 = $1;
     $305 = $2;
     $306 = HEAP16[$305>>1]|0;
     $307 = $306&65535;
     $308 = +HEAPF64[$data6>>3];
     HEAPF64[tempDoublePtr>>3]=$308;HEAP32[$vararg_buffer25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer25+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $309 = (_TIFFSetField($304,$307,$vararg_buffer25)|0);
     $310 = ($309|0)!=(0);
     if ($310) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 12:  {
   $311 = $fip;
   $312 = (($311) + 4|0);
   $313 = HEAP16[$312>>1]|0;
   $314 = $313 << 16 >> 16;
   $315 = ($314|0)==(1);
   if (!($315)) {
    ___assert_fail((14224|0),(12552|0),4848,(13872|0));
    // unreachable;
   }
   $316 = $fip;
   $317 = (($316) + 27|0);
   $318 = HEAP8[$317>>0]|0;
   $319 = $318&255;
   $320 = ($319|0)==(0);
   if (!($320)) {
    ___assert_fail((14008|0),(12552|0),4849,(13872|0));
    // unreachable;
   }
   $321 = $1;
   $322 = $2;
   $323 = (_TIFFReadDirEntryIfd8($321,$322,$data7)|0);
   $err = $323;
   $324 = $err;
   $325 = ($324|0)==(0);
   do {
    if ($325) {
     $326 = $1;
     $327 = $2;
     $328 = HEAP16[$327>>1]|0;
     $329 = $328&65535;
     $330 = $data7;
     $331 = $330;
     $332 = HEAP32[$331>>2]|0;
     $333 = (($330) + 4)|0;
     $334 = $333;
     $335 = HEAP32[$334>>2]|0;
     $336 = $vararg_buffer28;
     $337 = $336;
     HEAP32[$337>>2] = $332;
     $338 = (($336) + 4)|0;
     $339 = $338;
     HEAP32[$339>>2] = $335;
     $340 = (_TIFFSetField($326,$329,$vararg_buffer28)|0);
     $341 = ($340|0)!=(0);
     if ($341) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 14:  {
   $342 = $fip;
   $343 = (($342) + 4|0);
   $344 = HEAP16[$343>>1]|0;
   $345 = $344 << 16 >> 16;
   $346 = ($345|0)==(2);
   if (!($346)) {
    ___assert_fail((14248|0),(12552|0),4861,(13872|0));
    // unreachable;
   }
   $347 = $fip;
   $348 = (($347) + 27|0);
   $349 = HEAP8[$348>>0]|0;
   $350 = $349&255;
   $351 = ($350|0)==(0);
   if (!($351)) {
    ___assert_fail((14008|0),(12552|0),4862,(13872|0));
    // unreachable;
   }
   $352 = $2;
   $353 = (($352) + 8|0);
   $354 = $353;
   $355 = $354;
   $356 = HEAP32[$355>>2]|0;
   $357 = (($354) + 4)|0;
   $358 = $357;
   $359 = HEAP32[$358>>2]|0;
   $360 = ($356|0)!=(2);
   $361 = ($359|0)!=(0);
   $362 = $360 | $361;
   if ($362) {
    $363 = $1;
    $364 = (($363) + 628|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = $fip;
    $367 = (($366) + 28|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = $2;
    $370 = (($369) + 8|0);
    $371 = $370;
    $372 = $371;
    $373 = HEAP32[$372>>2]|0;
    $374 = (($371) + 4)|0;
    $375 = $374;
    $376 = HEAP32[$375>>2]|0;
    HEAP32[$vararg_buffer31>>2] = $368;
    $vararg_ptr34 = (($vararg_buffer31) + 4|0);
    HEAP32[$vararg_ptr34>>2] = $373;
    _TIFFWarningExt($365,13848,14272,$vararg_buffer31);
    $0 = 0;
    $1398 = $0;
    STACKTOP = sp;return ($1398|0);
   }
   $377 = $1;
   $378 = $2;
   $379 = (_TIFFReadDirEntryShortArray($377,$378,$data8)|0);
   $err = $379;
   $380 = $err;
   $381 = ($380|0)==(0);
   do {
    if ($381) {
     $382 = $1;
     $383 = $2;
     $384 = HEAP16[$383>>1]|0;
     $385 = $384&65535;
     $386 = HEAP32[$data8>>2]|0;
     $387 = HEAP16[$386>>1]|0;
     $388 = $387&65535;
     $389 = HEAP32[$data8>>2]|0;
     $390 = (($389) + 2|0);
     $391 = HEAP16[$390>>1]|0;
     $392 = $391&65535;
     HEAP32[$vararg_buffer35>>2] = $388;
     $vararg_ptr38 = (($vararg_buffer35) + 4|0);
     HEAP32[$vararg_ptr38>>2] = $392;
     $393 = (_TIFFSetField($382,$385,$vararg_buffer35)|0);
     $m = $393;
     $394 = HEAP32[$data8>>2]|0;
     __TIFFfree($394);
     $395 = $m;
     $396 = ($395|0)!=(0);
     if ($396) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 16:  {
   $397 = $fip;
   $398 = (($397) + 4|0);
   $399 = HEAP16[$398>>1]|0;
   $400 = $399 << 16 >> 16;
   $401 = ($400|0)>=(1);
   if (!($401)) {
    ___assert_fail((14328|0),(12552|0),4883,(13872|0));
    // unreachable;
   }
   $402 = $fip;
   $403 = (($402) + 27|0);
   $404 = HEAP8[$403>>0]|0;
   $405 = $404&255;
   $406 = ($405|0)==(0);
   if (!($406)) {
    ___assert_fail((14008|0),(12552|0),4884,(13872|0));
    // unreachable;
   }
   $407 = $2;
   $408 = (($407) + 8|0);
   $409 = $408;
   $410 = $409;
   $411 = HEAP32[$410>>2]|0;
   $412 = (($409) + 4)|0;
   $413 = $412;
   $414 = HEAP32[$413>>2]|0;
   $415 = $fip;
   $416 = (($415) + 4|0);
   $417 = HEAP16[$416>>1]|0;
   $418 = $417 << 16 >> 16;
   $419 = ($418|0)<(0);
   $420 = $419 << 31 >> 31;
   $421 = ($411|0)!=($418|0);
   $422 = ($414|0)!=($420|0);
   $423 = $421 | $422;
   if ($423) {
    $424 = $1;
    $425 = (($424) + 628|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = $fip;
    $428 = (($427) + 28|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = $fip;
    $431 = (($430) + 4|0);
    $432 = HEAP16[$431>>1]|0;
    $433 = $432 << 16 >> 16;
    $434 = $2;
    $435 = (($434) + 8|0);
    $436 = $435;
    $437 = $436;
    $438 = HEAP32[$437>>2]|0;
    $439 = (($436) + 4)|0;
    $440 = $439;
    $441 = HEAP32[$440>>2]|0;
    HEAP32[$vararg_buffer39>>2] = $429;
    $vararg_ptr42 = (($vararg_buffer39) + 4|0);
    HEAP32[$vararg_ptr42>>2] = $433;
    $vararg_ptr43 = (($vararg_buffer39) + 8|0);
    HEAP32[$vararg_ptr43>>2] = $438;
    _TIFFWarningExt($426,13848,14352,$vararg_buffer39);
    $0 = 0;
    $1398 = $0;
    STACKTOP = sp;return ($1398|0);
   }
   $442 = $1;
   $443 = $2;
   $444 = (_TIFFReadDirEntryByteArray($442,$443,$data9)|0);
   $err = $444;
   $445 = $err;
   $446 = ($445|0)==(0);
   do {
    if ($446) {
     $447 = $1;
     $448 = $2;
     $449 = HEAP16[$448>>1]|0;
     $450 = $449&65535;
     $451 = HEAP32[$data9>>2]|0;
     HEAP32[$vararg_buffer44>>2] = $451;
     $452 = (_TIFFSetField($447,$450,$vararg_buffer44)|0);
     $m10 = $452;
     $453 = HEAP32[$data9>>2]|0;
     $454 = ($453|0)!=(0|0);
     if ($454) {
      $455 = HEAP32[$data9>>2]|0;
      __TIFFfree($455);
     }
     $456 = $m10;
     $457 = ($456|0)!=(0);
     if ($457) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 18:  {
   $458 = $fip;
   $459 = (($458) + 4|0);
   $460 = HEAP16[$459>>1]|0;
   $461 = $460 << 16 >> 16;
   $462 = ($461|0)>=(1);
   if (!($462)) {
    ___assert_fail((14328|0),(12552|0),4909,(13872|0));
    // unreachable;
   }
   $463 = $fip;
   $464 = (($463) + 27|0);
   $465 = HEAP8[$464>>0]|0;
   $466 = $465&255;
   $467 = ($466|0)==(0);
   if (!($467)) {
    ___assert_fail((14008|0),(12552|0),4910,(13872|0));
    // unreachable;
   }
   $468 = $2;
   $469 = (($468) + 8|0);
   $470 = $469;
   $471 = $470;
   $472 = HEAP32[$471>>2]|0;
   $473 = (($470) + 4)|0;
   $474 = $473;
   $475 = HEAP32[$474>>2]|0;
   $476 = $fip;
   $477 = (($476) + 4|0);
   $478 = HEAP16[$477>>1]|0;
   $479 = $478 << 16 >> 16;
   $480 = ($479|0)<(0);
   $481 = $480 << 31 >> 31;
   $482 = ($472|0)!=($479|0);
   $483 = ($475|0)!=($481|0);
   $484 = $482 | $483;
   if ($484) {
   } else {
    $485 = $1;
    $486 = $2;
    $487 = (_TIFFReadDirEntryShortArray($485,$486,$data11)|0);
    $err = $487;
    $488 = $err;
    $489 = ($488|0)==(0);
    do {
     if ($489) {
      $490 = $1;
      $491 = $2;
      $492 = HEAP16[$491>>1]|0;
      $493 = $492&65535;
      $494 = HEAP32[$data11>>2]|0;
      HEAP32[$vararg_buffer47>>2] = $494;
      $495 = (_TIFFSetField($490,$493,$vararg_buffer47)|0);
      $m12 = $495;
      $496 = HEAP32[$data11>>2]|0;
      $497 = ($496|0)!=(0|0);
      if ($497) {
       $498 = HEAP32[$data11>>2]|0;
       __TIFFfree($498);
      }
      $499 = $m12;
      $500 = ($499|0)!=(0);
      if ($500) {
       break;
      }
      $0 = 0;
      $1398 = $0;
      STACKTOP = sp;return ($1398|0);
     }
    } while(0);
   }
   break;
  }
  case 2:  {
   HEAP8[$data1>>0] = 0;
   $167 = $fip;
   $168 = (($167) + 4|0);
   $169 = HEAP16[$168>>1]|0;
   $170 = $169 << 16 >> 16;
   $171 = ($170|0)==(1);
   if (!($171)) {
    ___assert_fail((14224|0),(12552|0),4770,(13872|0));
    // unreachable;
   }
   $172 = $fip;
   $173 = (($172) + 27|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&255;
   $176 = ($175|0)==(0);
   if (!($176)) {
    ___assert_fail((14008|0),(12552|0),4771,(13872|0));
    // unreachable;
   }
   $177 = $1;
   $178 = $2;
   $179 = (_TIFFReadDirEntryByte($177,$178,$data1)|0);
   $err = $179;
   $180 = $err;
   $181 = ($180|0)==(0);
   do {
    if ($181) {
     $182 = $1;
     $183 = $2;
     $184 = HEAP16[$183>>1]|0;
     $185 = $184&65535;
     $186 = HEAP8[$data1>>0]|0;
     $187 = $186&255;
     HEAP32[$vararg_buffer10>>2] = $187;
     $188 = (_TIFFSetField($182,$185,$vararg_buffer10)|0);
     $189 = ($188|0)!=(0);
     if ($189) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 4:  {
   $190 = $fip;
   $191 = (($190) + 4|0);
   $192 = HEAP16[$191>>1]|0;
   $193 = $192 << 16 >> 16;
   $194 = ($193|0)==(1);
   if (!($194)) {
    ___assert_fail((14224|0),(12552|0),4783,(13872|0));
    // unreachable;
   }
   $195 = $fip;
   $196 = (($195) + 27|0);
   $197 = HEAP8[$196>>0]|0;
   $198 = $197&255;
   $199 = ($198|0)==(0);
   if (!($199)) {
    ___assert_fail((14008|0),(12552|0),4784,(13872|0));
    // unreachable;
   }
   $200 = $1;
   $201 = $2;
   $202 = (_TIFFReadDirEntryShort($200,$201,$data2)|0);
   $err = $202;
   $203 = $err;
   $204 = ($203|0)==(0);
   do {
    if ($204) {
     $205 = $1;
     $206 = $2;
     $207 = HEAP16[$206>>1]|0;
     $208 = $207&65535;
     $209 = HEAP16[$data2>>1]|0;
     $210 = $209&65535;
     HEAP32[$vararg_buffer13>>2] = $210;
     $211 = (_TIFFSetField($205,$208,$vararg_buffer13)|0);
     $212 = ($211|0)!=(0);
     if ($212) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 0:  {
   break;
  }
  case 1:  {
   $32 = $fip;
   $33 = (($32) + 27|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ($35|0)==(0);
   if (!($36)) {
    ___assert_fail((14008|0),(12552|0),4721,(13872|0));
    // unreachable;
   }
   $37 = $1;
   $38 = $2;
   $39 = (_TIFFReadDirEntryByteArray($37,$38,$data)|0);
   $err = $39;
   $40 = $err;
   $41 = ($40|0)==(0);
   do {
    if ($41) {
     $42 = HEAP32[$data>>2]|0;
     $ma = $42;
     $mb = 0;
     while(1) {
      $43 = $mb;
      $44 = $2;
      $45 = (($44) + 8|0);
      $46 = $45;
      $47 = $46;
      $48 = HEAP32[$47>>2]|0;
      $49 = (($46) + 4)|0;
      $50 = $49;
      $51 = HEAP32[$50>>2]|0;
      $52 = ($43>>>0)<($48>>>0);
      if (!($52)) {
       break;
      }
      $53 = $ma;
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = ($55|0)==(0);
      if ($56) {
       label = 15;
       break;
      }
      $57 = $ma;
      $58 = (($57) + 1|0);
      $ma = $58;
      $59 = $mb;
      $60 = (($59) + 1)|0;
      $mb = $60;
     }
     if ((label|0) == 15) {
     }
     $61 = $mb;
     $62 = (($61) + 1)|0;
     $63 = $2;
     $64 = (($63) + 8|0);
     $65 = $64;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $68 = (($65) + 4)|0;
     $69 = $68;
     $70 = HEAP32[$69>>2]|0;
     $71 = ($62>>>0)<($67>>>0);
     if ($71) {
      $72 = $1;
      $73 = (($72) + 628|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = $fip;
      $76 = (($75) + 28|0);
      $77 = HEAP32[$76>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $77;
      _TIFFWarningExt($74,13848,14032,$vararg_buffer1);
     } else {
      $78 = $mb;
      $79 = (($78) + 1)|0;
      $80 = $2;
      $81 = (($80) + 8|0);
      $82 = $81;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = (($82) + 4)|0;
      $86 = $85;
      $87 = HEAP32[$86>>2]|0;
      $88 = ($79>>>0)>($84>>>0);
      do {
       if ($88) {
        $89 = $1;
        $90 = (($89) + 628|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = $fip;
        $93 = (($92) + 28|0);
        $94 = HEAP32[$93>>2]|0;
        HEAP32[$vararg_buffer4>>2] = $94;
        _TIFFWarningExt($91,13848,14168,$vararg_buffer4);
        $95 = $2;
        $96 = (($95) + 8|0);
        $97 = $96;
        $98 = $97;
        $99 = HEAP32[$98>>2]|0;
        $100 = (($97) + 4)|0;
        $101 = $100;
        $102 = HEAP32[$101>>2]|0;
        $103 = (($99) + 1)|0;
        $104 = $2;
        $105 = (($104) + 8|0);
        $106 = $105;
        $107 = $106;
        $108 = HEAP32[$107>>2]|0;
        $109 = (($106) + 4)|0;
        $110 = $109;
        $111 = HEAP32[$110>>2]|0;
        $112 = (_i64Add(($108|0),($111|0),1,0)|0);
        $113 = tempRet0;
        $114 = ($103|0)!=($112|0);
        $115 = (0)!=($113|0);
        $116 = $114 | $115;
        if ($116) {
         $o = 0;
        } else {
         $117 = $2;
         $118 = (($117) + 8|0);
         $119 = $118;
         $120 = $119;
         $121 = HEAP32[$120>>2]|0;
         $122 = (($119) + 4)|0;
         $123 = $122;
         $124 = HEAP32[$123>>2]|0;
         $125 = (($121) + 1)|0;
         $126 = (__TIFFmalloc($125)|0);
         $o = $126;
        }
        $127 = $o;
        $128 = ($127|0)==(0|0);
        if (!($128)) {
         $132 = $o;
         $133 = HEAP32[$data>>2]|0;
         $134 = $2;
         $135 = (($134) + 8|0);
         $136 = $135;
         $137 = $136;
         $138 = HEAP32[$137>>2]|0;
         $139 = (($136) + 4)|0;
         $140 = $139;
         $141 = HEAP32[$140>>2]|0;
         __TIFFmemcpy($132,$133,$138);
         $142 = $2;
         $143 = (($142) + 8|0);
         $144 = $143;
         $145 = $144;
         $146 = HEAP32[$145>>2]|0;
         $147 = (($144) + 4)|0;
         $148 = $147;
         $149 = HEAP32[$148>>2]|0;
         $150 = $o;
         $151 = (($150) + ($146)|0);
         HEAP8[$151>>0] = 0;
         $152 = HEAP32[$data>>2]|0;
         $153 = ($152|0)!=(0|0);
         if ($153) {
          $154 = HEAP32[$data>>2]|0;
          __TIFFfree($154);
         }
         $155 = $o;
         HEAP32[$data>>2] = $155;
         break;
        }
        $129 = HEAP32[$data>>2]|0;
        $130 = ($129|0)!=(0|0);
        if ($130) {
         $131 = HEAP32[$data>>2]|0;
         __TIFFfree($131);
        }
        $0 = 0;
        $1398 = $0;
        STACKTOP = sp;return ($1398|0);
       }
      } while(0);
     }
     $156 = $1;
     $157 = $2;
     $158 = HEAP16[$157>>1]|0;
     $159 = $158&65535;
     $160 = HEAP32[$data>>2]|0;
     HEAP32[$vararg_buffer7>>2] = $160;
     $161 = (_TIFFSetField($156,$159,$vararg_buffer7)|0);
     $n = $161;
     $162 = HEAP32[$data>>2]|0;
     $163 = ($162|0)!=(0|0);
     if ($163) {
      $164 = HEAP32[$data>>2]|0;
      __TIFFfree($164);
     }
     $165 = $n;
     $166 = ($165|0)!=(0);
     if ($166) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 24:  {
   $544 = $fip;
   $545 = (($544) + 4|0);
   $546 = HEAP16[$545>>1]|0;
   $547 = $546 << 16 >> 16;
   $548 = ($547|0)>=(1);
   if (!($548)) {
    ___assert_fail((14328|0),(12552|0),4953,(13872|0));
    // unreachable;
   }
   $549 = $fip;
   $550 = (($549) + 27|0);
   $551 = HEAP8[$550>>0]|0;
   $552 = $551&255;
   $553 = ($552|0)==(0);
   if (!($553)) {
    ___assert_fail((14008|0),(12552|0),4954,(13872|0));
    // unreachable;
   }
   $554 = $2;
   $555 = (($554) + 8|0);
   $556 = $555;
   $557 = $556;
   $558 = HEAP32[$557>>2]|0;
   $559 = (($556) + 4)|0;
   $560 = $559;
   $561 = HEAP32[$560>>2]|0;
   $562 = $fip;
   $563 = (($562) + 4|0);
   $564 = HEAP16[$563>>1]|0;
   $565 = $564 << 16 >> 16;
   $566 = ($565|0)<(0);
   $567 = $566 << 31 >> 31;
   $568 = ($558|0)!=($565|0);
   $569 = ($561|0)!=($567|0);
   $570 = $568 | $569;
   if ($570) {
   } else {
    $571 = $1;
    $572 = $2;
    $573 = (_TIFFReadDirEntryFloatArray($571,$572,$data15)|0);
    $err = $573;
    $574 = $err;
    $575 = ($574|0)==(0);
    do {
     if ($575) {
      $576 = $1;
      $577 = $2;
      $578 = HEAP16[$577>>1]|0;
      $579 = $578&65535;
      $580 = HEAP32[$data15>>2]|0;
      HEAP32[$vararg_buffer53>>2] = $580;
      $581 = (_TIFFSetField($576,$579,$vararg_buffer53)|0);
      $m16 = $581;
      $582 = HEAP32[$data15>>2]|0;
      $583 = ($582|0)!=(0|0);
      if ($583) {
       $584 = HEAP32[$data15>>2]|0;
       __TIFFfree($584);
      }
      $585 = $m16;
      $586 = ($585|0)!=(0);
      if ($586) {
       break;
      }
      $0 = 0;
      $1398 = $0;
      STACKTOP = sp;return ($1398|0);
     }
    } while(0);
   }
   break;
  }
  case 27:  {
   $587 = $fip;
   $588 = (($587) + 4|0);
   $589 = HEAP16[$588>>1]|0;
   $590 = $589 << 16 >> 16;
   $591 = ($590|0)==(-1);
   if (!($591)) {
    ___assert_fail((14408|0),(12552|0),4975,(13872|0));
    // unreachable;
   }
   $592 = $fip;
   $593 = (($592) + 27|0);
   $594 = HEAP8[$593>>0]|0;
   $595 = $594&255;
   $596 = ($595|0)==(1);
   if (!($596)) {
    ___assert_fail((14448|0),(12552|0),4976,(13872|0));
    // unreachable;
   }
   $597 = $2;
   $598 = (($597) + 8|0);
   $599 = $598;
   $600 = $599;
   $601 = HEAP32[$600>>2]|0;
   $602 = (($599) + 4)|0;
   $603 = $602;
   $604 = HEAP32[$603>>2]|0;
   $605 = ($604>>>0)>(0);
   $606 = ($601>>>0)>(65535);
   $607 = ($604|0)==(0);
   $608 = $607 & $606;
   $609 = $605 | $608;
   if ($609) {
    $err = 1;
   } else {
    $610 = $1;
    $611 = $2;
    $612 = (_TIFFReadDirEntryByteArray($610,$611,$data17)|0);
    $err = $612;
    $613 = $err;
    $614 = ($613|0)==(0);
    do {
     if ($614) {
      $615 = $1;
      $616 = $2;
      $617 = HEAP16[$616>>1]|0;
      $618 = $617&65535;
      $619 = $2;
      $620 = (($619) + 8|0);
      $621 = $620;
      $622 = $621;
      $623 = HEAP32[$622>>2]|0;
      $624 = (($621) + 4)|0;
      $625 = $624;
      $626 = HEAP32[$625>>2]|0;
      $627 = $623&65535;
      $628 = $627&65535;
      $629 = HEAP32[$data17>>2]|0;
      HEAP32[$vararg_buffer56>>2] = $628;
      $vararg_ptr59 = (($vararg_buffer56) + 4|0);
      HEAP32[$vararg_ptr59>>2] = $629;
      $630 = (_TIFFSetField($615,$618,$vararg_buffer56)|0);
      $m18 = $630;
      $631 = HEAP32[$data17>>2]|0;
      $632 = ($631|0)!=(0|0);
      if ($632) {
       $633 = HEAP32[$data17>>2]|0;
       __TIFFfree($633);
      }
      $634 = $m18;
      $635 = ($634|0)!=(0);
      if ($635) {
       break;
      }
      $0 = 0;
      $1398 = $0;
      STACKTOP = sp;return ($1398|0);
     }
    } while(0);
   }
   break;
  }
  case 28:  {
   $636 = $fip;
   $637 = (($636) + 4|0);
   $638 = HEAP16[$637>>1]|0;
   $639 = $638 << 16 >> 16;
   $640 = ($639|0)==(-1);
   if (!($640)) {
    ___assert_fail((14408|0),(12552|0),4997,(13872|0));
    // unreachable;
   }
   $641 = $fip;
   $642 = (($641) + 27|0);
   $643 = HEAP8[$642>>0]|0;
   $644 = $643&255;
   $645 = ($644|0)==(1);
   if (!($645)) {
    ___assert_fail((14448|0),(12552|0),4998,(13872|0));
    // unreachable;
   }
   $646 = $2;
   $647 = (($646) + 8|0);
   $648 = $647;
   $649 = $648;
   $650 = HEAP32[$649>>2]|0;
   $651 = (($648) + 4)|0;
   $652 = $651;
   $653 = HEAP32[$652>>2]|0;
   $654 = ($653>>>0)>(0);
   $655 = ($650>>>0)>(65535);
   $656 = ($653|0)==(0);
   $657 = $656 & $655;
   $658 = $654 | $657;
   if ($658) {
    $err = 1;
   } else {
    $659 = $1;
    $660 = $2;
    $661 = (_TIFFReadDirEntryByteArray($659,$660,$data19)|0);
    $err = $661;
    $662 = $err;
    $663 = ($662|0)==(0);
    do {
     if ($663) {
      $664 = $1;
      $665 = $2;
      $666 = HEAP16[$665>>1]|0;
      $667 = $666&65535;
      $668 = $2;
      $669 = (($668) + 8|0);
      $670 = $669;
      $671 = $670;
      $672 = HEAP32[$671>>2]|0;
      $673 = (($670) + 4)|0;
      $674 = $673;
      $675 = HEAP32[$674>>2]|0;
      $676 = $672&65535;
      $677 = $676&65535;
      $678 = HEAP32[$data19>>2]|0;
      HEAP32[$vararg_buffer60>>2] = $677;
      $vararg_ptr63 = (($vararg_buffer60) + 4|0);
      HEAP32[$vararg_ptr63>>2] = $678;
      $679 = (_TIFFSetField($664,$667,$vararg_buffer60)|0);
      $m20 = $679;
      $680 = HEAP32[$data19>>2]|0;
      $681 = ($680|0)!=(0|0);
      if ($681) {
       $682 = HEAP32[$data19>>2]|0;
       __TIFFfree($682);
      }
      $683 = $m20;
      $684 = ($683|0)!=(0);
      if ($684) {
       break;
      }
      $0 = 0;
      $1398 = $0;
      STACKTOP = sp;return ($1398|0);
     }
    } while(0);
   }
   break;
  }
  case 30:  {
   $685 = $fip;
   $686 = (($685) + 4|0);
   $687 = HEAP16[$686>>1]|0;
   $688 = $687 << 16 >> 16;
   $689 = ($688|0)==(-1);
   if (!($689)) {
    ___assert_fail((14408|0),(12552|0),5019,(13872|0));
    // unreachable;
   }
   $690 = $fip;
   $691 = (($690) + 27|0);
   $692 = HEAP8[$691>>0]|0;
   $693 = $692&255;
   $694 = ($693|0)==(1);
   if (!($694)) {
    ___assert_fail((14448|0),(12552|0),5020,(13872|0));
    // unreachable;
   }
   $695 = $2;
   $696 = (($695) + 8|0);
   $697 = $696;
   $698 = $697;
   $699 = HEAP32[$698>>2]|0;
   $700 = (($697) + 4)|0;
   $701 = $700;
   $702 = HEAP32[$701>>2]|0;
   $703 = ($702>>>0)>(0);
   $704 = ($699>>>0)>(65535);
   $705 = ($702|0)==(0);
   $706 = $705 & $704;
   $707 = $703 | $706;
   if ($707) {
    $err = 1;
   } else {
    $708 = $1;
    $709 = $2;
    $710 = (_TIFFReadDirEntryShortArray($708,$709,$data21)|0);
    $err = $710;
    $711 = $err;
    $712 = ($711|0)==(0);
    do {
     if ($712) {
      $713 = $1;
      $714 = $2;
      $715 = HEAP16[$714>>1]|0;
      $716 = $715&65535;
      $717 = $2;
      $718 = (($717) + 8|0);
      $719 = $718;
      $720 = $719;
      $721 = HEAP32[$720>>2]|0;
      $722 = (($719) + 4)|0;
      $723 = $722;
      $724 = HEAP32[$723>>2]|0;
      $725 = $721&65535;
      $726 = $725&65535;
      $727 = HEAP32[$data21>>2]|0;
      HEAP32[$vararg_buffer64>>2] = $726;
      $vararg_ptr67 = (($vararg_buffer64) + 4|0);
      HEAP32[$vararg_ptr67>>2] = $727;
      $728 = (_TIFFSetField($713,$716,$vararg_buffer64)|0);
      $m22 = $728;
      $729 = HEAP32[$data21>>2]|0;
      $730 = ($729|0)!=(0|0);
      if ($730) {
       $731 = HEAP32[$data21>>2]|0;
       __TIFFfree($731);
      }
      $732 = $m22;
      $733 = ($732|0)!=(0);
      if ($733) {
       break;
      }
      $0 = 0;
      $1398 = $0;
      STACKTOP = sp;return ($1398|0);
     }
    } while(0);
   }
   break;
  }
  case 39:  {
   $979 = $fip;
   $980 = (($979) + 4|0);
   $981 = HEAP16[$980>>1]|0;
   $982 = $981 << 16 >> 16;
   $983 = ($982|0)==(-3);
   if (!($983)) {
    ___assert_fail((14472|0),(12552|0),5151,(13872|0));
    // unreachable;
   }
   $984 = $fip;
   $985 = (($984) + 27|0);
   $986 = HEAP8[$985>>0]|0;
   $987 = $986&255;
   $988 = ($987|0)==(1);
   if (!($988)) {
    ___assert_fail((14448|0),(12552|0),5152,(13872|0));
    // unreachable;
   }
   $989 = $1;
   $990 = $2;
   $991 = (_TIFFReadDirEntryByteArray($989,$990,$data33)|0);
   $err = $991;
   $992 = $err;
   $993 = ($992|0)==(0);
   do {
    if ($993) {
     $994 = $1;
     $995 = $2;
     $996 = HEAP16[$995>>1]|0;
     $997 = $996&65535;
     $998 = $2;
     $999 = (($998) + 8|0);
     $1000 = $999;
     $1001 = $1000;
     $1002 = HEAP32[$1001>>2]|0;
     $1003 = (($1000) + 4)|0;
     $1004 = $1003;
     $1005 = HEAP32[$1004>>2]|0;
     $1006 = HEAP32[$data33>>2]|0;
     HEAP32[$vararg_buffer88>>2] = $1002;
     $vararg_ptr91 = (($vararg_buffer88) + 4|0);
     HEAP32[$vararg_ptr91>>2] = $1006;
     $1007 = (_TIFFSetField($994,$997,$vararg_buffer88)|0);
     $m34 = $1007;
     $1008 = HEAP32[$data33>>2]|0;
     $1009 = ($1008|0)!=(0|0);
     if ($1009) {
      $1010 = HEAP32[$data33>>2]|0;
      __TIFFfree($1010);
     }
     $1011 = $m34;
     $1012 = ($1011|0)!=(0);
     if ($1012) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 40:  {
   $1013 = $fip;
   $1014 = (($1013) + 4|0);
   $1015 = HEAP16[$1014>>1]|0;
   $1016 = $1015 << 16 >> 16;
   $1017 = ($1016|0)==(-3);
   if (!($1017)) {
    ___assert_fail((14472|0),(12552|0),5168,(13872|0));
    // unreachable;
   }
   $1018 = $fip;
   $1019 = (($1018) + 27|0);
   $1020 = HEAP8[$1019>>0]|0;
   $1021 = $1020&255;
   $1022 = ($1021|0)==(1);
   if (!($1022)) {
    ___assert_fail((14448|0),(12552|0),5169,(13872|0));
    // unreachable;
   }
   $1023 = $1;
   $1024 = $2;
   $1025 = (_TIFFReadDirEntryByteArray($1023,$1024,$data35)|0);
   $err = $1025;
   $1026 = $err;
   $1027 = ($1026|0)==(0);
   do {
    if ($1027) {
     $1028 = $1;
     $1029 = $2;
     $1030 = HEAP16[$1029>>1]|0;
     $1031 = $1030&65535;
     $1032 = $2;
     $1033 = (($1032) + 8|0);
     $1034 = $1033;
     $1035 = $1034;
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = (($1034) + 4)|0;
     $1038 = $1037;
     $1039 = HEAP32[$1038>>2]|0;
     $1040 = HEAP32[$data35>>2]|0;
     HEAP32[$vararg_buffer92>>2] = $1036;
     $vararg_ptr95 = (($vararg_buffer92) + 4|0);
     HEAP32[$vararg_ptr95>>2] = $1040;
     $1041 = (_TIFFSetField($1028,$1031,$vararg_buffer92)|0);
     $m36 = $1041;
     $1042 = HEAP32[$data35>>2]|0;
     $1043 = ($1042|0)!=(0|0);
     if ($1043) {
      $1044 = HEAP32[$data35>>2]|0;
      __TIFFfree($1044);
     }
     $1045 = $m36;
     $1046 = ($1045|0)!=(0);
     if ($1046) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 41:  {
   HEAP32[$data37>>2] = 0;
   $1047 = $fip;
   $1048 = (($1047) + 4|0);
   $1049 = HEAP16[$1048>>1]|0;
   $1050 = $1049 << 16 >> 16;
   $1051 = ($1050|0)==(-3);
   if (!($1051)) {
    ___assert_fail((14472|0),(12552|0),5185,(13872|0));
    // unreachable;
   }
   $1052 = $fip;
   $1053 = (($1052) + 27|0);
   $1054 = HEAP8[$1053>>0]|0;
   $1055 = $1054&255;
   $1056 = ($1055|0)==(1);
   if (!($1056)) {
    ___assert_fail((14448|0),(12552|0),5186,(13872|0));
    // unreachable;
   }
   $1057 = $1;
   $1058 = $2;
   $1059 = (_TIFFReadDirEntrySbyteArray($1057,$1058,$data37)|0);
   $err = $1059;
   $1060 = $err;
   $1061 = ($1060|0)==(0);
   do {
    if ($1061) {
     $1062 = $1;
     $1063 = $2;
     $1064 = HEAP16[$1063>>1]|0;
     $1065 = $1064&65535;
     $1066 = $2;
     $1067 = (($1066) + 8|0);
     $1068 = $1067;
     $1069 = $1068;
     $1070 = HEAP32[$1069>>2]|0;
     $1071 = (($1068) + 4)|0;
     $1072 = $1071;
     $1073 = HEAP32[$1072>>2]|0;
     $1074 = HEAP32[$data37>>2]|0;
     HEAP32[$vararg_buffer96>>2] = $1070;
     $vararg_ptr99 = (($vararg_buffer96) + 4|0);
     HEAP32[$vararg_ptr99>>2] = $1074;
     $1075 = (_TIFFSetField($1062,$1065,$vararg_buffer96)|0);
     $m38 = $1075;
     $1076 = HEAP32[$data37>>2]|0;
     $1077 = ($1076|0)!=(0|0);
     if ($1077) {
      $1078 = HEAP32[$data37>>2]|0;
      __TIFFfree($1078);
     }
     $1079 = $m38;
     $1080 = ($1079|0)!=(0);
     if ($1080) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 42:  {
   $1081 = $fip;
   $1082 = (($1081) + 4|0);
   $1083 = HEAP16[$1082>>1]|0;
   $1084 = $1083 << 16 >> 16;
   $1085 = ($1084|0)==(-3);
   if (!($1085)) {
    ___assert_fail((14472|0),(12552|0),5202,(13872|0));
    // unreachable;
   }
   $1086 = $fip;
   $1087 = (($1086) + 27|0);
   $1088 = HEAP8[$1087>>0]|0;
   $1089 = $1088&255;
   $1090 = ($1089|0)==(1);
   if (!($1090)) {
    ___assert_fail((14448|0),(12552|0),5203,(13872|0));
    // unreachable;
   }
   $1091 = $1;
   $1092 = $2;
   $1093 = (_TIFFReadDirEntryShortArray($1091,$1092,$data39)|0);
   $err = $1093;
   $1094 = $err;
   $1095 = ($1094|0)==(0);
   do {
    if ($1095) {
     $1096 = $1;
     $1097 = $2;
     $1098 = HEAP16[$1097>>1]|0;
     $1099 = $1098&65535;
     $1100 = $2;
     $1101 = (($1100) + 8|0);
     $1102 = $1101;
     $1103 = $1102;
     $1104 = HEAP32[$1103>>2]|0;
     $1105 = (($1102) + 4)|0;
     $1106 = $1105;
     $1107 = HEAP32[$1106>>2]|0;
     $1108 = HEAP32[$data39>>2]|0;
     HEAP32[$vararg_buffer100>>2] = $1104;
     $vararg_ptr103 = (($vararg_buffer100) + 4|0);
     HEAP32[$vararg_ptr103>>2] = $1108;
     $1109 = (_TIFFSetField($1096,$1099,$vararg_buffer100)|0);
     $m40 = $1109;
     $1110 = HEAP32[$data39>>2]|0;
     $1111 = ($1110|0)!=(0|0);
     if ($1111) {
      $1112 = HEAP32[$data39>>2]|0;
      __TIFFfree($1112);
     }
     $1113 = $m40;
     $1114 = ($1113|0)!=(0);
     if ($1114) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 34:  {
   $783 = $fip;
   $784 = (($783) + 4|0);
   $785 = HEAP16[$784>>1]|0;
   $786 = $785 << 16 >> 16;
   $787 = ($786|0)==(-1);
   if (!($787)) {
    ___assert_fail((14408|0),(12552|0),5063,(13872|0));
    // unreachable;
   }
   $788 = $fip;
   $789 = (($788) + 27|0);
   $790 = HEAP8[$789>>0]|0;
   $791 = $790&255;
   $792 = ($791|0)==(1);
   if (!($792)) {
    ___assert_fail((14448|0),(12552|0),5064,(13872|0));
    // unreachable;
   }
   $793 = $2;
   $794 = (($793) + 8|0);
   $795 = $794;
   $796 = $795;
   $797 = HEAP32[$796>>2]|0;
   $798 = (($795) + 4)|0;
   $799 = $798;
   $800 = HEAP32[$799>>2]|0;
   $801 = ($800>>>0)>(0);
   $802 = ($797>>>0)>(65535);
   $803 = ($800|0)==(0);
   $804 = $803 & $802;
   $805 = $801 | $804;
   if ($805) {
    $err = 1;
   } else {
    $806 = $1;
    $807 = $2;
    $808 = (_TIFFReadDirEntryLong8Array($806,$807,$data25)|0);
    $err = $808;
    $809 = $err;
    $810 = ($809|0)==(0);
    do {
     if ($810) {
      $811 = $1;
      $812 = $2;
      $813 = HEAP16[$812>>1]|0;
      $814 = $813&65535;
      $815 = $2;
      $816 = (($815) + 8|0);
      $817 = $816;
      $818 = $817;
      $819 = HEAP32[$818>>2]|0;
      $820 = (($817) + 4)|0;
      $821 = $820;
      $822 = HEAP32[$821>>2]|0;
      $823 = $819&65535;
      $824 = $823&65535;
      $825 = HEAP32[$data25>>2]|0;
      HEAP32[$vararg_buffer72>>2] = $824;
      $vararg_ptr75 = (($vararg_buffer72) + 4|0);
      HEAP32[$vararg_ptr75>>2] = $825;
      $826 = (_TIFFSetField($811,$814,$vararg_buffer72)|0);
      $m26 = $826;
      $827 = HEAP32[$data25>>2]|0;
      $828 = ($827|0)!=(0|0);
      if ($828) {
       $829 = HEAP32[$data25>>2]|0;
       __TIFFfree($829);
      }
      $830 = $m26;
      $831 = ($830|0)!=(0);
      if ($831) {
       break;
      }
      $0 = 0;
      $1398 = $0;
      STACKTOP = sp;return ($1398|0);
     }
    } while(0);
   }
   break;
  }
  case 36:  {
   $832 = $fip;
   $833 = (($832) + 4|0);
   $834 = HEAP16[$833>>1]|0;
   $835 = $834 << 16 >> 16;
   $836 = ($835|0)==(-1);
   if (!($836)) {
    ___assert_fail((14408|0),(12552|0),5085,(13872|0));
    // unreachable;
   }
   $837 = $fip;
   $838 = (($837) + 27|0);
   $839 = HEAP8[$838>>0]|0;
   $840 = $839&255;
   $841 = ($840|0)==(1);
   if (!($841)) {
    ___assert_fail((14448|0),(12552|0),5086,(13872|0));
    // unreachable;
   }
   $842 = $2;
   $843 = (($842) + 8|0);
   $844 = $843;
   $845 = $844;
   $846 = HEAP32[$845>>2]|0;
   $847 = (($844) + 4)|0;
   $848 = $847;
   $849 = HEAP32[$848>>2]|0;
   $850 = ($849>>>0)>(0);
   $851 = ($846>>>0)>(65535);
   $852 = ($849|0)==(0);
   $853 = $852 & $851;
   $854 = $850 | $853;
   if ($854) {
    $err = 1;
   } else {
    $855 = $1;
    $856 = $2;
    $857 = (_TIFFReadDirEntryFloatArray($855,$856,$data27)|0);
    $err = $857;
    $858 = $err;
    $859 = ($858|0)==(0);
    do {
     if ($859) {
      $860 = $1;
      $861 = $2;
      $862 = HEAP16[$861>>1]|0;
      $863 = $862&65535;
      $864 = $2;
      $865 = (($864) + 8|0);
      $866 = $865;
      $867 = $866;
      $868 = HEAP32[$867>>2]|0;
      $869 = (($866) + 4)|0;
      $870 = $869;
      $871 = HEAP32[$870>>2]|0;
      $872 = $868&65535;
      $873 = $872&65535;
      $874 = HEAP32[$data27>>2]|0;
      HEAP32[$vararg_buffer76>>2] = $873;
      $vararg_ptr79 = (($vararg_buffer76) + 4|0);
      HEAP32[$vararg_ptr79>>2] = $874;
      $875 = (_TIFFSetField($860,$863,$vararg_buffer76)|0);
      $m28 = $875;
      $876 = HEAP32[$data27>>2]|0;
      $877 = ($876|0)!=(0|0);
      if ($877) {
       $878 = HEAP32[$data27>>2]|0;
       __TIFFfree($878);
      }
      $879 = $m28;
      $880 = ($879|0)!=(0);
      if ($880) {
       break;
      }
      $0 = 0;
      $1398 = $0;
      STACKTOP = sp;return ($1398|0);
     }
    } while(0);
   }
   break;
  }
  case 37:  {
   $881 = $fip;
   $882 = (($881) + 4|0);
   $883 = HEAP16[$882>>1]|0;
   $884 = $883 << 16 >> 16;
   $885 = ($884|0)==(-1);
   if (!($885)) {
    ___assert_fail((14408|0),(12552|0),5107,(13872|0));
    // unreachable;
   }
   $886 = $fip;
   $887 = (($886) + 27|0);
   $888 = HEAP8[$887>>0]|0;
   $889 = $888&255;
   $890 = ($889|0)==(1);
   if (!($890)) {
    ___assert_fail((14448|0),(12552|0),5108,(13872|0));
    // unreachable;
   }
   $891 = $2;
   $892 = (($891) + 8|0);
   $893 = $892;
   $894 = $893;
   $895 = HEAP32[$894>>2]|0;
   $896 = (($893) + 4)|0;
   $897 = $896;
   $898 = HEAP32[$897>>2]|0;
   $899 = ($898>>>0)>(0);
   $900 = ($895>>>0)>(65535);
   $901 = ($898|0)==(0);
   $902 = $901 & $900;
   $903 = $899 | $902;
   if ($903) {
    $err = 1;
   } else {
    $904 = $1;
    $905 = $2;
    $906 = (_TIFFReadDirEntryDoubleArray($904,$905,$data29)|0);
    $err = $906;
    $907 = $err;
    $908 = ($907|0)==(0);
    do {
     if ($908) {
      $909 = $1;
      $910 = $2;
      $911 = HEAP16[$910>>1]|0;
      $912 = $911&65535;
      $913 = $2;
      $914 = (($913) + 8|0);
      $915 = $914;
      $916 = $915;
      $917 = HEAP32[$916>>2]|0;
      $918 = (($915) + 4)|0;
      $919 = $918;
      $920 = HEAP32[$919>>2]|0;
      $921 = $917&65535;
      $922 = $921&65535;
      $923 = HEAP32[$data29>>2]|0;
      HEAP32[$vararg_buffer80>>2] = $922;
      $vararg_ptr83 = (($vararg_buffer80) + 4|0);
      HEAP32[$vararg_ptr83>>2] = $923;
      $924 = (_TIFFSetField($909,$912,$vararg_buffer80)|0);
      $m30 = $924;
      $925 = HEAP32[$data29>>2]|0;
      $926 = ($925|0)!=(0|0);
      if ($926) {
       $927 = HEAP32[$data29>>2]|0;
       __TIFFfree($927);
      }
      $928 = $m30;
      $929 = ($928|0)!=(0);
      if ($929) {
       break;
      }
      $0 = 0;
      $1398 = $0;
      STACKTOP = sp;return ($1398|0);
     }
    } while(0);
   }
   break;
  }
  case 38:  {
   $930 = $fip;
   $931 = (($930) + 4|0);
   $932 = HEAP16[$931>>1]|0;
   $933 = $932 << 16 >> 16;
   $934 = ($933|0)==(-1);
   if (!($934)) {
    ___assert_fail((14408|0),(12552|0),5129,(13872|0));
    // unreachable;
   }
   $935 = $fip;
   $936 = (($935) + 27|0);
   $937 = HEAP8[$936>>0]|0;
   $938 = $937&255;
   $939 = ($938|0)==(1);
   if (!($939)) {
    ___assert_fail((14448|0),(12552|0),5130,(13872|0));
    // unreachable;
   }
   $940 = $2;
   $941 = (($940) + 8|0);
   $942 = $941;
   $943 = $942;
   $944 = HEAP32[$943>>2]|0;
   $945 = (($942) + 4)|0;
   $946 = $945;
   $947 = HEAP32[$946>>2]|0;
   $948 = ($947>>>0)>(0);
   $949 = ($944>>>0)>(65535);
   $950 = ($947|0)==(0);
   $951 = $950 & $949;
   $952 = $948 | $951;
   if ($952) {
    $err = 1;
   } else {
    $953 = $1;
    $954 = $2;
    $955 = (_TIFFReadDirEntryIfd8Array($953,$954,$data31)|0);
    $err = $955;
    $956 = $err;
    $957 = ($956|0)==(0);
    do {
     if ($957) {
      $958 = $1;
      $959 = $2;
      $960 = HEAP16[$959>>1]|0;
      $961 = $960&65535;
      $962 = $2;
      $963 = (($962) + 8|0);
      $964 = $963;
      $965 = $964;
      $966 = HEAP32[$965>>2]|0;
      $967 = (($964) + 4)|0;
      $968 = $967;
      $969 = HEAP32[$968>>2]|0;
      $970 = $966&65535;
      $971 = $970&65535;
      $972 = HEAP32[$data31>>2]|0;
      HEAP32[$vararg_buffer84>>2] = $971;
      $vararg_ptr87 = (($vararg_buffer84) + 4|0);
      HEAP32[$vararg_ptr87>>2] = $972;
      $973 = (_TIFFSetField($958,$961,$vararg_buffer84)|0);
      $m32 = $973;
      $974 = HEAP32[$data31>>2]|0;
      $975 = ($974|0)!=(0|0);
      if ($975) {
       $976 = HEAP32[$data31>>2]|0;
       __TIFFfree($976);
      }
      $977 = $m32;
      $978 = ($977|0)!=(0);
      if ($978) {
       break;
      }
      $0 = 0;
      $1398 = $0;
      STACKTOP = sp;return ($1398|0);
     }
    } while(0);
   }
   break;
  }
  case 32:  {
   $734 = $fip;
   $735 = (($734) + 4|0);
   $736 = HEAP16[$735>>1]|0;
   $737 = $736 << 16 >> 16;
   $738 = ($737|0)==(-1);
   if (!($738)) {
    ___assert_fail((14408|0),(12552|0),5041,(13872|0));
    // unreachable;
   }
   $739 = $fip;
   $740 = (($739) + 27|0);
   $741 = HEAP8[$740>>0]|0;
   $742 = $741&255;
   $743 = ($742|0)==(1);
   if (!($743)) {
    ___assert_fail((14448|0),(12552|0),5042,(13872|0));
    // unreachable;
   }
   $744 = $2;
   $745 = (($744) + 8|0);
   $746 = $745;
   $747 = $746;
   $748 = HEAP32[$747>>2]|0;
   $749 = (($746) + 4)|0;
   $750 = $749;
   $751 = HEAP32[$750>>2]|0;
   $752 = ($751>>>0)>(0);
   $753 = ($748>>>0)>(65535);
   $754 = ($751|0)==(0);
   $755 = $754 & $753;
   $756 = $752 | $755;
   if ($756) {
    $err = 1;
   } else {
    $757 = $1;
    $758 = $2;
    $759 = (_TIFFReadDirEntryLongArray($757,$758,$data23)|0);
    $err = $759;
    $760 = $err;
    $761 = ($760|0)==(0);
    do {
     if ($761) {
      $762 = $1;
      $763 = $2;
      $764 = HEAP16[$763>>1]|0;
      $765 = $764&65535;
      $766 = $2;
      $767 = (($766) + 8|0);
      $768 = $767;
      $769 = $768;
      $770 = HEAP32[$769>>2]|0;
      $771 = (($768) + 4)|0;
      $772 = $771;
      $773 = HEAP32[$772>>2]|0;
      $774 = $770&65535;
      $775 = $774&65535;
      $776 = HEAP32[$data23>>2]|0;
      HEAP32[$vararg_buffer68>>2] = $775;
      $vararg_ptr71 = (($vararg_buffer68) + 4|0);
      HEAP32[$vararg_ptr71>>2] = $776;
      $777 = (_TIFFSetField($762,$765,$vararg_buffer68)|0);
      $m24 = $777;
      $778 = HEAP32[$data23>>2]|0;
      $779 = ($778|0)!=(0|0);
      if ($779) {
       $780 = HEAP32[$data23>>2]|0;
       __TIFFfree($780);
      }
      $781 = $m24;
      $782 = ($781|0)!=(0);
      if ($782) {
       break;
      }
      $0 = 0;
      $1398 = $0;
      STACKTOP = sp;return ($1398|0);
     }
    } while(0);
   }
   break;
  }
  case 43:  {
   HEAP32[$data41>>2] = 0;
   $1115 = $fip;
   $1116 = (($1115) + 4|0);
   $1117 = HEAP16[$1116>>1]|0;
   $1118 = $1117 << 16 >> 16;
   $1119 = ($1118|0)==(-3);
   if (!($1119)) {
    ___assert_fail((14472|0),(12552|0),5219,(13872|0));
    // unreachable;
   }
   $1120 = $fip;
   $1121 = (($1120) + 27|0);
   $1122 = HEAP8[$1121>>0]|0;
   $1123 = $1122&255;
   $1124 = ($1123|0)==(1);
   if (!($1124)) {
    ___assert_fail((14448|0),(12552|0),5220,(13872|0));
    // unreachable;
   }
   $1125 = $1;
   $1126 = $2;
   $1127 = (_TIFFReadDirEntrySshortArray($1125,$1126,$data41)|0);
   $err = $1127;
   $1128 = $err;
   $1129 = ($1128|0)==(0);
   do {
    if ($1129) {
     $1130 = $1;
     $1131 = $2;
     $1132 = HEAP16[$1131>>1]|0;
     $1133 = $1132&65535;
     $1134 = $2;
     $1135 = (($1134) + 8|0);
     $1136 = $1135;
     $1137 = $1136;
     $1138 = HEAP32[$1137>>2]|0;
     $1139 = (($1136) + 4)|0;
     $1140 = $1139;
     $1141 = HEAP32[$1140>>2]|0;
     $1142 = HEAP32[$data41>>2]|0;
     HEAP32[$vararg_buffer104>>2] = $1138;
     $vararg_ptr107 = (($vararg_buffer104) + 4|0);
     HEAP32[$vararg_ptr107>>2] = $1142;
     $1143 = (_TIFFSetField($1130,$1133,$vararg_buffer104)|0);
     $m42 = $1143;
     $1144 = HEAP32[$data41>>2]|0;
     $1145 = ($1144|0)!=(0|0);
     if ($1145) {
      $1146 = HEAP32[$data41>>2]|0;
      __TIFFfree($1146);
     }
     $1147 = $m42;
     $1148 = ($1147|0)!=(0);
     if ($1148) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 44:  {
   $1149 = $fip;
   $1150 = (($1149) + 4|0);
   $1151 = HEAP16[$1150>>1]|0;
   $1152 = $1151 << 16 >> 16;
   $1153 = ($1152|0)==(-3);
   if (!($1153)) {
    ___assert_fail((14472|0),(12552|0),5236,(13872|0));
    // unreachable;
   }
   $1154 = $fip;
   $1155 = (($1154) + 27|0);
   $1156 = HEAP8[$1155>>0]|0;
   $1157 = $1156&255;
   $1158 = ($1157|0)==(1);
   if (!($1158)) {
    ___assert_fail((14448|0),(12552|0),5237,(13872|0));
    // unreachable;
   }
   $1159 = $1;
   $1160 = $2;
   $1161 = (_TIFFReadDirEntryLongArray($1159,$1160,$data43)|0);
   $err = $1161;
   $1162 = $err;
   $1163 = ($1162|0)==(0);
   do {
    if ($1163) {
     $1164 = $1;
     $1165 = $2;
     $1166 = HEAP16[$1165>>1]|0;
     $1167 = $1166&65535;
     $1168 = $2;
     $1169 = (($1168) + 8|0);
     $1170 = $1169;
     $1171 = $1170;
     $1172 = HEAP32[$1171>>2]|0;
     $1173 = (($1170) + 4)|0;
     $1174 = $1173;
     $1175 = HEAP32[$1174>>2]|0;
     $1176 = HEAP32[$data43>>2]|0;
     HEAP32[$vararg_buffer108>>2] = $1172;
     $vararg_ptr111 = (($vararg_buffer108) + 4|0);
     HEAP32[$vararg_ptr111>>2] = $1176;
     $1177 = (_TIFFSetField($1164,$1167,$vararg_buffer108)|0);
     $m44 = $1177;
     $1178 = HEAP32[$data43>>2]|0;
     $1179 = ($1178|0)!=(0|0);
     if ($1179) {
      $1180 = HEAP32[$data43>>2]|0;
      __TIFFfree($1180);
     }
     $1181 = $m44;
     $1182 = ($1181|0)!=(0);
     if ($1182) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 45:  {
   HEAP32[$data45>>2] = 0;
   $1183 = $fip;
   $1184 = (($1183) + 4|0);
   $1185 = HEAP16[$1184>>1]|0;
   $1186 = $1185 << 16 >> 16;
   $1187 = ($1186|0)==(-3);
   if (!($1187)) {
    ___assert_fail((14472|0),(12552|0),5253,(13872|0));
    // unreachable;
   }
   $1188 = $fip;
   $1189 = (($1188) + 27|0);
   $1190 = HEAP8[$1189>>0]|0;
   $1191 = $1190&255;
   $1192 = ($1191|0)==(1);
   if (!($1192)) {
    ___assert_fail((14448|0),(12552|0),5254,(13872|0));
    // unreachable;
   }
   $1193 = $1;
   $1194 = $2;
   $1195 = (_TIFFReadDirEntrySlongArray($1193,$1194,$data45)|0);
   $err = $1195;
   $1196 = $err;
   $1197 = ($1196|0)==(0);
   do {
    if ($1197) {
     $1198 = $1;
     $1199 = $2;
     $1200 = HEAP16[$1199>>1]|0;
     $1201 = $1200&65535;
     $1202 = $2;
     $1203 = (($1202) + 8|0);
     $1204 = $1203;
     $1205 = $1204;
     $1206 = HEAP32[$1205>>2]|0;
     $1207 = (($1204) + 4)|0;
     $1208 = $1207;
     $1209 = HEAP32[$1208>>2]|0;
     $1210 = HEAP32[$data45>>2]|0;
     HEAP32[$vararg_buffer112>>2] = $1206;
     $vararg_ptr115 = (($vararg_buffer112) + 4|0);
     HEAP32[$vararg_ptr115>>2] = $1210;
     $1211 = (_TIFFSetField($1198,$1201,$vararg_buffer112)|0);
     $m46 = $1211;
     $1212 = HEAP32[$data45>>2]|0;
     $1213 = ($1212|0)!=(0|0);
     if ($1213) {
      $1214 = HEAP32[$data45>>2]|0;
      __TIFFfree($1214);
     }
     $1215 = $m46;
     $1216 = ($1215|0)!=(0);
     if ($1216) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 46:  {
   $1217 = $fip;
   $1218 = (($1217) + 4|0);
   $1219 = HEAP16[$1218>>1]|0;
   $1220 = $1219 << 16 >> 16;
   $1221 = ($1220|0)==(-3);
   if (!($1221)) {
    ___assert_fail((14472|0),(12552|0),5270,(13872|0));
    // unreachable;
   }
   $1222 = $fip;
   $1223 = (($1222) + 27|0);
   $1224 = HEAP8[$1223>>0]|0;
   $1225 = $1224&255;
   $1226 = ($1225|0)==(1);
   if (!($1226)) {
    ___assert_fail((14448|0),(12552|0),5271,(13872|0));
    // unreachable;
   }
   $1227 = $1;
   $1228 = $2;
   $1229 = (_TIFFReadDirEntryLong8Array($1227,$1228,$data47)|0);
   $err = $1229;
   $1230 = $err;
   $1231 = ($1230|0)==(0);
   do {
    if ($1231) {
     $1232 = $1;
     $1233 = $2;
     $1234 = HEAP16[$1233>>1]|0;
     $1235 = $1234&65535;
     $1236 = $2;
     $1237 = (($1236) + 8|0);
     $1238 = $1237;
     $1239 = $1238;
     $1240 = HEAP32[$1239>>2]|0;
     $1241 = (($1238) + 4)|0;
     $1242 = $1241;
     $1243 = HEAP32[$1242>>2]|0;
     $1244 = HEAP32[$data47>>2]|0;
     HEAP32[$vararg_buffer116>>2] = $1240;
     $vararg_ptr119 = (($vararg_buffer116) + 4|0);
     HEAP32[$vararg_ptr119>>2] = $1244;
     $1245 = (_TIFFSetField($1232,$1235,$vararg_buffer116)|0);
     $m48 = $1245;
     $1246 = HEAP32[$data47>>2]|0;
     $1247 = ($1246|0)!=(0|0);
     if ($1247) {
      $1248 = HEAP32[$data47>>2]|0;
      __TIFFfree($1248);
     }
     $1249 = $m48;
     $1250 = ($1249|0)!=(0);
     if ($1250) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 47:  {
   HEAP32[$data49>>2] = 0;
   $1251 = $fip;
   $1252 = (($1251) + 4|0);
   $1253 = HEAP16[$1252>>1]|0;
   $1254 = $1253 << 16 >> 16;
   $1255 = ($1254|0)==(-3);
   if (!($1255)) {
    ___assert_fail((14472|0),(12552|0),5287,(13872|0));
    // unreachable;
   }
   $1256 = $fip;
   $1257 = (($1256) + 27|0);
   $1258 = HEAP8[$1257>>0]|0;
   $1259 = $1258&255;
   $1260 = ($1259|0)==(1);
   if (!($1260)) {
    ___assert_fail((14448|0),(12552|0),5288,(13872|0));
    // unreachable;
   }
   $1261 = $1;
   $1262 = $2;
   $1263 = (_TIFFReadDirEntrySlong8Array($1261,$1262,$data49)|0);
   $err = $1263;
   $1264 = $err;
   $1265 = ($1264|0)==(0);
   do {
    if ($1265) {
     $1266 = $1;
     $1267 = $2;
     $1268 = HEAP16[$1267>>1]|0;
     $1269 = $1268&65535;
     $1270 = $2;
     $1271 = (($1270) + 8|0);
     $1272 = $1271;
     $1273 = $1272;
     $1274 = HEAP32[$1273>>2]|0;
     $1275 = (($1272) + 4)|0;
     $1276 = $1275;
     $1277 = HEAP32[$1276>>2]|0;
     $1278 = HEAP32[$data49>>2]|0;
     HEAP32[$vararg_buffer120>>2] = $1274;
     $vararg_ptr123 = (($vararg_buffer120) + 4|0);
     HEAP32[$vararg_ptr123>>2] = $1278;
     $1279 = (_TIFFSetField($1266,$1269,$vararg_buffer120)|0);
     $m50 = $1279;
     $1280 = HEAP32[$data49>>2]|0;
     $1281 = ($1280|0)!=(0|0);
     if ($1281) {
      $1282 = HEAP32[$data49>>2]|0;
      __TIFFfree($1282);
     }
     $1283 = $m50;
     $1284 = ($1283|0)!=(0);
     if ($1284) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 48:  {
   $1285 = $fip;
   $1286 = (($1285) + 4|0);
   $1287 = HEAP16[$1286>>1]|0;
   $1288 = $1287 << 16 >> 16;
   $1289 = ($1288|0)==(-3);
   if (!($1289)) {
    ___assert_fail((14472|0),(12552|0),5304,(13872|0));
    // unreachable;
   }
   $1290 = $fip;
   $1291 = (($1290) + 27|0);
   $1292 = HEAP8[$1291>>0]|0;
   $1293 = $1292&255;
   $1294 = ($1293|0)==(1);
   if (!($1294)) {
    ___assert_fail((14448|0),(12552|0),5305,(13872|0));
    // unreachable;
   }
   $1295 = $1;
   $1296 = $2;
   $1297 = (_TIFFReadDirEntryFloatArray($1295,$1296,$data51)|0);
   $err = $1297;
   $1298 = $err;
   $1299 = ($1298|0)==(0);
   do {
    if ($1299) {
     $1300 = $1;
     $1301 = $2;
     $1302 = HEAP16[$1301>>1]|0;
     $1303 = $1302&65535;
     $1304 = $2;
     $1305 = (($1304) + 8|0);
     $1306 = $1305;
     $1307 = $1306;
     $1308 = HEAP32[$1307>>2]|0;
     $1309 = (($1306) + 4)|0;
     $1310 = $1309;
     $1311 = HEAP32[$1310>>2]|0;
     $1312 = HEAP32[$data51>>2]|0;
     HEAP32[$vararg_buffer124>>2] = $1308;
     $vararg_ptr127 = (($vararg_buffer124) + 4|0);
     HEAP32[$vararg_ptr127>>2] = $1312;
     $1313 = (_TIFFSetField($1300,$1303,$vararg_buffer124)|0);
     $m52 = $1313;
     $1314 = HEAP32[$data51>>2]|0;
     $1315 = ($1314|0)!=(0|0);
     if ($1315) {
      $1316 = HEAP32[$data51>>2]|0;
      __TIFFfree($1316);
     }
     $1317 = $m52;
     $1318 = ($1317|0)!=(0);
     if ($1318) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 49:  {
   $1319 = $fip;
   $1320 = (($1319) + 4|0);
   $1321 = HEAP16[$1320>>1]|0;
   $1322 = $1321 << 16 >> 16;
   $1323 = ($1322|0)==(-3);
   if (!($1323)) {
    ___assert_fail((14472|0),(12552|0),5321,(13872|0));
    // unreachable;
   }
   $1324 = $fip;
   $1325 = (($1324) + 27|0);
   $1326 = HEAP8[$1325>>0]|0;
   $1327 = $1326&255;
   $1328 = ($1327|0)==(1);
   if (!($1328)) {
    ___assert_fail((14448|0),(12552|0),5322,(13872|0));
    // unreachable;
   }
   $1329 = $1;
   $1330 = $2;
   $1331 = (_TIFFReadDirEntryDoubleArray($1329,$1330,$data53)|0);
   $err = $1331;
   $1332 = $err;
   $1333 = ($1332|0)==(0);
   do {
    if ($1333) {
     $1334 = $1;
     $1335 = $2;
     $1336 = HEAP16[$1335>>1]|0;
     $1337 = $1336&65535;
     $1338 = $2;
     $1339 = (($1338) + 8|0);
     $1340 = $1339;
     $1341 = $1340;
     $1342 = HEAP32[$1341>>2]|0;
     $1343 = (($1340) + 4)|0;
     $1344 = $1343;
     $1345 = HEAP32[$1344>>2]|0;
     $1346 = HEAP32[$data53>>2]|0;
     HEAP32[$vararg_buffer128>>2] = $1342;
     $vararg_ptr131 = (($vararg_buffer128) + 4|0);
     HEAP32[$vararg_ptr131>>2] = $1346;
     $1347 = (_TIFFSetField($1334,$1337,$vararg_buffer128)|0);
     $m54 = $1347;
     $1348 = HEAP32[$data53>>2]|0;
     $1349 = ($1348|0)!=(0|0);
     if ($1349) {
      $1350 = HEAP32[$data53>>2]|0;
      __TIFFfree($1350);
     }
     $1351 = $m54;
     $1352 = ($1351|0)!=(0);
     if ($1352) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  case 50:  {
   $1353 = $fip;
   $1354 = (($1353) + 4|0);
   $1355 = HEAP16[$1354>>1]|0;
   $1356 = $1355 << 16 >> 16;
   $1357 = ($1356|0)==(-3);
   if (!($1357)) {
    ___assert_fail((14472|0),(12552|0),5338,(13872|0));
    // unreachable;
   }
   $1358 = $fip;
   $1359 = (($1358) + 27|0);
   $1360 = HEAP8[$1359>>0]|0;
   $1361 = $1360&255;
   $1362 = ($1361|0)==(1);
   if (!($1362)) {
    ___assert_fail((14448|0),(12552|0),5339,(13872|0));
    // unreachable;
   }
   $1363 = $1;
   $1364 = $2;
   $1365 = (_TIFFReadDirEntryIfd8Array($1363,$1364,$data55)|0);
   $err = $1365;
   $1366 = $err;
   $1367 = ($1366|0)==(0);
   do {
    if ($1367) {
     $1368 = $1;
     $1369 = $2;
     $1370 = HEAP16[$1369>>1]|0;
     $1371 = $1370&65535;
     $1372 = $2;
     $1373 = (($1372) + 8|0);
     $1374 = $1373;
     $1375 = $1374;
     $1376 = HEAP32[$1375>>2]|0;
     $1377 = (($1374) + 4)|0;
     $1378 = $1377;
     $1379 = HEAP32[$1378>>2]|0;
     $1380 = HEAP32[$data55>>2]|0;
     HEAP32[$vararg_buffer132>>2] = $1376;
     $vararg_ptr135 = (($vararg_buffer132) + 4|0);
     HEAP32[$vararg_ptr135>>2] = $1380;
     $1381 = (_TIFFSetField($1368,$1371,$vararg_buffer132)|0);
     $m56 = $1381;
     $1382 = HEAP32[$data55>>2]|0;
     $1383 = ($1382|0)!=(0|0);
     if ($1383) {
      $1384 = HEAP32[$data55>>2]|0;
      __TIFFfree($1384);
     }
     $1385 = $m56;
     $1386 = ($1385|0)!=(0);
     if ($1386) {
      break;
     }
     $0 = 0;
     $1398 = $0;
     STACKTOP = sp;return ($1398|0);
    }
   } while(0);
   break;
  }
  default: {
   ___assert_fail((14512|0),(12552|0),5353,(13872|0));
   // unreachable;
  }
  }
 } while(0);
 $1387 = $err;
 $1388 = ($1387|0)!=(0);
 if (!($1388)) {
  $0 = 1;
  $1398 = $0;
  STACKTOP = sp;return ($1398|0);
 }
 $1389 = $1;
 $1390 = $err;
 $1391 = $fip;
 $1392 = ($1391|0)!=(0|0);
 if ($1392) {
  $1393 = $fip;
  $1394 = (($1393) + 28|0);
  $1395 = HEAP32[$1394>>2]|0;
  $1397 = $1395;
 } else {
  $1397 = 12776;
 }
 $1396 = $3;
 _TIFFReadDirEntryOutputErr($1389,$1390,13848,$1397,$1396);
 $0 = 0;
 $1398 = $0;
 STACKTOP = sp;return ($1398|0);
}
function _TIFFReadDirEntryShort($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $m = 0, $m1 = 0, $m2 = 0, $m3 = 0;
 var $m4 = 0, $m5 = 0, $m6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp + 46|0;
 $m1 = sp + 47|0;
 $m2 = sp + 44|0;
 $m3 = sp + 16|0;
 $m4 = sp + 32|0;
 $m5 = sp + 8|0;
 $m6 = sp;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)!=(1);
 $13 = ($11|0)!=(0);
 $14 = $12 | $13;
 L1: do {
  if ($14) {
   $0 = 1;
  } else {
   $15 = $2;
   $16 = (($15) + 2|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   switch ($18|0) {
   case 1:  {
    $19 = $1;
    $20 = $2;
    _TIFFReadDirEntryCheckedByte($19,$20,$m);
    $21 = HEAP8[$m>>0]|0;
    $22 = $21&255;
    $23 = $3;
    HEAP16[$23>>1] = $22;
    $0 = 0;
    break L1;
    break;
   }
   case 9:  {
    $56 = $1;
    $57 = $2;
    _TIFFReadDirEntryCheckedSlong($56,$57,$m4);
    $58 = HEAP32[$m4>>2]|0;
    $59 = (_TIFFReadDirEntryCheckRangeShortSlong($58)|0);
    $err = $59;
    $60 = $err;
    $61 = ($60|0)!=(0);
    if ($61) {
     $62 = $err;
     $0 = $62;
     break L1;
    } else {
     $63 = HEAP32[$m4>>2]|0;
     $64 = $63&65535;
     $65 = $3;
     HEAP16[$65>>1] = $64;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 16:  {
    $66 = $1;
    $67 = $2;
    $68 = (_TIFFReadDirEntryCheckedLong8($66,$67,$m5)|0);
    $err = $68;
    $69 = $err;
    $70 = ($69|0)!=(0);
    if ($70) {
     $71 = $err;
     $0 = $71;
     break L1;
    }
    $72 = $m5;
    $73 = $72;
    $74 = HEAP32[$73>>2]|0;
    $75 = (($72) + 4)|0;
    $76 = $75;
    $77 = HEAP32[$76>>2]|0;
    $78 = (_TIFFReadDirEntryCheckRangeShortLong8($74,$77)|0);
    $err = $78;
    $79 = $err;
    $80 = ($79|0)!=(0);
    if ($80) {
     $81 = $err;
     $0 = $81;
     break L1;
    } else {
     $82 = $m5;
     $83 = $82;
     $84 = HEAP32[$83>>2]|0;
     $85 = (($82) + 4)|0;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $88 = $84&65535;
     $89 = $3;
     HEAP16[$89>>1] = $88;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 17:  {
    $90 = $1;
    $91 = $2;
    $92 = (_TIFFReadDirEntryCheckedSlong8($90,$91,$m6)|0);
    $err = $92;
    $93 = $err;
    $94 = ($93|0)!=(0);
    if ($94) {
     $95 = $err;
     $0 = $95;
     break L1;
    }
    $96 = $m6;
    $97 = $96;
    $98 = HEAP32[$97>>2]|0;
    $99 = (($96) + 4)|0;
    $100 = $99;
    $101 = HEAP32[$100>>2]|0;
    $102 = (_TIFFReadDirEntryCheckRangeShortSlong8($98,$101)|0);
    $err = $102;
    $103 = $err;
    $104 = ($103|0)!=(0);
    if ($104) {
     $105 = $err;
     $0 = $105;
     break L1;
    } else {
     $106 = $m6;
     $107 = $106;
     $108 = HEAP32[$107>>2]|0;
     $109 = (($106) + 4)|0;
     $110 = $109;
     $111 = HEAP32[$110>>2]|0;
     $112 = $108&65535;
     $113 = $3;
     HEAP16[$113>>1] = $112;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 4:  {
    $46 = $1;
    $47 = $2;
    _TIFFReadDirEntryCheckedLong($46,$47,$m3);
    $48 = HEAP32[$m3>>2]|0;
    $49 = (_TIFFReadDirEntryCheckRangeShortLong($48)|0);
    $err = $49;
    $50 = $err;
    $51 = ($50|0)!=(0);
    if ($51) {
     $52 = $err;
     $0 = $52;
     break L1;
    } else {
     $53 = HEAP32[$m3>>2]|0;
     $54 = $53&65535;
     $55 = $3;
     HEAP16[$55>>1] = $54;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 3:  {
    $34 = $1;
    $35 = $2;
    $36 = $3;
    _TIFFReadDirEntryCheckedShort($34,$35,$36);
    $0 = 0;
    break L1;
    break;
   }
   case 6:  {
    $24 = $1;
    $25 = $2;
    _TIFFReadDirEntryCheckedSbyte($24,$25,$m1);
    $26 = HEAP8[$m1>>0]|0;
    $27 = (_TIFFReadDirEntryCheckRangeShortSbyte($26)|0);
    $err = $27;
    $28 = $err;
    $29 = ($28|0)!=(0);
    if ($29) {
     $30 = $err;
     $0 = $30;
     break L1;
    } else {
     $31 = HEAP8[$m1>>0]|0;
     $32 = $31 << 24 >> 24;
     $33 = $3;
     HEAP16[$33>>1] = $32;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 8:  {
    $37 = $1;
    $38 = $2;
    _TIFFReadDirEntryCheckedSshort($37,$38,$m2);
    $39 = HEAP16[$m2>>1]|0;
    $40 = (_TIFFReadDirEntryCheckRangeShortSshort($39)|0);
    $err = $40;
    $41 = $err;
    $42 = ($41|0)!=(0);
    if ($42) {
     $43 = $err;
     $0 = $43;
     break L1;
    } else {
     $44 = HEAP16[$m2>>1]|0;
     $45 = $3;
     HEAP16[$45>>1] = $44;
     $0 = 0;
     break L1;
    }
    break;
   }
   default: {
    $0 = 2;
    break L1;
   }
   }
  }
 } while(0);
 $114 = $0;
 STACKTOP = sp;return ($114|0);
}
function _TIFFReadDirEntryPersampleShort($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $m = 0, $na = 0, $nb = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 40|0);
 $14 = (($13) + 58|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($11>>>0)<(0);
 $18 = ($8>>>0)<($16>>>0);
 $19 = ($11|0)==(0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 if ($21) {
  $0 = 1;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $22 = $1;
 $23 = $2;
 $24 = (_TIFFReadDirEntryShortArray($22,$23,$m)|0);
 $err = $24;
 $25 = $err;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $err;
  $0 = $27;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $28 = HEAP32[$m>>2]|0;
 $na = $28;
 $29 = $1;
 $30 = (($29) + 40|0);
 $31 = (($30) + 58|0);
 $32 = HEAP16[$31>>1]|0;
 $nb = $32;
 $33 = $na;
 $34 = (($33) + 2|0);
 $na = $34;
 $35 = HEAP16[$33>>1]|0;
 $36 = $3;
 HEAP16[$36>>1] = $35;
 $37 = $nb;
 $38 = (($37) + -1)<<16>>16;
 $nb = $38;
 while(1) {
  $39 = $nb;
  $40 = $39&65535;
  $41 = ($40|0)>(0);
  if (!($41)) {
   break;
  }
  $42 = $na;
  $43 = (($42) + 2|0);
  $na = $43;
  $44 = HEAP16[$42>>1]|0;
  $45 = $44&65535;
  $46 = $3;
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = ($45|0)!=($48|0);
  if ($49) {
   label = 8;
   break;
  }
  $50 = $nb;
  $51 = (($50) + -1)<<16>>16;
  $nb = $51;
 }
 if ((label|0) == 8) {
  $err = 5;
 }
 $52 = HEAP32[$m>>2]|0;
 __TIFFfree($52);
 $53 = $err;
 $0 = $53;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function _TIFFReadDirEntryOutputErr($tif,$err,$module,$tagname,$recover) {
 $tif = $tif|0;
 $err = $err|0;
 $module = $module|0;
 $tagname = $tagname|0;
 $recover = $recover|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer37 = sp + 104|0;
 $vararg_buffer34 = sp + 8|0;
 $vararg_buffer31 = sp + 72|0;
 $vararg_buffer28 = sp + 88|0;
 $vararg_buffer25 = sp + 64|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer19 = sp + 96|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 56|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 32|0;
 $0 = $tif;
 $1 = $err;
 $2 = $module;
 $3 = $tagname;
 $4 = $recover;
 $5 = $4;
 $6 = ($5|0)!=(0);
 if ($6) {
  $43 = $1;
  switch ($43|0) {
  case 1:  {
   $44 = $0;
   $45 = (($44) + 628|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $2;
   $48 = $3;
   HEAP32[$vararg_buffer19>>2] = $48;
   _TIFFErrorExt($46,$47,15528,$vararg_buffer19);
   break;
  }
  case 2:  {
   $49 = $0;
   $50 = (($49) + 628|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $2;
   $53 = $3;
   HEAP32[$vararg_buffer22>>2] = $53;
   _TIFFWarningExt($51,$52,15568,$vararg_buffer22);
   break;
  }
  case 3:  {
   $54 = $0;
   $55 = (($54) + 628|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $2;
   $58 = $3;
   HEAP32[$vararg_buffer25>>2] = $58;
   _TIFFWarningExt($56,$57,15608,$vararg_buffer25);
   break;
  }
  case 4:  {
   $59 = $0;
   $60 = (($59) + 628|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $2;
   $63 = $3;
   HEAP32[$vararg_buffer28>>2] = $63;
   _TIFFWarningExt($61,$62,15656,$vararg_buffer28);
   break;
  }
  case 5:  {
   $64 = $0;
   $65 = (($64) + 628|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $2;
   $68 = $3;
   HEAP32[$vararg_buffer31>>2] = $68;
   _TIFFWarningExt($66,$67,15696,$vararg_buffer31);
   break;
  }
  case 6:  {
   $69 = $0;
   $70 = (($69) + 628|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $2;
   $73 = $3;
   HEAP32[$vararg_buffer34>>2] = $73;
   _TIFFWarningExt($71,$72,15760,$vararg_buffer34);
   break;
  }
  case 7:  {
   $74 = $0;
   $75 = (($74) + 628|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $2;
   $78 = $3;
   HEAP32[$vararg_buffer37>>2] = $78;
   _TIFFWarningExt($76,$77,15816,$vararg_buffer37);
   break;
  }
  default: {
   ___assert_fail((14512|0),(12552|0),3412,(15496|0));
   // unreachable;
  }
  }
  STACKTOP = sp;return;
 } else {
  $7 = $1;
  switch ($7|0) {
  case 2:  {
   $13 = $0;
   $14 = (($13) + 628|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $2;
   $17 = $3;
   HEAP32[$vararg_buffer1>>2] = $17;
   _TIFFErrorExt($15,$16,15264,$vararg_buffer1);
   break;
  }
  case 4:  {
   $23 = $0;
   $24 = (($23) + 628|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $2;
   $27 = $3;
   HEAP32[$vararg_buffer7>>2] = $27;
   _TIFFErrorExt($25,$26,15328,$vararg_buffer7);
   break;
  }
  case 7:  {
   $38 = $0;
   $39 = (($38) + 628|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $2;
   $42 = $3;
   HEAP32[$vararg_buffer16>>2] = $42;
   _TIFFErrorExt($40,$41,15464,$vararg_buffer16);
   break;
  }
  case 1:  {
   $8 = $0;
   $9 = (($8) + 628|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $2;
   $12 = $3;
   HEAP32[$vararg_buffer>>2] = $12;
   _TIFFErrorExt($10,$11,15232,$vararg_buffer);
   break;
  }
  case 5:  {
   $28 = $0;
   $29 = (($28) + 628|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $2;
   $32 = $3;
   HEAP32[$vararg_buffer10>>2] = $32;
   _TIFFErrorExt($30,$31,15360,$vararg_buffer10);
   break;
  }
  case 3:  {
   $18 = $0;
   $19 = (($18) + 628|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $2;
   $22 = $3;
   HEAP32[$vararg_buffer4>>2] = $22;
   _TIFFErrorExt($20,$21,15296,$vararg_buffer4);
   break;
  }
  case 6:  {
   $33 = $0;
   $34 = (($33) + 628|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $2;
   $37 = $3;
   HEAP32[$vararg_buffer13>>2] = $37;
   _TIFFErrorExt($35,$36,15416,$vararg_buffer13);
   break;
  }
  default: {
   ___assert_fail((14512|0),(12552|0),3371,(15496|0));
   // unreachable;
  }
  }
  STACKTOP = sp;return;
 }
}
function _TIFFReadDirectoryFindFieldInfo($tif,$tagid,$fii) {
 $tif = $tif|0;
 $tagid = $tagid|0;
 $fii = $fii|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ma = 0, $mb = 0, $mc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $tagid;
 $2 = $fii;
 $ma = -1;
 $3 = $0;
 $4 = (($3) + 660|0);
 $5 = HEAP32[$4>>2]|0;
 $mc = $5;
 while(1) {
  $6 = $ma;
  $7 = (($6) + 1)|0;
  $8 = $mc;
  $9 = ($7|0)==($8|0);
  if ($9) {
   label = 3;
   break;
  }
  $11 = $ma;
  $12 = $mc;
  $13 = (($11) + ($12))|0;
  $14 = (($13|0) / 2)&-1;
  $mb = $14;
  $15 = $mb;
  $16 = $0;
  $17 = (($16) + 656|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  $23 = $22&65535;
  $24 = ($21|0)==($23|0);
  if ($24) {
   break;
  }
  $25 = $mb;
  $26 = $0;
  $27 = (($26) + 656|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = $1;
  $33 = $32&65535;
  $34 = ($31>>>0)<($33>>>0);
  if ($34) {
   $35 = $mb;
   $ma = $35;
  } else {
   $36 = $mb;
   $mc = $36;
  }
 }
 if ((label|0) == 3) {
  $10 = $2;
  HEAP32[$10>>2] = -1;
  STACKTOP = sp;return;
 }
 while(1) {
  $37 = $mb;
  $38 = ($37|0)==(0);
  if ($38) {
   label = 12;
   break;
  }
  $39 = $mb;
  $40 = (($39) - 1)|0;
  $41 = $0;
  $42 = (($41) + 656|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($40<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$45>>2]|0;
  $47 = $1;
  $48 = $47&65535;
  $49 = ($46|0)!=($48|0);
  if ($49) {
   label = 14;
   break;
  }
  $50 = $mb;
  $51 = (($50) + -1)|0;
  $mb = $51;
 }
 if ((label|0) == 12) {
 }
 else if ((label|0) == 14) {
 }
 $52 = $mb;
 $53 = $2;
 HEAP32[$53>>2] = $52;
 STACKTOP = sp;return;
}
function _MissingRequired($tif,$tagname) {
 $tif = $tif|0;
 $tagname = $tagname|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $tagname;
 $2 = $0;
 $3 = (($2) + 628|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 HEAP32[$vararg_buffer>>2] = $5;
 _TIFFErrorExt($4,14968,14984,$vararg_buffer);
 STACKTOP = sp;return;
}
function _TIFFReadDirEntryDoubleArray($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $cond = 0, $count = 0, $data = 0, $err = 0, $ma = 0, $ma1 = 0, $ma10 = 0, $ma13 = 0, $ma16 = 0;
 var $ma19 = 0, $ma22 = 0, $ma25 = 0, $ma30 = 0, $ma4 = 0, $ma7 = 0, $maa = 0, $maa26 = 0, $mab = 0, $mab27 = 0, $mb = 0, $mb11 = 0, $mb14 = 0, $mb17 = 0, $mb2 = 0, $mb20 = 0, $mb23 = 0, $mb28 = 0, $mb31 = 0, $mb5 = 0;
 var $mb8 = 0, $n = 0, $n12 = 0, $n15 = 0, $n18 = 0, $n21 = 0, $n24 = 0, $n29 = 0, $n3 = 0, $n32 = 0, $n6 = 0, $n9 = 0, $origdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 76|0;
 $origdata = sp + 20|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 switch ($7|0) {
 case 12: case 11: case 10: case 5: case 17: case 16: case 9: case 4: case 8: case 3: case 6: case 1:  {
  break;
 }
 default: {
  $0 = 2;
  $290 = $0;
  STACKTOP = sp;return ($290|0);
 }
 }
 $8 = $1;
 $9 = $2;
 $10 = (_TIFFReadDirEntryArray($8,$9,$count,8,$origdata)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = HEAP32[$origdata>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $17 = $2;
   $18 = (($17) + 2|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   $cond = ($20|0)==(12);
   if ($cond) {
    $21 = $1;
    $22 = (($21) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $23 & 128;
    $25 = ($24|0)!=(0);
    if ($25) {
     $26 = HEAP32[$origdata>>2]|0;
     $27 = HEAP32[$count>>2]|0;
     _TIFFSwabArrayOfLong8($26,$27);
    }
    $28 = HEAP32[$origdata>>2]|0;
    $29 = $3;
    HEAP32[$29>>2] = $28;
    $0 = 0;
    $290 = $0;
    STACKTOP = sp;return ($290|0);
   }
   $30 = HEAP32[$count>>2]|0;
   $31 = $30<<3;
   $32 = (__TIFFmalloc($31)|0);
   $data = $32;
   $33 = $data;
   $34 = ($33|0)==(0|0);
   if ($34) {
    $35 = HEAP32[$origdata>>2]|0;
    __TIFFfree($35);
    $0 = 7;
    $290 = $0;
    STACKTOP = sp;return ($290|0);
   }
   $36 = $2;
   $37 = (($36) + 2|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38&65535;
   do {
    switch ($39|0) {
    case 10:  {
     $226 = HEAP32[$origdata>>2]|0;
     $ma25 = $226;
     $227 = $data;
     $mb28 = $227;
     $n29 = 0;
     while(1) {
      $228 = $n29;
      $229 = HEAP32[$count>>2]|0;
      $230 = ($228>>>0)<($229>>>0);
      if (!($230)) {
       break;
      }
      $231 = $1;
      $232 = (($231) + 12|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = $233 & 128;
      $235 = ($234|0)!=(0);
      if ($235) {
       $236 = $ma25;
       _TIFFSwabLong($236);
      }
      $237 = $ma25;
      $238 = HEAP32[$237>>2]|0;
      $maa26 = $238;
      $239 = $ma25;
      $240 = (($239) + 4|0);
      $ma25 = $240;
      $241 = $1;
      $242 = (($241) + 12|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = $243 & 128;
      $245 = ($244|0)!=(0);
      if ($245) {
       $246 = $ma25;
       _TIFFSwabLong($246);
      }
      $247 = $ma25;
      $248 = (($247) + 4|0);
      $ma25 = $248;
      $249 = HEAP32[$247>>2]|0;
      $mab27 = $249;
      $250 = $mab27;
      $251 = ($250|0)==(0);
      if ($251) {
       $252 = $mb28;
       $253 = (($252) + 8|0);
       $mb28 = $253;
       HEAPF64[$252>>3] = 0.0;
      } else {
       $254 = $maa26;
       $255 = (+($254|0));
       $256 = $mab27;
       $257 = (+($256>>>0));
       $258 = $255 / $257;
       $259 = $mb28;
       $260 = (($259) + 8|0);
       $mb28 = $260;
       HEAPF64[$259>>3] = $258;
      }
      $261 = $n29;
      $262 = (($261) + 1)|0;
      $n29 = $262;
     }
     break;
    }
    case 1:  {
     $40 = HEAP32[$origdata>>2]|0;
     $ma = $40;
     $41 = $data;
     $mb = $41;
     $n = 0;
     while(1) {
      $42 = $n;
      $43 = HEAP32[$count>>2]|0;
      $44 = ($42>>>0)<($43>>>0);
      if (!($44)) {
       break;
      }
      $45 = $ma;
      $46 = (($45) + 1|0);
      $ma = $46;
      $47 = HEAP8[$45>>0]|0;
      $48 = (+($47&255));
      $49 = $mb;
      $50 = (($49) + 8|0);
      $mb = $50;
      HEAPF64[$49>>3] = $48;
      $51 = $n;
      $52 = (($51) + 1)|0;
      $n = $52;
     }
     break;
    }
    case 6:  {
     $53 = HEAP32[$origdata>>2]|0;
     $ma1 = $53;
     $54 = $data;
     $mb2 = $54;
     $n3 = 0;
     while(1) {
      $55 = $n3;
      $56 = HEAP32[$count>>2]|0;
      $57 = ($55>>>0)<($56>>>0);
      if (!($57)) {
       break;
      }
      $58 = $ma1;
      $59 = (($58) + 1|0);
      $ma1 = $59;
      $60 = HEAP8[$58>>0]|0;
      $61 = (+($60<<24>>24));
      $62 = $mb2;
      $63 = (($62) + 8|0);
      $mb2 = $63;
      HEAPF64[$62>>3] = $61;
      $64 = $n3;
      $65 = (($64) + 1)|0;
      $n3 = $65;
     }
     break;
    }
    case 3:  {
     $66 = HEAP32[$origdata>>2]|0;
     $ma4 = $66;
     $67 = $data;
     $mb5 = $67;
     $n6 = 0;
     while(1) {
      $68 = $n6;
      $69 = HEAP32[$count>>2]|0;
      $70 = ($68>>>0)<($69>>>0);
      if (!($70)) {
       break;
      }
      $71 = $1;
      $72 = (($71) + 12|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = $73 & 128;
      $75 = ($74|0)!=(0);
      if ($75) {
       $76 = $ma4;
       _TIFFSwabShort($76);
      }
      $77 = $ma4;
      $78 = (($77) + 2|0);
      $ma4 = $78;
      $79 = HEAP16[$77>>1]|0;
      $80 = (+($79&65535));
      $81 = $mb5;
      $82 = (($81) + 8|0);
      $mb5 = $82;
      HEAPF64[$81>>3] = $80;
      $83 = $n6;
      $84 = (($83) + 1)|0;
      $n6 = $84;
     }
     break;
    }
    case 8:  {
     $85 = HEAP32[$origdata>>2]|0;
     $ma7 = $85;
     $86 = $data;
     $mb8 = $86;
     $n9 = 0;
     while(1) {
      $87 = $n9;
      $88 = HEAP32[$count>>2]|0;
      $89 = ($87>>>0)<($88>>>0);
      if (!($89)) {
       break;
      }
      $90 = $1;
      $91 = (($90) + 12|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = $92 & 128;
      $94 = ($93|0)!=(0);
      if ($94) {
       $95 = $ma7;
       _TIFFSwabShort($95);
      }
      $96 = $ma7;
      $97 = (($96) + 2|0);
      $ma7 = $97;
      $98 = HEAP16[$96>>1]|0;
      $99 = (+($98<<16>>16));
      $100 = $mb8;
      $101 = (($100) + 8|0);
      $mb8 = $101;
      HEAPF64[$100>>3] = $99;
      $102 = $n9;
      $103 = (($102) + 1)|0;
      $n9 = $103;
     }
     break;
    }
    case 4:  {
     $104 = HEAP32[$origdata>>2]|0;
     $ma10 = $104;
     $105 = $data;
     $mb11 = $105;
     $n12 = 0;
     while(1) {
      $106 = $n12;
      $107 = HEAP32[$count>>2]|0;
      $108 = ($106>>>0)<($107>>>0);
      if (!($108)) {
       break;
      }
      $109 = $1;
      $110 = (($109) + 12|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = $111 & 128;
      $113 = ($112|0)!=(0);
      if ($113) {
       $114 = $ma10;
       _TIFFSwabLong($114);
      }
      $115 = $ma10;
      $116 = (($115) + 4|0);
      $ma10 = $116;
      $117 = HEAP32[$115>>2]|0;
      $118 = (+($117>>>0));
      $119 = $mb11;
      $120 = (($119) + 8|0);
      $mb11 = $120;
      HEAPF64[$119>>3] = $118;
      $121 = $n12;
      $122 = (($121) + 1)|0;
      $n12 = $122;
     }
     break;
    }
    case 9:  {
     $123 = HEAP32[$origdata>>2]|0;
     $ma13 = $123;
     $124 = $data;
     $mb14 = $124;
     $n15 = 0;
     while(1) {
      $125 = $n15;
      $126 = HEAP32[$count>>2]|0;
      $127 = ($125>>>0)<($126>>>0);
      if (!($127)) {
       break;
      }
      $128 = $1;
      $129 = (($128) + 12|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = $130 & 128;
      $132 = ($131|0)!=(0);
      if ($132) {
       $133 = $ma13;
       _TIFFSwabLong($133);
      }
      $134 = $ma13;
      $135 = (($134) + 4|0);
      $ma13 = $135;
      $136 = HEAP32[$134>>2]|0;
      $137 = (+($136|0));
      $138 = $mb14;
      $139 = (($138) + 8|0);
      $mb14 = $139;
      HEAPF64[$138>>3] = $137;
      $140 = $n15;
      $141 = (($140) + 1)|0;
      $n15 = $141;
     }
     break;
    }
    case 16:  {
     $142 = HEAP32[$origdata>>2]|0;
     $ma16 = $142;
     $143 = $data;
     $mb17 = $143;
     $n18 = 0;
     while(1) {
      $144 = $n18;
      $145 = HEAP32[$count>>2]|0;
      $146 = ($144>>>0)<($145>>>0);
      if (!($146)) {
       break;
      }
      $147 = $1;
      $148 = (($147) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = $149 & 128;
      $151 = ($150|0)!=(0);
      if ($151) {
       $152 = $ma16;
       _TIFFSwabLong8($152);
      }
      $153 = $ma16;
      $154 = (($153) + 8|0);
      $ma16 = $154;
      $155 = $153;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      $161 = (+($157>>>0)) + (4294967296.0*(+($160>>>0)));
      $162 = $mb17;
      $163 = (($162) + 8|0);
      $mb17 = $163;
      HEAPF64[$162>>3] = $161;
      $164 = $n18;
      $165 = (($164) + 1)|0;
      $n18 = $165;
     }
     break;
    }
    case 17:  {
     $166 = HEAP32[$origdata>>2]|0;
     $ma19 = $166;
     $167 = $data;
     $mb20 = $167;
     $n21 = 0;
     while(1) {
      $168 = $n21;
      $169 = HEAP32[$count>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if (!($170)) {
       break;
      }
      $171 = $1;
      $172 = (($171) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $173 & 128;
      $175 = ($174|0)!=(0);
      if ($175) {
       $176 = $ma19;
       _TIFFSwabLong8($176);
      }
      $177 = $ma19;
      $178 = (($177) + 8|0);
      $ma19 = $178;
      $179 = $177;
      $180 = $179;
      $181 = HEAP32[$180>>2]|0;
      $182 = (($179) + 4)|0;
      $183 = $182;
      $184 = HEAP32[$183>>2]|0;
      $185 = (+($181>>>0)) + (4294967296.0*(+($184|0)));
      $186 = $mb20;
      $187 = (($186) + 8|0);
      $mb20 = $187;
      HEAPF64[$186>>3] = $185;
      $188 = $n21;
      $189 = (($188) + 1)|0;
      $n21 = $189;
     }
     break;
    }
    case 5:  {
     $190 = HEAP32[$origdata>>2]|0;
     $ma22 = $190;
     $191 = $data;
     $mb23 = $191;
     $n24 = 0;
     while(1) {
      $192 = $n24;
      $193 = HEAP32[$count>>2]|0;
      $194 = ($192>>>0)<($193>>>0);
      if (!($194)) {
       break;
      }
      $195 = $1;
      $196 = (($195) + 12|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = $197 & 128;
      $199 = ($198|0)!=(0);
      if ($199) {
       $200 = $ma22;
       _TIFFSwabLong($200);
      }
      $201 = $ma22;
      $202 = (($201) + 4|0);
      $ma22 = $202;
      $203 = HEAP32[$201>>2]|0;
      $maa = $203;
      $204 = $1;
      $205 = (($204) + 12|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = $206 & 128;
      $208 = ($207|0)!=(0);
      if ($208) {
       $209 = $ma22;
       _TIFFSwabLong($209);
      }
      $210 = $ma22;
      $211 = (($210) + 4|0);
      $ma22 = $211;
      $212 = HEAP32[$210>>2]|0;
      $mab = $212;
      $213 = $mab;
      $214 = ($213|0)==(0);
      if ($214) {
       $215 = $mb23;
       $216 = (($215) + 8|0);
       $mb23 = $216;
       HEAPF64[$215>>3] = 0.0;
      } else {
       $217 = $maa;
       $218 = (+($217>>>0));
       $219 = $mab;
       $220 = (+($219>>>0));
       $221 = $218 / $220;
       $222 = $mb23;
       $223 = (($222) + 8|0);
       $mb23 = $223;
       HEAPF64[$222>>3] = $221;
      }
      $224 = $n24;
      $225 = (($224) + 1)|0;
      $n24 = $225;
     }
     break;
    }
    case 11:  {
     $263 = $1;
     $264 = (($263) + 12|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = $265 & 128;
     $267 = ($266|0)!=(0);
     if ($267) {
      $268 = HEAP32[$origdata>>2]|0;
      $269 = HEAP32[$count>>2]|0;
      _TIFFSwabArrayOfLong($268,$269);
     }
     $270 = HEAP32[$origdata>>2]|0;
     $ma30 = $270;
     $271 = $data;
     $mb31 = $271;
     $n32 = 0;
     while(1) {
      $272 = $n32;
      $273 = HEAP32[$count>>2]|0;
      $274 = ($272>>>0)<($273>>>0);
      if (!($274)) {
       break;
      }
      $275 = $ma30;
      $276 = (($275) + 4|0);
      $ma30 = $276;
      $277 = +HEAPF32[$275>>2];
      $278 = $277;
      $279 = $mb31;
      $280 = (($279) + 8|0);
      $mb31 = $280;
      HEAPF64[$279>>3] = $278;
      $281 = $n32;
      $282 = (($281) + 1)|0;
      $n32 = $282;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $283 = HEAP32[$origdata>>2]|0;
   __TIFFfree($283);
   $284 = $err;
   $285 = ($284|0)!=(0);
   if ($285) {
    $286 = $data;
    __TIFFfree($286);
    $287 = $err;
    $0 = $287;
    $290 = $0;
    STACKTOP = sp;return ($290|0);
   } else {
    $288 = $data;
    $289 = $3;
    HEAP32[$289>>2] = $288;
    $0 = 0;
    $290 = $0;
    STACKTOP = sp;return ($290|0);
   }
  }
 }
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $err;
 $0 = $16;
 $290 = $0;
 STACKTOP = sp;return ($290|0);
}
function _TIFFFetchStripThing($tif,$dir,$nstrips,$lpp) {
 $tif = $tif|0;
 $dir = $dir|0;
 $nstrips = $nstrips|0;
 $lpp = $lpp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $data = 0, $err = 0, $fip = 0, $resizeddata = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 12|0;
 $1 = $tif;
 $2 = $dir;
 $3 = $nstrips;
 $4 = $lpp;
 $5 = $1;
 $6 = $2;
 $7 = (_TIFFReadDirEntryLong8Array($5,$6,$data)|0);
 $err = $7;
 $8 = $err;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $1;
  $11 = $2;
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = (_TIFFFieldWithTag($10,$13)|0);
  $fip = $14;
  $15 = $1;
  $16 = $err;
  $17 = $fip;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $fip;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21;
  } else {
   $22 = 12776;
  }
  _TIFFReadDirEntryOutputErr($15,$16,13736,$22,0);
  $0 = 0;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $23 = $2;
 $24 = (($23) + 8|0);
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $3;
 $32 = ($27|0)!=($31|0);
 $33 = ($30|0)!=(0);
 $34 = $32 | $33;
 if ($34) {
  $35 = $1;
  $36 = $3;
  $37 = (__TIFFCheckMalloc($35,$36,8,13760)|0);
  $resizeddata = $37;
  $38 = $resizeddata;
  $39 = ($38|0)==(0|0);
  if ($39) {
   $40 = HEAP32[$data>>2]|0;
   __TIFFfree($40);
   $0 = 0;
   $95 = $0;
   STACKTOP = sp;return ($95|0);
  }
  $41 = $2;
  $42 = (($41) + 8|0);
  $43 = $42;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($43) + 4)|0;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = $3;
  $50 = ($48>>>0)<(0);
  $51 = ($45>>>0)<($49>>>0);
  $52 = ($48|0)==(0);
  $53 = $52 & $51;
  $54 = $50 | $53;
  if ($54) {
   $55 = $resizeddata;
   $56 = HEAP32[$data>>2]|0;
   $57 = $2;
   $58 = (($57) + 8|0);
   $59 = $58;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 4)|0;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = $61<<3;
   __TIFFmemcpy($55,$56,$65);
   $66 = $resizeddata;
   $67 = $2;
   $68 = (($67) + 8|0);
   $69 = $68;
   $70 = $69;
   $71 = HEAP32[$70>>2]|0;
   $72 = (($69) + 4)|0;
   $73 = $72;
   $74 = HEAP32[$73>>2]|0;
   $75 = (($66) + ($71<<3)|0);
   $76 = $3;
   $77 = $2;
   $78 = (($77) + 8|0);
   $79 = $78;
   $80 = $79;
   $81 = HEAP32[$80>>2]|0;
   $82 = (($79) + 4)|0;
   $83 = $82;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($76) - ($81))|0;
   $86 = $85<<3;
   __TIFFmemset($75,0,$86);
  } else {
   $87 = $resizeddata;
   $88 = HEAP32[$data>>2]|0;
   $89 = $3;
   $90 = $89<<3;
   __TIFFmemcpy($87,$88,$90);
  }
  $91 = HEAP32[$data>>2]|0;
  __TIFFfree($91);
  $92 = $resizeddata;
  HEAP32[$data>>2] = $92;
 }
 $93 = HEAP32[$data>>2]|0;
 $94 = $4;
 HEAP32[$94>>2] = $93;
 $0 = 1;
 $95 = $0;
 STACKTOP = sp;return ($95|0);
}
function _TIFFReadDirEntryShortArray($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0;
 var $data = 0, $err = 0, $m = 0, $ma = 0, $ma11 = 0, $ma14 = 0, $ma2 = 0, $ma5 = 0, $ma8 = 0, $mb = 0, $mb12 = 0, $mb15 = 0, $mb3 = 0, $mb6 = 0, $mb9 = 0, $n = 0, $n1 = 0, $n10 = 0, $n13 = 0, $n16 = 0;
 var $n4 = 0, $n7 = 0, $origdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 8|0;
 $origdata = sp + 12|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 switch ($7|0) {
 case 17: case 16: case 9: case 4: case 8: case 3: case 6: case 1:  {
  break;
 }
 default: {
  $0 = 2;
  $218 = $0;
  STACKTOP = sp;return ($218|0);
 }
 }
 $8 = $1;
 $9 = $2;
 $10 = (_TIFFReadDirEntryArray($8,$9,$count,2,$origdata)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = HEAP32[$origdata>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $17 = $2;
   $18 = (($17) + 2|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   if ((($20|0) == 8)) {
    $31 = HEAP32[$origdata>>2]|0;
    $m = $31;
    $n = 0;
    while(1) {
     $32 = $n;
     $33 = HEAP32[$count>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if (!($34)) {
      label = 19;
      break;
     }
     $35 = $1;
     $36 = (($35) + 12|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $37 & 128;
     $39 = ($38|0)!=(0);
     if ($39) {
      $40 = $m;
      _TIFFSwabShort($40);
     }
     $41 = $m;
     $42 = HEAP16[$41>>1]|0;
     $43 = (_TIFFReadDirEntryCheckRangeShortSshort($42)|0);
     $err = $43;
     $44 = $err;
     $45 = ($44|0)!=(0);
     if ($45) {
      label = 16;
      break;
     }
     $48 = $m;
     $49 = (($48) + 2|0);
     $m = $49;
     $50 = $n;
     $51 = (($50) + 1)|0;
     $n = $51;
    }
    if ((label|0) == 16) {
     $46 = HEAP32[$origdata>>2]|0;
     __TIFFfree($46);
     $47 = $err;
     $0 = $47;
     $218 = $0;
     STACKTOP = sp;return ($218|0);
    }
    else if ((label|0) == 19) {
     $52 = HEAP32[$origdata>>2]|0;
     $53 = $3;
     HEAP32[$53>>2] = $52;
     $0 = 0;
     $218 = $0;
     STACKTOP = sp;return ($218|0);
    }
   } else if ((($20|0) == 3)) {
    $21 = HEAP32[$origdata>>2]|0;
    $22 = $3;
    HEAP32[$22>>2] = $21;
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 128;
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = $3;
     $29 = HEAP32[$28>>2]|0;
     $30 = HEAP32[$count>>2]|0;
     _TIFFSwabArrayOfShort($29,$30);
    }
    $0 = 0;
    $218 = $0;
    STACKTOP = sp;return ($218|0);
   } else {
    $54 = HEAP32[$count>>2]|0;
    $55 = $54<<1;
    $56 = (__TIFFmalloc($55)|0);
    $data = $56;
    $57 = $data;
    $58 = ($57|0)==(0|0);
    if ($58) {
     $59 = HEAP32[$origdata>>2]|0;
     __TIFFfree($59);
     $0 = 7;
     $218 = $0;
     STACKTOP = sp;return ($218|0);
    }
    $60 = $2;
    $61 = (($60) + 2|0);
    $62 = HEAP16[$61>>1]|0;
    $63 = $62&65535;
    switch ($63|0) {
    case 1:  {
     $64 = HEAP32[$origdata>>2]|0;
     $ma = $64;
     $65 = $data;
     $mb = $65;
     $n1 = 0;
     while(1) {
      $66 = $n1;
      $67 = HEAP32[$count>>2]|0;
      $68 = ($66>>>0)<($67>>>0);
      if (!($68)) {
       break;
      }
      $69 = $ma;
      $70 = (($69) + 1|0);
      $ma = $70;
      $71 = HEAP8[$69>>0]|0;
      $72 = $71&255;
      $73 = $mb;
      $74 = (($73) + 2|0);
      $mb = $74;
      HEAP16[$73>>1] = $72;
      $75 = $n1;
      $76 = (($75) + 1)|0;
      $n1 = $76;
     }
     break;
    }
    case 6:  {
     $77 = HEAP32[$origdata>>2]|0;
     $ma2 = $77;
     $78 = $data;
     $mb3 = $78;
     $n4 = 0;
     while(1) {
      $79 = $n4;
      $80 = HEAP32[$count>>2]|0;
      $81 = ($79>>>0)<($80>>>0);
      if (!($81)) {
       break;
      }
      $82 = $ma2;
      $83 = HEAP8[$82>>0]|0;
      $84 = (_TIFFReadDirEntryCheckRangeShortSbyte($83)|0);
      $err = $84;
      $85 = $err;
      $86 = ($85|0)!=(0);
      if ($86) {
       label = 31;
       break;
      }
      $87 = $ma2;
      $88 = (($87) + 1|0);
      $ma2 = $88;
      $89 = HEAP8[$87>>0]|0;
      $90 = $89 << 24 >> 24;
      $91 = $mb3;
      $92 = (($91) + 2|0);
      $mb3 = $92;
      HEAP16[$91>>1] = $90;
      $93 = $n4;
      $94 = (($93) + 1)|0;
      $n4 = $94;
     }
     if ((label|0) == 31) {
     }
     break;
    }
    case 4:  {
     $95 = HEAP32[$origdata>>2]|0;
     $ma5 = $95;
     $96 = $data;
     $mb6 = $96;
     $n7 = 0;
     while(1) {
      $97 = $n7;
      $98 = HEAP32[$count>>2]|0;
      $99 = ($97>>>0)<($98>>>0);
      if (!($99)) {
       break;
      }
      $100 = $1;
      $101 = (($100) + 12|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = $102 & 128;
      $104 = ($103|0)!=(0);
      if ($104) {
       $105 = $ma5;
       _TIFFSwabLong($105);
      }
      $106 = $ma5;
      $107 = HEAP32[$106>>2]|0;
      $108 = (_TIFFReadDirEntryCheckRangeShortLong($107)|0);
      $err = $108;
      $109 = $err;
      $110 = ($109|0)!=(0);
      if ($110) {
       label = 40;
       break;
      }
      $111 = $ma5;
      $112 = (($111) + 4|0);
      $ma5 = $112;
      $113 = HEAP32[$111>>2]|0;
      $114 = $113&65535;
      $115 = $mb6;
      $116 = (($115) + 2|0);
      $mb6 = $116;
      HEAP16[$115>>1] = $114;
      $117 = $n7;
      $118 = (($117) + 1)|0;
      $n7 = $118;
     }
     if ((label|0) == 40) {
     }
     break;
    }
    case 17:  {
     $177 = HEAP32[$origdata>>2]|0;
     $ma14 = $177;
     $178 = $data;
     $mb15 = $178;
     $n16 = 0;
     while(1) {
      $179 = $n16;
      $180 = HEAP32[$count>>2]|0;
      $181 = ($179>>>0)<($180>>>0);
      if (!($181)) {
       break;
      }
      $182 = $1;
      $183 = (($182) + 12|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = $184 & 128;
      $186 = ($185|0)!=(0);
      if ($186) {
       $187 = $ma14;
       _TIFFSwabLong8($187);
      }
      $188 = $ma14;
      $189 = $188;
      $190 = $189;
      $191 = HEAP32[$190>>2]|0;
      $192 = (($189) + 4)|0;
      $193 = $192;
      $194 = HEAP32[$193>>2]|0;
      $195 = (_TIFFReadDirEntryCheckRangeShortSlong8($191,$194)|0);
      $err = $195;
      $196 = $err;
      $197 = ($196|0)!=(0);
      if ($197) {
       label = 67;
       break;
      }
      $198 = $ma14;
      $199 = (($198) + 8|0);
      $ma14 = $199;
      $200 = $198;
      $201 = $200;
      $202 = HEAP32[$201>>2]|0;
      $203 = (($200) + 4)|0;
      $204 = $203;
      $205 = HEAP32[$204>>2]|0;
      $206 = $202&65535;
      $207 = $mb15;
      $208 = (($207) + 2|0);
      $mb15 = $208;
      HEAP16[$207>>1] = $206;
      $209 = $n16;
      $210 = (($209) + 1)|0;
      $n16 = $210;
     }
     if ((label|0) == 67) {
     }
     break;
    }
    case 9:  {
     $119 = HEAP32[$origdata>>2]|0;
     $ma8 = $119;
     $120 = $data;
     $mb9 = $120;
     $n10 = 0;
     while(1) {
      $121 = $n10;
      $122 = HEAP32[$count>>2]|0;
      $123 = ($121>>>0)<($122>>>0);
      if (!($123)) {
       break;
      }
      $124 = $1;
      $125 = (($124) + 12|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = $126 & 128;
      $128 = ($127|0)!=(0);
      if ($128) {
       $129 = $ma8;
       _TIFFSwabLong($129);
      }
      $130 = $ma8;
      $131 = HEAP32[$130>>2]|0;
      $132 = (_TIFFReadDirEntryCheckRangeShortSlong($131)|0);
      $err = $132;
      $133 = $err;
      $134 = ($133|0)!=(0);
      if ($134) {
       label = 49;
       break;
      }
      $135 = $ma8;
      $136 = (($135) + 4|0);
      $ma8 = $136;
      $137 = HEAP32[$135>>2]|0;
      $138 = $137&65535;
      $139 = $mb9;
      $140 = (($139) + 2|0);
      $mb9 = $140;
      HEAP16[$139>>1] = $138;
      $141 = $n10;
      $142 = (($141) + 1)|0;
      $n10 = $142;
     }
     if ((label|0) == 49) {
     }
     break;
    }
    case 16:  {
     $143 = HEAP32[$origdata>>2]|0;
     $ma11 = $143;
     $144 = $data;
     $mb12 = $144;
     $n13 = 0;
     while(1) {
      $145 = $n13;
      $146 = HEAP32[$count>>2]|0;
      $147 = ($145>>>0)<($146>>>0);
      if (!($147)) {
       break;
      }
      $148 = $1;
      $149 = (($148) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = $150 & 128;
      $152 = ($151|0)!=(0);
      if ($152) {
       $153 = $ma11;
       _TIFFSwabLong8($153);
      }
      $154 = $ma11;
      $155 = $154;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      $161 = (_TIFFReadDirEntryCheckRangeShortLong8($157,$160)|0);
      $err = $161;
      $162 = $err;
      $163 = ($162|0)!=(0);
      if ($163) {
       label = 58;
       break;
      }
      $164 = $ma11;
      $165 = (($164) + 8|0);
      $ma11 = $165;
      $166 = $164;
      $167 = $166;
      $168 = HEAP32[$167>>2]|0;
      $169 = (($166) + 4)|0;
      $170 = $169;
      $171 = HEAP32[$170>>2]|0;
      $172 = $168&65535;
      $173 = $mb12;
      $174 = (($173) + 2|0);
      $mb12 = $174;
      HEAP16[$173>>1] = $172;
      $175 = $n13;
      $176 = (($175) + 1)|0;
      $n13 = $176;
     }
     if ((label|0) == 58) {
     }
     break;
    }
    default: {
    }
    }
    $211 = HEAP32[$origdata>>2]|0;
    __TIFFfree($211);
    $212 = $err;
    $213 = ($212|0)!=(0);
    if ($213) {
     $214 = $data;
     __TIFFfree($214);
     $215 = $err;
     $0 = $215;
     $218 = $0;
     STACKTOP = sp;return ($218|0);
    } else {
     $216 = $data;
     $217 = $3;
     HEAP32[$217>>2] = $216;
     $0 = 0;
     $218 = $0;
     STACKTOP = sp;return ($218|0);
    }
   }
  }
 }
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $err;
 $0 = $16;
 $218 = $0;
 STACKTOP = sp;return ($218|0);
}
function _EstimateStripByteCounts($tif,$dir,$dircount) {
 $tif = $tif|0;
 $dir = $dir|0;
 $dircount = $dircount|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytespertile = 0, $datasize = 0, $dp = 0, $filesize = 0, $n = 0;
 var $rowbytes = 0, $rowsperstrip = 0, $space = 0, $strip = 0, $td = 0, $typewidth = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 40|0;
 $space = sp + 32|0;
 $filesize = sp;
 $datasize = sp + 8|0;
 $bytespertile = sp + 16|0;
 $rowbytes = sp + 24|0;
 $1 = $tif;
 $2 = $dir;
 $3 = $dircount;
 $4 = $1;
 $5 = (($4) + 40|0);
 $td = $5;
 $6 = $1;
 (__TIFFFillStriles($6)|0);
 $7 = $td;
 $8 = (($7) + 136|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $td;
  $12 = (($11) + 136|0);
  $13 = HEAP32[$12>>2]|0;
  __TIFFfree($13);
 }
 $14 = $1;
 $15 = $td;
 $16 = (($15) + 128|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__TIFFCheckMalloc($14,$17,8,15056)|0);
 $19 = $td;
 $20 = (($19) + 136|0);
 HEAP32[$20>>2] = $18;
 $21 = $td;
 $22 = (($21) + 136|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $0 = -1;
  $374 = $0;
  STACKTOP = sp;return ($374|0);
 }
 $25 = $td;
 $26 = (($25) + 48|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = ($28|0)!=(1);
 if ($29) {
  $30 = $1;
  $31 = (($30) + 648|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  $34 = (($33) + 628|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_ii[$32 & 255]($35)|0);
  $37 = tempRet0;
  $38 = $filesize;
  $39 = $38;
  HEAP32[$39>>2] = $36;
  $40 = (($38) + 4)|0;
  $41 = $40;
  HEAP32[$41>>2] = $37;
  $42 = $1;
  $43 = (($42) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44 & 524288;
  $46 = ($45|0)!=(0);
  if ($46) {
   $56 = $3;
   $57 = $56&65535;
   $58 = ($57*20)|0;
   $59 = (24 + ($58))|0;
   $60 = (($59) + 8)|0;
   $61 = $space;
   $62 = $61;
   HEAP32[$62>>2] = $60;
   $63 = (($61) + 4)|0;
   $64 = $63;
   HEAP32[$64>>2] = 0;
  } else {
   $47 = $3;
   $48 = $47&65535;
   $49 = ($48*12)|0;
   $50 = (10 + ($49))|0;
   $51 = (($50) + 4)|0;
   $52 = $space;
   $53 = $52;
   HEAP32[$53>>2] = $51;
   $54 = (($52) + 4)|0;
   $55 = $54;
   HEAP32[$55>>2] = 0;
  }
  $65 = $2;
  $dp = $65;
  $66 = $3;
  $n = $66;
  while(1) {
   $67 = $n;
   $68 = $67&65535;
   $69 = ($68|0)>(0);
   if (!($69)) {
    break;
   }
   $70 = $dp;
   $71 = (($70) + 2|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72&65535;
   $74 = (_TIFFDataWidth($73)|0);
   $typewidth = $74;
   $75 = $dp;
   $76 = (($75) + 2|0);
   $77 = HEAP16[$76>>1]|0;
   $78 = $77&65535;
   $79 = (_TIFFDataWidth($78)|0);
   $typewidth = $79;
   $80 = $typewidth;
   $81 = ($80|0)==(0);
   if ($81) {
    label = 12;
    break;
   }
   $89 = $typewidth;
   $90 = $dp;
   $91 = (($90) + 8|0);
   $92 = $91;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = (($92) + 4)|0;
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   $98 = (___muldi3(($89|0),0,($94|0),($97|0))|0);
   $99 = tempRet0;
   $100 = $datasize;
   $101 = $100;
   HEAP32[$101>>2] = $98;
   $102 = (($100) + 4)|0;
   $103 = $102;
   HEAP32[$103>>2] = $99;
   $104 = $1;
   $105 = (($104) + 12|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $106 & 524288;
   $108 = ($107|0)!=(0);
   if ($108) {
    $124 = $datasize;
    $125 = $124;
    $126 = HEAP32[$125>>2]|0;
    $127 = (($124) + 4)|0;
    $128 = $127;
    $129 = HEAP32[$128>>2]|0;
    $130 = ($129>>>0)<(0);
    $131 = ($126>>>0)<=(8);
    $132 = ($129|0)==(0);
    $133 = $132 & $131;
    $134 = $130 | $133;
    if ($134) {
     $135 = $datasize;
     $136 = $135;
     HEAP32[$136>>2] = 0;
     $137 = (($135) + 4)|0;
     $138 = $137;
     HEAP32[$138>>2] = 0;
    }
   } else {
    $109 = $datasize;
    $110 = $109;
    $111 = HEAP32[$110>>2]|0;
    $112 = (($109) + 4)|0;
    $113 = $112;
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114>>>0)<(0);
    $116 = ($111>>>0)<=(4);
    $117 = ($114|0)==(0);
    $118 = $117 & $116;
    $119 = $115 | $118;
    if ($119) {
     $120 = $datasize;
     $121 = $120;
     HEAP32[$121>>2] = 0;
     $122 = (($120) + 4)|0;
     $123 = $122;
     HEAP32[$123>>2] = 0;
    }
   }
   $139 = $datasize;
   $140 = $139;
   $141 = HEAP32[$140>>2]|0;
   $142 = (($139) + 4)|0;
   $143 = $142;
   $144 = HEAP32[$143>>2]|0;
   $145 = $space;
   $146 = $145;
   $147 = HEAP32[$146>>2]|0;
   $148 = (($145) + 4)|0;
   $149 = $148;
   $150 = HEAP32[$149>>2]|0;
   $151 = (_i64Add(($147|0),($150|0),($141|0),($144|0))|0);
   $152 = tempRet0;
   $153 = $space;
   $154 = $153;
   HEAP32[$154>>2] = $151;
   $155 = (($153) + 4)|0;
   $156 = $155;
   HEAP32[$156>>2] = $152;
   $157 = $n;
   $158 = (($157) + -1)<<16>>16;
   $n = $158;
   $159 = $dp;
   $160 = (($159) + 24|0);
   $dp = $160;
  }
  if ((label|0) == 12) {
   $82 = $1;
   $83 = (($82) + 628|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $dp;
   $86 = (($85) + 2|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = $87&65535;
   HEAP32[$vararg_buffer>>2] = $88;
   _TIFFErrorExt($84,15032,15088,$vararg_buffer);
   $0 = -1;
   $374 = $0;
   STACKTOP = sp;return ($374|0);
  }
  $161 = $filesize;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = (($161) + 4)|0;
  $165 = $164;
  $166 = HEAP32[$165>>2]|0;
  $167 = $space;
  $168 = $167;
  $169 = HEAP32[$168>>2]|0;
  $170 = (($167) + 4)|0;
  $171 = $170;
  $172 = HEAP32[$171>>2]|0;
  $173 = (_i64Subtract(($163|0),($166|0),($169|0),($172|0))|0);
  $174 = tempRet0;
  $175 = $space;
  $176 = $175;
  HEAP32[$176>>2] = $173;
  $177 = (($175) + 4)|0;
  $178 = $177;
  HEAP32[$178>>2] = $174;
  $179 = $td;
  $180 = (($179) + 86|0);
  $181 = HEAP16[$180>>1]|0;
  $182 = $181&65535;
  $183 = ($182|0)==(2);
  if ($183) {
   $184 = $td;
   $185 = (($184) + 58|0);
   $186 = HEAP16[$185>>1]|0;
   $187 = $186&65535;
   $188 = $space;
   $189 = $188;
   $190 = HEAP32[$189>>2]|0;
   $191 = (($188) + 4)|0;
   $192 = $191;
   $193 = HEAP32[$192>>2]|0;
   $194 = (___udivdi3(($190|0),($193|0),($187|0),0)|0);
   $195 = tempRet0;
   $196 = $space;
   $197 = $196;
   HEAP32[$197>>2] = $194;
   $198 = (($196) + 4)|0;
   $199 = $198;
   HEAP32[$199>>2] = $195;
  }
  $strip = 0;
  while(1) {
   $200 = $strip;
   $201 = $td;
   $202 = (($201) + 128|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ($200>>>0)<($203>>>0);
   if (!($204)) {
    break;
   }
   $205 = $space;
   $206 = $205;
   $207 = HEAP32[$206>>2]|0;
   $208 = (($205) + 4)|0;
   $209 = $208;
   $210 = HEAP32[$209>>2]|0;
   $211 = $strip;
   $212 = $td;
   $213 = (($212) + 136|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = (($214) + ($211<<3)|0);
   $216 = $215;
   $217 = $216;
   HEAP32[$217>>2] = $207;
   $218 = (($216) + 4)|0;
   $219 = $218;
   HEAP32[$219>>2] = $210;
   $220 = $strip;
   $221 = (($220) + 1)|0;
   $strip = $221;
  }
  $222 = $strip;
  $223 = (($222) + -1)|0;
  $strip = $223;
  $224 = $strip;
  $225 = $td;
  $226 = (($225) + 132|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + ($224<<3)|0);
  $229 = $228;
  $230 = $229;
  $231 = HEAP32[$230>>2]|0;
  $232 = (($229) + 4)|0;
  $233 = $232;
  $234 = HEAP32[$233>>2]|0;
  $235 = $strip;
  $236 = $td;
  $237 = (($236) + 136|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($238) + ($235<<3)|0);
  $240 = $239;
  $241 = $240;
  $242 = HEAP32[$241>>2]|0;
  $243 = (($240) + 4)|0;
  $244 = $243;
  $245 = HEAP32[$244>>2]|0;
  $246 = (_i64Add(($231|0),($234|0),($242|0),($245|0))|0);
  $247 = tempRet0;
  $248 = $filesize;
  $249 = $248;
  $250 = HEAP32[$249>>2]|0;
  $251 = (($248) + 4)|0;
  $252 = $251;
  $253 = HEAP32[$252>>2]|0;
  $254 = ($247>>>0)>($253>>>0);
  $255 = ($246>>>0)>($250>>>0);
  $256 = ($247|0)==($253|0);
  $257 = $256 & $255;
  $258 = $254 | $257;
  if ($258) {
   $259 = $filesize;
   $260 = $259;
   $261 = HEAP32[$260>>2]|0;
   $262 = (($259) + 4)|0;
   $263 = $262;
   $264 = HEAP32[$263>>2]|0;
   $265 = $strip;
   $266 = $td;
   $267 = (($266) + 132|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = (($268) + ($265<<3)|0);
   $270 = $269;
   $271 = $270;
   $272 = HEAP32[$271>>2]|0;
   $273 = (($270) + 4)|0;
   $274 = $273;
   $275 = HEAP32[$274>>2]|0;
   $276 = (_i64Subtract(($261|0),($264|0),($272|0),($275|0))|0);
   $277 = tempRet0;
   $278 = $strip;
   $279 = $td;
   $280 = (($279) + 136|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = (($281) + ($278<<3)|0);
   $283 = $282;
   $284 = $283;
   HEAP32[$284>>2] = $276;
   $285 = (($283) + 4)|0;
   $286 = $285;
   HEAP32[$286>>2] = $277;
  }
 } else {
  $287 = $1;
  $288 = (($287) + 12|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = $289 & 1024;
  $291 = ($290|0)!=(0);
  if ($291) {
   $292 = $1;
   $293 = (_TIFFTileSize64($292)|0);
   $294 = tempRet0;
   $295 = $bytespertile;
   $296 = $295;
   HEAP32[$296>>2] = $293;
   $297 = (($295) + 4)|0;
   $298 = $297;
   HEAP32[$298>>2] = $294;
   $strip = 0;
   while(1) {
    $299 = $strip;
    $300 = $td;
    $301 = (($300) + 128|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = ($299>>>0)<($302>>>0);
    if (!($303)) {
     break;
    }
    $304 = $bytespertile;
    $305 = $304;
    $306 = HEAP32[$305>>2]|0;
    $307 = (($304) + 4)|0;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = $strip;
    $311 = $td;
    $312 = (($311) + 136|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = (($313) + ($310<<3)|0);
    $315 = $314;
    $316 = $315;
    HEAP32[$316>>2] = $306;
    $317 = (($315) + 4)|0;
    $318 = $317;
    HEAP32[$318>>2] = $309;
    $319 = $strip;
    $320 = (($319) + 1)|0;
    $strip = $320;
   }
  } else {
   $321 = $1;
   $322 = (_TIFFScanlineSize64($321)|0);
   $323 = tempRet0;
   $324 = $rowbytes;
   $325 = $324;
   HEAP32[$325>>2] = $322;
   $326 = (($324) + 4)|0;
   $327 = $326;
   HEAP32[$327>>2] = $323;
   $328 = $td;
   $329 = (($328) + 20|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $td;
   $332 = (($331) + 124|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = (($330>>>0) / ($333>>>0))&-1;
   $rowsperstrip = $334;
   $strip = 0;
   while(1) {
    $335 = $strip;
    $336 = $td;
    $337 = (($336) + 128|0);
    $338 = HEAP32[$337>>2]|0;
    $339 = ($335>>>0)<($338>>>0);
    if (!($339)) {
     break;
    }
    $340 = $rowbytes;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    $346 = $rowsperstrip;
    $347 = (___muldi3(($342|0),($345|0),($346|0),0)|0);
    $348 = tempRet0;
    $349 = $strip;
    $350 = $td;
    $351 = (($350) + 136|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = (($352) + ($349<<3)|0);
    $354 = $353;
    $355 = $354;
    HEAP32[$355>>2] = $347;
    $356 = (($354) + 4)|0;
    $357 = $356;
    HEAP32[$357>>2] = $348;
    $358 = $strip;
    $359 = (($358) + 1)|0;
    $strip = $359;
   }
  }
 }
 $360 = $1;
 $361 = (($360) + 40|0);
 $362 = HEAP32[$361>>2]|0;
 $363 = $362 | 16777216;
 HEAP32[$361>>2] = $363;
 $364 = $1;
 $365 = (($364) + 40|0);
 $366 = HEAP32[$365>>2]|0;
 $367 = $366 & 131072;
 $368 = ($367|0)!=(0);
 if (!($368)) {
  $369 = $td;
  $370 = (($369) + 20|0);
  $371 = HEAP32[$370>>2]|0;
  $372 = $td;
  $373 = (($372) + 60|0);
  HEAP32[$373>>2] = $371;
 }
 $0 = 1;
 $374 = $0;
 STACKTOP = sp;return ($374|0);
}
function _ChopUpSingleUncompressedStrip($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytecount = 0, $newcounts = 0, $newoffsets = 0, $nstrips32 = 0, $nstrips64 = 0, $offset = 0, $rowblock = 0, $rowblockbytes = 0, $rowblocksperstrip = 0, $rowsperstrip = 0, $strip = 0, $stripbytes = 0, $td = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 40|0;
 $bytecount = sp + 8|0;
 $offset = sp;
 $rowblockbytes = sp + 32|0;
 $stripbytes = sp + 16|0;
 $nstrips64 = sp + 24|0;
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 40|0);
 $td = $2;
 $3 = $td;
 $4 = (($3) + 136|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $bytecount;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = $td;
 $17 = (($16) + 132|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = $offset;
 $26 = $25;
 HEAP32[$26>>2] = $21;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $24;
 $29 = $td;
 $30 = (($29) + 86|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ($32|0)==(1);
 if (!($33)) {
  ___assert_fail((13544|0),(12552|0),5485,(13592|0));
  // unreachable;
 }
 $34 = $td;
 $35 = (($34) + 50|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = ($37|0)==(6);
 if ($38) {
  $39 = $0;
  $40 = (($39) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 & 16384;
  $43 = ($42|0)!=(0);
  if ($43) {
   label = 6;
  } else {
   $44 = $td;
   $45 = (($44) + 152|0);
   $46 = (($45) + 2|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47&65535;
   $rowblock = $48;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $rowblock = 1;
 }
 $49 = $0;
 $50 = $rowblock;
 $51 = (_TIFFVTileSize64($49,$50)|0);
 $52 = tempRet0;
 $53 = $rowblockbytes;
 $54 = $53;
 HEAP32[$54>>2] = $51;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = $52;
 $57 = $rowblockbytes;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($57) + 4)|0;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62>>>0)>(0);
 $64 = ($59>>>0)>(8192);
 $65 = ($62|0)==(0);
 $66 = $65 & $64;
 $67 = $63 | $66;
 do {
  if ($67) {
   $68 = $rowblockbytes;
   $69 = $68;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68) + 4)|0;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = $stripbytes;
   $75 = $74;
   HEAP32[$75>>2] = $70;
   $76 = (($74) + 4)|0;
   $77 = $76;
   HEAP32[$77>>2] = $73;
   $78 = $rowblock;
   $rowsperstrip = $78;
  } else {
   $79 = $rowblockbytes;
   $80 = $79;
   $81 = HEAP32[$80>>2]|0;
   $82 = (($79) + 4)|0;
   $83 = $82;
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84>>>0)>(0);
   $86 = ($81>>>0)>(0);
   $87 = ($84|0)==(0);
   $88 = $87 & $86;
   $89 = $85 | $88;
   if ($89) {
    $90 = $rowblockbytes;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($90) + 4)|0;
    $94 = $93;
    $95 = HEAP32[$94>>2]|0;
    $96 = (___udivdi3(8192,0,($92|0),($95|0))|0);
    $97 = tempRet0;
    $rowblocksperstrip = $96;
    $98 = $rowblocksperstrip;
    $99 = $rowblock;
    $100 = Math_imul($98, $99)|0;
    $rowsperstrip = $100;
    $101 = $rowblocksperstrip;
    $102 = $rowblockbytes;
    $103 = $102;
    $104 = HEAP32[$103>>2]|0;
    $105 = (($102) + 4)|0;
    $106 = $105;
    $107 = HEAP32[$106>>2]|0;
    $108 = (___muldi3(($101|0),0,($104|0),($107|0))|0);
    $109 = tempRet0;
    $110 = $stripbytes;
    $111 = $110;
    HEAP32[$111>>2] = $108;
    $112 = (($110) + 4)|0;
    $113 = $112;
    HEAP32[$113>>2] = $109;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $114 = $rowsperstrip;
 $115 = $td;
 $116 = (($115) + 60|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($114>>>0)>=($117>>>0);
 if ($118) {
  STACKTOP = sp;return;
 }
 $119 = $bytecount;
 $120 = $119;
 $121 = HEAP32[$120>>2]|0;
 $122 = (($119) + 4)|0;
 $123 = $122;
 $124 = HEAP32[$123>>2]|0;
 $125 = $stripbytes;
 $126 = $125;
 $127 = HEAP32[$126>>2]|0;
 $128 = (($125) + 4)|0;
 $129 = $128;
 $130 = HEAP32[$129>>2]|0;
 $131 = (_i64Subtract(($127|0),($130|0),1,0)|0);
 $132 = tempRet0;
 $133 = (_i64Add(($121|0),($124|0),($131|0),($132|0))|0);
 $134 = tempRet0;
 $135 = $stripbytes;
 $136 = $135;
 $137 = HEAP32[$136>>2]|0;
 $138 = (($135) + 4)|0;
 $139 = $138;
 $140 = HEAP32[$139>>2]|0;
 $141 = (___udivdi3(($133|0),($134|0),($137|0),($140|0))|0);
 $142 = tempRet0;
 $143 = $nstrips64;
 $144 = $143;
 HEAP32[$144>>2] = $141;
 $145 = (($143) + 4)|0;
 $146 = $145;
 HEAP32[$146>>2] = $142;
 $147 = $nstrips64;
 $148 = $147;
 $149 = HEAP32[$148>>2]|0;
 $150 = (($147) + 4)|0;
 $151 = $150;
 $152 = HEAP32[$151>>2]|0;
 $153 = ($149|0)==(0);
 $154 = ($152|0)==(0);
 $155 = $153 & $154;
 if (!($155)) {
  $156 = $nstrips64;
  $157 = $156;
  $158 = HEAP32[$157>>2]|0;
  $159 = (($156) + 4)|0;
  $160 = $159;
  $161 = HEAP32[$160>>2]|0;
  $162 = ($161>>>0)>(0);
  $163 = ($158>>>0)>(4294967295);
  $164 = ($161|0)==(0);
  $165 = $164 & $163;
  $166 = $162 | $165;
  if (!($166)) {
   $167 = $nstrips64;
   $168 = $167;
   $169 = HEAP32[$168>>2]|0;
   $170 = (($167) + 4)|0;
   $171 = $170;
   $172 = HEAP32[$171>>2]|0;
   $nstrips32 = $169;
   $173 = $0;
   $174 = $nstrips32;
   $175 = (__TIFFCheckMalloc($173,$174,8,13624)|0);
   $newcounts = $175;
   $176 = $0;
   $177 = $nstrips32;
   $178 = (__TIFFCheckMalloc($176,$177,8,13664)|0);
   $newoffsets = $178;
   $179 = $newcounts;
   $180 = ($179|0)==(0|0);
   if (!($180)) {
    $181 = $newoffsets;
    $182 = ($181|0)==(0|0);
    if (!($182)) {
     $strip = 0;
     while(1) {
      $189 = $strip;
      $190 = $nstrips32;
      $191 = ($189>>>0)<($190>>>0);
      if (!($191)) {
       break;
      }
      $192 = $stripbytes;
      $193 = $192;
      $194 = HEAP32[$193>>2]|0;
      $195 = (($192) + 4)|0;
      $196 = $195;
      $197 = HEAP32[$196>>2]|0;
      $198 = $bytecount;
      $199 = $198;
      $200 = HEAP32[$199>>2]|0;
      $201 = (($198) + 4)|0;
      $202 = $201;
      $203 = HEAP32[$202>>2]|0;
      $204 = ($197>>>0)>($203>>>0);
      $205 = ($194>>>0)>($200>>>0);
      $206 = ($197|0)==($203|0);
      $207 = $206 & $205;
      $208 = $204 | $207;
      if ($208) {
       $209 = $bytecount;
       $210 = $209;
       $211 = HEAP32[$210>>2]|0;
       $212 = (($209) + 4)|0;
       $213 = $212;
       $214 = HEAP32[$213>>2]|0;
       $215 = $stripbytes;
       $216 = $215;
       HEAP32[$216>>2] = $211;
       $217 = (($215) + 4)|0;
       $218 = $217;
       HEAP32[$218>>2] = $214;
      }
      $219 = $stripbytes;
      $220 = $219;
      $221 = HEAP32[$220>>2]|0;
      $222 = (($219) + 4)|0;
      $223 = $222;
      $224 = HEAP32[$223>>2]|0;
      $225 = $strip;
      $226 = $newcounts;
      $227 = (($226) + ($225<<3)|0);
      $228 = $227;
      $229 = $228;
      HEAP32[$229>>2] = $221;
      $230 = (($228) + 4)|0;
      $231 = $230;
      HEAP32[$231>>2] = $224;
      $232 = $offset;
      $233 = $232;
      $234 = HEAP32[$233>>2]|0;
      $235 = (($232) + 4)|0;
      $236 = $235;
      $237 = HEAP32[$236>>2]|0;
      $238 = $strip;
      $239 = $newoffsets;
      $240 = (($239) + ($238<<3)|0);
      $241 = $240;
      $242 = $241;
      HEAP32[$242>>2] = $234;
      $243 = (($241) + 4)|0;
      $244 = $243;
      HEAP32[$244>>2] = $237;
      $245 = $stripbytes;
      $246 = $245;
      $247 = HEAP32[$246>>2]|0;
      $248 = (($245) + 4)|0;
      $249 = $248;
      $250 = HEAP32[$249>>2]|0;
      $251 = $offset;
      $252 = $251;
      $253 = HEAP32[$252>>2]|0;
      $254 = (($251) + 4)|0;
      $255 = $254;
      $256 = HEAP32[$255>>2]|0;
      $257 = (_i64Add(($253|0),($256|0),($247|0),($250|0))|0);
      $258 = tempRet0;
      $259 = $offset;
      $260 = $259;
      HEAP32[$260>>2] = $257;
      $261 = (($259) + 4)|0;
      $262 = $261;
      HEAP32[$262>>2] = $258;
      $263 = $stripbytes;
      $264 = $263;
      $265 = HEAP32[$264>>2]|0;
      $266 = (($263) + 4)|0;
      $267 = $266;
      $268 = HEAP32[$267>>2]|0;
      $269 = $bytecount;
      $270 = $269;
      $271 = HEAP32[$270>>2]|0;
      $272 = (($269) + 4)|0;
      $273 = $272;
      $274 = HEAP32[$273>>2]|0;
      $275 = (_i64Subtract(($271|0),($274|0),($265|0),($268|0))|0);
      $276 = tempRet0;
      $277 = $bytecount;
      $278 = $277;
      HEAP32[$278>>2] = $275;
      $279 = (($277) + 4)|0;
      $280 = $279;
      HEAP32[$280>>2] = $276;
      $281 = $strip;
      $282 = (($281) + 1)|0;
      $strip = $282;
     }
     $283 = $nstrips32;
     $284 = $td;
     $285 = (($284) + 128|0);
     HEAP32[$285>>2] = $283;
     $286 = $td;
     $287 = (($286) + 124|0);
     HEAP32[$287>>2] = $283;
     $288 = $0;
     $289 = $rowsperstrip;
     HEAP32[$vararg_buffer>>2] = $289;
     (_TIFFSetField($288,278,$vararg_buffer)|0);
     $290 = $td;
     $291 = (($290) + 136|0);
     $292 = HEAP32[$291>>2]|0;
     __TIFFfree($292);
     $293 = $td;
     $294 = (($293) + 132|0);
     $295 = HEAP32[$294>>2]|0;
     __TIFFfree($295);
     $296 = $newcounts;
     $297 = $td;
     $298 = (($297) + 136|0);
     HEAP32[$298>>2] = $296;
     $299 = $newoffsets;
     $300 = $td;
     $301 = (($300) + 132|0);
     HEAP32[$301>>2] = $299;
     $302 = $td;
     $303 = (($302) + 140|0);
     HEAP32[$303>>2] = 1;
     STACKTOP = sp;return;
    }
   }
   $183 = $newcounts;
   $184 = ($183|0)!=(0|0);
   if ($184) {
    $185 = $newcounts;
    __TIFFfree($185);
   }
   $186 = $newoffsets;
   $187 = ($186|0)!=(0|0);
   if ($187) {
    $188 = $newoffsets;
    __TIFFfree($188);
   }
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _TIFFReadUInt64($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $result = sp;
 $0 = $value;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$result>>0] = $2;
 $3 = $0;
 $4 = (($3) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = (($result) + 1|0);
 HEAP8[$6>>0] = $5;
 $7 = $0;
 $8 = (($7) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($result) + 2|0);
 HEAP8[$10>>0] = $9;
 $11 = $0;
 $12 = (($11) + 3|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (($result) + 3|0);
 HEAP8[$14>>0] = $13;
 $15 = $0;
 $16 = (($15) + 4|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = (($result) + 4|0);
 HEAP8[$18>>0] = $17;
 $19 = $0;
 $20 = (($19) + 5|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = (($result) + 5|0);
 HEAP8[$22>>0] = $21;
 $23 = $0;
 $24 = (($23) + 6|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = (($result) + 6|0);
 HEAP8[$26>>0] = $25;
 $27 = $0;
 $28 = (($27) + 7|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = (($result) + 7|0);
 HEAP8[$30>>0] = $29;
 $31 = $result;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 tempRet0 = $36;
 STACKTOP = sp;return ($33|0);
}
function _TIFFReadDirEntryByteArray($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $count = 0, $data = 0, $err = 0, $m = 0, $ma = 0, $ma11 = 0, $ma14 = 0, $ma2 = 0, $ma5 = 0, $ma8 = 0, $mb = 0, $mb12 = 0, $mb15 = 0, $mb3 = 0, $mb6 = 0, $mb9 = 0, $n = 0, $n1 = 0, $n10 = 0;
 var $n13 = 0, $n16 = 0, $n4 = 0, $n7 = 0, $origdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 16|0;
 $origdata = sp + 20|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 switch ($7|0) {
 case 17: case 16: case 9: case 4: case 8: case 3: case 6: case 1: case 7: case 2:  {
  break;
 }
 default: {
  $0 = 2;
  $220 = $0;
  STACKTOP = sp;return ($220|0);
 }
 }
 $8 = $1;
 $9 = $2;
 $10 = (_TIFFReadDirEntryArray($8,$9,$count,1,$origdata)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = HEAP32[$origdata>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $17 = $2;
   $18 = (($17) + 2|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   if ((($20|0) == 1) | (($20|0) == 7) | (($20|0) == 2)) {
    $21 = HEAP32[$origdata>>2]|0;
    $22 = $3;
    HEAP32[$22>>2] = $21;
    $0 = 0;
    $220 = $0;
    STACKTOP = sp;return ($220|0);
   } else if ((($20|0) == 6)) {
    $23 = HEAP32[$origdata>>2]|0;
    $m = $23;
    $n = 0;
    while(1) {
     $24 = $n;
     $25 = HEAP32[$count>>2]|0;
     $26 = ($24>>>0)<($25>>>0);
     if (!($26)) {
      label = 15;
      break;
     }
     $27 = $m;
     $28 = HEAP8[$27>>0]|0;
     $29 = (_TIFFReadDirEntryCheckRangeByteSbyte($28)|0);
     $err = $29;
     $30 = $err;
     $31 = ($30|0)!=(0);
     if ($31) {
      label = 12;
      break;
     }
     $34 = $m;
     $35 = (($34) + 1|0);
     $m = $35;
     $36 = $n;
     $37 = (($36) + 1)|0;
     $n = $37;
    }
    if ((label|0) == 12) {
     $32 = HEAP32[$origdata>>2]|0;
     __TIFFfree($32);
     $33 = $err;
     $0 = $33;
     $220 = $0;
     STACKTOP = sp;return ($220|0);
    }
    else if ((label|0) == 15) {
     $38 = HEAP32[$origdata>>2]|0;
     $39 = $3;
     HEAP32[$39>>2] = $38;
     $0 = 0;
     $220 = $0;
     STACKTOP = sp;return ($220|0);
    }
   } else {
    $40 = HEAP32[$count>>2]|0;
    $41 = (__TIFFmalloc($40)|0);
    $data = $41;
    $42 = $data;
    $43 = ($42|0)==(0|0);
    if ($43) {
     $44 = HEAP32[$origdata>>2]|0;
     __TIFFfree($44);
     $0 = 7;
     $220 = $0;
     STACKTOP = sp;return ($220|0);
    }
    $45 = $2;
    $46 = (($45) + 2|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47&65535;
    switch ($48|0) {
    case 3:  {
     $49 = HEAP32[$origdata>>2]|0;
     $ma = $49;
     $50 = $data;
     $mb = $50;
     $n1 = 0;
     while(1) {
      $51 = $n1;
      $52 = HEAP32[$count>>2]|0;
      $53 = ($51>>>0)<($52>>>0);
      if (!($53)) {
       break;
      }
      $54 = $1;
      $55 = (($54) + 12|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = $56 & 128;
      $58 = ($57|0)!=(0);
      if ($58) {
       $59 = $ma;
       _TIFFSwabShort($59);
      }
      $60 = $ma;
      $61 = HEAP16[$60>>1]|0;
      $62 = (_TIFFReadDirEntryCheckRangeByteShort($61)|0);
      $err = $62;
      $63 = $err;
      $64 = ($63|0)!=(0);
      if ($64) {
       label = 24;
       break;
      }
      $65 = $ma;
      $66 = (($65) + 2|0);
      $ma = $66;
      $67 = HEAP16[$65>>1]|0;
      $68 = $67&255;
      $69 = $mb;
      $70 = (($69) + 1|0);
      $mb = $70;
      HEAP8[$69>>0] = $68;
      $71 = $n1;
      $72 = (($71) + 1)|0;
      $n1 = $72;
     }
     if ((label|0) == 24) {
     }
     break;
    }
    case 4:  {
     $97 = HEAP32[$origdata>>2]|0;
     $ma5 = $97;
     $98 = $data;
     $mb6 = $98;
     $n7 = 0;
     while(1) {
      $99 = $n7;
      $100 = HEAP32[$count>>2]|0;
      $101 = ($99>>>0)<($100>>>0);
      if (!($101)) {
       break;
      }
      $102 = $1;
      $103 = (($102) + 12|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = $104 & 128;
      $106 = ($105|0)!=(0);
      if ($106) {
       $107 = $ma5;
       _TIFFSwabLong($107);
      }
      $108 = $ma5;
      $109 = HEAP32[$108>>2]|0;
      $110 = (_TIFFReadDirEntryCheckRangeByteLong($109)|0);
      $err = $110;
      $111 = $err;
      $112 = ($111|0)!=(0);
      if ($112) {
       label = 42;
       break;
      }
      $113 = $ma5;
      $114 = (($113) + 4|0);
      $ma5 = $114;
      $115 = HEAP32[$113>>2]|0;
      $116 = $115&255;
      $117 = $mb6;
      $118 = (($117) + 1|0);
      $mb6 = $118;
      HEAP8[$117>>0] = $116;
      $119 = $n7;
      $120 = (($119) + 1)|0;
      $n7 = $120;
     }
     if ((label|0) == 42) {
     }
     break;
    }
    case 8:  {
     $73 = HEAP32[$origdata>>2]|0;
     $ma2 = $73;
     $74 = $data;
     $mb3 = $74;
     $n4 = 0;
     while(1) {
      $75 = $n4;
      $76 = HEAP32[$count>>2]|0;
      $77 = ($75>>>0)<($76>>>0);
      if (!($77)) {
       break;
      }
      $78 = $1;
      $79 = (($78) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = $80 & 128;
      $82 = ($81|0)!=(0);
      if ($82) {
       $83 = $ma2;
       _TIFFSwabShort($83);
      }
      $84 = $ma2;
      $85 = HEAP16[$84>>1]|0;
      $86 = (_TIFFReadDirEntryCheckRangeByteSshort($85)|0);
      $err = $86;
      $87 = $err;
      $88 = ($87|0)!=(0);
      if ($88) {
       label = 33;
       break;
      }
      $89 = $ma2;
      $90 = (($89) + 2|0);
      $ma2 = $90;
      $91 = HEAP16[$89>>1]|0;
      $92 = $91&255;
      $93 = $mb3;
      $94 = (($93) + 1|0);
      $mb3 = $94;
      HEAP8[$93>>0] = $92;
      $95 = $n4;
      $96 = (($95) + 1)|0;
      $n4 = $96;
     }
     if ((label|0) == 33) {
     }
     break;
    }
    case 9:  {
     $121 = HEAP32[$origdata>>2]|0;
     $ma8 = $121;
     $122 = $data;
     $mb9 = $122;
     $n10 = 0;
     while(1) {
      $123 = $n10;
      $124 = HEAP32[$count>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if (!($125)) {
       break;
      }
      $126 = $1;
      $127 = (($126) + 12|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = $128 & 128;
      $130 = ($129|0)!=(0);
      if ($130) {
       $131 = $ma8;
       _TIFFSwabLong($131);
      }
      $132 = $ma8;
      $133 = HEAP32[$132>>2]|0;
      $134 = (_TIFFReadDirEntryCheckRangeByteSlong($133)|0);
      $err = $134;
      $135 = $err;
      $136 = ($135|0)!=(0);
      if ($136) {
       label = 51;
       break;
      }
      $137 = $ma8;
      $138 = (($137) + 4|0);
      $ma8 = $138;
      $139 = HEAP32[$137>>2]|0;
      $140 = $139&255;
      $141 = $mb9;
      $142 = (($141) + 1|0);
      $mb9 = $142;
      HEAP8[$141>>0] = $140;
      $143 = $n10;
      $144 = (($143) + 1)|0;
      $n10 = $144;
     }
     if ((label|0) == 51) {
     }
     break;
    }
    case 16:  {
     $145 = HEAP32[$origdata>>2]|0;
     $ma11 = $145;
     $146 = $data;
     $mb12 = $146;
     $n13 = 0;
     while(1) {
      $147 = $n13;
      $148 = HEAP32[$count>>2]|0;
      $149 = ($147>>>0)<($148>>>0);
      if (!($149)) {
       break;
      }
      $150 = $1;
      $151 = (($150) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = $152 & 128;
      $154 = ($153|0)!=(0);
      if ($154) {
       $155 = $ma11;
       _TIFFSwabLong8($155);
      }
      $156 = $ma11;
      $157 = $156;
      $158 = $157;
      $159 = HEAP32[$158>>2]|0;
      $160 = (($157) + 4)|0;
      $161 = $160;
      $162 = HEAP32[$161>>2]|0;
      $163 = (_TIFFReadDirEntryCheckRangeByteLong8($159,$162)|0);
      $err = $163;
      $164 = $err;
      $165 = ($164|0)!=(0);
      if ($165) {
       label = 60;
       break;
      }
      $166 = $ma11;
      $167 = (($166) + 8|0);
      $ma11 = $167;
      $168 = $166;
      $169 = $168;
      $170 = HEAP32[$169>>2]|0;
      $171 = (($168) + 4)|0;
      $172 = $171;
      $173 = HEAP32[$172>>2]|0;
      $174 = $170&255;
      $175 = $mb12;
      $176 = (($175) + 1|0);
      $mb12 = $176;
      HEAP8[$175>>0] = $174;
      $177 = $n13;
      $178 = (($177) + 1)|0;
      $n13 = $178;
     }
     if ((label|0) == 60) {
     }
     break;
    }
    case 17:  {
     $179 = HEAP32[$origdata>>2]|0;
     $ma14 = $179;
     $180 = $data;
     $mb15 = $180;
     $n16 = 0;
     while(1) {
      $181 = $n16;
      $182 = HEAP32[$count>>2]|0;
      $183 = ($181>>>0)<($182>>>0);
      if (!($183)) {
       break;
      }
      $184 = $1;
      $185 = (($184) + 12|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = $186 & 128;
      $188 = ($187|0)!=(0);
      if ($188) {
       $189 = $ma14;
       _TIFFSwabLong8($189);
      }
      $190 = $ma14;
      $191 = $190;
      $192 = $191;
      $193 = HEAP32[$192>>2]|0;
      $194 = (($191) + 4)|0;
      $195 = $194;
      $196 = HEAP32[$195>>2]|0;
      $197 = (_TIFFReadDirEntryCheckRangeByteSlong8($193,$196)|0);
      $err = $197;
      $198 = $err;
      $199 = ($198|0)!=(0);
      if ($199) {
       label = 69;
       break;
      }
      $200 = $ma14;
      $201 = (($200) + 8|0);
      $ma14 = $201;
      $202 = $200;
      $203 = $202;
      $204 = HEAP32[$203>>2]|0;
      $205 = (($202) + 4)|0;
      $206 = $205;
      $207 = HEAP32[$206>>2]|0;
      $208 = $204&255;
      $209 = $mb15;
      $210 = (($209) + 1|0);
      $mb15 = $210;
      HEAP8[$209>>0] = $208;
      $211 = $n16;
      $212 = (($211) + 1)|0;
      $n16 = $212;
     }
     if ((label|0) == 69) {
     }
     break;
    }
    default: {
    }
    }
    $213 = HEAP32[$origdata>>2]|0;
    __TIFFfree($213);
    $214 = $err;
    $215 = ($214|0)!=(0);
    if ($215) {
     $216 = $data;
     __TIFFfree($216);
     $217 = $err;
     $0 = $217;
     $220 = $0;
     STACKTOP = sp;return ($220|0);
    } else {
     $218 = $data;
     $219 = $3;
     HEAP32[$219>>2] = $218;
     $0 = 0;
     $220 = $0;
     STACKTOP = sp;return ($220|0);
    }
   }
  }
 }
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $err;
 $0 = $16;
 $220 = $0;
 STACKTOP = sp;return ($220|0);
}
function _TIFFReadDirEntryByte($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $err = 0, $m = 0, $m1 = 0, $m2 = 0, $m3 = 0, $m4 = 0, $m5 = 0, $m6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp + 48|0;
 $m1 = sp + 44|0;
 $m2 = sp + 46|0;
 $m3 = sp + 16|0;
 $m4 = sp + 32|0;
 $m5 = sp + 8|0;
 $m6 = sp;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)!=(1);
 $13 = ($11|0)!=(0);
 $14 = $12 | $13;
 L1: do {
  if ($14) {
   $0 = 1;
  } else {
   $15 = $2;
   $16 = (($15) + 2|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   switch ($18|0) {
   case 6:  {
    $22 = $1;
    $23 = $2;
    _TIFFReadDirEntryCheckedSbyte($22,$23,$m);
    $24 = HEAP8[$m>>0]|0;
    $25 = (_TIFFReadDirEntryCheckRangeByteSbyte($24)|0);
    $err = $25;
    $26 = $err;
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = $err;
     $0 = $28;
     break L1;
    } else {
     $29 = HEAP8[$m>>0]|0;
     $30 = $3;
     HEAP8[$30>>0] = $29;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 1:  {
    $19 = $1;
    $20 = $2;
    $21 = $3;
    _TIFFReadDirEntryCheckedByte($19,$20,$21);
    $0 = 0;
    break L1;
    break;
   }
   case 9:  {
    $61 = $1;
    $62 = $2;
    _TIFFReadDirEntryCheckedSlong($61,$62,$m4);
    $63 = HEAP32[$m4>>2]|0;
    $64 = (_TIFFReadDirEntryCheckRangeByteSlong($63)|0);
    $err = $64;
    $65 = $err;
    $66 = ($65|0)!=(0);
    if ($66) {
     $67 = $err;
     $0 = $67;
     break L1;
    } else {
     $68 = HEAP32[$m4>>2]|0;
     $69 = $68&255;
     $70 = $3;
     HEAP8[$70>>0] = $69;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 16:  {
    $71 = $1;
    $72 = $2;
    $73 = (_TIFFReadDirEntryCheckedLong8($71,$72,$m5)|0);
    $err = $73;
    $74 = $err;
    $75 = ($74|0)!=(0);
    if ($75) {
     $76 = $err;
     $0 = $76;
     break L1;
    }
    $77 = $m5;
    $78 = $77;
    $79 = HEAP32[$78>>2]|0;
    $80 = (($77) + 4)|0;
    $81 = $80;
    $82 = HEAP32[$81>>2]|0;
    $83 = (_TIFFReadDirEntryCheckRangeByteLong8($79,$82)|0);
    $err = $83;
    $84 = $err;
    $85 = ($84|0)!=(0);
    if ($85) {
     $86 = $err;
     $0 = $86;
     break L1;
    } else {
     $87 = $m5;
     $88 = $87;
     $89 = HEAP32[$88>>2]|0;
     $90 = (($87) + 4)|0;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $93 = $89&255;
     $94 = $3;
     HEAP8[$94>>0] = $93;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 4:  {
    $51 = $1;
    $52 = $2;
    _TIFFReadDirEntryCheckedLong($51,$52,$m3);
    $53 = HEAP32[$m3>>2]|0;
    $54 = (_TIFFReadDirEntryCheckRangeByteLong($53)|0);
    $err = $54;
    $55 = $err;
    $56 = ($55|0)!=(0);
    if ($56) {
     $57 = $err;
     $0 = $57;
     break L1;
    } else {
     $58 = HEAP32[$m3>>2]|0;
     $59 = $58&255;
     $60 = $3;
     HEAP8[$60>>0] = $59;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 17:  {
    $95 = $1;
    $96 = $2;
    $97 = (_TIFFReadDirEntryCheckedSlong8($95,$96,$m6)|0);
    $err = $97;
    $98 = $err;
    $99 = ($98|0)!=(0);
    if ($99) {
     $100 = $err;
     $0 = $100;
     break L1;
    }
    $101 = $m6;
    $102 = $101;
    $103 = HEAP32[$102>>2]|0;
    $104 = (($101) + 4)|0;
    $105 = $104;
    $106 = HEAP32[$105>>2]|0;
    $107 = (_TIFFReadDirEntryCheckRangeByteSlong8($103,$106)|0);
    $err = $107;
    $108 = $err;
    $109 = ($108|0)!=(0);
    if ($109) {
     $110 = $err;
     $0 = $110;
     break L1;
    } else {
     $111 = $m6;
     $112 = $111;
     $113 = HEAP32[$112>>2]|0;
     $114 = (($111) + 4)|0;
     $115 = $114;
     $116 = HEAP32[$115>>2]|0;
     $117 = $113&255;
     $118 = $3;
     HEAP8[$118>>0] = $117;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 8:  {
    $41 = $1;
    $42 = $2;
    _TIFFReadDirEntryCheckedSshort($41,$42,$m2);
    $43 = HEAP16[$m2>>1]|0;
    $44 = (_TIFFReadDirEntryCheckRangeByteSshort($43)|0);
    $err = $44;
    $45 = $err;
    $46 = ($45|0)!=(0);
    if ($46) {
     $47 = $err;
     $0 = $47;
     break L1;
    } else {
     $48 = HEAP16[$m2>>1]|0;
     $49 = $48&255;
     $50 = $3;
     HEAP8[$50>>0] = $49;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 3:  {
    $31 = $1;
    $32 = $2;
    _TIFFReadDirEntryCheckedShort($31,$32,$m1);
    $33 = HEAP16[$m1>>1]|0;
    $34 = (_TIFFReadDirEntryCheckRangeByteShort($33)|0);
    $err = $34;
    $35 = $err;
    $36 = ($35|0)!=(0);
    if ($36) {
     $37 = $err;
     $0 = $37;
     break L1;
    } else {
     $38 = HEAP16[$m1>>1]|0;
     $39 = $38&255;
     $40 = $3;
     HEAP8[$40>>0] = $39;
     $0 = 0;
     break L1;
    }
    break;
   }
   default: {
    $0 = 2;
    break L1;
   }
   }
  }
 } while(0);
 $119 = $0;
 STACKTOP = sp;return ($119|0);
}
function _TIFFReadDirEntryLong($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $m = 0, $m1 = 0, $m2 = 0, $m3 = 0, $m4 = 0, $m5 = 0, $m6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp + 44|0;
 $m1 = sp + 45|0;
 $m2 = sp + 40|0;
 $m3 = sp + 42|0;
 $m4 = sp + 28|0;
 $m5 = sp + 8|0;
 $m6 = sp;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)!=(1);
 $13 = ($11|0)!=(0);
 $14 = $12 | $13;
 L1: do {
  if ($14) {
   $0 = 1;
  } else {
   $15 = $2;
   $16 = (($15) + 2|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   switch ($18|0) {
   case 6:  {
    $24 = $1;
    $25 = $2;
    _TIFFReadDirEntryCheckedSbyte($24,$25,$m1);
    $26 = HEAP8[$m1>>0]|0;
    $27 = (_TIFFReadDirEntryCheckRangeLongSbyte($26)|0);
    $err = $27;
    $28 = $err;
    $29 = ($28|0)!=(0);
    if ($29) {
     $30 = $err;
     $0 = $30;
     break L1;
    } else {
     $31 = HEAP8[$m1>>0]|0;
     $32 = $31 << 24 >> 24;
     $33 = $3;
     HEAP32[$33>>2] = $32;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 8:  {
    $39 = $1;
    $40 = $2;
    _TIFFReadDirEntryCheckedSshort($39,$40,$m3);
    $41 = HEAP16[$m3>>1]|0;
    $42 = (_TIFFReadDirEntryCheckRangeLongSshort($41)|0);
    $err = $42;
    $43 = $err;
    $44 = ($43|0)!=(0);
    if ($44) {
     $45 = $err;
     $0 = $45;
     break L1;
    } else {
     $46 = HEAP16[$m3>>1]|0;
     $47 = $46 << 16 >> 16;
     $48 = $3;
     HEAP32[$48>>2] = $47;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 17:  {
    $84 = $1;
    $85 = $2;
    $86 = (_TIFFReadDirEntryCheckedSlong8($84,$85,$m6)|0);
    $err = $86;
    $87 = $err;
    $88 = ($87|0)!=(0);
    if ($88) {
     $89 = $err;
     $0 = $89;
     break L1;
    }
    $90 = $m6;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($90) + 4)|0;
    $94 = $93;
    $95 = HEAP32[$94>>2]|0;
    $96 = (_TIFFReadDirEntryCheckRangeLongSlong8($92,$95)|0);
    $err = $96;
    $97 = $err;
    $98 = ($97|0)!=(0);
    if ($98) {
     $99 = $err;
     $0 = $99;
     break L1;
    } else {
     $100 = $m6;
     $101 = $100;
     $102 = HEAP32[$101>>2]|0;
     $103 = (($100) + 4)|0;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $106 = $3;
     HEAP32[$106>>2] = $102;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 1:  {
    $19 = $1;
    $20 = $2;
    _TIFFReadDirEntryCheckedByte($19,$20,$m);
    $21 = HEAP8[$m>>0]|0;
    $22 = $21&255;
    $23 = $3;
    HEAP32[$23>>2] = $22;
    $0 = 0;
    break L1;
    break;
   }
   case 16:  {
    $61 = $1;
    $62 = $2;
    $63 = (_TIFFReadDirEntryCheckedLong8($61,$62,$m5)|0);
    $err = $63;
    $64 = $err;
    $65 = ($64|0)!=(0);
    if ($65) {
     $66 = $err;
     $0 = $66;
     break L1;
    }
    $67 = $m5;
    $68 = $67;
    $69 = HEAP32[$68>>2]|0;
    $70 = (($67) + 4)|0;
    $71 = $70;
    $72 = HEAP32[$71>>2]|0;
    $73 = (_TIFFReadDirEntryCheckRangeLongLong8($69,$72)|0);
    $err = $73;
    $74 = $err;
    $75 = ($74|0)!=(0);
    if ($75) {
     $76 = $err;
     $0 = $76;
     break L1;
    } else {
     $77 = $m5;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = (($77) + 4)|0;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = $3;
     HEAP32[$83>>2] = $79;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 9:  {
    $52 = $1;
    $53 = $2;
    _TIFFReadDirEntryCheckedSlong($52,$53,$m4);
    $54 = HEAP32[$m4>>2]|0;
    $55 = (_TIFFReadDirEntryCheckRangeLongSlong($54)|0);
    $err = $55;
    $56 = $err;
    $57 = ($56|0)!=(0);
    if ($57) {
     $58 = $err;
     $0 = $58;
     break L1;
    } else {
     $59 = HEAP32[$m4>>2]|0;
     $60 = $3;
     HEAP32[$60>>2] = $59;
     $0 = 0;
     break L1;
    }
    break;
   }
   case 3:  {
    $34 = $1;
    $35 = $2;
    _TIFFReadDirEntryCheckedShort($34,$35,$m2);
    $36 = HEAP16[$m2>>1]|0;
    $37 = $36&65535;
    $38 = $3;
    HEAP32[$38>>2] = $37;
    $0 = 0;
    break L1;
    break;
   }
   case 4:  {
    $49 = $1;
    $50 = $2;
    $51 = $3;
    _TIFFReadDirEntryCheckedLong($49,$50,$51);
    $0 = 0;
    break L1;
    break;
   }
   default: {
    $0 = 2;
    break L1;
   }
   }
  }
 } while(0);
 $107 = $0;
 STACKTOP = sp;return ($107|0);
}
function _TIFFReadDirEntryLong8($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $m = 0, $m1 = 0, $m2 = 0, $m3 = 0, $m4 = 0, $m5 = 0, $m6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp + 40|0;
 $m1 = sp + 41|0;
 $m2 = sp + 36|0;
 $m3 = sp + 38|0;
 $m4 = sp + 12|0;
 $m5 = sp + 16|0;
 $m6 = sp;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)!=(1);
 $13 = ($11|0)!=(0);
 $14 = $12 | $13;
 if ($14) {
  $0 = 1;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
 }
 $15 = $2;
 $16 = (($15) + 2|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 switch ($18|0) {
 case 4:  {
  $69 = $1;
  $70 = $2;
  _TIFFReadDirEntryCheckedLong($69,$70,$m4);
  $71 = HEAP32[$m4>>2]|0;
  $72 = $3;
  $73 = $72;
  $74 = $73;
  HEAP32[$74>>2] = $71;
  $75 = (($73) + 4)|0;
  $76 = $75;
  HEAP32[$76>>2] = 0;
  $0 = 0;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
  break;
 }
 case 9:  {
  $77 = $1;
  $78 = $2;
  _TIFFReadDirEntryCheckedSlong($77,$78,$m5);
  $79 = HEAP32[$m5>>2]|0;
  $80 = (_TIFFReadDirEntryCheckRangeLong8Slong($79)|0);
  $err = $80;
  $81 = $err;
  $82 = ($81|0)!=(0);
  if ($82) {
   $83 = $err;
   $0 = $83;
   $124 = $0;
   STACKTOP = sp;return ($124|0);
  } else {
   $84 = HEAP32[$m5>>2]|0;
   $85 = ($84|0)<(0);
   $86 = $85 << 31 >> 31;
   $87 = $3;
   $88 = $87;
   $89 = $88;
   HEAP32[$89>>2] = $84;
   $90 = (($88) + 4)|0;
   $91 = $90;
   HEAP32[$91>>2] = $86;
   $0 = 0;
   $124 = $0;
   STACKTOP = sp;return ($124|0);
  }
  break;
 }
 case 16:  {
  $92 = $1;
  $93 = $2;
  $94 = $3;
  $95 = (_TIFFReadDirEntryCheckedLong8($92,$93,$94)|0);
  $err = $95;
  $96 = $err;
  $0 = $96;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
  break;
 }
 case 17:  {
  $97 = $1;
  $98 = $2;
  $99 = (_TIFFReadDirEntryCheckedSlong8($97,$98,$m6)|0);
  $err = $99;
  $100 = $err;
  $101 = ($100|0)!=(0);
  if ($101) {
   $102 = $err;
   $0 = $102;
   $124 = $0;
   STACKTOP = sp;return ($124|0);
  }
  $103 = $m6;
  $104 = $103;
  $105 = HEAP32[$104>>2]|0;
  $106 = (($103) + 4)|0;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = (_TIFFReadDirEntryCheckRangeLong8Slong8($105,$108)|0);
  $err = $109;
  $110 = $err;
  $111 = ($110|0)!=(0);
  if ($111) {
   $112 = $err;
   $0 = $112;
   $124 = $0;
   STACKTOP = sp;return ($124|0);
  } else {
   $113 = $m6;
   $114 = $113;
   $115 = HEAP32[$114>>2]|0;
   $116 = (($113) + 4)|0;
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   $119 = $3;
   $120 = $119;
   $121 = $120;
   HEAP32[$121>>2] = $115;
   $122 = (($120) + 4)|0;
   $123 = $122;
   HEAP32[$123>>2] = $118;
   $0 = 0;
   $124 = $0;
   STACKTOP = sp;return ($124|0);
  }
  break;
 }
 case 3:  {
  $44 = $1;
  $45 = $2;
  _TIFFReadDirEntryCheckedShort($44,$45,$m2);
  $46 = HEAP16[$m2>>1]|0;
  $47 = $46&65535;
  $48 = $3;
  $49 = $48;
  $50 = $49;
  HEAP32[$50>>2] = $47;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = 0;
  $0 = 0;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
  break;
 }
 case 1:  {
  $19 = $1;
  $20 = $2;
  _TIFFReadDirEntryCheckedByte($19,$20,$m);
  $21 = HEAP8[$m>>0]|0;
  $22 = $21&255;
  $23 = $3;
  $24 = $23;
  $25 = $24;
  HEAP32[$25>>2] = $22;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = 0;
  $0 = 0;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
  break;
 }
 case 6:  {
  $28 = $1;
  $29 = $2;
  _TIFFReadDirEntryCheckedSbyte($28,$29,$m1);
  $30 = HEAP8[$m1>>0]|0;
  $31 = (_TIFFReadDirEntryCheckRangeLong8Sbyte($30)|0);
  $err = $31;
  $32 = $err;
  $33 = ($32|0)!=(0);
  if ($33) {
   $34 = $err;
   $0 = $34;
   $124 = $0;
   STACKTOP = sp;return ($124|0);
  } else {
   $35 = HEAP8[$m1>>0]|0;
   $36 = $35 << 24 >> 24;
   $37 = ($36|0)<(0);
   $38 = $37 << 31 >> 31;
   $39 = $3;
   $40 = $39;
   $41 = $40;
   HEAP32[$41>>2] = $36;
   $42 = (($40) + 4)|0;
   $43 = $42;
   HEAP32[$43>>2] = $38;
   $0 = 0;
   $124 = $0;
   STACKTOP = sp;return ($124|0);
  }
  break;
 }
 case 8:  {
  $53 = $1;
  $54 = $2;
  _TIFFReadDirEntryCheckedSshort($53,$54,$m3);
  $55 = HEAP16[$m3>>1]|0;
  $56 = (_TIFFReadDirEntryCheckRangeLong8Sshort($55)|0);
  $err = $56;
  $57 = $err;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $err;
   $0 = $59;
   $124 = $0;
   STACKTOP = sp;return ($124|0);
  } else {
   $60 = HEAP16[$m3>>1]|0;
   $61 = $60 << 16 >> 16;
   $62 = ($61|0)<(0);
   $63 = $62 << 31 >> 31;
   $64 = $3;
   $65 = $64;
   $66 = $65;
   HEAP32[$66>>2] = $61;
   $67 = (($65) + 4)|0;
   $68 = $67;
   HEAP32[$68>>2] = $63;
   $0 = 0;
   $124 = $0;
   STACKTOP = sp;return ($124|0);
  }
  break;
 }
 default: {
  $0 = 2;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
 }
 }
 return (0)|0;
}
function _TIFFReadDirEntryFloat($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $m = 0, $m1 = 0, $m10 = 0, $m2 = 0, $m3 = 0, $m4 = 0, $m5 = 0, $m6 = 0, $m7 = 0, $m8 = 0, $m9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp + 72|0;
 $m1 = sp + 73|0;
 $m2 = sp + 68|0;
 $m3 = sp + 70|0;
 $m4 = sp + 44|0;
 $m5 = sp + 40|0;
 $m6 = sp + 32|0;
 $m7 = sp + 16|0;
 $m8 = sp + 8|0;
 $m9 = sp;
 $m10 = sp + 24|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)!=(1);
 $13 = ($11|0)!=(0);
 $14 = $12 | $13;
 L1: do {
  if ($14) {
   $0 = 1;
  } else {
   $15 = $2;
   $16 = (($15) + 2|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   do {
    switch ($18|0) {
    case 6:  {
     $24 = $1;
     $25 = $2;
     _TIFFReadDirEntryCheckedSbyte($24,$25,$m1);
     $26 = HEAP8[$m1>>0]|0;
     $27 = (+($26<<24>>24));
     $28 = $3;
     HEAPF32[$28>>2] = $27;
     $0 = 0;
     break L1;
     break;
    }
    case 4:  {
     $39 = $1;
     $40 = $2;
     _TIFFReadDirEntryCheckedLong($39,$40,$m4);
     $41 = HEAP32[$m4>>2]|0;
     $42 = (+($41>>>0));
     $43 = $3;
     HEAPF32[$43>>2] = $42;
     $0 = 0;
     break L1;
     break;
    }
    case 11:  {
     $95 = $1;
     $96 = $2;
     $97 = $3;
     _TIFFReadDirEntryCheckedFloat($95,$96,$97);
     $0 = 0;
     break L1;
     break;
    }
    case 12:  {
     $98 = $1;
     $99 = $2;
     $100 = (_TIFFReadDirEntryCheckedDouble($98,$99,$m10)|0);
     $err = $100;
     $101 = $err;
     $102 = ($101|0)!=(0);
     if ($102) {
      $103 = $err;
      $0 = $103;
      break L1;
     } else {
      $104 = +HEAPF64[$m10>>3];
      $105 = $104;
      $106 = $3;
      HEAPF32[$106>>2] = $105;
      $0 = 0;
      break L1;
     }
     break;
    }
    case 3:  {
     $29 = $1;
     $30 = $2;
     _TIFFReadDirEntryCheckedShort($29,$30,$m2);
     $31 = HEAP16[$m2>>1]|0;
     $32 = (+($31&65535));
     $33 = $3;
     HEAPF32[$33>>2] = $32;
     $0 = 0;
     break L1;
     break;
    }
    case 1:  {
     $19 = $1;
     $20 = $2;
     _TIFFReadDirEntryCheckedByte($19,$20,$m);
     $21 = HEAP8[$m>>0]|0;
     $22 = (+($21&255));
     $23 = $3;
     HEAPF32[$23>>2] = $22;
     $0 = 0;
     break L1;
     break;
    }
    case 16:  {
     $49 = $1;
     $50 = $2;
     $51 = (_TIFFReadDirEntryCheckedLong8($49,$50,$m6)|0);
     $err = $51;
     $52 = $err;
     $53 = ($52|0)!=(0);
     if ($53) {
      $54 = $err;
      $0 = $54;
      break L1;
     } else {
      $55 = $m6;
      $56 = $55;
      $57 = HEAP32[$56>>2]|0;
      $58 = (($55) + 4)|0;
      $59 = $58;
      $60 = HEAP32[$59>>2]|0;
      $61 = (+($57>>>0)) + (4294967296.0*(+($60>>>0)));
      $62 = $3;
      HEAPF32[$62>>2] = $61;
      $0 = 0;
      break L1;
     }
     break;
    }
    case 17:  {
     $63 = $1;
     $64 = $2;
     $65 = (_TIFFReadDirEntryCheckedSlong8($63,$64,$m7)|0);
     $err = $65;
     $66 = $err;
     $67 = ($66|0)!=(0);
     if ($67) {
      $68 = $err;
      $0 = $68;
      break L1;
     } else {
      $69 = $m7;
      $70 = $69;
      $71 = HEAP32[$70>>2]|0;
      $72 = (($69) + 4)|0;
      $73 = $72;
      $74 = HEAP32[$73>>2]|0;
      $75 = (+($71>>>0)) + (4294967296.0*(+($74|0)));
      $76 = $3;
      HEAPF32[$76>>2] = $75;
      $0 = 0;
      break L1;
     }
     break;
    }
    case 5:  {
     $77 = $1;
     $78 = $2;
     $79 = (_TIFFReadDirEntryCheckedRational($77,$78,$m8)|0);
     $err = $79;
     $80 = $err;
     $81 = ($80|0)!=(0);
     if ($81) {
      $82 = $err;
      $0 = $82;
      break L1;
     } else {
      $83 = +HEAPF64[$m8>>3];
      $84 = $83;
      $85 = $3;
      HEAPF32[$85>>2] = $84;
      $0 = 0;
      break L1;
     }
     break;
    }
    case 10:  {
     $86 = $1;
     $87 = $2;
     $88 = (_TIFFReadDirEntryCheckedSrational($86,$87,$m9)|0);
     $err = $88;
     $89 = $err;
     $90 = ($89|0)!=(0);
     if ($90) {
      $91 = $err;
      $0 = $91;
      break L1;
     } else {
      $92 = +HEAPF64[$m9>>3];
      $93 = $92;
      $94 = $3;
      HEAPF32[$94>>2] = $93;
      $0 = 0;
      break L1;
     }
     break;
    }
    case 8:  {
     $34 = $1;
     $35 = $2;
     _TIFFReadDirEntryCheckedSshort($34,$35,$m3);
     $36 = HEAP16[$m3>>1]|0;
     $37 = (+($36<<16>>16));
     $38 = $3;
     HEAPF32[$38>>2] = $37;
     $0 = 0;
     break L1;
     break;
    }
    case 9:  {
     $44 = $1;
     $45 = $2;
     _TIFFReadDirEntryCheckedSlong($44,$45,$m5);
     $46 = HEAP32[$m5>>2]|0;
     $47 = (+($46|0));
     $48 = $3;
     HEAPF32[$48>>2] = $47;
     $0 = 0;
     break L1;
     break;
    }
    default: {
     $0 = 2;
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 $107 = $0;
 STACKTOP = sp;return ($107|0);
}
function _TIFFReadDirEntryDouble($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $err = 0, $m = 0;
 var $m1 = 0, $m2 = 0, $m3 = 0, $m4 = 0, $m5 = 0, $m6 = 0, $m7 = 0, $m8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp + 52|0;
 $m1 = sp + 53|0;
 $m2 = sp + 48|0;
 $m3 = sp + 50|0;
 $m4 = sp + 36|0;
 $m5 = sp + 24|0;
 $m6 = sp;
 $m7 = sp + 8|0;
 $m8 = sp + 16|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)!=(1);
 $13 = ($11|0)!=(0);
 $14 = $12 | $13;
 L1: do {
  if ($14) {
   $0 = 1;
  } else {
   $15 = $2;
   $16 = (($15) + 2|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   do {
    switch ($18|0) {
    case 6:  {
     $24 = $1;
     $25 = $2;
     _TIFFReadDirEntryCheckedSbyte($24,$25,$m1);
     $26 = HEAP8[$m1>>0]|0;
     $27 = (+($26<<24>>24));
     $28 = $3;
     HEAPF64[$28>>3] = $27;
     $0 = 0;
     break L1;
     break;
    }
    case 4:  {
     $39 = $1;
     $40 = $2;
     _TIFFReadDirEntryCheckedLong($39,$40,$m4);
     $41 = HEAP32[$m4>>2]|0;
     $42 = (+($41>>>0));
     $43 = $3;
     HEAPF64[$43>>3] = $42;
     $0 = 0;
     break L1;
     break;
    }
    case 12:  {
     $92 = $1;
     $93 = $2;
     $94 = $3;
     $95 = (_TIFFReadDirEntryCheckedDouble($92,$93,$94)|0);
     $err = $95;
     $96 = $err;
     $0 = $96;
     break L1;
     break;
    }
    case 3:  {
     $29 = $1;
     $30 = $2;
     _TIFFReadDirEntryCheckedShort($29,$30,$m2);
     $31 = HEAP16[$m2>>1]|0;
     $32 = (+($31&65535));
     $33 = $3;
     HEAPF64[$33>>3] = $32;
     $0 = 0;
     break L1;
     break;
    }
    case 1:  {
     $19 = $1;
     $20 = $2;
     _TIFFReadDirEntryCheckedByte($19,$20,$m);
     $21 = HEAP8[$m>>0]|0;
     $22 = (+($21&255));
     $23 = $3;
     HEAPF64[$23>>3] = $22;
     $0 = 0;
     break L1;
     break;
    }
    case 16:  {
     $49 = $1;
     $50 = $2;
     $51 = (_TIFFReadDirEntryCheckedLong8($49,$50,$m6)|0);
     $err = $51;
     $52 = $err;
     $53 = ($52|0)!=(0);
     if ($53) {
      $54 = $err;
      $0 = $54;
      break L1;
     } else {
      $55 = $m6;
      $56 = $55;
      $57 = HEAP32[$56>>2]|0;
      $58 = (($55) + 4)|0;
      $59 = $58;
      $60 = HEAP32[$59>>2]|0;
      $61 = (+($57>>>0)) + (4294967296.0*(+($60>>>0)));
      $62 = $3;
      HEAPF64[$62>>3] = $61;
      $0 = 0;
      break L1;
     }
     break;
    }
    case 17:  {
     $63 = $1;
     $64 = $2;
     $65 = (_TIFFReadDirEntryCheckedSlong8($63,$64,$m7)|0);
     $err = $65;
     $66 = $err;
     $67 = ($66|0)!=(0);
     if ($67) {
      $68 = $err;
      $0 = $68;
      break L1;
     } else {
      $69 = $m7;
      $70 = $69;
      $71 = HEAP32[$70>>2]|0;
      $72 = (($69) + 4)|0;
      $73 = $72;
      $74 = HEAP32[$73>>2]|0;
      $75 = (+($71>>>0)) + (4294967296.0*(+($74|0)));
      $76 = $3;
      HEAPF64[$76>>3] = $75;
      $0 = 0;
      break L1;
     }
     break;
    }
    case 5:  {
     $77 = $1;
     $78 = $2;
     $79 = $3;
     $80 = (_TIFFReadDirEntryCheckedRational($77,$78,$79)|0);
     $err = $80;
     $81 = $err;
     $0 = $81;
     break L1;
     break;
    }
    case 10:  {
     $82 = $1;
     $83 = $2;
     $84 = $3;
     $85 = (_TIFFReadDirEntryCheckedSrational($82,$83,$84)|0);
     $err = $85;
     $86 = $err;
     $0 = $86;
     break L1;
     break;
    }
    case 11:  {
     $87 = $1;
     $88 = $2;
     _TIFFReadDirEntryCheckedFloat($87,$88,$m8);
     $89 = +HEAPF32[$m8>>2];
     $90 = $89;
     $91 = $3;
     HEAPF64[$91>>3] = $90;
     $0 = 0;
     break L1;
     break;
    }
    case 9:  {
     $44 = $1;
     $45 = $2;
     _TIFFReadDirEntryCheckedSlong($44,$45,$m5);
     $46 = HEAP32[$m5>>2]|0;
     $47 = (+($46|0));
     $48 = $3;
     HEAPF64[$48>>3] = $47;
     $0 = 0;
     break L1;
     break;
    }
    case 8:  {
     $34 = $1;
     $35 = $2;
     _TIFFReadDirEntryCheckedSshort($34,$35,$m3);
     $36 = HEAP16[$m3>>1]|0;
     $37 = (+($36<<16>>16));
     $38 = $3;
     HEAPF64[$38>>3] = $37;
     $0 = 0;
     break L1;
     break;
    }
    default: {
     $0 = 2;
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 $97 = $0;
 STACKTOP = sp;return ($97|0);
}
function _TIFFReadDirEntryIfd8($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)!=(1);
 $13 = ($11|0)!=(0);
 $14 = $12 | $13;
 if ($14) {
  $0 = 1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $15 = $2;
 $16 = (($15) + 2|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 if ((($18|0) == 13) | (($18|0) == 4)) {
  $19 = $1;
  $20 = $2;
  _TIFFReadDirEntryCheckedLong($19,$20,$m);
  $21 = HEAP32[$m>>2]|0;
  $22 = $3;
  $23 = $22;
  $24 = $23;
  HEAP32[$24>>2] = $21;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = 0;
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else if ((($18|0) == 18) | (($18|0) == 16)) {
  $27 = $1;
  $28 = $2;
  $29 = $3;
  $30 = (_TIFFReadDirEntryCheckedLong8($27,$28,$29)|0);
  $err = $30;
  $31 = $err;
  $0 = $31;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else {
  $0 = 2;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _TIFFReadDirEntryLongArray($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $data = 0, $err = 0, $m = 0, $ma = 0, $ma11 = 0, $ma14 = 0, $ma2 = 0;
 var $ma5 = 0, $ma8 = 0, $mb = 0, $mb12 = 0, $mb15 = 0, $mb3 = 0, $mb6 = 0, $mb9 = 0, $n = 0, $n1 = 0, $n10 = 0, $n13 = 0, $n16 = 0, $n4 = 0, $n7 = 0, $origdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 8|0;
 $origdata = sp + 12|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 switch ($7|0) {
 case 17: case 16: case 9: case 4: case 8: case 3: case 6: case 1:  {
  break;
 }
 default: {
  $0 = 2;
  $211 = $0;
  STACKTOP = sp;return ($211|0);
 }
 }
 $8 = $1;
 $9 = $2;
 $10 = (_TIFFReadDirEntryArray($8,$9,$count,4,$origdata)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = HEAP32[$origdata>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $17 = $2;
   $18 = (($17) + 2|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   if ((($20|0) == 9)) {
    $31 = HEAP32[$origdata>>2]|0;
    $m = $31;
    $n = 0;
    while(1) {
     $32 = $n;
     $33 = HEAP32[$count>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if (!($34)) {
      label = 19;
      break;
     }
     $35 = $1;
     $36 = (($35) + 12|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $37 & 128;
     $39 = ($38|0)!=(0);
     if ($39) {
      $40 = $m;
      _TIFFSwabLong($40);
     }
     $41 = $m;
     $42 = HEAP32[$41>>2]|0;
     $43 = (_TIFFReadDirEntryCheckRangeLongSlong($42)|0);
     $err = $43;
     $44 = $err;
     $45 = ($44|0)!=(0);
     if ($45) {
      label = 16;
      break;
     }
     $48 = $m;
     $49 = (($48) + 4|0);
     $m = $49;
     $50 = $n;
     $51 = (($50) + 1)|0;
     $n = $51;
    }
    if ((label|0) == 16) {
     $46 = HEAP32[$origdata>>2]|0;
     __TIFFfree($46);
     $47 = $err;
     $0 = $47;
     $211 = $0;
     STACKTOP = sp;return ($211|0);
    }
    else if ((label|0) == 19) {
     $52 = HEAP32[$origdata>>2]|0;
     $53 = $3;
     HEAP32[$53>>2] = $52;
     $0 = 0;
     $211 = $0;
     STACKTOP = sp;return ($211|0);
    }
   } else if ((($20|0) == 4)) {
    $21 = HEAP32[$origdata>>2]|0;
    $22 = $3;
    HEAP32[$22>>2] = $21;
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 128;
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = $3;
     $29 = HEAP32[$28>>2]|0;
     $30 = HEAP32[$count>>2]|0;
     _TIFFSwabArrayOfLong($29,$30);
    }
    $0 = 0;
    $211 = $0;
    STACKTOP = sp;return ($211|0);
   } else {
    $54 = HEAP32[$count>>2]|0;
    $55 = $54<<2;
    $56 = (__TIFFmalloc($55)|0);
    $data = $56;
    $57 = $data;
    $58 = ($57|0)==(0|0);
    if ($58) {
     $59 = HEAP32[$origdata>>2]|0;
     __TIFFfree($59);
     $0 = 7;
     $211 = $0;
     STACKTOP = sp;return ($211|0);
    }
    $60 = $2;
    $61 = (($60) + 2|0);
    $62 = HEAP16[$61>>1]|0;
    $63 = $62&65535;
    switch ($63|0) {
    case 16:  {
     $138 = HEAP32[$origdata>>2]|0;
     $ma11 = $138;
     $139 = $data;
     $mb12 = $139;
     $n13 = 0;
     while(1) {
      $140 = $n13;
      $141 = HEAP32[$count>>2]|0;
      $142 = ($140>>>0)<($141>>>0);
      if (!($142)) {
       break;
      }
      $143 = $1;
      $144 = (($143) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $145 & 128;
      $147 = ($146|0)!=(0);
      if ($147) {
       $148 = $ma11;
       _TIFFSwabLong8($148);
      }
      $149 = $ma11;
      $150 = $149;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = (($150) + 4)|0;
      $154 = $153;
      $155 = HEAP32[$154>>2]|0;
      $156 = (_TIFFReadDirEntryCheckRangeLongLong8($152,$155)|0);
      $err = $156;
      $157 = $err;
      $158 = ($157|0)!=(0);
      if ($158) {
       label = 56;
       break;
      }
      $159 = $ma11;
      $160 = (($159) + 8|0);
      $ma11 = $160;
      $161 = $159;
      $162 = $161;
      $163 = HEAP32[$162>>2]|0;
      $164 = (($161) + 4)|0;
      $165 = $164;
      $166 = HEAP32[$165>>2]|0;
      $167 = $mb12;
      $168 = (($167) + 4|0);
      $mb12 = $168;
      HEAP32[$167>>2] = $163;
      $169 = $n13;
      $170 = (($169) + 1)|0;
      $n13 = $170;
     }
     if ((label|0) == 56) {
     }
     break;
    }
    case 17:  {
     $171 = HEAP32[$origdata>>2]|0;
     $ma14 = $171;
     $172 = $data;
     $mb15 = $172;
     $n16 = 0;
     while(1) {
      $173 = $n16;
      $174 = HEAP32[$count>>2]|0;
      $175 = ($173>>>0)<($174>>>0);
      if (!($175)) {
       break;
      }
      $176 = $1;
      $177 = (($176) + 12|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $178 & 128;
      $180 = ($179|0)!=(0);
      if ($180) {
       $181 = $ma14;
       _TIFFSwabLong8($181);
      }
      $182 = $ma14;
      $183 = $182;
      $184 = $183;
      $185 = HEAP32[$184>>2]|0;
      $186 = (($183) + 4)|0;
      $187 = $186;
      $188 = HEAP32[$187>>2]|0;
      $189 = (_TIFFReadDirEntryCheckRangeLongSlong8($185,$188)|0);
      $err = $189;
      $190 = $err;
      $191 = ($190|0)!=(0);
      if ($191) {
       label = 65;
       break;
      }
      $192 = $ma14;
      $193 = (($192) + 8|0);
      $ma14 = $193;
      $194 = $192;
      $195 = $194;
      $196 = HEAP32[$195>>2]|0;
      $197 = (($194) + 4)|0;
      $198 = $197;
      $199 = HEAP32[$198>>2]|0;
      $200 = $mb15;
      $201 = (($200) + 4|0);
      $mb15 = $201;
      HEAP32[$200>>2] = $196;
      $202 = $n16;
      $203 = (($202) + 1)|0;
      $n16 = $203;
     }
     if ((label|0) == 65) {
     }
     break;
    }
    case 6:  {
     $77 = HEAP32[$origdata>>2]|0;
     $ma2 = $77;
     $78 = $data;
     $mb3 = $78;
     $n4 = 0;
     while(1) {
      $79 = $n4;
      $80 = HEAP32[$count>>2]|0;
      $81 = ($79>>>0)<($80>>>0);
      if (!($81)) {
       break;
      }
      $82 = $ma2;
      $83 = HEAP8[$82>>0]|0;
      $84 = (_TIFFReadDirEntryCheckRangeLongSbyte($83)|0);
      $err = $84;
      $85 = $err;
      $86 = ($85|0)!=(0);
      if ($86) {
       label = 31;
       break;
      }
      $87 = $ma2;
      $88 = (($87) + 1|0);
      $ma2 = $88;
      $89 = HEAP8[$87>>0]|0;
      $90 = $89 << 24 >> 24;
      $91 = $mb3;
      $92 = (($91) + 4|0);
      $mb3 = $92;
      HEAP32[$91>>2] = $90;
      $93 = $n4;
      $94 = (($93) + 1)|0;
      $n4 = $94;
     }
     if ((label|0) == 31) {
     }
     break;
    }
    case 1:  {
     $64 = HEAP32[$origdata>>2]|0;
     $ma = $64;
     $65 = $data;
     $mb = $65;
     $n1 = 0;
     while(1) {
      $66 = $n1;
      $67 = HEAP32[$count>>2]|0;
      $68 = ($66>>>0)<($67>>>0);
      if (!($68)) {
       break;
      }
      $69 = $ma;
      $70 = (($69) + 1|0);
      $ma = $70;
      $71 = HEAP8[$69>>0]|0;
      $72 = $71&255;
      $73 = $mb;
      $74 = (($73) + 4|0);
      $mb = $74;
      HEAP32[$73>>2] = $72;
      $75 = $n1;
      $76 = (($75) + 1)|0;
      $n1 = $76;
     }
     break;
    }
    case 3:  {
     $95 = HEAP32[$origdata>>2]|0;
     $ma5 = $95;
     $96 = $data;
     $mb6 = $96;
     $n7 = 0;
     while(1) {
      $97 = $n7;
      $98 = HEAP32[$count>>2]|0;
      $99 = ($97>>>0)<($98>>>0);
      if (!($99)) {
       break;
      }
      $100 = $1;
      $101 = (($100) + 12|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = $102 & 128;
      $104 = ($103|0)!=(0);
      if ($104) {
       $105 = $ma5;
       _TIFFSwabShort($105);
      }
      $106 = $ma5;
      $107 = (($106) + 2|0);
      $ma5 = $107;
      $108 = HEAP16[$106>>1]|0;
      $109 = $108&65535;
      $110 = $mb6;
      $111 = (($110) + 4|0);
      $mb6 = $111;
      HEAP32[$110>>2] = $109;
      $112 = $n7;
      $113 = (($112) + 1)|0;
      $n7 = $113;
     }
     break;
    }
    case 8:  {
     $114 = HEAP32[$origdata>>2]|0;
     $ma8 = $114;
     $115 = $data;
     $mb9 = $115;
     $n10 = 0;
     while(1) {
      $116 = $n10;
      $117 = HEAP32[$count>>2]|0;
      $118 = ($116>>>0)<($117>>>0);
      if (!($118)) {
       break;
      }
      $119 = $1;
      $120 = (($119) + 12|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $121 & 128;
      $123 = ($122|0)!=(0);
      if ($123) {
       $124 = $ma8;
       _TIFFSwabShort($124);
      }
      $125 = $ma8;
      $126 = HEAP16[$125>>1]|0;
      $127 = (_TIFFReadDirEntryCheckRangeLongSshort($126)|0);
      $err = $127;
      $128 = $err;
      $129 = ($128|0)!=(0);
      if ($129) {
       label = 47;
       break;
      }
      $130 = $ma8;
      $131 = (($130) + 2|0);
      $ma8 = $131;
      $132 = HEAP16[$130>>1]|0;
      $133 = $132 << 16 >> 16;
      $134 = $mb9;
      $135 = (($134) + 4|0);
      $mb9 = $135;
      HEAP32[$134>>2] = $133;
      $136 = $n10;
      $137 = (($136) + 1)|0;
      $n10 = $137;
     }
     if ((label|0) == 47) {
     }
     break;
    }
    default: {
    }
    }
    $204 = HEAP32[$origdata>>2]|0;
    __TIFFfree($204);
    $205 = $err;
    $206 = ($205|0)!=(0);
    if ($206) {
     $207 = $data;
     __TIFFfree($207);
     $208 = $err;
     $0 = $208;
     $211 = $0;
     STACKTOP = sp;return ($211|0);
    } else {
     $209 = $data;
     $210 = $3;
     HEAP32[$210>>2] = $209;
     $0 = 0;
     $211 = $0;
     STACKTOP = sp;return ($211|0);
    }
   }
  }
 }
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $err;
 $0 = $16;
 $211 = $0;
 STACKTOP = sp;return ($211|0);
}
function _TIFFReadDirEntryFloatArray($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $cond = 0, $count = 0, $data = 0, $err = 0, $ma = 0, $ma1 = 0, $ma10 = 0, $ma13 = 0, $ma16 = 0;
 var $ma19 = 0, $ma22 = 0, $ma25 = 0, $ma30 = 0, $ma4 = 0, $ma7 = 0, $maa = 0, $maa26 = 0, $mab = 0, $mab27 = 0, $mb = 0, $mb11 = 0, $mb14 = 0, $mb17 = 0, $mb2 = 0, $mb20 = 0, $mb23 = 0, $mb28 = 0, $mb31 = 0, $mb5 = 0;
 var $mb8 = 0, $n = 0, $n12 = 0, $n15 = 0, $n18 = 0, $n21 = 0, $n24 = 0, $n29 = 0, $n3 = 0, $n32 = 0, $n6 = 0, $n9 = 0, $origdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 60|0;
 $origdata = sp + 12|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 switch ($7|0) {
 case 12: case 11: case 10: case 5: case 17: case 16: case 9: case 4: case 8: case 3: case 6: case 1:  {
  break;
 }
 default: {
  $0 = 2;
  $290 = $0;
  STACKTOP = sp;return ($290|0);
 }
 }
 $8 = $1;
 $9 = $2;
 $10 = (_TIFFReadDirEntryArray($8,$9,$count,4,$origdata)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = HEAP32[$origdata>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $17 = $2;
   $18 = (($17) + 2|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   $cond = ($20|0)==(11);
   if ($cond) {
    $21 = $1;
    $22 = (($21) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $23 & 128;
    $25 = ($24|0)!=(0);
    if ($25) {
     $26 = HEAP32[$origdata>>2]|0;
     $27 = HEAP32[$count>>2]|0;
     _TIFFSwabArrayOfLong($26,$27);
    }
    $28 = HEAP32[$origdata>>2]|0;
    $29 = $3;
    HEAP32[$29>>2] = $28;
    $0 = 0;
    $290 = $0;
    STACKTOP = sp;return ($290|0);
   }
   $30 = HEAP32[$count>>2]|0;
   $31 = $30<<2;
   $32 = (__TIFFmalloc($31)|0);
   $data = $32;
   $33 = $data;
   $34 = ($33|0)==(0|0);
   if ($34) {
    $35 = HEAP32[$origdata>>2]|0;
    __TIFFfree($35);
    $0 = 7;
    $290 = $0;
    STACKTOP = sp;return ($290|0);
   }
   $36 = $2;
   $37 = (($36) + 2|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38&65535;
   do {
    switch ($39|0) {
    case 16:  {
     $142 = HEAP32[$origdata>>2]|0;
     $ma16 = $142;
     $143 = $data;
     $mb17 = $143;
     $n18 = 0;
     while(1) {
      $144 = $n18;
      $145 = HEAP32[$count>>2]|0;
      $146 = ($144>>>0)<($145>>>0);
      if (!($146)) {
       break;
      }
      $147 = $1;
      $148 = (($147) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = $149 & 128;
      $151 = ($150|0)!=(0);
      if ($151) {
       $152 = $ma16;
       _TIFFSwabLong8($152);
      }
      $153 = $ma16;
      $154 = (($153) + 8|0);
      $ma16 = $154;
      $155 = $153;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      $161 = (+($157>>>0)) + (4294967296.0*(+($160>>>0)));
      $162 = $mb17;
      $163 = (($162) + 4|0);
      $mb17 = $163;
      HEAPF32[$162>>2] = $161;
      $164 = $n18;
      $165 = (($164) + 1)|0;
      $n18 = $165;
     }
     break;
    }
    case 1:  {
     $40 = HEAP32[$origdata>>2]|0;
     $ma = $40;
     $41 = $data;
     $mb = $41;
     $n = 0;
     while(1) {
      $42 = $n;
      $43 = HEAP32[$count>>2]|0;
      $44 = ($42>>>0)<($43>>>0);
      if (!($44)) {
       break;
      }
      $45 = $ma;
      $46 = (($45) + 1|0);
      $ma = $46;
      $47 = HEAP8[$45>>0]|0;
      $48 = (+($47&255));
      $49 = $mb;
      $50 = (($49) + 4|0);
      $mb = $50;
      HEAPF32[$49>>2] = $48;
      $51 = $n;
      $52 = (($51) + 1)|0;
      $n = $52;
     }
     break;
    }
    case 12:  {
     $263 = $1;
     $264 = (($263) + 12|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = $265 & 128;
     $267 = ($266|0)!=(0);
     if ($267) {
      $268 = HEAP32[$origdata>>2]|0;
      $269 = HEAP32[$count>>2]|0;
      _TIFFSwabArrayOfLong8($268,$269);
     }
     $270 = HEAP32[$origdata>>2]|0;
     $ma30 = $270;
     $271 = $data;
     $mb31 = $271;
     $n32 = 0;
     while(1) {
      $272 = $n32;
      $273 = HEAP32[$count>>2]|0;
      $274 = ($272>>>0)<($273>>>0);
      if (!($274)) {
       break;
      }
      $275 = $ma30;
      $276 = (($275) + 8|0);
      $ma30 = $276;
      $277 = +HEAPF64[$275>>3];
      $278 = $277;
      $279 = $mb31;
      $280 = (($279) + 4|0);
      $mb31 = $280;
      HEAPF32[$279>>2] = $278;
      $281 = $n32;
      $282 = (($281) + 1)|0;
      $n32 = $282;
     }
     break;
    }
    case 6:  {
     $53 = HEAP32[$origdata>>2]|0;
     $ma1 = $53;
     $54 = $data;
     $mb2 = $54;
     $n3 = 0;
     while(1) {
      $55 = $n3;
      $56 = HEAP32[$count>>2]|0;
      $57 = ($55>>>0)<($56>>>0);
      if (!($57)) {
       break;
      }
      $58 = $ma1;
      $59 = (($58) + 1|0);
      $ma1 = $59;
      $60 = HEAP8[$58>>0]|0;
      $61 = (+($60<<24>>24));
      $62 = $mb2;
      $63 = (($62) + 4|0);
      $mb2 = $63;
      HEAPF32[$62>>2] = $61;
      $64 = $n3;
      $65 = (($64) + 1)|0;
      $n3 = $65;
     }
     break;
    }
    case 4:  {
     $104 = HEAP32[$origdata>>2]|0;
     $ma10 = $104;
     $105 = $data;
     $mb11 = $105;
     $n12 = 0;
     while(1) {
      $106 = $n12;
      $107 = HEAP32[$count>>2]|0;
      $108 = ($106>>>0)<($107>>>0);
      if (!($108)) {
       break;
      }
      $109 = $1;
      $110 = (($109) + 12|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = $111 & 128;
      $113 = ($112|0)!=(0);
      if ($113) {
       $114 = $ma10;
       _TIFFSwabLong($114);
      }
      $115 = $ma10;
      $116 = (($115) + 4|0);
      $ma10 = $116;
      $117 = HEAP32[$115>>2]|0;
      $118 = (+($117>>>0));
      $119 = $mb11;
      $120 = (($119) + 4|0);
      $mb11 = $120;
      HEAPF32[$119>>2] = $118;
      $121 = $n12;
      $122 = (($121) + 1)|0;
      $n12 = $122;
     }
     break;
    }
    case 8:  {
     $85 = HEAP32[$origdata>>2]|0;
     $ma7 = $85;
     $86 = $data;
     $mb8 = $86;
     $n9 = 0;
     while(1) {
      $87 = $n9;
      $88 = HEAP32[$count>>2]|0;
      $89 = ($87>>>0)<($88>>>0);
      if (!($89)) {
       break;
      }
      $90 = $1;
      $91 = (($90) + 12|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = $92 & 128;
      $94 = ($93|0)!=(0);
      if ($94) {
       $95 = $ma7;
       _TIFFSwabShort($95);
      }
      $96 = $ma7;
      $97 = (($96) + 2|0);
      $ma7 = $97;
      $98 = HEAP16[$96>>1]|0;
      $99 = (+($98<<16>>16));
      $100 = $mb8;
      $101 = (($100) + 4|0);
      $mb8 = $101;
      HEAPF32[$100>>2] = $99;
      $102 = $n9;
      $103 = (($102) + 1)|0;
      $n9 = $103;
     }
     break;
    }
    case 10:  {
     $226 = HEAP32[$origdata>>2]|0;
     $ma25 = $226;
     $227 = $data;
     $mb28 = $227;
     $n29 = 0;
     while(1) {
      $228 = $n29;
      $229 = HEAP32[$count>>2]|0;
      $230 = ($228>>>0)<($229>>>0);
      if (!($230)) {
       break;
      }
      $231 = $1;
      $232 = (($231) + 12|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = $233 & 128;
      $235 = ($234|0)!=(0);
      if ($235) {
       $236 = $ma25;
       _TIFFSwabLong($236);
      }
      $237 = $ma25;
      $238 = HEAP32[$237>>2]|0;
      $maa26 = $238;
      $239 = $ma25;
      $240 = (($239) + 4|0);
      $ma25 = $240;
      $241 = $1;
      $242 = (($241) + 12|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = $243 & 128;
      $245 = ($244|0)!=(0);
      if ($245) {
       $246 = $ma25;
       _TIFFSwabLong($246);
      }
      $247 = $ma25;
      $248 = (($247) + 4|0);
      $ma25 = $248;
      $249 = HEAP32[$247>>2]|0;
      $mab27 = $249;
      $250 = $mab27;
      $251 = ($250|0)==(0);
      if ($251) {
       $252 = $mb28;
       $253 = (($252) + 4|0);
       $mb28 = $253;
       HEAPF32[$252>>2] = 0.0;
      } else {
       $254 = $maa26;
       $255 = (+($254|0));
       $256 = $mab27;
       $257 = (+($256>>>0));
       $258 = $255 / $257;
       $259 = $mb28;
       $260 = (($259) + 4|0);
       $mb28 = $260;
       HEAPF32[$259>>2] = $258;
      }
      $261 = $n29;
      $262 = (($261) + 1)|0;
      $n29 = $262;
     }
     break;
    }
    case 3:  {
     $66 = HEAP32[$origdata>>2]|0;
     $ma4 = $66;
     $67 = $data;
     $mb5 = $67;
     $n6 = 0;
     while(1) {
      $68 = $n6;
      $69 = HEAP32[$count>>2]|0;
      $70 = ($68>>>0)<($69>>>0);
      if (!($70)) {
       break;
      }
      $71 = $1;
      $72 = (($71) + 12|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = $73 & 128;
      $75 = ($74|0)!=(0);
      if ($75) {
       $76 = $ma4;
       _TIFFSwabShort($76);
      }
      $77 = $ma4;
      $78 = (($77) + 2|0);
      $ma4 = $78;
      $79 = HEAP16[$77>>1]|0;
      $80 = (+($79&65535));
      $81 = $mb5;
      $82 = (($81) + 4|0);
      $mb5 = $82;
      HEAPF32[$81>>2] = $80;
      $83 = $n6;
      $84 = (($83) + 1)|0;
      $n6 = $84;
     }
     break;
    }
    case 5:  {
     $190 = HEAP32[$origdata>>2]|0;
     $ma22 = $190;
     $191 = $data;
     $mb23 = $191;
     $n24 = 0;
     while(1) {
      $192 = $n24;
      $193 = HEAP32[$count>>2]|0;
      $194 = ($192>>>0)<($193>>>0);
      if (!($194)) {
       break;
      }
      $195 = $1;
      $196 = (($195) + 12|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = $197 & 128;
      $199 = ($198|0)!=(0);
      if ($199) {
       $200 = $ma22;
       _TIFFSwabLong($200);
      }
      $201 = $ma22;
      $202 = (($201) + 4|0);
      $ma22 = $202;
      $203 = HEAP32[$201>>2]|0;
      $maa = $203;
      $204 = $1;
      $205 = (($204) + 12|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = $206 & 128;
      $208 = ($207|0)!=(0);
      if ($208) {
       $209 = $ma22;
       _TIFFSwabLong($209);
      }
      $210 = $ma22;
      $211 = (($210) + 4|0);
      $ma22 = $211;
      $212 = HEAP32[$210>>2]|0;
      $mab = $212;
      $213 = $mab;
      $214 = ($213|0)==(0);
      if ($214) {
       $215 = $mb23;
       $216 = (($215) + 4|0);
       $mb23 = $216;
       HEAPF32[$215>>2] = 0.0;
      } else {
       $217 = $maa;
       $218 = (+($217>>>0));
       $219 = $mab;
       $220 = (+($219>>>0));
       $221 = $218 / $220;
       $222 = $mb23;
       $223 = (($222) + 4|0);
       $mb23 = $223;
       HEAPF32[$222>>2] = $221;
      }
      $224 = $n24;
      $225 = (($224) + 1)|0;
      $n24 = $225;
     }
     break;
    }
    case 17:  {
     $166 = HEAP32[$origdata>>2]|0;
     $ma19 = $166;
     $167 = $data;
     $mb20 = $167;
     $n21 = 0;
     while(1) {
      $168 = $n21;
      $169 = HEAP32[$count>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if (!($170)) {
       break;
      }
      $171 = $1;
      $172 = (($171) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $173 & 128;
      $175 = ($174|0)!=(0);
      if ($175) {
       $176 = $ma19;
       _TIFFSwabLong8($176);
      }
      $177 = $ma19;
      $178 = (($177) + 8|0);
      $ma19 = $178;
      $179 = $177;
      $180 = $179;
      $181 = HEAP32[$180>>2]|0;
      $182 = (($179) + 4)|0;
      $183 = $182;
      $184 = HEAP32[$183>>2]|0;
      $185 = (+($181>>>0)) + (4294967296.0*(+($184|0)));
      $186 = $mb20;
      $187 = (($186) + 4|0);
      $mb20 = $187;
      HEAPF32[$186>>2] = $185;
      $188 = $n21;
      $189 = (($188) + 1)|0;
      $n21 = $189;
     }
     break;
    }
    case 9:  {
     $123 = HEAP32[$origdata>>2]|0;
     $ma13 = $123;
     $124 = $data;
     $mb14 = $124;
     $n15 = 0;
     while(1) {
      $125 = $n15;
      $126 = HEAP32[$count>>2]|0;
      $127 = ($125>>>0)<($126>>>0);
      if (!($127)) {
       break;
      }
      $128 = $1;
      $129 = (($128) + 12|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = $130 & 128;
      $132 = ($131|0)!=(0);
      if ($132) {
       $133 = $ma13;
       _TIFFSwabLong($133);
      }
      $134 = $ma13;
      $135 = (($134) + 4|0);
      $ma13 = $135;
      $136 = HEAP32[$134>>2]|0;
      $137 = (+($136|0));
      $138 = $mb14;
      $139 = (($138) + 4|0);
      $mb14 = $139;
      HEAPF32[$138>>2] = $137;
      $140 = $n15;
      $141 = (($140) + 1)|0;
      $n15 = $141;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $283 = HEAP32[$origdata>>2]|0;
   __TIFFfree($283);
   $284 = $err;
   $285 = ($284|0)!=(0);
   if ($285) {
    $286 = $data;
    __TIFFfree($286);
    $287 = $err;
    $0 = $287;
    $290 = $0;
    STACKTOP = sp;return ($290|0);
   } else {
    $288 = $data;
    $289 = $3;
    HEAP32[$289>>2] = $288;
    $0 = 0;
    $290 = $0;
    STACKTOP = sp;return ($290|0);
   }
  }
 }
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $err;
 $0 = $16;
 $290 = $0;
 STACKTOP = sp;return ($290|0);
}
function _TIFFReadDirEntryLong8Array($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $count = 0, $data = 0, $err = 0, $m = 0, $ma = 0, $ma11 = 0, $ma14 = 0, $ma2 = 0, $ma5 = 0, $ma8 = 0, $mb = 0, $mb12 = 0, $mb15 = 0, $mb3 = 0, $mb6 = 0, $mb9 = 0, $n = 0, $n1 = 0;
 var $n10 = 0, $n13 = 0, $n16 = 0, $n4 = 0, $n7 = 0, $origdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 8|0;
 $origdata = sp + 12|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 switch ($7|0) {
 case 17: case 16: case 9: case 4: case 8: case 3: case 6: case 1:  {
  break;
 }
 default: {
  $0 = 2;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 }
 $8 = $1;
 $9 = $2;
 $10 = (_TIFFReadDirEntryArray($8,$9,$count,8,$origdata)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = HEAP32[$origdata>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $17 = $2;
   $18 = (($17) + 2|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   if ((($20|0) == 16)) {
    $21 = HEAP32[$origdata>>2]|0;
    $22 = $3;
    HEAP32[$22>>2] = $21;
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 128;
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = $3;
     $29 = HEAP32[$28>>2]|0;
     $30 = HEAP32[$count>>2]|0;
     _TIFFSwabArrayOfLong8($29,$30);
    }
    $0 = 0;
    $221 = $0;
    STACKTOP = sp;return ($221|0);
   } else if ((($20|0) == 17)) {
    $31 = HEAP32[$origdata>>2]|0;
    $m = $31;
    $n = 0;
    while(1) {
     $32 = $n;
     $33 = HEAP32[$count>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if (!($34)) {
      label = 19;
      break;
     }
     $35 = $1;
     $36 = (($35) + 12|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $37 & 128;
     $39 = ($38|0)!=(0);
     if ($39) {
      $40 = $m;
      _TIFFSwabLong8($40);
     }
     $41 = $m;
     $42 = $41;
     $43 = $42;
     $44 = HEAP32[$43>>2]|0;
     $45 = (($42) + 4)|0;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $48 = (_TIFFReadDirEntryCheckRangeLong8Slong8($44,$47)|0);
     $err = $48;
     $49 = $err;
     $50 = ($49|0)!=(0);
     if ($50) {
      label = 16;
      break;
     }
     $53 = $m;
     $54 = (($53) + 8|0);
     $m = $54;
     $55 = $n;
     $56 = (($55) + 1)|0;
     $n = $56;
    }
    if ((label|0) == 16) {
     $51 = HEAP32[$origdata>>2]|0;
     __TIFFfree($51);
     $52 = $err;
     $0 = $52;
     $221 = $0;
     STACKTOP = sp;return ($221|0);
    }
    else if ((label|0) == 19) {
     $57 = HEAP32[$origdata>>2]|0;
     $58 = $3;
     HEAP32[$58>>2] = $57;
     $0 = 0;
     $221 = $0;
     STACKTOP = sp;return ($221|0);
    }
   } else {
    $59 = HEAP32[$count>>2]|0;
    $60 = $59<<3;
    $61 = (__TIFFmalloc($60)|0);
    $data = $61;
    $62 = $data;
    $63 = ($62|0)==(0|0);
    if ($63) {
     $64 = HEAP32[$origdata>>2]|0;
     __TIFFfree($64);
     $0 = 7;
     $221 = $0;
     STACKTOP = sp;return ($221|0);
    }
    $65 = $2;
    $66 = (($65) + 2|0);
    $67 = HEAP16[$66>>1]|0;
    $68 = $67&65535;
    switch ($68|0) {
    case 8:  {
     $133 = HEAP32[$origdata>>2]|0;
     $ma8 = $133;
     $134 = $data;
     $mb9 = $134;
     $n10 = 0;
     while(1) {
      $135 = $n10;
      $136 = HEAP32[$count>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if (!($137)) {
       break;
      }
      $138 = $1;
      $139 = (($138) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = $140 & 128;
      $142 = ($141|0)!=(0);
      if ($142) {
       $143 = $ma8;
       _TIFFSwabShort($143);
      }
      $144 = $ma8;
      $145 = HEAP16[$144>>1]|0;
      $146 = (_TIFFReadDirEntryCheckRangeLong8Sshort($145)|0);
      $err = $146;
      $147 = $err;
      $148 = ($147|0)!=(0);
      if ($148) {
       label = 47;
       break;
      }
      $149 = $ma8;
      $150 = (($149) + 2|0);
      $ma8 = $150;
      $151 = HEAP16[$149>>1]|0;
      $152 = $151 << 16 >> 16;
      $153 = ($152|0)<(0);
      $154 = $153 << 31 >> 31;
      $155 = $mb9;
      $156 = (($155) + 8|0);
      $mb9 = $156;
      $157 = $155;
      $158 = $157;
      HEAP32[$158>>2] = $152;
      $159 = (($157) + 4)|0;
      $160 = $159;
      HEAP32[$160>>2] = $154;
      $161 = $n10;
      $162 = (($161) + 1)|0;
      $n10 = $162;
     }
     if ((label|0) == 47) {
     }
     break;
    }
    case 4:  {
     $163 = HEAP32[$origdata>>2]|0;
     $ma11 = $163;
     $164 = $data;
     $mb12 = $164;
     $n13 = 0;
     while(1) {
      $165 = $n13;
      $166 = HEAP32[$count>>2]|0;
      $167 = ($165>>>0)<($166>>>0);
      if (!($167)) {
       break;
      }
      $168 = $1;
      $169 = (($168) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = $170 & 128;
      $172 = ($171|0)!=(0);
      if ($172) {
       $173 = $ma11;
       _TIFFSwabLong($173);
      }
      $174 = $ma11;
      $175 = (($174) + 4|0);
      $ma11 = $175;
      $176 = HEAP32[$174>>2]|0;
      $177 = $mb12;
      $178 = (($177) + 8|0);
      $mb12 = $178;
      $179 = $177;
      $180 = $179;
      HEAP32[$180>>2] = $176;
      $181 = (($179) + 4)|0;
      $182 = $181;
      HEAP32[$182>>2] = 0;
      $183 = $n13;
      $184 = (($183) + 1)|0;
      $n13 = $184;
     }
     break;
    }
    case 6:  {
     $86 = HEAP32[$origdata>>2]|0;
     $ma2 = $86;
     $87 = $data;
     $mb3 = $87;
     $n4 = 0;
     while(1) {
      $88 = $n4;
      $89 = HEAP32[$count>>2]|0;
      $90 = ($88>>>0)<($89>>>0);
      if (!($90)) {
       break;
      }
      $91 = $ma2;
      $92 = HEAP8[$91>>0]|0;
      $93 = (_TIFFReadDirEntryCheckRangeLong8Sbyte($92)|0);
      $err = $93;
      $94 = $err;
      $95 = ($94|0)!=(0);
      if ($95) {
       label = 31;
       break;
      }
      $96 = $ma2;
      $97 = (($96) + 1|0);
      $ma2 = $97;
      $98 = HEAP8[$96>>0]|0;
      $99 = $98 << 24 >> 24;
      $100 = ($99|0)<(0);
      $101 = $100 << 31 >> 31;
      $102 = $mb3;
      $103 = (($102) + 8|0);
      $mb3 = $103;
      $104 = $102;
      $105 = $104;
      HEAP32[$105>>2] = $99;
      $106 = (($104) + 4)|0;
      $107 = $106;
      HEAP32[$107>>2] = $101;
      $108 = $n4;
      $109 = (($108) + 1)|0;
      $n4 = $109;
     }
     if ((label|0) == 31) {
     }
     break;
    }
    case 9:  {
     $185 = HEAP32[$origdata>>2]|0;
     $ma14 = $185;
     $186 = $data;
     $mb15 = $186;
     $n16 = 0;
     while(1) {
      $187 = $n16;
      $188 = HEAP32[$count>>2]|0;
      $189 = ($187>>>0)<($188>>>0);
      if (!($189)) {
       break;
      }
      $190 = $1;
      $191 = (($190) + 12|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = $192 & 128;
      $194 = ($193|0)!=(0);
      if ($194) {
       $195 = $ma14;
       _TIFFSwabLong($195);
      }
      $196 = $ma14;
      $197 = HEAP32[$196>>2]|0;
      $198 = (_TIFFReadDirEntryCheckRangeLong8Slong($197)|0);
      $err = $198;
      $199 = $err;
      $200 = ($199|0)!=(0);
      if ($200) {
       label = 63;
       break;
      }
      $201 = $ma14;
      $202 = (($201) + 4|0);
      $ma14 = $202;
      $203 = HEAP32[$201>>2]|0;
      $204 = ($203|0)<(0);
      $205 = $204 << 31 >> 31;
      $206 = $mb15;
      $207 = (($206) + 8|0);
      $mb15 = $207;
      $208 = $206;
      $209 = $208;
      HEAP32[$209>>2] = $203;
      $210 = (($208) + 4)|0;
      $211 = $210;
      HEAP32[$211>>2] = $205;
      $212 = $n16;
      $213 = (($212) + 1)|0;
      $n16 = $213;
     }
     if ((label|0) == 63) {
     }
     break;
    }
    case 3:  {
     $110 = HEAP32[$origdata>>2]|0;
     $ma5 = $110;
     $111 = $data;
     $mb6 = $111;
     $n7 = 0;
     while(1) {
      $112 = $n7;
      $113 = HEAP32[$count>>2]|0;
      $114 = ($112>>>0)<($113>>>0);
      if (!($114)) {
       break;
      }
      $115 = $1;
      $116 = (($115) + 12|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = $117 & 128;
      $119 = ($118|0)!=(0);
      if ($119) {
       $120 = $ma5;
       _TIFFSwabShort($120);
      }
      $121 = $ma5;
      $122 = (($121) + 2|0);
      $ma5 = $122;
      $123 = HEAP16[$121>>1]|0;
      $124 = $123&65535;
      $125 = $mb6;
      $126 = (($125) + 8|0);
      $mb6 = $126;
      $127 = $125;
      $128 = $127;
      HEAP32[$128>>2] = $124;
      $129 = (($127) + 4)|0;
      $130 = $129;
      HEAP32[$130>>2] = 0;
      $131 = $n7;
      $132 = (($131) + 1)|0;
      $n7 = $132;
     }
     break;
    }
    case 1:  {
     $69 = HEAP32[$origdata>>2]|0;
     $ma = $69;
     $70 = $data;
     $mb = $70;
     $n1 = 0;
     while(1) {
      $71 = $n1;
      $72 = HEAP32[$count>>2]|0;
      $73 = ($71>>>0)<($72>>>0);
      if (!($73)) {
       break;
      }
      $74 = $ma;
      $75 = (($74) + 1|0);
      $ma = $75;
      $76 = HEAP8[$74>>0]|0;
      $77 = $76&255;
      $78 = $mb;
      $79 = (($78) + 8|0);
      $mb = $79;
      $80 = $78;
      $81 = $80;
      HEAP32[$81>>2] = $77;
      $82 = (($80) + 4)|0;
      $83 = $82;
      HEAP32[$83>>2] = 0;
      $84 = $n1;
      $85 = (($84) + 1)|0;
      $n1 = $85;
     }
     break;
    }
    default: {
    }
    }
    $214 = HEAP32[$origdata>>2]|0;
    __TIFFfree($214);
    $215 = $err;
    $216 = ($215|0)!=(0);
    if ($216) {
     $217 = $data;
     __TIFFfree($217);
     $218 = $err;
     $0 = $218;
     $221 = $0;
     STACKTOP = sp;return ($221|0);
    } else {
     $219 = $data;
     $220 = $3;
     HEAP32[$220>>2] = $219;
     $0 = 0;
     $221 = $0;
     STACKTOP = sp;return ($221|0);
    }
   }
  }
 }
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $err;
 $0 = $16;
 $221 = $0;
 STACKTOP = sp;return ($221|0);
}
function _TIFFReadDirEntryIfd8Array($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $count = 0, $data = 0, $err = 0, $ma = 0, $mb = 0, $n = 0, $origdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 40|0;
 $origdata = sp + 12|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 if (!((($7|0) == 18) | (($7|0) == 13) | (($7|0) == 16) | (($7|0) == 4))) {
  $0 = 2;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $8 = $1;
 $9 = $2;
 $10 = (_TIFFReadDirEntryArray($8,$9,$count,8,$origdata)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = HEAP32[$origdata>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $17 = $2;
   $18 = (($17) + 2|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   if ((($20|0) == 18) | (($20|0) == 16)) {
    $21 = HEAP32[$origdata>>2]|0;
    $22 = $3;
    HEAP32[$22>>2] = $21;
    $23 = $1;
    $24 = (($23) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 128;
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = $3;
     $29 = HEAP32[$28>>2]|0;
     $30 = HEAP32[$count>>2]|0;
     _TIFFSwabArrayOfLong8($29,$30);
    }
    $0 = 0;
    $70 = $0;
    STACKTOP = sp;return ($70|0);
   }
   $31 = HEAP32[$count>>2]|0;
   $32 = $31<<3;
   $33 = (__TIFFmalloc($32)|0);
   $data = $33;
   $34 = $data;
   $35 = ($34|0)==(0|0);
   if ($35) {
    $36 = HEAP32[$origdata>>2]|0;
    __TIFFfree($36);
    $0 = 7;
    $70 = $0;
    STACKTOP = sp;return ($70|0);
   }
   $37 = $2;
   $38 = (($37) + 2|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $39&65535;
   if ((($40|0) == 13) | (($40|0) == 4)) {
    $41 = HEAP32[$origdata>>2]|0;
    $ma = $41;
    $42 = $data;
    $mb = $42;
    $n = 0;
    while(1) {
     $43 = $n;
     $44 = HEAP32[$count>>2]|0;
     $45 = ($43>>>0)<($44>>>0);
     if (!($45)) {
      break;
     }
     $46 = $1;
     $47 = (($46) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $48 & 128;
     $50 = ($49|0)!=(0);
     if ($50) {
      $51 = $ma;
      _TIFFSwabLong($51);
     }
     $52 = $ma;
     $53 = (($52) + 4|0);
     $ma = $53;
     $54 = HEAP32[$52>>2]|0;
     $55 = $mb;
     $56 = (($55) + 8|0);
     $mb = $56;
     $57 = $55;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = 0;
     $61 = $n;
     $62 = (($61) + 1)|0;
     $n = $62;
    }
   }
   $63 = HEAP32[$origdata>>2]|0;
   __TIFFfree($63);
   $64 = $err;
   $65 = ($64|0)!=(0);
   if ($65) {
    $66 = $data;
    __TIFFfree($66);
    $67 = $err;
    $0 = $67;
    $70 = $0;
    STACKTOP = sp;return ($70|0);
   } else {
    $68 = $data;
    $69 = $3;
    HEAP32[$69>>2] = $68;
    $0 = 0;
    $70 = $0;
    STACKTOP = sp;return ($70|0);
   }
  }
 }
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $err;
 $0 = $16;
 $70 = $0;
 STACKTOP = sp;return ($70|0);
}
function _TIFFReadDirEntrySbyteArray($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $count = 0, $data = 0, $err = 0, $m = 0, $ma = 0, $ma11 = 0, $ma14 = 0, $ma2 = 0, $ma5 = 0, $ma8 = 0, $mb = 0, $mb12 = 0, $mb15 = 0, $mb3 = 0, $mb6 = 0, $mb9 = 0, $n = 0, $n1 = 0, $n10 = 0;
 var $n13 = 0, $n16 = 0, $n4 = 0, $n7 = 0, $origdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 8|0;
 $origdata = sp + 12|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 switch ($7|0) {
 case 17: case 16: case 9: case 4: case 8: case 3: case 6: case 1: case 7:  {
  break;
 }
 default: {
  $0 = 2;
  $220 = $0;
  STACKTOP = sp;return ($220|0);
 }
 }
 $8 = $1;
 $9 = $2;
 $10 = (_TIFFReadDirEntryArray($8,$9,$count,1,$origdata)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = HEAP32[$origdata>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $17 = $2;
   $18 = (($17) + 2|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   if ((($20|0) == 6)) {
    $38 = HEAP32[$origdata>>2]|0;
    $39 = $3;
    HEAP32[$39>>2] = $38;
    $0 = 0;
    $220 = $0;
    STACKTOP = sp;return ($220|0);
   } else if ((($20|0) == 1) | (($20|0) == 7)) {
    $21 = HEAP32[$origdata>>2]|0;
    $m = $21;
    $n = 0;
    while(1) {
     $22 = $n;
     $23 = HEAP32[$count>>2]|0;
     $24 = ($22>>>0)<($23>>>0);
     if (!($24)) {
      label = 14;
      break;
     }
     $25 = $m;
     $26 = HEAP8[$25>>0]|0;
     $27 = (_TIFFReadDirEntryCheckRangeSbyteByte($26)|0);
     $err = $27;
     $28 = $err;
     $29 = ($28|0)!=(0);
     if ($29) {
      label = 11;
      break;
     }
     $32 = $m;
     $33 = (($32) + 1|0);
     $m = $33;
     $34 = $n;
     $35 = (($34) + 1)|0;
     $n = $35;
    }
    if ((label|0) == 11) {
     $30 = HEAP32[$origdata>>2]|0;
     __TIFFfree($30);
     $31 = $err;
     $0 = $31;
     $220 = $0;
     STACKTOP = sp;return ($220|0);
    }
    else if ((label|0) == 14) {
     $36 = HEAP32[$origdata>>2]|0;
     $37 = $3;
     HEAP32[$37>>2] = $36;
     $0 = 0;
     $220 = $0;
     STACKTOP = sp;return ($220|0);
    }
   } else {
    $40 = HEAP32[$count>>2]|0;
    $41 = (__TIFFmalloc($40)|0);
    $data = $41;
    $42 = $data;
    $43 = ($42|0)==(0|0);
    if ($43) {
     $44 = HEAP32[$origdata>>2]|0;
     __TIFFfree($44);
     $0 = 7;
     $220 = $0;
     STACKTOP = sp;return ($220|0);
    }
    $45 = $2;
    $46 = (($45) + 2|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47&65535;
    switch ($48|0) {
    case 17:  {
     $179 = HEAP32[$origdata>>2]|0;
     $ma14 = $179;
     $180 = $data;
     $mb15 = $180;
     $n16 = 0;
     while(1) {
      $181 = $n16;
      $182 = HEAP32[$count>>2]|0;
      $183 = ($181>>>0)<($182>>>0);
      if (!($183)) {
       break;
      }
      $184 = $1;
      $185 = (($184) + 12|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = $186 & 128;
      $188 = ($187|0)!=(0);
      if ($188) {
       $189 = $ma14;
       _TIFFSwabLong8($189);
      }
      $190 = $ma14;
      $191 = $190;
      $192 = $191;
      $193 = HEAP32[$192>>2]|0;
      $194 = (($191) + 4)|0;
      $195 = $194;
      $196 = HEAP32[$195>>2]|0;
      $197 = (_TIFFReadDirEntryCheckRangeSbyteSlong8($193,$196)|0);
      $err = $197;
      $198 = $err;
      $199 = ($198|0)!=(0);
      if ($199) {
       label = 69;
       break;
      }
      $200 = $ma14;
      $201 = (($200) + 8|0);
      $ma14 = $201;
      $202 = $200;
      $203 = $202;
      $204 = HEAP32[$203>>2]|0;
      $205 = (($202) + 4)|0;
      $206 = $205;
      $207 = HEAP32[$206>>2]|0;
      $208 = $204&255;
      $209 = $mb15;
      $210 = (($209) + 1|0);
      $mb15 = $210;
      HEAP8[$209>>0] = $208;
      $211 = $n16;
      $212 = (($211) + 1)|0;
      $n16 = $212;
     }
     if ((label|0) == 69) {
     }
     break;
    }
    case 3:  {
     $49 = HEAP32[$origdata>>2]|0;
     $ma = $49;
     $50 = $data;
     $mb = $50;
     $n1 = 0;
     while(1) {
      $51 = $n1;
      $52 = HEAP32[$count>>2]|0;
      $53 = ($51>>>0)<($52>>>0);
      if (!($53)) {
       break;
      }
      $54 = $1;
      $55 = (($54) + 12|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = $56 & 128;
      $58 = ($57|0)!=(0);
      if ($58) {
       $59 = $ma;
       _TIFFSwabShort($59);
      }
      $60 = $ma;
      $61 = HEAP16[$60>>1]|0;
      $62 = (_TIFFReadDirEntryCheckRangeSbyteShort($61)|0);
      $err = $62;
      $63 = $err;
      $64 = ($63|0)!=(0);
      if ($64) {
       label = 24;
       break;
      }
      $65 = $ma;
      $66 = (($65) + 2|0);
      $ma = $66;
      $67 = HEAP16[$65>>1]|0;
      $68 = $67&255;
      $69 = $mb;
      $70 = (($69) + 1|0);
      $mb = $70;
      HEAP8[$69>>0] = $68;
      $71 = $n1;
      $72 = (($71) + 1)|0;
      $n1 = $72;
     }
     if ((label|0) == 24) {
     }
     break;
    }
    case 8:  {
     $73 = HEAP32[$origdata>>2]|0;
     $ma2 = $73;
     $74 = $data;
     $mb3 = $74;
     $n4 = 0;
     while(1) {
      $75 = $n4;
      $76 = HEAP32[$count>>2]|0;
      $77 = ($75>>>0)<($76>>>0);
      if (!($77)) {
       break;
      }
      $78 = $1;
      $79 = (($78) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = $80 & 128;
      $82 = ($81|0)!=(0);
      if ($82) {
       $83 = $ma2;
       _TIFFSwabShort($83);
      }
      $84 = $ma2;
      $85 = HEAP16[$84>>1]|0;
      $86 = (_TIFFReadDirEntryCheckRangeSbyteSshort($85)|0);
      $err = $86;
      $87 = $err;
      $88 = ($87|0)!=(0);
      if ($88) {
       label = 33;
       break;
      }
      $89 = $ma2;
      $90 = (($89) + 2|0);
      $ma2 = $90;
      $91 = HEAP16[$89>>1]|0;
      $92 = $91&255;
      $93 = $mb3;
      $94 = (($93) + 1|0);
      $mb3 = $94;
      HEAP8[$93>>0] = $92;
      $95 = $n4;
      $96 = (($95) + 1)|0;
      $n4 = $96;
     }
     if ((label|0) == 33) {
     }
     break;
    }
    case 16:  {
     $145 = HEAP32[$origdata>>2]|0;
     $ma11 = $145;
     $146 = $data;
     $mb12 = $146;
     $n13 = 0;
     while(1) {
      $147 = $n13;
      $148 = HEAP32[$count>>2]|0;
      $149 = ($147>>>0)<($148>>>0);
      if (!($149)) {
       break;
      }
      $150 = $1;
      $151 = (($150) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = $152 & 128;
      $154 = ($153|0)!=(0);
      if ($154) {
       $155 = $ma11;
       _TIFFSwabLong8($155);
      }
      $156 = $ma11;
      $157 = $156;
      $158 = $157;
      $159 = HEAP32[$158>>2]|0;
      $160 = (($157) + 4)|0;
      $161 = $160;
      $162 = HEAP32[$161>>2]|0;
      $163 = (_TIFFReadDirEntryCheckRangeSbyteLong8($159,$162)|0);
      $err = $163;
      $164 = $err;
      $165 = ($164|0)!=(0);
      if ($165) {
       label = 60;
       break;
      }
      $166 = $ma11;
      $167 = (($166) + 8|0);
      $ma11 = $167;
      $168 = $166;
      $169 = $168;
      $170 = HEAP32[$169>>2]|0;
      $171 = (($168) + 4)|0;
      $172 = $171;
      $173 = HEAP32[$172>>2]|0;
      $174 = $170&255;
      $175 = $mb12;
      $176 = (($175) + 1|0);
      $mb12 = $176;
      HEAP8[$175>>0] = $174;
      $177 = $n13;
      $178 = (($177) + 1)|0;
      $n13 = $178;
     }
     if ((label|0) == 60) {
     }
     break;
    }
    case 9:  {
     $121 = HEAP32[$origdata>>2]|0;
     $ma8 = $121;
     $122 = $data;
     $mb9 = $122;
     $n10 = 0;
     while(1) {
      $123 = $n10;
      $124 = HEAP32[$count>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if (!($125)) {
       break;
      }
      $126 = $1;
      $127 = (($126) + 12|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = $128 & 128;
      $130 = ($129|0)!=(0);
      if ($130) {
       $131 = $ma8;
       _TIFFSwabLong($131);
      }
      $132 = $ma8;
      $133 = HEAP32[$132>>2]|0;
      $134 = (_TIFFReadDirEntryCheckRangeSbyteSlong($133)|0);
      $err = $134;
      $135 = $err;
      $136 = ($135|0)!=(0);
      if ($136) {
       label = 51;
       break;
      }
      $137 = $ma8;
      $138 = (($137) + 4|0);
      $ma8 = $138;
      $139 = HEAP32[$137>>2]|0;
      $140 = $139&255;
      $141 = $mb9;
      $142 = (($141) + 1|0);
      $mb9 = $142;
      HEAP8[$141>>0] = $140;
      $143 = $n10;
      $144 = (($143) + 1)|0;
      $n10 = $144;
     }
     if ((label|0) == 51) {
     }
     break;
    }
    case 4:  {
     $97 = HEAP32[$origdata>>2]|0;
     $ma5 = $97;
     $98 = $data;
     $mb6 = $98;
     $n7 = 0;
     while(1) {
      $99 = $n7;
      $100 = HEAP32[$count>>2]|0;
      $101 = ($99>>>0)<($100>>>0);
      if (!($101)) {
       break;
      }
      $102 = $1;
      $103 = (($102) + 12|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = $104 & 128;
      $106 = ($105|0)!=(0);
      if ($106) {
       $107 = $ma5;
       _TIFFSwabLong($107);
      }
      $108 = $ma5;
      $109 = HEAP32[$108>>2]|0;
      $110 = (_TIFFReadDirEntryCheckRangeSbyteLong($109)|0);
      $err = $110;
      $111 = $err;
      $112 = ($111|0)!=(0);
      if ($112) {
       label = 42;
       break;
      }
      $113 = $ma5;
      $114 = (($113) + 4|0);
      $ma5 = $114;
      $115 = HEAP32[$113>>2]|0;
      $116 = $115&255;
      $117 = $mb6;
      $118 = (($117) + 1|0);
      $mb6 = $118;
      HEAP8[$117>>0] = $116;
      $119 = $n7;
      $120 = (($119) + 1)|0;
      $n7 = $120;
     }
     if ((label|0) == 42) {
     }
     break;
    }
    default: {
    }
    }
    $213 = HEAP32[$origdata>>2]|0;
    __TIFFfree($213);
    $214 = $err;
    $215 = ($214|0)!=(0);
    if ($215) {
     $216 = $data;
     __TIFFfree($216);
     $217 = $err;
     $0 = $217;
     $220 = $0;
     STACKTOP = sp;return ($220|0);
    } else {
     $218 = $data;
     $219 = $3;
     HEAP32[$219>>2] = $218;
     $0 = 0;
     $220 = $0;
     STACKTOP = sp;return ($220|0);
    }
   }
  }
 }
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $err;
 $0 = $16;
 $220 = $0;
 STACKTOP = sp;return ($220|0);
}
function _TIFFReadDirEntrySshortArray($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $data = 0, $err = 0, $m = 0, $ma = 0, $ma11 = 0;
 var $ma14 = 0, $ma2 = 0, $ma5 = 0, $ma8 = 0, $mb = 0, $mb12 = 0, $mb15 = 0, $mb3 = 0, $mb6 = 0, $mb9 = 0, $n = 0, $n1 = 0, $n10 = 0, $n13 = 0, $n16 = 0, $n4 = 0, $n7 = 0, $origdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 8|0;
 $origdata = sp + 12|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 switch ($7|0) {
 case 17: case 16: case 9: case 4: case 8: case 3: case 6: case 1:  {
  break;
 }
 default: {
  $0 = 2;
  $213 = $0;
  STACKTOP = sp;return ($213|0);
 }
 }
 $8 = $1;
 $9 = $2;
 $10 = (_TIFFReadDirEntryArray($8,$9,$count,2,$origdata)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = HEAP32[$origdata>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $17 = $2;
   $18 = (($17) + 2|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   if ((($20|0) == 8)) {
    $44 = HEAP32[$origdata>>2]|0;
    $45 = $3;
    HEAP32[$45>>2] = $44;
    $46 = $1;
    $47 = (($46) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $48 & 128;
    $50 = ($49|0)!=(0);
    if ($50) {
     $51 = $3;
     $52 = HEAP32[$51>>2]|0;
     $53 = HEAP32[$count>>2]|0;
     _TIFFSwabArrayOfShort($52,$53);
    }
    $0 = 0;
    $213 = $0;
    STACKTOP = sp;return ($213|0);
   } else if ((($20|0) == 3)) {
    $21 = HEAP32[$origdata>>2]|0;
    $m = $21;
    $n = 0;
    while(1) {
     $22 = $n;
     $23 = HEAP32[$count>>2]|0;
     $24 = ($22>>>0)<($23>>>0);
     if (!($24)) {
      label = 16;
      break;
     }
     $25 = $1;
     $26 = (($25) + 12|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $27 & 128;
     $29 = ($28|0)!=(0);
     if ($29) {
      $30 = $m;
      _TIFFSwabShort($30);
     }
     $31 = $m;
     $32 = HEAP16[$31>>1]|0;
     $33 = (_TIFFReadDirEntryCheckRangeSshortShort($32)|0);
     $err = $33;
     $34 = $err;
     $35 = ($34|0)!=(0);
     if ($35) {
      label = 13;
      break;
     }
     $38 = $m;
     $39 = (($38) + 2|0);
     $m = $39;
     $40 = $n;
     $41 = (($40) + 1)|0;
     $n = $41;
    }
    if ((label|0) == 13) {
     $36 = HEAP32[$origdata>>2]|0;
     __TIFFfree($36);
     $37 = $err;
     $0 = $37;
     $213 = $0;
     STACKTOP = sp;return ($213|0);
    }
    else if ((label|0) == 16) {
     $42 = HEAP32[$origdata>>2]|0;
     $43 = $3;
     HEAP32[$43>>2] = $42;
     $0 = 0;
     $213 = $0;
     STACKTOP = sp;return ($213|0);
    }
   } else {
    $54 = HEAP32[$count>>2]|0;
    $55 = $54<<1;
    $56 = (__TIFFmalloc($55)|0);
    $data = $56;
    $57 = $data;
    $58 = ($57|0)==(0|0);
    if ($58) {
     $59 = HEAP32[$origdata>>2]|0;
     __TIFFfree($59);
     $0 = 7;
     $213 = $0;
     STACKTOP = sp;return ($213|0);
    }
    $60 = $2;
    $61 = (($60) + 2|0);
    $62 = HEAP16[$61>>1]|0;
    $63 = $62&65535;
    switch ($63|0) {
    case 6:  {
     $77 = HEAP32[$origdata>>2]|0;
     $ma2 = $77;
     $78 = $data;
     $mb3 = $78;
     $n4 = 0;
     while(1) {
      $79 = $n4;
      $80 = HEAP32[$count>>2]|0;
      $81 = ($79>>>0)<($80>>>0);
      if (!($81)) {
       break;
      }
      $82 = $ma2;
      $83 = (($82) + 1|0);
      $ma2 = $83;
      $84 = HEAP8[$82>>0]|0;
      $85 = $84 << 24 >> 24;
      $86 = $mb3;
      $87 = (($86) + 2|0);
      $mb3 = $87;
      HEAP16[$86>>1] = $85;
      $88 = $n4;
      $89 = (($88) + 1)|0;
      $n4 = $89;
     }
     break;
    }
    case 17:  {
     $172 = HEAP32[$origdata>>2]|0;
     $ma14 = $172;
     $173 = $data;
     $mb15 = $173;
     $n16 = 0;
     while(1) {
      $174 = $n16;
      $175 = HEAP32[$count>>2]|0;
      $176 = ($174>>>0)<($175>>>0);
      if (!($176)) {
       break;
      }
      $177 = $1;
      $178 = (($177) + 12|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = $179 & 128;
      $181 = ($180|0)!=(0);
      if ($181) {
       $182 = $ma14;
       _TIFFSwabLong8($182);
      }
      $183 = $ma14;
      $184 = $183;
      $185 = $184;
      $186 = HEAP32[$185>>2]|0;
      $187 = (($184) + 4)|0;
      $188 = $187;
      $189 = HEAP32[$188>>2]|0;
      $190 = (_TIFFReadDirEntryCheckRangeSshortSlong8($186,$189)|0);
      $err = $190;
      $191 = $err;
      $192 = ($191|0)!=(0);
      if ($192) {
       label = 65;
       break;
      }
      $193 = $ma14;
      $194 = (($193) + 8|0);
      $ma14 = $194;
      $195 = $193;
      $196 = $195;
      $197 = HEAP32[$196>>2]|0;
      $198 = (($195) + 4)|0;
      $199 = $198;
      $200 = HEAP32[$199>>2]|0;
      $201 = $197&65535;
      $202 = $mb15;
      $203 = (($202) + 2|0);
      $mb15 = $203;
      HEAP16[$202>>1] = $201;
      $204 = $n16;
      $205 = (($204) + 1)|0;
      $n16 = $205;
     }
     if ((label|0) == 65) {
     }
     break;
    }
    case 9:  {
     $114 = HEAP32[$origdata>>2]|0;
     $ma8 = $114;
     $115 = $data;
     $mb9 = $115;
     $n10 = 0;
     while(1) {
      $116 = $n10;
      $117 = HEAP32[$count>>2]|0;
      $118 = ($116>>>0)<($117>>>0);
      if (!($118)) {
       break;
      }
      $119 = $1;
      $120 = (($119) + 12|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $121 & 128;
      $123 = ($122|0)!=(0);
      if ($123) {
       $124 = $ma8;
       _TIFFSwabLong($124);
      }
      $125 = $ma8;
      $126 = HEAP32[$125>>2]|0;
      $127 = (_TIFFReadDirEntryCheckRangeSshortSlong($126)|0);
      $err = $127;
      $128 = $err;
      $129 = ($128|0)!=(0);
      if ($129) {
       label = 47;
       break;
      }
      $130 = $ma8;
      $131 = (($130) + 4|0);
      $ma8 = $131;
      $132 = HEAP32[$130>>2]|0;
      $133 = $132&65535;
      $134 = $mb9;
      $135 = (($134) + 2|0);
      $mb9 = $135;
      HEAP16[$134>>1] = $133;
      $136 = $n10;
      $137 = (($136) + 1)|0;
      $n10 = $137;
     }
     if ((label|0) == 47) {
     }
     break;
    }
    case 16:  {
     $138 = HEAP32[$origdata>>2]|0;
     $ma11 = $138;
     $139 = $data;
     $mb12 = $139;
     $n13 = 0;
     while(1) {
      $140 = $n13;
      $141 = HEAP32[$count>>2]|0;
      $142 = ($140>>>0)<($141>>>0);
      if (!($142)) {
       break;
      }
      $143 = $1;
      $144 = (($143) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $145 & 128;
      $147 = ($146|0)!=(0);
      if ($147) {
       $148 = $ma11;
       _TIFFSwabLong8($148);
      }
      $149 = $ma11;
      $150 = $149;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = (($150) + 4)|0;
      $154 = $153;
      $155 = HEAP32[$154>>2]|0;
      $156 = (_TIFFReadDirEntryCheckRangeSshortLong8($152,$155)|0);
      $err = $156;
      $157 = $err;
      $158 = ($157|0)!=(0);
      if ($158) {
       label = 56;
       break;
      }
      $159 = $ma11;
      $160 = (($159) + 8|0);
      $ma11 = $160;
      $161 = $159;
      $162 = $161;
      $163 = HEAP32[$162>>2]|0;
      $164 = (($161) + 4)|0;
      $165 = $164;
      $166 = HEAP32[$165>>2]|0;
      $167 = $163&65535;
      $168 = $mb12;
      $169 = (($168) + 2|0);
      $mb12 = $169;
      HEAP16[$168>>1] = $167;
      $170 = $n13;
      $171 = (($170) + 1)|0;
      $n13 = $171;
     }
     if ((label|0) == 56) {
     }
     break;
    }
    case 4:  {
     $90 = HEAP32[$origdata>>2]|0;
     $ma5 = $90;
     $91 = $data;
     $mb6 = $91;
     $n7 = 0;
     while(1) {
      $92 = $n7;
      $93 = HEAP32[$count>>2]|0;
      $94 = ($92>>>0)<($93>>>0);
      if (!($94)) {
       break;
      }
      $95 = $1;
      $96 = (($95) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = $97 & 128;
      $99 = ($98|0)!=(0);
      if ($99) {
       $100 = $ma5;
       _TIFFSwabLong($100);
      }
      $101 = $ma5;
      $102 = HEAP32[$101>>2]|0;
      $103 = (_TIFFReadDirEntryCheckRangeSshortLong($102)|0);
      $err = $103;
      $104 = $err;
      $105 = ($104|0)!=(0);
      if ($105) {
       label = 38;
       break;
      }
      $106 = $ma5;
      $107 = (($106) + 4|0);
      $ma5 = $107;
      $108 = HEAP32[$106>>2]|0;
      $109 = $108&65535;
      $110 = $mb6;
      $111 = (($110) + 2|0);
      $mb6 = $111;
      HEAP16[$110>>1] = $109;
      $112 = $n7;
      $113 = (($112) + 1)|0;
      $n7 = $113;
     }
     if ((label|0) == 38) {
     }
     break;
    }
    case 1:  {
     $64 = HEAP32[$origdata>>2]|0;
     $ma = $64;
     $65 = $data;
     $mb = $65;
     $n1 = 0;
     while(1) {
      $66 = $n1;
      $67 = HEAP32[$count>>2]|0;
      $68 = ($66>>>0)<($67>>>0);
      if (!($68)) {
       break;
      }
      $69 = $ma;
      $70 = (($69) + 1|0);
      $ma = $70;
      $71 = HEAP8[$69>>0]|0;
      $72 = $71&255;
      $73 = $mb;
      $74 = (($73) + 2|0);
      $mb = $74;
      HEAP16[$73>>1] = $72;
      $75 = $n1;
      $76 = (($75) + 1)|0;
      $n1 = $76;
     }
     break;
    }
    default: {
    }
    }
    $206 = HEAP32[$origdata>>2]|0;
    __TIFFfree($206);
    $207 = $err;
    $208 = ($207|0)!=(0);
    if ($208) {
     $209 = $data;
     __TIFFfree($209);
     $210 = $err;
     $0 = $210;
     $213 = $0;
     STACKTOP = sp;return ($213|0);
    } else {
     $211 = $data;
     $212 = $3;
     HEAP32[$212>>2] = $211;
     $0 = 0;
     $213 = $0;
     STACKTOP = sp;return ($213|0);
    }
   }
  }
 }
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $err;
 $0 = $16;
 $213 = $0;
 STACKTOP = sp;return ($213|0);
}
function _TIFFReadDirEntrySlongArray($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $count = 0, $data = 0, $err = 0, $m = 0, $ma = 0, $ma11 = 0, $ma14 = 0, $ma2 = 0, $ma5 = 0, $ma8 = 0, $mb = 0, $mb12 = 0, $mb15 = 0, $mb3 = 0, $mb6 = 0, $mb9 = 0, $n = 0, $n1 = 0;
 var $n10 = 0, $n13 = 0, $n16 = 0, $n4 = 0, $n7 = 0, $origdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 8|0;
 $origdata = sp + 12|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 switch ($7|0) {
 case 17: case 16: case 9: case 4: case 8: case 3: case 6: case 1:  {
  break;
 }
 default: {
  $0 = 2;
  $201 = $0;
  STACKTOP = sp;return ($201|0);
 }
 }
 $8 = $1;
 $9 = $2;
 $10 = (_TIFFReadDirEntryArray($8,$9,$count,4,$origdata)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = HEAP32[$origdata>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $17 = $2;
   $18 = (($17) + 2|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   if ((($20|0) == 4)) {
    $21 = HEAP32[$origdata>>2]|0;
    $m = $21;
    $n = 0;
    while(1) {
     $22 = $n;
     $23 = HEAP32[$count>>2]|0;
     $24 = ($22>>>0)<($23>>>0);
     if (!($24)) {
      label = 16;
      break;
     }
     $25 = $1;
     $26 = (($25) + 12|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $27 & 128;
     $29 = ($28|0)!=(0);
     if ($29) {
      $30 = $m;
      _TIFFSwabLong($30);
     }
     $31 = $m;
     $32 = HEAP32[$31>>2]|0;
     $33 = (_TIFFReadDirEntryCheckRangeSlongLong($32)|0);
     $err = $33;
     $34 = $err;
     $35 = ($34|0)!=(0);
     if ($35) {
      label = 13;
      break;
     }
     $38 = $m;
     $39 = (($38) + 4|0);
     $m = $39;
     $40 = $n;
     $41 = (($40) + 1)|0;
     $n = $41;
    }
    if ((label|0) == 13) {
     $36 = HEAP32[$origdata>>2]|0;
     __TIFFfree($36);
     $37 = $err;
     $0 = $37;
     $201 = $0;
     STACKTOP = sp;return ($201|0);
    }
    else if ((label|0) == 16) {
     $42 = HEAP32[$origdata>>2]|0;
     $43 = $3;
     HEAP32[$43>>2] = $42;
     $0 = 0;
     $201 = $0;
     STACKTOP = sp;return ($201|0);
    }
   } else if ((($20|0) == 9)) {
    $44 = HEAP32[$origdata>>2]|0;
    $45 = $3;
    HEAP32[$45>>2] = $44;
    $46 = $1;
    $47 = (($46) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $48 & 128;
    $50 = ($49|0)!=(0);
    if ($50) {
     $51 = $3;
     $52 = HEAP32[$51>>2]|0;
     $53 = HEAP32[$count>>2]|0;
     _TIFFSwabArrayOfLong($52,$53);
    }
    $0 = 0;
    $201 = $0;
    STACKTOP = sp;return ($201|0);
   } else {
    $54 = HEAP32[$count>>2]|0;
    $55 = $54<<2;
    $56 = (__TIFFmalloc($55)|0);
    $data = $56;
    $57 = $data;
    $58 = ($57|0)==(0|0);
    if ($58) {
     $59 = HEAP32[$origdata>>2]|0;
     __TIFFfree($59);
     $0 = 7;
     $201 = $0;
     STACKTOP = sp;return ($201|0);
    }
    $60 = $2;
    $61 = (($60) + 2|0);
    $62 = HEAP16[$61>>1]|0;
    $63 = $62&65535;
    switch ($63|0) {
    case 8:  {
     $109 = HEAP32[$origdata>>2]|0;
     $ma8 = $109;
     $110 = $data;
     $mb9 = $110;
     $n10 = 0;
     while(1) {
      $111 = $n10;
      $112 = HEAP32[$count>>2]|0;
      $113 = ($111>>>0)<($112>>>0);
      if (!($113)) {
       break;
      }
      $114 = $1;
      $115 = (($114) + 12|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = $116 & 128;
      $118 = ($117|0)!=(0);
      if ($118) {
       $119 = $ma8;
       _TIFFSwabShort($119);
      }
      $120 = $ma8;
      $121 = (($120) + 2|0);
      $ma8 = $121;
      $122 = HEAP16[$120>>1]|0;
      $123 = $122 << 16 >> 16;
      $124 = $mb9;
      $125 = (($124) + 4|0);
      $mb9 = $125;
      HEAP32[$124>>2] = $123;
      $126 = $n10;
      $127 = (($126) + 1)|0;
      $n10 = $127;
     }
     break;
    }
    case 16:  {
     $128 = HEAP32[$origdata>>2]|0;
     $ma11 = $128;
     $129 = $data;
     $mb12 = $129;
     $n13 = 0;
     while(1) {
      $130 = $n13;
      $131 = HEAP32[$count>>2]|0;
      $132 = ($130>>>0)<($131>>>0);
      if (!($132)) {
       break;
      }
      $133 = $1;
      $134 = (($133) + 12|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = $135 & 128;
      $137 = ($136|0)!=(0);
      if ($137) {
       $138 = $ma11;
       _TIFFSwabLong8($138);
      }
      $139 = $ma11;
      $140 = $139;
      $141 = $140;
      $142 = HEAP32[$141>>2]|0;
      $143 = (($140) + 4)|0;
      $144 = $143;
      $145 = HEAP32[$144>>2]|0;
      $146 = (_TIFFReadDirEntryCheckRangeSlongLong8($142,$145)|0);
      $err = $146;
      $147 = $err;
      $148 = ($147|0)!=(0);
      if ($148) {
       label = 52;
       break;
      }
      $149 = $ma11;
      $150 = (($149) + 8|0);
      $ma11 = $150;
      $151 = $149;
      $152 = $151;
      $153 = HEAP32[$152>>2]|0;
      $154 = (($151) + 4)|0;
      $155 = $154;
      $156 = HEAP32[$155>>2]|0;
      $157 = $mb12;
      $158 = (($157) + 4|0);
      $mb12 = $158;
      HEAP32[$157>>2] = $153;
      $159 = $n13;
      $160 = (($159) + 1)|0;
      $n13 = $160;
     }
     if ((label|0) == 52) {
     }
     break;
    }
    case 1:  {
     $64 = HEAP32[$origdata>>2]|0;
     $ma = $64;
     $65 = $data;
     $mb = $65;
     $n1 = 0;
     while(1) {
      $66 = $n1;
      $67 = HEAP32[$count>>2]|0;
      $68 = ($66>>>0)<($67>>>0);
      if (!($68)) {
       break;
      }
      $69 = $ma;
      $70 = (($69) + 1|0);
      $ma = $70;
      $71 = HEAP8[$69>>0]|0;
      $72 = $71&255;
      $73 = $mb;
      $74 = (($73) + 4|0);
      $mb = $74;
      HEAP32[$73>>2] = $72;
      $75 = $n1;
      $76 = (($75) + 1)|0;
      $n1 = $76;
     }
     break;
    }
    case 6:  {
     $77 = HEAP32[$origdata>>2]|0;
     $ma2 = $77;
     $78 = $data;
     $mb3 = $78;
     $n4 = 0;
     while(1) {
      $79 = $n4;
      $80 = HEAP32[$count>>2]|0;
      $81 = ($79>>>0)<($80>>>0);
      if (!($81)) {
       break;
      }
      $82 = $ma2;
      $83 = (($82) + 1|0);
      $ma2 = $83;
      $84 = HEAP8[$82>>0]|0;
      $85 = $84 << 24 >> 24;
      $86 = $mb3;
      $87 = (($86) + 4|0);
      $mb3 = $87;
      HEAP32[$86>>2] = $85;
      $88 = $n4;
      $89 = (($88) + 1)|0;
      $n4 = $89;
     }
     break;
    }
    case 17:  {
     $161 = HEAP32[$origdata>>2]|0;
     $ma14 = $161;
     $162 = $data;
     $mb15 = $162;
     $n16 = 0;
     while(1) {
      $163 = $n16;
      $164 = HEAP32[$count>>2]|0;
      $165 = ($163>>>0)<($164>>>0);
      if (!($165)) {
       break;
      }
      $166 = $1;
      $167 = (($166) + 12|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = $168 & 128;
      $170 = ($169|0)!=(0);
      if ($170) {
       $171 = $ma14;
       _TIFFSwabLong8($171);
      }
      $172 = $ma14;
      $173 = $172;
      $174 = $173;
      $175 = HEAP32[$174>>2]|0;
      $176 = (($173) + 4)|0;
      $177 = $176;
      $178 = HEAP32[$177>>2]|0;
      $179 = (_TIFFReadDirEntryCheckRangeSlongSlong8($175,$178)|0);
      $err = $179;
      $180 = $err;
      $181 = ($180|0)!=(0);
      if ($181) {
       label = 61;
       break;
      }
      $182 = $ma14;
      $183 = (($182) + 8|0);
      $ma14 = $183;
      $184 = $182;
      $185 = $184;
      $186 = HEAP32[$185>>2]|0;
      $187 = (($184) + 4)|0;
      $188 = $187;
      $189 = HEAP32[$188>>2]|0;
      $190 = $mb15;
      $191 = (($190) + 4|0);
      $mb15 = $191;
      HEAP32[$190>>2] = $186;
      $192 = $n16;
      $193 = (($192) + 1)|0;
      $n16 = $193;
     }
     if ((label|0) == 61) {
     }
     break;
    }
    case 3:  {
     $90 = HEAP32[$origdata>>2]|0;
     $ma5 = $90;
     $91 = $data;
     $mb6 = $91;
     $n7 = 0;
     while(1) {
      $92 = $n7;
      $93 = HEAP32[$count>>2]|0;
      $94 = ($92>>>0)<($93>>>0);
      if (!($94)) {
       break;
      }
      $95 = $1;
      $96 = (($95) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = $97 & 128;
      $99 = ($98|0)!=(0);
      if ($99) {
       $100 = $ma5;
       _TIFFSwabShort($100);
      }
      $101 = $ma5;
      $102 = (($101) + 2|0);
      $ma5 = $102;
      $103 = HEAP16[$101>>1]|0;
      $104 = $103&65535;
      $105 = $mb6;
      $106 = (($105) + 4|0);
      $mb6 = $106;
      HEAP32[$105>>2] = $104;
      $107 = $n7;
      $108 = (($107) + 1)|0;
      $n7 = $108;
     }
     break;
    }
    default: {
    }
    }
    $194 = HEAP32[$origdata>>2]|0;
    __TIFFfree($194);
    $195 = $err;
    $196 = ($195|0)!=(0);
    if ($196) {
     $197 = $data;
     __TIFFfree($197);
     $198 = $err;
     $0 = $198;
     $201 = $0;
     STACKTOP = sp;return ($201|0);
    } else {
     $199 = $data;
     $200 = $3;
     HEAP32[$200>>2] = $199;
     $0 = 0;
     $201 = $0;
     STACKTOP = sp;return ($201|0);
    }
   }
  }
 }
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $err;
 $0 = $16;
 $201 = $0;
 STACKTOP = sp;return ($201|0);
}
function _TIFFReadDirEntrySlong8Array($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $data = 0, $err = 0, $m = 0, $ma = 0, $ma11 = 0, $ma14 = 0, $ma2 = 0, $ma5 = 0, $ma8 = 0, $mb = 0, $mb12 = 0, $mb15 = 0;
 var $mb3 = 0, $mb6 = 0, $mb9 = 0, $n = 0, $n1 = 0, $n10 = 0, $n13 = 0, $n16 = 0, $n4 = 0, $n7 = 0, $origdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 8|0;
 $origdata = sp + 12|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $2;
 $5 = (($4) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 switch ($7|0) {
 case 17: case 16: case 9: case 4: case 8: case 3: case 6: case 1:  {
  break;
 }
 default: {
  $0 = 2;
  $206 = $0;
  STACKTOP = sp;return ($206|0);
 }
 }
 $8 = $1;
 $9 = $2;
 $10 = (_TIFFReadDirEntryArray($8,$9,$count,8,$origdata)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = HEAP32[$origdata>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $17 = $2;
   $18 = (($17) + 2|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   if ((($20|0) == 16)) {
    $21 = HEAP32[$origdata>>2]|0;
    $m = $21;
    $n = 0;
    while(1) {
     $22 = $n;
     $23 = HEAP32[$count>>2]|0;
     $24 = ($22>>>0)<($23>>>0);
     if (!($24)) {
      label = 16;
      break;
     }
     $25 = $1;
     $26 = (($25) + 12|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $27 & 128;
     $29 = ($28|0)!=(0);
     if ($29) {
      $30 = $m;
      _TIFFSwabLong8($30);
     }
     $31 = $m;
     $32 = $31;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = (($32) + 4)|0;
     $36 = $35;
     $37 = HEAP32[$36>>2]|0;
     $38 = (_TIFFReadDirEntryCheckRangeSlong8Long8($34,$37)|0);
     $err = $38;
     $39 = $err;
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 13;
      break;
     }
     $43 = $m;
     $44 = (($43) + 8|0);
     $m = $44;
     $45 = $n;
     $46 = (($45) + 1)|0;
     $n = $46;
    }
    if ((label|0) == 13) {
     $41 = HEAP32[$origdata>>2]|0;
     __TIFFfree($41);
     $42 = $err;
     $0 = $42;
     $206 = $0;
     STACKTOP = sp;return ($206|0);
    }
    else if ((label|0) == 16) {
     $47 = HEAP32[$origdata>>2]|0;
     $48 = $3;
     HEAP32[$48>>2] = $47;
     $0 = 0;
     $206 = $0;
     STACKTOP = sp;return ($206|0);
    }
   } else if ((($20|0) == 17)) {
    $49 = HEAP32[$origdata>>2]|0;
    $50 = $3;
    HEAP32[$50>>2] = $49;
    $51 = $1;
    $52 = (($51) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $53 & 128;
    $55 = ($54|0)!=(0);
    if ($55) {
     $56 = $3;
     $57 = HEAP32[$56>>2]|0;
     $58 = HEAP32[$count>>2]|0;
     _TIFFSwabArrayOfLong8($57,$58);
    }
    $0 = 0;
    $206 = $0;
    STACKTOP = sp;return ($206|0);
   } else {
    $59 = HEAP32[$count>>2]|0;
    $60 = $59<<3;
    $61 = (__TIFFmalloc($60)|0);
    $data = $61;
    $62 = $data;
    $63 = ($62|0)==(0|0);
    if ($63) {
     $64 = HEAP32[$origdata>>2]|0;
     __TIFFfree($64);
     $0 = 7;
     $206 = $0;
     STACKTOP = sp;return ($206|0);
    }
    $65 = $2;
    $66 = (($65) + 2|0);
    $67 = HEAP16[$66>>1]|0;
    $68 = $67&65535;
    switch ($68|0) {
    case 4:  {
     $153 = HEAP32[$origdata>>2]|0;
     $ma11 = $153;
     $154 = $data;
     $mb12 = $154;
     $n13 = 0;
     while(1) {
      $155 = $n13;
      $156 = HEAP32[$count>>2]|0;
      $157 = ($155>>>0)<($156>>>0);
      if (!($157)) {
       break;
      }
      $158 = $1;
      $159 = (($158) + 12|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = $160 & 128;
      $162 = ($161|0)!=(0);
      if ($162) {
       $163 = $ma11;
       _TIFFSwabLong($163);
      }
      $164 = $ma11;
      $165 = (($164) + 4|0);
      $ma11 = $165;
      $166 = HEAP32[$164>>2]|0;
      $167 = $mb12;
      $168 = (($167) + 8|0);
      $mb12 = $168;
      $169 = $167;
      $170 = $169;
      HEAP32[$170>>2] = $166;
      $171 = (($169) + 4)|0;
      $172 = $171;
      HEAP32[$172>>2] = 0;
      $173 = $n13;
      $174 = (($173) + 1)|0;
      $n13 = $174;
     }
     break;
    }
    case 3:  {
     $105 = HEAP32[$origdata>>2]|0;
     $ma5 = $105;
     $106 = $data;
     $mb6 = $106;
     $n7 = 0;
     while(1) {
      $107 = $n7;
      $108 = HEAP32[$count>>2]|0;
      $109 = ($107>>>0)<($108>>>0);
      if (!($109)) {
       break;
      }
      $110 = $1;
      $111 = (($110) + 12|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = $112 & 128;
      $114 = ($113|0)!=(0);
      if ($114) {
       $115 = $ma5;
       _TIFFSwabShort($115);
      }
      $116 = $ma5;
      $117 = (($116) + 2|0);
      $ma5 = $117;
      $118 = HEAP16[$116>>1]|0;
      $119 = $118&65535;
      $120 = $mb6;
      $121 = (($120) + 8|0);
      $mb6 = $121;
      $122 = $120;
      $123 = $122;
      HEAP32[$123>>2] = $119;
      $124 = (($122) + 4)|0;
      $125 = $124;
      HEAP32[$125>>2] = 0;
      $126 = $n7;
      $127 = (($126) + 1)|0;
      $n7 = $127;
     }
     break;
    }
    case 6:  {
     $86 = HEAP32[$origdata>>2]|0;
     $ma2 = $86;
     $87 = $data;
     $mb3 = $87;
     $n4 = 0;
     while(1) {
      $88 = $n4;
      $89 = HEAP32[$count>>2]|0;
      $90 = ($88>>>0)<($89>>>0);
      if (!($90)) {
       break;
      }
      $91 = $ma2;
      $92 = (($91) + 1|0);
      $ma2 = $92;
      $93 = HEAP8[$91>>0]|0;
      $94 = $93 << 24 >> 24;
      $95 = ($94|0)<(0);
      $96 = $95 << 31 >> 31;
      $97 = $mb3;
      $98 = (($97) + 8|0);
      $mb3 = $98;
      $99 = $97;
      $100 = $99;
      HEAP32[$100>>2] = $94;
      $101 = (($99) + 4)|0;
      $102 = $101;
      HEAP32[$102>>2] = $96;
      $103 = $n4;
      $104 = (($103) + 1)|0;
      $n4 = $104;
     }
     break;
    }
    case 9:  {
     $175 = HEAP32[$origdata>>2]|0;
     $ma14 = $175;
     $176 = $data;
     $mb15 = $176;
     $n16 = 0;
     while(1) {
      $177 = $n16;
      $178 = HEAP32[$count>>2]|0;
      $179 = ($177>>>0)<($178>>>0);
      if (!($179)) {
       break;
      }
      $180 = $1;
      $181 = (($180) + 12|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $182 & 128;
      $184 = ($183|0)!=(0);
      if ($184) {
       $185 = $ma14;
       _TIFFSwabLong($185);
      }
      $186 = $ma14;
      $187 = (($186) + 4|0);
      $ma14 = $187;
      $188 = HEAP32[$186>>2]|0;
      $189 = ($188|0)<(0);
      $190 = $189 << 31 >> 31;
      $191 = $mb15;
      $192 = (($191) + 8|0);
      $mb15 = $192;
      $193 = $191;
      $194 = $193;
      HEAP32[$194>>2] = $188;
      $195 = (($193) + 4)|0;
      $196 = $195;
      HEAP32[$196>>2] = $190;
      $197 = $n16;
      $198 = (($197) + 1)|0;
      $n16 = $198;
     }
     break;
    }
    case 8:  {
     $128 = HEAP32[$origdata>>2]|0;
     $ma8 = $128;
     $129 = $data;
     $mb9 = $129;
     $n10 = 0;
     while(1) {
      $130 = $n10;
      $131 = HEAP32[$count>>2]|0;
      $132 = ($130>>>0)<($131>>>0);
      if (!($132)) {
       break;
      }
      $133 = $1;
      $134 = (($133) + 12|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = $135 & 128;
      $137 = ($136|0)!=(0);
      if ($137) {
       $138 = $ma8;
       _TIFFSwabShort($138);
      }
      $139 = $ma8;
      $140 = (($139) + 2|0);
      $ma8 = $140;
      $141 = HEAP16[$139>>1]|0;
      $142 = $141 << 16 >> 16;
      $143 = ($142|0)<(0);
      $144 = $143 << 31 >> 31;
      $145 = $mb9;
      $146 = (($145) + 8|0);
      $mb9 = $146;
      $147 = $145;
      $148 = $147;
      HEAP32[$148>>2] = $142;
      $149 = (($147) + 4)|0;
      $150 = $149;
      HEAP32[$150>>2] = $144;
      $151 = $n10;
      $152 = (($151) + 1)|0;
      $n10 = $152;
     }
     break;
    }
    case 1:  {
     $69 = HEAP32[$origdata>>2]|0;
     $ma = $69;
     $70 = $data;
     $mb = $70;
     $n1 = 0;
     while(1) {
      $71 = $n1;
      $72 = HEAP32[$count>>2]|0;
      $73 = ($71>>>0)<($72>>>0);
      if (!($73)) {
       break;
      }
      $74 = $ma;
      $75 = (($74) + 1|0);
      $ma = $75;
      $76 = HEAP8[$74>>0]|0;
      $77 = $76&255;
      $78 = $mb;
      $79 = (($78) + 8|0);
      $mb = $79;
      $80 = $78;
      $81 = $80;
      HEAP32[$81>>2] = $77;
      $82 = (($80) + 4)|0;
      $83 = $82;
      HEAP32[$83>>2] = 0;
      $84 = $n1;
      $85 = (($84) + 1)|0;
      $n1 = $85;
     }
     break;
    }
    default: {
    }
    }
    $199 = HEAP32[$origdata>>2]|0;
    __TIFFfree($199);
    $200 = $err;
    $201 = ($200|0)!=(0);
    if ($201) {
     $202 = $data;
     __TIFFfree($202);
     $203 = $err;
     $0 = $203;
     $206 = $0;
     STACKTOP = sp;return ($206|0);
    } else {
     $204 = $data;
     $205 = $3;
     HEAP32[$205>>2] = $204;
     $0 = 0;
     $206 = $0;
     STACKTOP = sp;return ($206|0);
    }
   }
  }
 }
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $err;
 $0 = $16;
 $206 = $0;
 STACKTOP = sp;return ($206|0);
}
function _TIFFReadDirEntryCheckedByte($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $direntry;
 $2 = $value;
 $3 = $1;
 $4 = (($3) + 16|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $2;
 HEAP8[$6>>0] = $5;
 STACKTOP = sp;return;
}
function _TIFFReadDirEntryCheckedSbyte($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $direntry;
 $2 = $value;
 $3 = $1;
 $4 = (($3) + 16|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $2;
 HEAP8[$6>>0] = $5;
 STACKTOP = sp;return;
}
function _TIFFReadDirEntryCheckRangeShortSbyte($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)<(0);
 if ($4) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TIFFReadDirEntryCheckedShort($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $direntry;
 $2 = $value;
 $3 = $1;
 $4 = (($3) + 16|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $2;
 HEAP16[$6>>1] = $5;
 $7 = $0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 128;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 _TIFFSwabShort($12);
 STACKTOP = sp;return;
}
function _TIFFReadDirEntryCheckedSshort($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $direntry;
 $2 = $value;
 $3 = $1;
 $4 = (($3) + 16|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $2;
 HEAP16[$6>>1] = $5;
 $7 = $0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 128;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 _TIFFSwabShort($12);
 STACKTOP = sp;return;
}
function _TIFFReadDirEntryCheckRangeShortSshort($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)<(0);
 if ($4) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TIFFReadDirEntryCheckedLong($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $direntry;
 $2 = $value;
 $3 = $1;
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 HEAP32[$6>>2] = $5;
 $7 = $0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 128;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 _TIFFSwabLong($12);
 STACKTOP = sp;return;
}
function _TIFFReadDirEntryCheckRangeShortLong($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2>>>0)>(65535);
 if ($3) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _TIFFReadDirEntryCheckedSlong($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $direntry;
 $2 = $value;
 $3 = $1;
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 HEAP32[$6>>2] = $5;
 $7 = $0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 128;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 _TIFFSwabLong($12);
 STACKTOP = sp;return;
}
function _TIFFReadDirEntryCheckRangeShortSlong($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = $1;
  $5 = ($4|0)>(65535);
  if ($5) {
   label = 3;
  } else {
   $0 = 0;
  }
 }
 if ((label|0) == 3) {
  $0 = 4;
 }
 $6 = $0;
 STACKTOP = sp;return ($6|0);
}
function _TIFFReadDirEntryCheckedLong8($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offset = sp;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 524288;
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $24 = $2;
   $25 = (($24) + 16|0);
   $26 = $25;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = $3;
   $33 = $32;
   $34 = $33;
   HEAP32[$34>>2] = $28;
   $35 = (($33) + 4)|0;
   $36 = $35;
   HEAP32[$36>>2] = $31;
  } else {
   $9 = $2;
   $10 = (($9) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$offset>>2] = $11;
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 128;
   $16 = ($15|0)!=(0);
   if ($16) {
    _TIFFSwabLong($offset);
   }
   $17 = $1;
   $18 = HEAP32[$offset>>2]|0;
   $19 = $3;
   $20 = (_TIFFReadDirEntryData($17,$18,0,8,$19)|0);
   $err = $20;
   $21 = $err;
   $22 = ($21|0)!=(0);
   if (!($22)) {
    break;
   }
   $23 = $err;
   $0 = $23;
   $43 = $0;
   STACKTOP = sp;return ($43|0);
  }
 } while(0);
 $37 = $1;
 $38 = (($37) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 & 128;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $3;
  _TIFFSwabLong8($42);
 }
 $0 = 0;
 $43 = $0;
 STACKTOP = sp;return ($43|0);
}
function _TIFFReadDirEntryCheckRangeShortLong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)>(0);
 $15 = ($10>>>0)>(65535);
 $16 = ($13|0)==(0);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if ($18) {
  $2 = 4;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 } else {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFReadDirEntryCheckedSlong8($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offset = sp;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 524288;
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $24 = $2;
   $25 = (($24) + 16|0);
   $26 = $25;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = $3;
   $33 = $32;
   $34 = $33;
   HEAP32[$34>>2] = $28;
   $35 = (($33) + 4)|0;
   $36 = $35;
   HEAP32[$36>>2] = $31;
  } else {
   $9 = $2;
   $10 = (($9) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$offset>>2] = $11;
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 128;
   $16 = ($15|0)!=(0);
   if ($16) {
    _TIFFSwabLong($offset);
   }
   $17 = $1;
   $18 = HEAP32[$offset>>2]|0;
   $19 = $3;
   $20 = (_TIFFReadDirEntryData($17,$18,0,8,$19)|0);
   $err = $20;
   $21 = $err;
   $22 = ($21|0)!=(0);
   if (!($22)) {
    break;
   }
   $23 = $err;
   $0 = $23;
   $43 = $0;
   STACKTOP = sp;return ($43|0);
  }
 } while(0);
 $37 = $1;
 $38 = (($37) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 & 128;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $3;
  _TIFFSwabLong8($42);
 }
 $0 = 0;
 $43 = $0;
 STACKTOP = sp;return ($43|0);
}
function _TIFFReadDirEntryCheckRangeShortSlong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<(0);
 if (!($14)) {
  $15 = $3;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)>(0);
  $22 = ($17>>>0)>(65535);
  $23 = ($20|0)==(0);
  $24 = $23 & $22;
  $25 = $21 | $24;
  if (!($25)) {
   $2 = 0;
   $26 = $2;
   STACKTOP = sp;return ($26|0);
  }
 }
 $2 = 4;
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _TIFFReadDirEntryArray($tif,$direntry,$count,$desttypesize,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $count = $count|0;
 $desttypesize = $desttypesize|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $datasize = 0, $err = 0, $err1 = 0, $offset = 0, $offset2 = 0, $typesize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offset = sp + 44|0;
 $offset2 = sp;
 $1 = $tif;
 $2 = $direntry;
 $3 = $count;
 $4 = $desttypesize;
 $5 = $value;
 $6 = $2;
 $7 = (($6) + 2|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = (_TIFFDataWidth($9)|0);
 $typesize = $10;
 $11 = $2;
 $12 = (($11) + 8|0);
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)==(0);
 $20 = ($18|0)==(0);
 $21 = $19 & $20;
 if (!($21)) {
  $22 = $typesize;
  $23 = ($22|0)==(0);
  if (!($23)) {
   $25 = $typesize;
   $26 = (2147483647 / ($25|0))&-1;
   $27 = ($26|0)<(0);
   $28 = $27 << 31 >> 31;
   $29 = $2;
   $30 = (($29) + 8|0);
   $31 = $30;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31) + 4)|0;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = ($28>>>0)<($36>>>0);
   $38 = ($26>>>0)<($33>>>0);
   $39 = ($28|0)==($36|0);
   $40 = $39 & $38;
   $41 = $37 | $40;
   if ($41) {
    $0 = 6;
    $146 = $0;
    STACKTOP = sp;return ($146|0);
   }
   $42 = $4;
   $43 = (2147483647 / ($42>>>0))&-1;
   $44 = $2;
   $45 = (($44) + 8|0);
   $46 = $45;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 4)|0;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $52 = (0)<($51>>>0);
   $53 = ($43>>>0)<($48>>>0);
   $54 = (0)==($51|0);
   $55 = $54 & $53;
   $56 = $52 | $55;
   if ($56) {
    $0 = 6;
    $146 = $0;
    STACKTOP = sp;return ($146|0);
   }
   $57 = $2;
   $58 = (($57) + 8|0);
   $59 = $58;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 4)|0;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = $3;
   HEAP32[$65>>2] = $61;
   $66 = $3;
   $67 = HEAP32[$66>>2]|0;
   $68 = $typesize;
   $69 = Math_imul($67, $68)|0;
   $datasize = $69;
   $70 = $datasize;
   $71 = ($70|0)>(0);
   if (!($71)) {
    ___assert_fail((13776|0),(12552|0),790,(13800|0));
    // unreachable;
   }
   $72 = $1;
   $73 = $3;
   $74 = HEAP32[$73>>2]|0;
   $75 = $typesize;
   $76 = (__TIFFCheckMalloc($72,$74,$75,13824)|0);
   $data = $76;
   $77 = $data;
   $78 = ($77|0)==(0|0);
   if ($78) {
    $0 = 7;
    $146 = $0;
    STACKTOP = sp;return ($146|0);
   }
   $79 = $1;
   $80 = (($79) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $81 & 524288;
   $83 = ($82|0)!=(0);
   if ($83) {
    $107 = $datasize;
    $108 = ($107>>>0)<=(8);
    do {
     if ($108) {
      $109 = $data;
      $110 = $2;
      $111 = (($110) + 16|0);
      $112 = $datasize;
      __TIFFmemcpy($109,$111,$112);
     } else {
      $113 = $2;
      $114 = (($113) + 16|0);
      $115 = $114;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (($115) + 4)|0;
      $119 = $118;
      $120 = HEAP32[$119>>2]|0;
      $121 = $offset2;
      $122 = $121;
      HEAP32[$122>>2] = $117;
      $123 = (($121) + 4)|0;
      $124 = $123;
      HEAP32[$124>>2] = $120;
      $125 = $1;
      $126 = (($125) + 12|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = $127 & 128;
      $129 = ($128|0)!=(0);
      if ($129) {
       _TIFFSwabLong8($offset2);
      }
      $130 = $1;
      $131 = $offset2;
      $132 = $131;
      $133 = HEAP32[$132>>2]|0;
      $134 = (($131) + 4)|0;
      $135 = $134;
      $136 = HEAP32[$135>>2]|0;
      $137 = $datasize;
      $138 = $data;
      $139 = (_TIFFReadDirEntryData($130,$133,$136,$137,$138)|0);
      $err1 = $139;
      $140 = $err1;
      $141 = ($140|0)!=(0);
      if (!($141)) {
       break;
      }
      $142 = $data;
      __TIFFfree($142);
      $143 = $err1;
      $0 = $143;
      $146 = $0;
      STACKTOP = sp;return ($146|0);
     }
    } while(0);
   } else {
    $84 = $datasize;
    $85 = ($84>>>0)<=(4);
    do {
     if ($85) {
      $86 = $data;
      $87 = $2;
      $88 = (($87) + 16|0);
      $89 = $datasize;
      __TIFFmemcpy($86,$88,$89);
     } else {
      $90 = $2;
      $91 = (($90) + 16|0);
      $92 = HEAP32[$91>>2]|0;
      HEAP32[$offset>>2] = $92;
      $93 = $1;
      $94 = (($93) + 12|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = $95 & 128;
      $97 = ($96|0)!=(0);
      if ($97) {
       _TIFFSwabLong($offset);
      }
      $98 = $1;
      $99 = HEAP32[$offset>>2]|0;
      $100 = $datasize;
      $101 = $data;
      $102 = (_TIFFReadDirEntryData($98,$99,0,$100,$101)|0);
      $err = $102;
      $103 = $err;
      $104 = ($103|0)!=(0);
      if (!($104)) {
       break;
      }
      $105 = $data;
      __TIFFfree($105);
      $106 = $err;
      $0 = $106;
      $146 = $0;
      STACKTOP = sp;return ($146|0);
     }
    } while(0);
   }
   $144 = $data;
   $145 = $5;
   HEAP32[$145>>2] = $144;
   $0 = 0;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  }
 }
 $24 = $5;
 HEAP32[$24>>2] = 0;
 $0 = 0;
 $146 = $0;
 STACKTOP = sp;return ($146|0);
}
function _TIFFReadDirEntryData($tif,$0,$1,$size,$dest) {
 $tif = $tif|0;
 $0 = $0|0;
 $1 = $1|0;
 $size = $size|0;
 $dest = $dest|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $ma = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $3 = $tif;
 $7 = $4;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $5 = $size;
 $6 = $dest;
 $11 = $5;
 $12 = ($11|0)>(0);
 if (!($12)) {
  ___assert_fail((13704|0),(12552|0),3309,(13712|0));
  // unreachable;
 }
 $13 = $3;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 2048;
 $17 = ($16|0)!=(0);
 do {
  if ($17) {
   $52 = $4;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = (($52) + 4)|0;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $ma = $54;
   $58 = $ma;
   $59 = $5;
   $60 = (($58) + ($59))|0;
   $mb = $60;
   $61 = $ma;
   $62 = $4;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = (($62) + 4)|0;
   $66 = $65;
   $67 = HEAP32[$66>>2]|0;
   $68 = ($61|0)!=($64|0);
   $69 = (0)!=($67|0);
   $70 = $68 | $69;
   if (!($70)) {
    $71 = $mb;
    $72 = $ma;
    $73 = ($71>>>0)<($72>>>0);
    if (!($73)) {
     $74 = $mb;
     $75 = $ma;
     $76 = (($74) - ($75))|0;
     $77 = $5;
     $78 = ($76|0)!=($77|0);
     if (!($78)) {
      $79 = $mb;
      $80 = $5;
      $81 = ($79>>>0)<($80>>>0);
      if (!($81)) {
       $82 = $mb;
       $83 = $3;
       $84 = (($83) + 616|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($82>>>0)>($85>>>0);
       if (!($86)) {
        $87 = $6;
        $88 = $3;
        $89 = (($88) + 612|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = $ma;
        $92 = (($90) + ($91)|0);
        $93 = $5;
        __TIFFmemcpy($87,$92,$93);
        break;
       }
      }
     }
    }
   }
   $2 = 3;
   $94 = $2;
   STACKTOP = sp;return ($94|0);
  } else {
   $18 = $3;
   $19 = (($18) + 640|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $3;
   $22 = (($21) + 628|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $4;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (FUNCTION_TABLE_iiiii[$20 & 255]($23,$26,$29,0)|0);
   $31 = tempRet0;
   $32 = $4;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (($32) + 4)|0;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = ($30|0)==($34|0);
   $39 = ($31|0)==($37|0);
   $40 = $38 & $39;
   if (!($40)) {
    $2 = 3;
    $94 = $2;
    STACKTOP = sp;return ($94|0);
   }
   $41 = $3;
   $42 = (($41) + 632|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $3;
   $45 = (($44) + 628|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $6;
   $48 = $5;
   $49 = (FUNCTION_TABLE_iiii[$43 & 255]($46,$47,$48)|0);
   $50 = $5;
   $51 = ($49|0)==($50|0);
   if ($51) {
    break;
   }
   $2 = 3;
   $94 = $2;
   STACKTOP = sp;return ($94|0);
  }
 } while(0);
 $2 = 0;
 $94 = $2;
 STACKTOP = sp;return ($94|0);
}
function _TIFFReadDirEntryCheckRangeByteSbyte($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)<(0);
 if ($4) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TIFFReadDirEntryCheckRangeByteShort($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)>(255);
 if ($4) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TIFFReadDirEntryCheckRangeByteSshort($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = $1;
  $6 = $5 << 16 >> 16;
  $7 = ($6|0)>(255);
  if ($7) {
   label = 3;
  } else {
   $0 = 0;
  }
 }
 if ((label|0) == 3) {
  $0 = 4;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _TIFFReadDirEntryCheckRangeByteLong($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2>>>0)>(255);
 if ($3) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _TIFFReadDirEntryCheckRangeByteSlong($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = $1;
  $5 = ($4|0)>(255);
  if ($5) {
   label = 3;
  } else {
   $0 = 0;
  }
 }
 if ((label|0) == 3) {
  $0 = 4;
 }
 $6 = $0;
 STACKTOP = sp;return ($6|0);
}
function _TIFFReadDirEntryCheckRangeByteLong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)>(0);
 $15 = ($10>>>0)>(255);
 $16 = ($13|0)==(0);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if ($18) {
  $2 = 4;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 } else {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFReadDirEntryCheckRangeByteSlong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<(0);
 if (!($14)) {
  $15 = $3;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)>(0);
  $22 = ($17>>>0)>(255);
  $23 = ($20|0)==(0);
  $24 = $23 & $22;
  $25 = $21 | $24;
  if (!($25)) {
   $2 = 0;
   $26 = $2;
   STACKTOP = sp;return ($26|0);
  }
 }
 $2 = 4;
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _TIFFReadDirEntryCheckRangeLongSbyte($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)<(0);
 if ($4) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TIFFReadDirEntryCheckRangeLongSshort($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)<(0);
 if ($4) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TIFFReadDirEntryCheckRangeLongSlong($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2|0)<(0);
 if ($3) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _TIFFReadDirEntryCheckRangeLongLong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)>(0);
 $15 = ($10>>>0)>(4294967295);
 $16 = ($13|0)==(0);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if ($18) {
  $2 = 4;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 } else {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFReadDirEntryCheckRangeLongSlong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<(0);
 if (!($14)) {
  $15 = $3;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)>(0);
  $22 = ($17>>>0)>(4294967295);
  $23 = ($20|0)==(0);
  $24 = $23 & $22;
  $25 = $21 | $24;
  if (!($25)) {
   $2 = 0;
   $26 = $2;
   STACKTOP = sp;return ($26|0);
  }
 }
 $2 = 4;
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _TIFFReadDirEntryCheckRangeLong8Sbyte($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)<(0);
 if ($4) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TIFFReadDirEntryCheckRangeLong8Sshort($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)<(0);
 if ($4) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TIFFReadDirEntryCheckRangeLong8Slong($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2|0)<(0);
 if ($3) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _TIFFReadDirEntryCheckRangeLong8Slong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<(0);
 if ($14) {
  $2 = 4;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 } else {
  $2 = 0;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _TIFFReadDirEntryCheckedRational($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $m = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp;
 $offset = sp + 16|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 524288;
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $23 = $2;
   $24 = (($23) + 16|0);
   $25 = $24;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) + 4)|0;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   $31 = $m;
   $32 = $31;
   HEAP32[$32>>2] = $27;
   $33 = (($31) + 4)|0;
   $34 = $33;
   HEAP32[$34>>2] = $30;
  } else {
   $9 = $2;
   $10 = (($9) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$offset>>2] = $11;
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 128;
   $16 = ($15|0)!=(0);
   if ($16) {
    _TIFFSwabLong($offset);
   }
   $17 = $1;
   $18 = HEAP32[$offset>>2]|0;
   $19 = (_TIFFReadDirEntryData($17,$18,0,8,$m)|0);
   $err = $19;
   $20 = $err;
   $21 = ($20|0)!=(0);
   if (!($21)) {
    break;
   }
   $22 = $err;
   $0 = $22;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
 } while(0);
 $35 = $1;
 $36 = (($35) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 128;
 $39 = ($38|0)!=(0);
 if ($39) {
  _TIFFSwabArrayOfLong($m,2);
 }
 $40 = HEAP32[$m>>2]|0;
 $41 = ($40|0)==(0);
 if ($41) {
  $42 = $3;
  HEAPF64[$42>>3] = 0.0;
 } else {
  $43 = HEAP32[$m>>2]|0;
  $44 = (+($43>>>0));
  $45 = (($m) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (+($46>>>0));
  $48 = $44 / $47;
  $49 = $3;
  HEAPF64[$49>>3] = $48;
 }
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _TIFFReadDirEntryCheckedSrational($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $m = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp;
 $offset = sp + 16|0;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 524288;
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $23 = $2;
   $24 = (($23) + 16|0);
   $25 = $24;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) + 4)|0;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   $31 = $m;
   $32 = $31;
   HEAP32[$32>>2] = $27;
   $33 = (($31) + 4)|0;
   $34 = $33;
   HEAP32[$34>>2] = $30;
  } else {
   $9 = $2;
   $10 = (($9) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$offset>>2] = $11;
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 128;
   $16 = ($15|0)!=(0);
   if ($16) {
    _TIFFSwabLong($offset);
   }
   $17 = $1;
   $18 = HEAP32[$offset>>2]|0;
   $19 = (_TIFFReadDirEntryData($17,$18,0,8,$m)|0);
   $err = $19;
   $20 = $err;
   $21 = ($20|0)!=(0);
   if (!($21)) {
    break;
   }
   $22 = $err;
   $0 = $22;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
 } while(0);
 $35 = $1;
 $36 = (($35) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 128;
 $39 = ($38|0)!=(0);
 if ($39) {
  _TIFFSwabArrayOfLong($m,2);
 }
 $40 = HEAP32[$m>>2]|0;
 $41 = ($40|0)==(0);
 if ($41) {
  $42 = $3;
  HEAPF64[$42>>3] = 0.0;
 } else {
  $43 = HEAP32[$m>>2]|0;
  $44 = (+($43|0));
  $45 = (($m) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (+($46>>>0));
  $48 = $44 / $47;
  $49 = $3;
  HEAPF64[$49>>3] = $48;
 }
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _TIFFReadDirEntryCheckedFloat($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $float_union = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $float_union = sp;
 $0 = $tif;
 $1 = $direntry;
 $2 = $value;
 $3 = $1;
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$float_union>>2] = $5;
 $6 = +HEAPF32[$float_union>>2];
 $7 = $2;
 HEAPF32[$7>>2] = $6;
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 128;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $2;
 _TIFFSwabLong($13);
 STACKTOP = sp;return;
}
function _TIFFReadDirEntryCheckedDouble($tif,$direntry,$value) {
 $tif = $tif|0;
 $direntry = $direntry|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $offset = 0, $uint64_union = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offset = sp + 8|0;
 $uint64_union = sp;
 $1 = $tif;
 $2 = $direntry;
 $3 = $value;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 524288;
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $24 = $2;
   $25 = (($24) + 16|0);
   $26 = $25;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = $uint64_union;
   $33 = $32;
   HEAP32[$33>>2] = $28;
   $34 = (($32) + 4)|0;
   $35 = $34;
   HEAP32[$35>>2] = $31;
   $36 = +HEAPF64[$uint64_union>>3];
   $37 = $3;
   HEAPF64[$37>>3] = $36;
  } else {
   $9 = $2;
   $10 = (($9) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$offset>>2] = $11;
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 128;
   $16 = ($15|0)!=(0);
   if ($16) {
    _TIFFSwabLong($offset);
   }
   $17 = $1;
   $18 = HEAP32[$offset>>2]|0;
   $19 = $3;
   $20 = (_TIFFReadDirEntryData($17,$18,0,8,$19)|0);
   $err = $20;
   $21 = $err;
   $22 = ($21|0)!=(0);
   if (!($22)) {
    break;
   }
   $23 = $err;
   $0 = $23;
   $44 = $0;
   STACKTOP = sp;return ($44|0);
  }
 } while(0);
 $38 = $1;
 $39 = (($38) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 & 128;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $3;
  _TIFFSwabLong8($43);
 }
 $0 = 0;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _TIFFReadDirEntryCheckRangeSbyteByte($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2&255;
 $4 = ($3|0)>(127);
 if ($4) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TIFFReadDirEntryCheckRangeSbyteShort($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)>(127);
 if ($4) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TIFFReadDirEntryCheckRangeSbyteSshort($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)<(-128);
 if ($4) {
  label = 3;
 } else {
  $5 = $1;
  $6 = $5 << 16 >> 16;
  $7 = ($6|0)>(127);
  if ($7) {
   label = 3;
  } else {
   $0 = 0;
  }
 }
 if ((label|0) == 3) {
  $0 = 4;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _TIFFReadDirEntryCheckRangeSbyteLong($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2>>>0)>(127);
 if ($3) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _TIFFReadDirEntryCheckRangeSbyteSlong($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2|0)<(-128);
 if ($3) {
  label = 3;
 } else {
  $4 = $1;
  $5 = ($4|0)>(127);
  if ($5) {
   label = 3;
  } else {
   $0 = 0;
  }
 }
 if ((label|0) == 3) {
  $0 = 4;
 }
 $6 = $0;
 STACKTOP = sp;return ($6|0);
}
function _TIFFReadDirEntryCheckRangeSbyteLong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)>(0);
 $15 = ($10>>>0)>(127);
 $16 = ($13|0)==(0);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if ($18) {
  $2 = 4;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 } else {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFReadDirEntryCheckRangeSbyteSlong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<(-1);
 $15 = ($10>>>0)<(4294967168);
 $16 = ($13|0)==(-1);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if (!($18)) {
  $19 = $3;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)>(0);
  $26 = ($21>>>0)>(127);
  $27 = ($24|0)==(0);
  $28 = $27 & $26;
  $29 = $25 | $28;
  if (!($29)) {
   $2 = 0;
   $30 = $2;
   STACKTOP = sp;return ($30|0);
  }
 }
 $2 = 4;
 $30 = $2;
 STACKTOP = sp;return ($30|0);
}
function _TIFFReadDirEntryCheckRangeSshortShort($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)>(32767);
 if ($4) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _TIFFReadDirEntryCheckRangeSshortLong($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2>>>0)>(32767);
 if ($3) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _TIFFReadDirEntryCheckRangeSshortSlong($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2|0)<(-32768);
 if ($3) {
  label = 3;
 } else {
  $4 = $1;
  $5 = ($4|0)>(32767);
  if ($5) {
   label = 3;
  } else {
   $0 = 0;
  }
 }
 if ((label|0) == 3) {
  $0 = 4;
 }
 $6 = $0;
 STACKTOP = sp;return ($6|0);
}
function _TIFFReadDirEntryCheckRangeSshortLong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)>(0);
 $15 = ($10>>>0)>(32767);
 $16 = ($13|0)==(0);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if ($18) {
  $2 = 4;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 } else {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFReadDirEntryCheckRangeSshortSlong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<(-1);
 $15 = ($10>>>0)<(4294934528);
 $16 = ($13|0)==(-1);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if (!($18)) {
  $19 = $3;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)>(0);
  $26 = ($21>>>0)>(32767);
  $27 = ($24|0)==(0);
  $28 = $27 & $26;
  $29 = $25 | $28;
  if (!($29)) {
   $2 = 0;
   $30 = $2;
   STACKTOP = sp;return ($30|0);
  }
 }
 $2 = 4;
 $30 = $2;
 STACKTOP = sp;return ($30|0);
}
function _TIFFReadDirEntryCheckRangeSlongLong($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2>>>0)>(2147483647);
 if ($3) {
  $0 = 4;
 } else {
  $0 = 0;
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _TIFFReadDirEntryCheckRangeSlongLong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)>(0);
 $15 = ($10>>>0)>(2147483647);
 $16 = ($13|0)==(0);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if ($18) {
  $2 = 4;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 } else {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFReadDirEntryCheckRangeSlongSlong8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<(0);
 $15 = ($10>>>0)<(2147483648);
 $16 = ($13|0)==(0);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if (!($18)) {
  $19 = $3;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)>(0);
  $26 = ($21>>>0)>(2147483647);
  $27 = ($24|0)==(0);
  $28 = $27 & $26;
  $29 = $25 | $28;
  if (!($29)) {
   $2 = 0;
   $30 = $2;
   STACKTOP = sp;return ($30|0);
  }
 }
 $2 = 4;
 $30 = $2;
 STACKTOP = sp;return ($30|0);
}
function _TIFFReadDirEntryCheckRangeSlong8Long8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)>(2147483647);
 $15 = ($10>>>0)>(4294967295);
 $16 = ($13|0)==(2147483647);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if ($18) {
  $2 = 4;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 } else {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFErrorExt($fd,$module,$fmt,$varargs) {
 $fd = $fd|0;
 $module = $module|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 $0 = $fd;
 $1 = $module;
 $2 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $3 = HEAP32[20512>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[20512>>2]|0;
  $6 = $1;
  $7 = $2;
  FUNCTION_TABLE_viii[$5 & 255]($6,$7,$ap);
 }
 $8 = HEAP32[15864>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[15864>>2]|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 FUNCTION_TABLE_viiii[$10 & 127]($11,$12,$13,$ap);
 STACKTOP = sp;return;
}
function _TIFFFlush($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $offsets = 0, $sizes = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 16|0;
 $offsets = sp + 28|0;
 $sizes = sp + 40|0;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $0 = 1;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $6 = $1;
 $7 = (_TIFFFlushData($6)|0);
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $0 = 0;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 2097152;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $1;
  $15 = (($14) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 8;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $19 = $1;
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(2);
   if ($22) {
    HEAP32[$offsets>>2] = 0;
    HEAP32[$sizes>>2] = 0;
    $23 = $1;
    $24 = (_TIFFIsTiled($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
     $26 = $1;
     HEAP32[$vararg_buffer>>2] = $offsets;
     $27 = (_TIFFGetField($26,324,$vararg_buffer)|0);
     $28 = ($27|0)!=(0);
     if ($28) {
      $29 = $1;
      HEAP32[$vararg_buffer1>>2] = $sizes;
      $30 = (_TIFFGetField($29,325,$vararg_buffer1)|0);
      $31 = ($30|0)!=(0);
      if ($31) {
       $32 = $1;
       $33 = $1;
       $34 = (($33) + 40|0);
       $35 = (($34) + 128|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = HEAP32[$offsets>>2]|0;
       $38 = (__TIFFRewriteField($32,324,16,$36,$37)|0);
       $39 = ($38|0)!=(0);
       if ($39) {
        $40 = $1;
        $41 = $1;
        $42 = (($41) + 40|0);
        $43 = (($42) + 128|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = HEAP32[$sizes>>2]|0;
        $46 = (__TIFFRewriteField($40,325,16,$44,$45)|0);
        $47 = ($46|0)!=(0);
        if ($47) {
         $48 = $1;
         $49 = (($48) + 12|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = $50 & -2097153;
         HEAP32[$49>>2] = $51;
         $52 = $1;
         $53 = (($52) + 12|0);
         $54 = HEAP32[$53>>2]|0;
         $55 = $54 & -65;
         HEAP32[$53>>2] = $55;
         $0 = 1;
         $94 = $0;
         STACKTOP = sp;return ($94|0);
        }
       }
      }
     }
    } else {
     $56 = $1;
     HEAP32[$vararg_buffer4>>2] = $offsets;
     $57 = (_TIFFGetField($56,273,$vararg_buffer4)|0);
     $58 = ($57|0)!=(0);
     if ($58) {
      $59 = $1;
      HEAP32[$vararg_buffer7>>2] = $sizes;
      $60 = (_TIFFGetField($59,279,$vararg_buffer7)|0);
      $61 = ($60|0)!=(0);
      if ($61) {
       $62 = $1;
       $63 = $1;
       $64 = (($63) + 40|0);
       $65 = (($64) + 128|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = HEAP32[$offsets>>2]|0;
       $68 = (__TIFFRewriteField($62,273,16,$66,$67)|0);
       $69 = ($68|0)!=(0);
       if ($69) {
        $70 = $1;
        $71 = $1;
        $72 = (($71) + 40|0);
        $73 = (($72) + 128|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = HEAP32[$sizes>>2]|0;
        $76 = (__TIFFRewriteField($70,279,16,$74,$75)|0);
        $77 = ($76|0)!=(0);
        if ($77) {
         $78 = $1;
         $79 = (($78) + 12|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = $80 & -2097153;
         HEAP32[$79>>2] = $81;
         $82 = $1;
         $83 = (($82) + 12|0);
         $84 = HEAP32[$83>>2]|0;
         $85 = $84 & -65;
         HEAP32[$83>>2] = $85;
         $0 = 1;
         $94 = $0;
         STACKTOP = sp;return ($94|0);
        }
       }
      }
     }
    }
   }
  }
 }
 $86 = $1;
 $87 = (($86) + 12|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $88 & 2097160;
 $90 = ($89|0)!=(0);
 if ($90) {
  $91 = $1;
  $92 = (_TIFFRewriteDirectory($91)|0);
  $93 = ($92|0)!=(0);
  if (!($93)) {
   $0 = 0;
   $94 = $0;
   STACKTOP = sp;return ($94|0);
  }
 }
 $0 = 1;
 $94 = $0;
 STACKTOP = sp;return ($94|0);
}
function _TIFFFlushData($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 64;
 $6 = ($5|0)==(0);
 if ($6) {
  $0 = 1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $7 = $1;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 4096;
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & -4097;
   HEAP32[$13>>2] = $15;
   $16 = $1;
   $17 = (($16) + 528|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $1;
   $20 = (FUNCTION_TABLE_ii[$18 & 255]($19)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
    break;
   }
   $0 = 0;
   $24 = $0;
   STACKTOP = sp;return ($24|0);
  }
 } while(0);
 $22 = $1;
 $23 = (_TIFFFlushData1($22)|0);
 $0 = $23;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _TIFFRGBAImageOK($tif,$emsg) {
 $tif = $tif|0;
 $emsg = $emsg|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $colorchannels = 0, $inkset = 0, $photometric = 0, $td = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer40 = 0, $vararg_buffer44 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0;
 var $vararg_ptr43 = 0, $vararg_ptr47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer44 = sp + 120|0;
 $vararg_buffer40 = sp + 96|0;
 $vararg_buffer35 = sp;
 $vararg_buffer31 = sp + 32|0;
 $vararg_buffer27 = sp + 40|0;
 $vararg_buffer23 = sp + 104|0;
 $vararg_buffer20 = sp + 112|0;
 $vararg_buffer16 = sp + 72|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 80|0;
 $vararg_buffer = sp + 88|0;
 $photometric = sp + 150|0;
 $inkset = sp + 148|0;
 $1 = $tif;
 $2 = $emsg;
 $3 = $1;
 $4 = (($3) + 40|0);
 $td = $4;
 $5 = $1;
 $6 = (($5) + 500|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = $2;
  (_sprintf($9,15872,$vararg_buffer)|0);
  $0 = 0;
  $112 = $0;
  STACKTOP = sp;return ($112|0);
 }
 $10 = $td;
 $11 = (($10) + 44|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 switch ($13|0) {
 case 16: case 8: case 4: case 2: case 1:  {
  break;
 }
 default: {
  $14 = $2;
  $15 = $td;
  $16 = (($15) + 44|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  HEAP32[$vararg_buffer1>>2] = $18;
  (_sprintf($14,15928,$vararg_buffer1)|0);
  $0 = 0;
  $112 = $0;
  STACKTOP = sp;return ($112|0);
 }
 }
 $19 = $td;
 $20 = (($19) + 58|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = $td;
 $24 = (($23) + 116|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = (($22) - ($26))|0;
 $colorchannels = $27;
 $28 = $1;
 HEAP32[$vararg_buffer3>>2] = $photometric;
 $29 = (_TIFFGetField($28,262,$vararg_buffer3)|0);
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $31 = $colorchannels;
  if ((($31|0) == 1)) {
   HEAP16[$photometric>>1] = 1;
  } else if ((($31|0) == 3)) {
   HEAP16[$photometric>>1] = 2;
  } else {
   $32 = $2;
   HEAP32[$vararg_buffer6>>2] = 16008;
   (_sprintf($32,15984,$vararg_buffer6)|0);
   $0 = 0;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  }
 }
 $33 = HEAP16[$photometric>>1]|0;
 $34 = $33&65535;
 do {
  if ((($34|0) == 6)) {
  } else if ((($34|0) == 32845)) {
   $88 = $td;
   $89 = (($88) + 48|0);
   $90 = HEAP16[$89>>1]|0;
   $91 = $90&65535;
   $92 = ($91|0)!=(34676);
   if ($92) {
    $93 = $td;
    $94 = (($93) + 48|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95&65535;
    $97 = ($96|0)!=(34677);
    if ($97) {
     $98 = $2;
     HEAP32[$vararg_buffer35>>2] = 16304;
     $vararg_ptr38 = (($vararg_buffer35) + 4|0);
     HEAP32[$vararg_ptr38>>2] = 34676;
     $vararg_ptr39 = (($vararg_buffer35) + 8|0);
     HEAP32[$vararg_ptr39>>2] = 34677;
     (_sprintf($98,16320,$vararg_buffer35)|0);
     $0 = 0;
     $112 = $0;
     STACKTOP = sp;return ($112|0);
    }
   }
   $99 = $td;
   $100 = (($99) + 86|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $101&65535;
   $103 = ($102|0)!=(1);
   if (!($103)) {
    break;
   }
   $104 = $2;
   $105 = $td;
   $106 = (($105) + 86|0);
   $107 = HEAP16[$106>>1]|0;
   $108 = $107&65535;
   HEAP32[$vararg_buffer40>>2] = 16416;
   $vararg_ptr43 = (($vararg_buffer40) + 4|0);
   HEAP32[$vararg_ptr43>>2] = $108;
   (_sprintf($104,16368,$vararg_buffer40)|0);
   $0 = 0;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  } else if ((($34|0) == 8)) {
  } else if ((($34|0) == 2)) {
   $61 = $colorchannels;
   $62 = ($61|0)<(3);
   if (!($62)) {
    break;
   }
   $63 = $2;
   $64 = $colorchannels;
   HEAP32[$vararg_buffer16>>2] = 16184;
   $vararg_ptr19 = (($vararg_buffer16) + 4|0);
   HEAP32[$vararg_ptr19>>2] = $64;
   (_sprintf($63,16136,$vararg_buffer16)|0);
   $0 = 0;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  } else if ((($34|0) == 5)) {
   $65 = $1;
   HEAP32[$vararg_buffer20>>2] = $inkset;
   (_TIFFGetFieldDefaulted($65,332,$vararg_buffer20)|0);
   $66 = HEAP16[$inkset>>1]|0;
   $67 = $66&65535;
   $68 = ($67|0)!=(1);
   if ($68) {
    $69 = $2;
    $70 = HEAP16[$inkset>>1]|0;
    $71 = $70&65535;
    HEAP32[$vararg_buffer23>>2] = 16256;
    $vararg_ptr26 = (($vararg_buffer23) + 4|0);
    HEAP32[$vararg_ptr26>>2] = $71;
    (_sprintf($69,16200,$vararg_buffer23)|0);
    $0 = 0;
    $112 = $0;
    STACKTOP = sp;return ($112|0);
   }
   $72 = $td;
   $73 = (($72) + 58|0);
   $74 = HEAP16[$73>>1]|0;
   $75 = $74&65535;
   $76 = ($75|0)<(4);
   if (!($76)) {
    break;
   }
   $77 = $2;
   $78 = $td;
   $79 = (($78) + 58|0);
   $80 = HEAP16[$79>>1]|0;
   $81 = $80&65535;
   HEAP32[$vararg_buffer27>>2] = 16120;
   $vararg_ptr30 = (($vararg_buffer27) + 4|0);
   HEAP32[$vararg_ptr30>>2] = $81;
   (_sprintf($77,16200,$vararg_buffer27)|0);
   $0 = 0;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  } else if ((($34|0) == 32844)) {
   $82 = $td;
   $83 = (($82) + 48|0);
   $84 = HEAP16[$83>>1]|0;
   $85 = $84&65535;
   $86 = ($85|0)!=(34676);
   if (!($86)) {
    break;
   }
   $87 = $2;
   HEAP32[$vararg_buffer31>>2] = 16304;
   $vararg_ptr34 = (($vararg_buffer31) + 4|0);
   HEAP32[$vararg_ptr34>>2] = 34676;
   (_sprintf($87,16264,$vararg_buffer31)|0);
   $0 = 0;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  } else if ((($34|0) == 3) | (($34|0) == 1) | (($34|0) == 0)) {
   $35 = $td;
   $36 = (($35) + 86|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $37&65535;
   $39 = ($38|0)==(1);
   if ($39) {
    $40 = $td;
    $41 = (($40) + 58|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = $42&65535;
    $44 = ($43|0)!=(1);
    if ($44) {
     $45 = $td;
     $46 = (($45) + 44|0);
     $47 = HEAP16[$46>>1]|0;
     $48 = $47&65535;
     $49 = ($48|0)<(8);
     if ($49) {
      $50 = $2;
      $51 = HEAP16[$photometric>>1]|0;
      $52 = $51&65535;
      $53 = $td;
      $54 = (($53) + 58|0);
      $55 = HEAP16[$54>>1]|0;
      $56 = $55&65535;
      $57 = $td;
      $58 = (($57) + 44|0);
      $59 = HEAP16[$58>>1]|0;
      $60 = $59&65535;
      HEAP32[$vararg_buffer9>>2] = 16008;
      $vararg_ptr12 = (($vararg_buffer9) + 4|0);
      HEAP32[$vararg_ptr12>>2] = $52;
      $vararg_ptr13 = (($vararg_buffer9) + 8|0);
      HEAP32[$vararg_ptr13>>2] = 16120;
      $vararg_ptr14 = (($vararg_buffer9) + 12|0);
      HEAP32[$vararg_ptr14>>2] = $56;
      $vararg_ptr15 = (($vararg_buffer9) + 16|0);
      HEAP32[$vararg_ptr15>>2] = $60;
      (_sprintf($50,16040,$vararg_buffer9)|0);
      $0 = 0;
      $112 = $0;
      STACKTOP = sp;return ($112|0);
     }
    }
   }
  } else {
   $109 = $2;
   $110 = HEAP16[$photometric>>1]|0;
   $111 = $110&65535;
   HEAP32[$vararg_buffer44>>2] = 16008;
   $vararg_ptr47 = (($vararg_buffer44) + 4|0);
   HEAP32[$vararg_ptr47>>2] = $111;
   (_sprintf($109,16440,$vararg_buffer44)|0);
   $0 = 0;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  }
 } while(0);
 $0 = 1;
 $112 = $0;
 STACKTOP = sp;return ($112|0);
}
function _TIFFRGBAImageEnd($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $0;
 $2 = (($1) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 56|0);
  $7 = HEAP32[$6>>2]|0;
  __TIFFfree($7);
  $8 = $0;
  $9 = (($8) + 56|0);
  HEAP32[$9>>2] = 0;
 }
 $10 = $0;
 $11 = (($10) + 60|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $0;
  $15 = (($14) + 60|0);
  $16 = HEAP32[$15>>2]|0;
  __TIFFfree($16);
  $17 = $0;
  $18 = (($17) + 60|0);
  HEAP32[$18>>2] = 0;
 }
 $19 = $0;
 $20 = (($19) + 64|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $0;
  $24 = (($23) + 64|0);
  $25 = HEAP32[$24>>2]|0;
  __TIFFfree($25);
  $26 = $0;
  $27 = (($26) + 64|0);
  HEAP32[$27>>2] = 0;
 }
 $28 = $0;
 $29 = (($28) + 68|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $0;
  $33 = (($32) + 68|0);
  $34 = HEAP32[$33>>2]|0;
  __TIFFfree($34);
  $35 = $0;
  $36 = (($35) + 68|0);
  HEAP32[$36>>2] = 0;
 }
 $37 = $0;
 $38 = (($37) + 72|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = $0;
  $42 = (($41) + 72|0);
  $43 = HEAP32[$42>>2]|0;
  __TIFFfree($43);
  $44 = $0;
  $45 = (($44) + 72|0);
  HEAP32[$45>>2] = 0;
 }
 $46 = $0;
 $47 = (($46) + 76|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)!=(0|0);
 if ($49) {
  $50 = $0;
  $51 = (($50) + 76|0);
  $52 = HEAP32[$51>>2]|0;
  __TIFFfree($52);
  $53 = $0;
  $54 = (($53) + 76|0);
  HEAP32[$54>>2] = 0;
 }
 $55 = $0;
 $56 = (($55) + 80|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0|0);
 if ($58) {
  $59 = $0;
  $60 = (($59) + 80|0);
  $61 = HEAP32[$60>>2]|0;
  __TIFFfree($61);
  $62 = $0;
  $63 = (($62) + 80|0);
  HEAP32[$63>>2] = 0;
 }
 $64 = $0;
 $65 = (($64) + 36|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0|0);
 if (!($67)) {
  STACKTOP = sp;return;
 }
 $68 = $0;
 $69 = (($68) + 36|0);
 $70 = HEAP32[$69>>2]|0;
 __TIFFfree($70);
 $71 = $0;
 $72 = (($71) + 40|0);
 $73 = HEAP32[$72>>2]|0;
 __TIFFfree($73);
 $74 = $0;
 $75 = (($74) + 44|0);
 $76 = HEAP32[$75>>2]|0;
 __TIFFfree($76);
 $77 = $0;
 $78 = (($77) + 44|0);
 HEAP32[$78>>2] = 0;
 $79 = $0;
 $80 = (($79) + 40|0);
 HEAP32[$80>>2] = 0;
 $81 = $0;
 $82 = (($81) + 36|0);
 HEAP32[$82>>2] = 0;
 STACKTOP = sp;return;
}
function _TIFFRGBAImageBegin($img,$tif,$stop,$emsg) {
 $img = $img|0;
 $tif = $tif|0;
 $stop = $stop|0;
 $emsg = $emsg|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blue_orig = 0, $colorchannels = 0, $compress = 0, $cond = 0, $extrasamples = 0;
 var $green_orig = 0, $inkset = 0, $n_color = 0, $planarconfig = 0, $red_orig = 0, $sampleinfo = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer4 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0;
 var $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer56 = 0, $vararg_buffer60 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer7 = 0, $vararg_buffer72 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer89 = 0, $vararg_buffer92 = 0, $vararg_buffer94 = 0, $vararg_ptr10 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0;
 var $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr48 = 0, $vararg_ptr55 = 0, $vararg_ptr59 = 0, $vararg_ptr63 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr75 = 0, $vararg_ptr82 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer94 = sp + 104|0;
 $vararg_buffer92 = sp + 216|0;
 $vararg_buffer89 = sp + 232|0;
 $vararg_buffer86 = sp + 112|0;
 $vararg_buffer83 = sp + 120|0;
 $vararg_buffer79 = sp + 256|0;
 $vararg_buffer76 = sp + 48|0;
 $vararg_buffer72 = sp + 56|0;
 $vararg_buffer67 = sp + 64|0;
 $vararg_buffer64 = sp + 80|0;
 $vararg_buffer60 = sp + 192|0;
 $vararg_buffer56 = sp + 208|0;
 $vararg_buffer52 = sp + 224|0;
 $vararg_buffer49 = sp + 240|0;
 $vararg_buffer45 = sp + 248|0;
 $vararg_buffer42 = sp + 128|0;
 $vararg_buffer35 = sp + 136|0;
 $vararg_buffer33 = sp + 160|0;
 $vararg_buffer31 = sp + 168|0;
 $vararg_buffer26 = sp + 24|0;
 $vararg_buffer23 = sp + 16|0;
 $vararg_buffer20 = sp + 176|0;
 $vararg_buffer17 = sp + 88|0;
 $vararg_buffer14 = sp + 184|0;
 $vararg_buffer11 = sp + 8|0;
 $vararg_buffer7 = sp;
 $vararg_buffer4 = sp + 96|0;
 $vararg_buffer1 = sp + 200|0;
 $vararg_buffer = sp + 40|0;
 $sampleinfo = sp + 300|0;
 $extrasamples = sp + 308|0;
 $planarconfig = sp + 310|0;
 $compress = sp + 312|0;
 $red_orig = sp + 264|0;
 $green_orig = sp + 284|0;
 $blue_orig = sp + 288|0;
 $inkset = sp + 314|0;
 $1 = $img;
 $2 = $tif;
 $3 = $stop;
 $4 = $emsg;
 $5 = $1;
 $6 = (($5) + 84|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = (($7) + 88|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = (($9) + 36|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = (($11) + 40|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = (($13) + 44|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = (($15) + 30|0);
 HEAP16[$16>>1] = 4;
 $17 = $2;
 $18 = $1;
 HEAP32[$18>>2] = $17;
 $19 = $3;
 $20 = $1;
 $21 = (($20) + 4|0);
 HEAP32[$21>>2] = $19;
 $22 = $2;
 $23 = $1;
 $24 = (($23) + 24|0);
 HEAP32[$vararg_buffer>>2] = $24;
 (_TIFFGetFieldDefaulted($22,258,$vararg_buffer)|0);
 $25 = $1;
 $26 = (($25) + 24|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 L1: do {
  switch ($28|0) {
  case 16: case 8: case 4: case 2: case 1:  {
   $34 = $1;
   $35 = (($34) + 12|0);
   HEAP32[$35>>2] = 0;
   $36 = $2;
   $37 = $1;
   $38 = (($37) + 26|0);
   HEAP32[$vararg_buffer4>>2] = $38;
   (_TIFFGetFieldDefaulted($36,277,$vararg_buffer4)|0);
   $39 = $2;
   HEAP32[$vararg_buffer7>>2] = $extrasamples;
   $vararg_ptr10 = (($vararg_buffer7) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $sampleinfo;
   (_TIFFGetFieldDefaulted($39,338,$vararg_buffer7)|0);
   $40 = HEAP16[$extrasamples>>1]|0;
   $41 = $40&65535;
   $42 = ($41|0)>=(1);
   if ($42) {
    $43 = HEAP32[$sampleinfo>>2]|0;
    $44 = HEAP16[$43>>1]|0;
    $45 = $44&65535;
    if ((($45|0) == 2) | (($45|0) == 1)) {
     $53 = HEAP32[$sampleinfo>>2]|0;
     $54 = HEAP16[$53>>1]|0;
     $55 = $54&65535;
     $56 = $1;
     $57 = (($56) + 12|0);
     HEAP32[$57>>2] = $55;
    } else if ((($45|0) == 0)) {
     $46 = $1;
     $47 = (($46) + 26|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48&65535;
     $50 = ($49|0)>(3);
     if ($50) {
      $51 = $1;
      $52 = (($51) + 12|0);
      HEAP32[$52>>2] = 1;
     }
    }
   }
   $58 = $2;
   $59 = $1;
   $60 = (($59) + 32|0);
   HEAP32[$vararg_buffer11>>2] = $60;
   $61 = (_TIFFGetField($58,262,$vararg_buffer11)|0);
   $62 = ($61|0)!=(0);
   if (!($62)) {
    $63 = $1;
    $64 = (($63) + 32|0);
    HEAP16[$64>>1] = 0;
   }
   $65 = HEAP16[$extrasamples>>1]|0;
   $66 = $65&65535;
   $67 = ($66|0)==(0);
   if ($67) {
    $68 = $1;
    $69 = (($68) + 26|0);
    $70 = HEAP16[$69>>1]|0;
    $71 = $70&65535;
    $72 = ($71|0)==(4);
    if ($72) {
     $73 = $1;
     $74 = (($73) + 32|0);
     $75 = HEAP16[$74>>1]|0;
     $76 = $75&65535;
     $77 = ($76|0)==(2);
     if ($77) {
      $78 = $1;
      $79 = (($78) + 12|0);
      HEAP32[$79>>2] = 1;
      HEAP16[$extrasamples>>1] = 1;
     }
    }
   }
   $80 = $1;
   $81 = (($80) + 26|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = $82&65535;
   $84 = HEAP16[$extrasamples>>1]|0;
   $85 = $84&65535;
   $86 = (($83) - ($85))|0;
   $colorchannels = $86;
   $87 = $2;
   HEAP32[$vararg_buffer14>>2] = $compress;
   (_TIFFGetFieldDefaulted($87,259,$vararg_buffer14)|0);
   $88 = $2;
   HEAP32[$vararg_buffer17>>2] = $planarconfig;
   (_TIFFGetFieldDefaulted($88,284,$vararg_buffer17)|0);
   $89 = $2;
   $90 = $1;
   $91 = (($90) + 32|0);
   HEAP32[$vararg_buffer20>>2] = $91;
   $92 = (_TIFFGetField($89,262,$vararg_buffer20)|0);
   $93 = ($92|0)!=(0);
   if (!($93)) {
    $94 = $colorchannels;
    if ((($94|0) == 3)) {
     $102 = $1;
     $103 = (($102) + 32|0);
     HEAP16[$103>>1] = 2;
    } else if ((($94|0) == 1)) {
     $95 = $2;
     $96 = (_isCCITTCompression($95)|0);
     $97 = ($96|0)!=(0);
     if ($97) {
      $98 = $1;
      $99 = (($98) + 32|0);
      HEAP16[$99>>1] = 0;
     } else {
      $100 = $1;
      $101 = (($100) + 32|0);
      HEAP16[$101>>1] = 1;
     }
    } else {
     $104 = $4;
     HEAP32[$vararg_buffer23>>2] = 16008;
     (_sprintf($104,15984,$vararg_buffer23)|0);
     break L1;
    }
   }
   $105 = $1;
   $106 = (($105) + 32|0);
   $107 = HEAP16[$106>>1]|0;
   $108 = $107&65535;
   do {
    if ((($108|0) == 3)) {
     $109 = $2;
     HEAP32[$vararg_buffer26>>2] = $red_orig;
     $vararg_ptr29 = (($vararg_buffer26) + 4|0);
     HEAP32[$vararg_ptr29>>2] = $green_orig;
     $vararg_ptr30 = (($vararg_buffer26) + 8|0);
     HEAP32[$vararg_ptr30>>2] = $blue_orig;
     $110 = (_TIFFGetField($109,320,$vararg_buffer26)|0);
     $111 = ($110|0)!=(0);
     if (!($111)) {
      $112 = $4;
      (_sprintf($112,16480,$vararg_buffer31)|0);
      break L1;
     }
     $113 = $1;
     $114 = (($113) + 24|0);
     $115 = HEAP16[$114>>1]|0;
     $116 = $115&65535;
     $117 = 1 << $116;
     $n_color = $117;
     $118 = $n_color;
     $119 = $118<<1;
     $120 = (__TIFFmalloc($119)|0);
     $121 = $1;
     $122 = (($121) + 36|0);
     HEAP32[$122>>2] = $120;
     $123 = $n_color;
     $124 = $123<<1;
     $125 = (__TIFFmalloc($124)|0);
     $126 = $1;
     $127 = (($126) + 40|0);
     HEAP32[$127>>2] = $125;
     $128 = $n_color;
     $129 = $128<<1;
     $130 = (__TIFFmalloc($129)|0);
     $131 = $1;
     $132 = (($131) + 44|0);
     HEAP32[$132>>2] = $130;
     $133 = $1;
     $134 = (($133) + 36|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)!=(0|0);
     if ($136) {
      $137 = $1;
      $138 = (($137) + 40|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)!=(0|0);
      if ($140) {
       $141 = $1;
       $142 = (($141) + 44|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)!=(0|0);
       if ($144) {
        $146 = $1;
        $147 = (($146) + 36|0);
        $148 = HEAP32[$147>>2]|0;
        $149 = HEAP32[$red_orig>>2]|0;
        $150 = $n_color;
        $151 = $150<<1;
        __TIFFmemcpy($148,$149,$151);
        $152 = $1;
        $153 = (($152) + 40|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = HEAP32[$green_orig>>2]|0;
        $156 = $n_color;
        $157 = $156<<1;
        __TIFFmemcpy($154,$155,$157);
        $158 = $1;
        $159 = (($158) + 44|0);
        $160 = HEAP32[$159>>2]|0;
        $161 = HEAP32[$blue_orig>>2]|0;
        $162 = $n_color;
        $163 = $162<<1;
        __TIFFmemcpy($160,$161,$163);
        label = 34;
        break;
       }
      }
     }
     $145 = $4;
     (_sprintf($145,16512,$vararg_buffer33)|0);
     break L1;
    } else if ((($108|0) == 5)) {
     $202 = $2;
     HEAP32[$vararg_buffer49>>2] = $inkset;
     (_TIFFGetFieldDefaulted($202,332,$vararg_buffer49)|0);
     $203 = HEAP16[$inkset>>1]|0;
     $204 = $203&65535;
     $205 = ($204|0)!=(1);
     if ($205) {
      $206 = $4;
      $207 = HEAP16[$inkset>>1]|0;
      $208 = $207&65535;
      HEAP32[$vararg_buffer52>>2] = 16256;
      $vararg_ptr55 = (($vararg_buffer52) + 4|0);
      HEAP32[$vararg_ptr55>>2] = $208;
      (_sprintf($206,16200,$vararg_buffer52)|0);
      break L1;
     }
     $209 = $1;
     $210 = (($209) + 26|0);
     $211 = HEAP16[$210>>1]|0;
     $212 = $211&65535;
     $213 = ($212|0)<(4);
     if ($213) {
      $214 = $4;
      $215 = $1;
      $216 = (($215) + 26|0);
      $217 = HEAP16[$216>>1]|0;
      $218 = $217&65535;
      HEAP32[$vararg_buffer56>>2] = 16120;
      $vararg_ptr59 = (($vararg_buffer56) + 4|0);
      HEAP32[$vararg_ptr59>>2] = $218;
      (_sprintf($214,16200,$vararg_buffer56)|0);
      break L1;
     } else {
      break;
     }
    } else if ((($108|0) == 32844)) {
     $219 = HEAP16[$compress>>1]|0;
     $220 = $219&65535;
     $221 = ($220|0)!=(34676);
     if ($221) {
      $222 = $4;
      HEAP32[$vararg_buffer60>>2] = 16304;
      $vararg_ptr63 = (($vararg_buffer60) + 4|0);
      HEAP32[$vararg_ptr63>>2] = 34676;
      (_sprintf($222,16264,$vararg_buffer60)|0);
      break L1;
     } else {
      $223 = $2;
      HEAP32[$vararg_buffer64>>2] = 3;
      (_TIFFSetField($223,65560,$vararg_buffer64)|0);
      $224 = $1;
      $225 = (($224) + 32|0);
      HEAP16[$225>>1] = 1;
      $226 = $1;
      $227 = (($226) + 24|0);
      HEAP16[$227>>1] = 8;
      break;
     }
    } else if ((($108|0) == 32845)) {
     $228 = HEAP16[$compress>>1]|0;
     $229 = $228&65535;
     $230 = ($229|0)!=(34676);
     if ($230) {
      $231 = HEAP16[$compress>>1]|0;
      $232 = $231&65535;
      $233 = ($232|0)!=(34677);
      if ($233) {
       $234 = $4;
       HEAP32[$vararg_buffer67>>2] = 16304;
       $vararg_ptr70 = (($vararg_buffer67) + 4|0);
       HEAP32[$vararg_ptr70>>2] = 34676;
       $vararg_ptr71 = (($vararg_buffer67) + 8|0);
       HEAP32[$vararg_ptr71>>2] = 34677;
       (_sprintf($234,16320,$vararg_buffer67)|0);
       break L1;
      }
     }
     $235 = HEAP16[$planarconfig>>1]|0;
     $236 = $235&65535;
     $237 = ($236|0)!=(1);
     if (!($237)) {
      $241 = $2;
      HEAP32[$vararg_buffer76>>2] = 3;
      (_TIFFSetField($241,65560,$vararg_buffer76)|0);
      $242 = $1;
      $243 = (($242) + 32|0);
      HEAP16[$243>>1] = 2;
      $244 = $1;
      $245 = (($244) + 24|0);
      HEAP16[$245>>1] = 8;
      break;
     }
     $238 = $4;
     $239 = HEAP16[$planarconfig>>1]|0;
     $240 = $239&65535;
     HEAP32[$vararg_buffer72>>2] = 16416;
     $vararg_ptr75 = (($vararg_buffer72) + 4|0);
     HEAP32[$vararg_ptr75>>2] = $240;
     (_sprintf($238,16368,$vararg_buffer72)|0);
     $0 = 0;
     $314 = $0;
     STACKTOP = sp;return ($314|0);
    } else if ((($108|0) == 2)) {
     $198 = $colorchannels;
     $199 = ($198|0)<(3);
     if ($199) {
      $200 = $4;
      $201 = $colorchannels;
      HEAP32[$vararg_buffer45>>2] = 16184;
      $vararg_ptr48 = (($vararg_buffer45) + 4|0);
      HEAP32[$vararg_ptr48>>2] = $201;
      (_sprintf($200,16136,$vararg_buffer45)|0);
      break L1;
     } else {
      break;
     }
    } else if ((($108|0) == 8)) {
    } else if ((($108|0) == 1) | (($108|0) == 0)) {
     label = 34;
    } else if ((($108|0) == 6)) {
     $190 = HEAP16[$planarconfig>>1]|0;
     $191 = $190&65535;
     $192 = ($191|0)==(1);
     if ($192) {
      $193 = HEAP16[$compress>>1]|0;
      $194 = $193&65535;
      $cond = ($194|0)==(7);
      if ($cond) {
       $195 = $2;
       HEAP32[$vararg_buffer42>>2] = 1;
       (_TIFFSetField($195,65538,$vararg_buffer42)|0);
       $196 = $1;
       $197 = (($196) + 32|0);
       HEAP16[$197>>1] = 2;
      } else {
      }
     }
    } else {
     $246 = $4;
     $247 = $1;
     $248 = (($247) + 32|0);
     $249 = HEAP16[$248>>1]|0;
     $250 = $249&65535;
     HEAP32[$vararg_buffer79>>2] = 16008;
     $vararg_ptr82 = (($vararg_buffer79) + 4|0);
     HEAP32[$vararg_ptr82>>2] = $250;
     (_sprintf($246,16440,$vararg_buffer79)|0);
     break L1;
    }
   } while(0);
   if ((label|0) == 34) {
    $164 = HEAP16[$planarconfig>>1]|0;
    $165 = $164&65535;
    $166 = ($165|0)==(1);
    if ($166) {
     $167 = $1;
     $168 = (($167) + 26|0);
     $169 = HEAP16[$168>>1]|0;
     $170 = $169&65535;
     $171 = ($170|0)!=(1);
     if ($171) {
      $172 = $1;
      $173 = (($172) + 24|0);
      $174 = HEAP16[$173>>1]|0;
      $175 = $174&65535;
      $176 = ($175|0)<(8);
      if ($176) {
       $177 = $4;
       $178 = $1;
       $179 = (($178) + 32|0);
       $180 = HEAP16[$179>>1]|0;
       $181 = $180&65535;
       $182 = $1;
       $183 = (($182) + 26|0);
       $184 = HEAP16[$183>>1]|0;
       $185 = $184&65535;
       $186 = $1;
       $187 = (($186) + 24|0);
       $188 = HEAP16[$187>>1]|0;
       $189 = $188&65535;
       HEAP32[$vararg_buffer35>>2] = 16008;
       $vararg_ptr38 = (($vararg_buffer35) + 4|0);
       HEAP32[$vararg_ptr38>>2] = $181;
       $vararg_ptr39 = (($vararg_buffer35) + 8|0);
       HEAP32[$vararg_ptr39>>2] = 16120;
       $vararg_ptr40 = (($vararg_buffer35) + 12|0);
       HEAP32[$vararg_ptr40>>2] = $185;
       $vararg_ptr41 = (($vararg_buffer35) + 16|0);
       HEAP32[$vararg_ptr41>>2] = $189;
       (_sprintf($177,16040,$vararg_buffer35)|0);
       break L1;
      }
     }
    }
   }
   $251 = $1;
   $252 = (($251) + 56|0);
   HEAP32[$252>>2] = 0;
   $253 = $1;
   $254 = (($253) + 60|0);
   HEAP32[$254>>2] = 0;
   $255 = $1;
   $256 = (($255) + 64|0);
   HEAP32[$256>>2] = 0;
   $257 = $1;
   $258 = (($257) + 68|0);
   HEAP32[$258>>2] = 0;
   $259 = $1;
   $260 = (($259) + 72|0);
   HEAP32[$260>>2] = 0;
   $261 = $1;
   $262 = (($261) + 76|0);
   HEAP32[$262>>2] = 0;
   $263 = $1;
   $264 = (($263) + 80|0);
   HEAP32[$264>>2] = 0;
   $265 = $2;
   $266 = $1;
   $267 = (($266) + 16|0);
   HEAP32[$vararg_buffer83>>2] = $267;
   (_TIFFGetField($265,256,$vararg_buffer83)|0);
   $268 = $2;
   $269 = $1;
   $270 = (($269) + 20|0);
   HEAP32[$vararg_buffer86>>2] = $270;
   (_TIFFGetField($268,257,$vararg_buffer86)|0);
   $271 = $2;
   $272 = $1;
   $273 = (($272) + 28|0);
   HEAP32[$vararg_buffer89>>2] = $273;
   (_TIFFGetFieldDefaulted($271,274,$vararg_buffer89)|0);
   $274 = HEAP16[$planarconfig>>1]|0;
   $275 = $274&65535;
   $276 = ($275|0)==(2);
   if ($276) {
    $277 = $1;
    $278 = (($277) + 26|0);
    $279 = HEAP16[$278>>1]|0;
    $280 = $279&65535;
    $281 = ($280|0)>(1);
    $283 = $281;
   } else {
    $283 = 0;
   }
   $282 = $283 ^ 1;
   $284 = $282&1;
   $285 = $1;
   $286 = (($285) + 8|0);
   HEAP32[$286>>2] = $284;
   $287 = $1;
   $288 = (($287) + 8|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = ($289|0)!=(0);
   do {
    if ($290) {
     $291 = $1;
     $292 = (_PickContigCase($291)|0);
     $293 = ($292|0)!=(0);
     if ($293) {
      break;
     } else {
      $294 = $4;
      (_sprintf($294,16544,$vararg_buffer92)|0);
      break L1;
     }
    } else {
     $295 = $1;
     $296 = (_PickSeparateCase($295)|0);
     $297 = ($296|0)!=(0);
     if ($297) {
      break;
     } else {
      $298 = $4;
      (_sprintf($298,16544,$vararg_buffer94)|0);
      break L1;
     }
    }
   } while(0);
   $0 = 1;
   $314 = $0;
   STACKTOP = sp;return ($314|0);
   break;
  }
  default: {
   $29 = $4;
   $30 = $1;
   $31 = (($30) + 24|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32&65535;
   HEAP32[$vararg_buffer1>>2] = $33;
   (_sprintf($29,15928,$vararg_buffer1)|0);
  }
  }
 } while(0);
 $299 = $1;
 $300 = (($299) + 36|0);
 $301 = HEAP32[$300>>2]|0;
 __TIFFfree($301);
 $302 = $1;
 $303 = (($302) + 40|0);
 $304 = HEAP32[$303>>2]|0;
 __TIFFfree($304);
 $305 = $1;
 $306 = (($305) + 44|0);
 $307 = HEAP32[$306>>2]|0;
 __TIFFfree($307);
 $308 = $1;
 $309 = (($308) + 44|0);
 HEAP32[$309>>2] = 0;
 $310 = $1;
 $311 = (($310) + 40|0);
 HEAP32[$311>>2] = 0;
 $312 = $1;
 $313 = (($312) + 36|0);
 HEAP32[$313>>2] = 0;
 $0 = 0;
 $314 = $0;
 STACKTOP = sp;return ($314|0);
}
function _TIFFRGBAImageGet($img,$raster,$w,$h) {
 $img = $img|0;
 $raster = $raster|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $1 = $img;
 $2 = $raster;
 $3 = $w;
 $4 = $h;
 $5 = $1;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $1;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 628|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = (_TIFFFileName($14)|0);
  _TIFFErrorExt($12,$15,16576,$vararg_buffer);
  $0 = 0;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $16 = $1;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = $1;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 628|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = (_TIFFFileName($25)|0);
  _TIFFErrorExt($23,$26,16600,$vararg_buffer1);
  $0 = 0;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 } else {
  $27 = $1;
  $28 = (($27) + 48|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $1;
  $31 = $2;
  $32 = $3;
  $33 = $4;
  $34 = (FUNCTION_TABLE_iiiii[$29 & 255]($30,$31,$32,$33)|0);
  $0 = $34;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _TIFFReadRGBAImageOriented($tif,$rwidth,$rheight,$raster,$orientation,$stop) {
 $tif = $tif|0;
 $rwidth = $rwidth|0;
 $rheight = $rheight|0;
 $raster = $raster|0;
 $orientation = $orientation|0;
 $stop = $stop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $emsg = 0, $img = 0, $ok = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $emsg = sp + 128|0;
 $img = sp + 24|0;
 $0 = $tif;
 $1 = $rwidth;
 $2 = $rheight;
 $3 = $raster;
 $4 = $orientation;
 $5 = $stop;
 _memset(($emsg|0),0,1024)|0;
 $6 = $0;
 $7 = (_TIFFRGBAImageOK($6,$emsg)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $0;
  $10 = $5;
  $11 = (_TIFFRGBAImageBegin($img,$9,$10,$emsg)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $4;
   $14 = $13&65535;
   $15 = (($img) + 30|0);
   HEAP16[$15>>1] = $14;
   $16 = $3;
   $17 = $2;
   $18 = (($img) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) - ($19))|0;
   $21 = $1;
   $22 = Math_imul($20, $21)|0;
   $23 = (($16) + ($22<<2)|0);
   $24 = $1;
   $25 = (($img) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_TIFFRGBAImageGet($img,$23,$24,$26)|0);
   $ok = $27;
   _TIFFRGBAImageEnd($img);
   $33 = $ok;
   STACKTOP = sp;return ($33|0);
  }
 }
 $28 = $0;
 $29 = (($28) + 628|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $0;
 $32 = (_TIFFFileName($31)|0);
 HEAP32[$vararg_buffer>>2] = $emsg;
 _TIFFErrorExt($30,$32,16664,$vararg_buffer);
 $ok = 0;
 $33 = $ok;
 STACKTOP = sp;return ($33|0);
}
function _isCCITTCompression($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compress = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $compress = sp + 8|0;
 $0 = $tif;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $compress;
 (_TIFFGetField($1,259,$vararg_buffer)|0);
 $2 = HEAP16[$compress>>1]|0;
 $3 = $2&65535;
 $4 = ($3|0)==(3);
 if ($4) {
  $15 = 1;
 } else {
  $5 = HEAP16[$compress>>1]|0;
  $6 = $5&65535;
  $7 = ($6|0)==(4);
  if ($7) {
   $15 = 1;
  } else {
   $8 = HEAP16[$compress>>1]|0;
   $9 = $8&65535;
   $10 = ($9|0)==(2);
   if ($10) {
    $15 = 1;
   } else {
    $11 = HEAP16[$compress>>1]|0;
    $12 = $11&65535;
    $13 = ($12|0)==(32771);
    $15 = $13;
   }
  }
 }
 $14 = $15&1;
 STACKTOP = sp;return ($14|0);
}
function _PickContigCase($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $SubsamplingHor = 0, $SubsamplingVer = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $SubsamplingHor = sp + 14|0;
 $SubsamplingVer = sp + 12|0;
 $0 = $img;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_TIFFIsTiled($2)|0);
 $4 = ($3|0)!=(0);
 $5 = $4 ? 23 : 24;
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 $8 = $0;
 $9 = (($8) + 52|0);
 HEAP32[$9>>2] = 0;
 $10 = $0;
 $11 = (($10) + 32|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 L1: do {
  switch ($13|0) {
  case 5:  {
   $61 = $0;
   $62 = (_buildMap($61)|0);
   $63 = ($62|0)!=(0);
   if ($63) {
    $64 = $0;
    $65 = (($64) + 24|0);
    $66 = HEAP16[$65>>1]|0;
    $67 = $66&65535;
    $68 = ($67|0)==(8);
    if ($68) {
     $69 = $0;
     $70 = (($69) + 56|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)!=(0|0);
     if ($72) {
      $75 = $0;
      $76 = (($75) + 52|0);
      HEAP32[$76>>2] = 32;
     } else {
      $73 = $0;
      $74 = (($73) + 52|0);
      HEAP32[$74>>2] = 31;
     }
    }
   }
   break;
  }
  case 6:  {
   $120 = $0;
   $121 = (($120) + 24|0);
   $122 = HEAP16[$121>>1]|0;
   $123 = $122&65535;
   $124 = ($123|0)==(8);
   if ($124) {
    $125 = $0;
    $126 = (($125) + 26|0);
    $127 = HEAP16[$126>>1]|0;
    $128 = $127&65535;
    $129 = ($128|0)==(3);
    if ($129) {
     $130 = $0;
     $131 = (_initYCbCrConversion($130)|0);
     $132 = ($131|0)!=(0);
     if ($132) {
      $133 = $0;
      $134 = HEAP32[$133>>2]|0;
      HEAP32[$vararg_buffer>>2] = $SubsamplingHor;
      $vararg_ptr1 = (($vararg_buffer) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $SubsamplingVer;
      (_TIFFGetFieldDefaulted($134,530,$vararg_buffer)|0);
      $135 = HEAP16[$SubsamplingHor>>1]|0;
      $136 = $135&65535;
      $137 = $136 << 4;
      $138 = HEAP16[$SubsamplingVer>>1]|0;
      $139 = $138&65535;
      $140 = $137 | $139;
      switch ($140|0) {
      case 18:  {
       $151 = $0;
       $152 = (($151) + 52|0);
       HEAP32[$152>>2] = 48;
       break;
      }
      case 17:  {
       $153 = $0;
       $154 = (($153) + 52|0);
       HEAP32[$154>>2] = 49;
       break;
      }
      case 68:  {
       $141 = $0;
       $142 = (($141) + 52|0);
       HEAP32[$142>>2] = 43;
       break;
      }
      case 66:  {
       $143 = $0;
       $144 = (($143) + 52|0);
       HEAP32[$144>>2] = 44;
       break;
      }
      case 65:  {
       $145 = $0;
       $146 = (($145) + 52|0);
       HEAP32[$146>>2] = 45;
       break;
      }
      case 34:  {
       $147 = $0;
       $148 = (($147) + 52|0);
       HEAP32[$148>>2] = 46;
       break;
      }
      case 33:  {
       $149 = $0;
       $150 = (($149) + 52|0);
       HEAP32[$150>>2] = 47;
       break;
      }
      default: {
      }
      }
     }
    }
   }
   break;
  }
  case 1: case 0:  {
   $92 = $0;
   $93 = (_buildMap($92)|0);
   $94 = ($93|0)!=(0);
   if ($94) {
    $95 = $0;
    $96 = (($95) + 24|0);
    $97 = HEAP16[$96>>1]|0;
    $98 = $97&65535;
    switch ($98|0) {
    case 4:  {
     $114 = $0;
     $115 = (($114) + 52|0);
     HEAP32[$115>>2] = 40;
     break;
    }
    case 2:  {
     $116 = $0;
     $117 = (($116) + 52|0);
     HEAP32[$117>>2] = 41;
     break;
    }
    case 1:  {
     $118 = $0;
     $119 = (($118) + 52|0);
     HEAP32[$119>>2] = 42;
     break;
    }
    case 16:  {
     $99 = $0;
     $100 = (($99) + 52|0);
     HEAP32[$100>>2] = 37;
     break;
    }
    case 8:  {
     $101 = $0;
     $102 = (($101) + 12|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103|0)!=(0);
     if ($104) {
      $105 = $0;
      $106 = (($105) + 26|0);
      $107 = HEAP16[$106>>1]|0;
      $108 = $107&65535;
      $109 = ($108|0)==(2);
      if ($109) {
       $110 = $0;
       $111 = (($110) + 52|0);
       HEAP32[$111>>2] = 38;
      } else {
       label = 49;
      }
     } else {
      label = 49;
     }
     if ((label|0) == 49) {
      $112 = $0;
      $113 = (($112) + 52|0);
      HEAP32[$113>>2] = 39;
     }
     break;
    }
    default: {
    }
    }
   }
   break;
  }
  case 3:  {
   $77 = $0;
   $78 = (_buildMap($77)|0);
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = $0;
    $81 = (($80) + 24|0);
    $82 = HEAP16[$81>>1]|0;
    $83 = $82&65535;
    if ((($83|0) == 4)) {
     $86 = $0;
     $87 = (($86) + 52|0);
     HEAP32[$87>>2] = 34;
    } else if ((($83|0) == 2)) {
     $88 = $0;
     $89 = (($88) + 52|0);
     HEAP32[$89>>2] = 35;
    } else if ((($83|0) == 1)) {
     $90 = $0;
     $91 = (($90) + 52|0);
     HEAP32[$91>>2] = 36;
    } else if ((($83|0) == 8)) {
     $84 = $0;
     $85 = (($84) + 52|0);
     HEAP32[$85>>2] = 33;
    }
   }
   break;
  }
  case 2:  {
   $14 = $0;
   $15 = (($14) + 24|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16&65535;
   if ((($17|0) == 8)) {
    $18 = $0;
    $19 = (($18) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(1);
    if ($21) {
     $22 = $0;
     $23 = (($22) + 52|0);
     HEAP32[$23>>2] = 25;
    } else {
     $24 = $0;
     $25 = (($24) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(2);
     if ($27) {
      $28 = $0;
      $29 = (_BuildMapUaToAa($28)|0);
      $30 = ($29|0)!=(0);
      if ($30) {
       $31 = $0;
       $32 = (($31) + 52|0);
       HEAP32[$32>>2] = 26;
      }
     } else {
      $33 = $0;
      $34 = (($33) + 52|0);
      HEAP32[$34>>2] = 27;
     }
    }
   } else if ((($17|0) == 16)) {
    $35 = $0;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(1);
    if ($38) {
     $39 = $0;
     $40 = (_BuildMapBitdepth16To8($39)|0);
     $41 = ($40|0)!=(0);
     if ($41) {
      $42 = $0;
      $43 = (($42) + 52|0);
      HEAP32[$43>>2] = 28;
     }
    } else {
     $44 = $0;
     $45 = (($44) + 12|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)==(2);
     if ($47) {
      $48 = $0;
      $49 = (_BuildMapBitdepth16To8($48)|0);
      $50 = ($49|0)!=(0);
      if ($50) {
       $51 = $0;
       $52 = (_BuildMapUaToAa($51)|0);
       $53 = ($52|0)!=(0);
       if ($53) {
        $54 = $0;
        $55 = (($54) + 52|0);
        HEAP32[$55>>2] = 29;
       }
      }
     } else {
      $56 = $0;
      $57 = (_BuildMapBitdepth16To8($56)|0);
      $58 = ($57|0)!=(0);
      if ($58) {
       $59 = $0;
       $60 = (($59) + 52|0);
       HEAP32[$60>>2] = 30;
      }
     }
    }
   }
   break;
  }
  case 8:  {
   $155 = $0;
   $156 = (_buildMap($155)|0);
   $157 = ($156|0)!=(0);
   if (!($157)) {
    break L1;
   }
   $158 = $0;
   $159 = (($158) + 24|0);
   $160 = HEAP16[$159>>1]|0;
   $161 = $160&65535;
   $162 = ($161|0)==(8);
   if ($162) {
    $163 = $0;
    $164 = (_initCIELabConversion($163)|0);
    $165 = $0;
    $166 = (($165) + 52|0);
    HEAP32[$166>>2] = $164;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $167 = $0;
 $168 = (($167) + 48|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = ($169|0)!=(0|0);
 if (!($170)) {
  $176 = 0;
  $175 = $176&1;
  STACKTOP = sp;return ($175|0);
 }
 $171 = $0;
 $172 = (($171) + 52|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = ($173|0)!=(0|0);
 $176 = $174;
 $175 = $176&1;
 STACKTOP = sp;return ($175|0);
}
function _PickSeparateCase($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $hs = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $hs = sp + 14|0;
 $vs = sp + 12|0;
 $0 = $img;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_TIFFIsTiled($2)|0);
 $4 = ($3|0)!=(0);
 $5 = $4 ? 50 : 51;
 $6 = $0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 $8 = $0;
 $9 = (($8) + 52|0);
 HEAP32[$9>>2] = 0;
 $10 = $0;
 $11 = (($10) + 32|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 switch ($13|0) {
 case 6:  {
  $75 = $0;
  $76 = (($75) + 24|0);
  $77 = HEAP16[$76>>1]|0;
  $78 = $77&65535;
  $79 = ($78|0)==(8);
  if ($79) {
   $80 = $0;
   $81 = (($80) + 26|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = $82&65535;
   $84 = ($83|0)==(3);
   if ($84) {
    $85 = $0;
    $86 = (_initYCbCrConversion($85)|0);
    $87 = ($86|0)!=(0);
    if ($87) {
     $88 = $0;
     $89 = HEAP32[$88>>2]|0;
     HEAP32[$vararg_buffer>>2] = $hs;
     $vararg_ptr1 = (($vararg_buffer) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $vs;
     (_TIFFGetFieldDefaulted($89,530,$vararg_buffer)|0);
     $90 = HEAP16[$hs>>1]|0;
     $91 = $90&65535;
     $92 = $91 << 4;
     $93 = HEAP16[$vs>>1]|0;
     $94 = $93&65535;
     $95 = $92 | $94;
     $cond = ($95|0)==(17);
     if ($cond) {
      $96 = $0;
      $97 = (($96) + 52|0);
      HEAP32[$97>>2] = 59;
     }
    }
   }
  }
  break;
 }
 case 5:  {
  $61 = $0;
  $62 = (($61) + 24|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63&65535;
  $65 = ($64|0)==(8);
  if ($65) {
   $66 = $0;
   $67 = (($66) + 26|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68&65535;
   $70 = ($69|0)==(4);
   if ($70) {
    $71 = $0;
    $72 = (($71) + 12|0);
    HEAP32[$72>>2] = 1;
    $73 = $0;
    $74 = (($73) + 52|0);
    HEAP32[$74>>2] = 58;
   }
  }
  break;
 }
 case 2: case 1: case 0:  {
  $14 = $0;
  $15 = (($14) + 24|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  if ((($17|0) == 16)) {
   $35 = $0;
   $36 = (($35) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(1);
   if ($38) {
    $39 = $0;
    $40 = (_BuildMapBitdepth16To8($39)|0);
    $41 = ($40|0)!=(0);
    if ($41) {
     $42 = $0;
     $43 = (($42) + 52|0);
     HEAP32[$43>>2] = 55;
    }
   } else {
    $44 = $0;
    $45 = (($44) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)==(2);
    if ($47) {
     $48 = $0;
     $49 = (_BuildMapBitdepth16To8($48)|0);
     $50 = ($49|0)!=(0);
     if ($50) {
      $51 = $0;
      $52 = (_BuildMapUaToAa($51)|0);
      $53 = ($52|0)!=(0);
      if ($53) {
       $54 = $0;
       $55 = (($54) + 52|0);
       HEAP32[$55>>2] = 56;
      }
     }
    } else {
     $56 = $0;
     $57 = (_BuildMapBitdepth16To8($56)|0);
     $58 = ($57|0)!=(0);
     if ($58) {
      $59 = $0;
      $60 = (($59) + 52|0);
      HEAP32[$60>>2] = 57;
     }
    }
   }
  } else if ((($17|0) == 8)) {
   $18 = $0;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   if ($21) {
    $22 = $0;
    $23 = (($22) + 52|0);
    HEAP32[$23>>2] = 52;
   } else {
    $24 = $0;
    $25 = (($24) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(2);
    if ($27) {
     $28 = $0;
     $29 = (_BuildMapUaToAa($28)|0);
     $30 = ($29|0)!=(0);
     if ($30) {
      $31 = $0;
      $32 = (($31) + 52|0);
      HEAP32[$32>>2] = 53;
     }
    } else {
     $33 = $0;
     $34 = (($33) + 52|0);
     HEAP32[$34>>2] = 54;
    }
   }
  }
  break;
 }
 default: {
 }
 }
 $98 = $0;
 $99 = (($98) + 48|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)!=(0|0);
 if (!($101)) {
  $107 = 0;
  $106 = $107&1;
  STACKTOP = sp;return ($106|0);
 }
 $102 = $0;
 $103 = (($102) + 52|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)!=(0|0);
 $107 = $105;
 $106 = $107&1;
 STACKTOP = sp;return ($106|0);
}
function _gtTileContig($img,$raster,$w,$h) {
 $img = $img|0;
 $raster = $raster|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $col = 0, $flip = 0, $fromskew = 0, $left = 0, $line = 0, $npix = 0, $nrow = 0, $pos = 0, $put = 0;
 var $ret = 0, $right = 0, $row = 0, $rowstoread = 0, $temp = 0, $th = 0, $tif = 0, $toskew = 0, $tw = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $tw = sp + 64|0;
 $th = sp + 48|0;
 $1 = $img;
 $2 = $raster;
 $3 = $w;
 $4 = $h;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $tif = $6;
 $7 = $1;
 $8 = (($7) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $put = $9;
 $ret = 1;
 $10 = $tif;
 $11 = (_TIFFTileSize($10)|0);
 $12 = (__TIFFmalloc($11)|0);
 $buf = $12;
 $13 = $buf;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = $tif;
  $16 = (($15) + 628|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $tif;
  $19 = (_TIFFFileName($18)|0);
  HEAP32[$vararg_buffer>>2] = 16952;
  _TIFFErrorExt($17,$19,16664,$vararg_buffer);
  $0 = 0;
  $189 = $0;
  STACKTOP = sp;return ($189|0);
 }
 $20 = $buf;
 $21 = $tif;
 $22 = (_TIFFTileSize($21)|0);
 __TIFFmemset($20,0,$22);
 $23 = $tif;
 HEAP32[$vararg_buffer1>>2] = $tw;
 (_TIFFGetField($23,322,$vararg_buffer1)|0);
 $24 = $tif;
 HEAP32[$vararg_buffer4>>2] = $th;
 (_TIFFGetField($24,323,$vararg_buffer4)|0);
 $25 = $1;
 $26 = (_setorientation($25)|0);
 $flip = $26;
 $27 = $flip;
 $28 = $27 & 1;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $4;
  $31 = (($30) - 1)|0;
  $y = $31;
  $32 = HEAP32[$tw>>2]|0;
  $33 = $3;
  $34 = (($32) + ($33))|0;
  $35 = (0 - ($34))|0;
  $toskew = $35;
 } else {
  $y = 0;
  $36 = HEAP32[$tw>>2]|0;
  $37 = $3;
  $38 = (($36) - ($37))|0;
  $39 = (0 - ($38))|0;
  $toskew = $39;
 }
 $row = 0;
 while(1) {
  $40 = $row;
  $41 = $4;
  $42 = ($40>>>0)<($41>>>0);
  if (!($42)) {
   break;
  }
  $43 = HEAP32[$th>>2]|0;
  $44 = $row;
  $45 = $1;
  $46 = (($45) + 84|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($44) + ($47))|0;
  $49 = HEAP32[$th>>2]|0;
  $50 = (($48>>>0) % ($49>>>0))&-1;
  $51 = (($43) - ($50))|0;
  $rowstoread = $51;
  $52 = $row;
  $53 = $rowstoread;
  $54 = (($52) + ($53))|0;
  $55 = $4;
  $56 = ($54>>>0)>($55>>>0);
  if ($56) {
   $57 = $4;
   $58 = $row;
   $59 = (($57) - ($58))|0;
   $61 = $59;
  } else {
   $60 = $rowstoread;
   $61 = $60;
  }
  $nrow = $61;
  $col = 0;
  while(1) {
   $62 = $col;
   $63 = $3;
   $64 = ($62>>>0)<($63>>>0);
   if (!($64)) {
    break;
   }
   $65 = $tif;
   $66 = $buf;
   $67 = $col;
   $68 = $1;
   $69 = (($68) + 88|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($67) + ($70))|0;
   $72 = $row;
   $73 = $1;
   $74 = (($73) + 84|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($72) + ($75))|0;
   $77 = (_TIFFReadTile($65,$66,$71,$76,0,0)|0);
   $78 = ($77|0)==(-1);
   if ($78) {
    $79 = $1;
    $80 = (($79) + 4|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)!=(0);
    if ($82) {
     label = 15;
     break;
    }
   }
   $83 = $row;
   $84 = $1;
   $85 = (($84) + 84|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($83) + ($86))|0;
   $88 = HEAP32[$th>>2]|0;
   $89 = (($87>>>0) % ($88>>>0))&-1;
   $90 = $tif;
   $91 = (_TIFFTileRowSize($90)|0);
   $92 = Math_imul($89, $91)|0;
   $pos = $92;
   $93 = $col;
   $94 = HEAP32[$tw>>2]|0;
   $95 = (($93) + ($94))|0;
   $96 = $3;
   $97 = ($95>>>0)>($96>>>0);
   if ($97) {
    $98 = $3;
    $99 = $col;
    $100 = (($98) - ($99))|0;
    $npix = $100;
    $101 = HEAP32[$tw>>2]|0;
    $102 = $npix;
    $103 = (($101) - ($102))|0;
    $fromskew = $103;
    $104 = $put;
    $105 = $1;
    $106 = $2;
    $107 = $y;
    $108 = $3;
    $109 = Math_imul($107, $108)|0;
    $110 = (($106) + ($109<<2)|0);
    $111 = $col;
    $112 = (($110) + ($111<<2)|0);
    $113 = $col;
    $114 = $y;
    $115 = $npix;
    $116 = $nrow;
    $117 = $fromskew;
    $118 = $toskew;
    $119 = $fromskew;
    $120 = (($118) + ($119))|0;
    $121 = $buf;
    $122 = $pos;
    $123 = (($121) + ($122)|0);
    FUNCTION_TABLE_viiiiiiiii[$104 & 63]($105,$112,$113,$114,$115,$116,$117,$120,$123);
   } else {
    $124 = $put;
    $125 = $1;
    $126 = $2;
    $127 = $y;
    $128 = $3;
    $129 = Math_imul($127, $128)|0;
    $130 = (($126) + ($129<<2)|0);
    $131 = $col;
    $132 = (($130) + ($131<<2)|0);
    $133 = $col;
    $134 = $y;
    $135 = HEAP32[$tw>>2]|0;
    $136 = $nrow;
    $137 = $toskew;
    $138 = $buf;
    $139 = $pos;
    $140 = (($138) + ($139)|0);
    FUNCTION_TABLE_viiiiiiiii[$124 & 63]($125,$132,$133,$134,$135,$136,0,$137,$140);
   }
   $141 = HEAP32[$tw>>2]|0;
   $142 = $col;
   $143 = (($142) + ($141))|0;
   $col = $143;
  }
  if ((label|0) == 15) {
   label = 0;
   $ret = 0;
  }
  $144 = $flip;
  $145 = $144 & 1;
  $146 = ($145|0)!=(0);
  if ($146) {
   $147 = $nrow;
   $148 = (0 - ($147))|0;
   $152 = $148;
  } else {
   $149 = $nrow;
   $152 = $149;
  }
  $150 = $y;
  $151 = (($150) + ($152))|0;
  $y = $151;
  $153 = $nrow;
  $154 = $row;
  $155 = (($154) + ($153))|0;
  $row = $155;
 }
 $156 = $buf;
 __TIFFfree($156);
 $157 = $flip;
 $158 = $157 & 2;
 $159 = ($158|0)!=(0);
 if ($159) {
  $line = 0;
  while(1) {
   $160 = $line;
   $161 = $4;
   $162 = ($160>>>0)<($161>>>0);
   if (!($162)) {
    break;
   }
   $163 = $2;
   $164 = $line;
   $165 = $3;
   $166 = Math_imul($164, $165)|0;
   $167 = (($163) + ($166<<2)|0);
   $left = $167;
   $168 = $left;
   $169 = $3;
   $170 = (($168) + ($169<<2)|0);
   $171 = (($170) + -4|0);
   $right = $171;
   while(1) {
    $172 = $left;
    $173 = $right;
    $174 = ($172>>>0)<($173>>>0);
    if (!($174)) {
     break;
    }
    $175 = $left;
    $176 = HEAP32[$175>>2]|0;
    $temp = $176;
    $177 = $right;
    $178 = HEAP32[$177>>2]|0;
    $179 = $left;
    HEAP32[$179>>2] = $178;
    $180 = $temp;
    $181 = $right;
    HEAP32[$181>>2] = $180;
    $182 = $left;
    $183 = (($182) + 4|0);
    $left = $183;
    $184 = $right;
    $185 = (($184) + -4|0);
    $right = $185;
   }
   $186 = $line;
   $187 = (($186) + 1)|0;
   $line = $187;
  }
 }
 $188 = $ret;
 $0 = $188;
 $189 = $0;
 STACKTOP = sp;return ($189|0);
}
function _gtStripContig($img,$raster,$w,$h) {
 $img = $img|0;
 $raster = $raster|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $flip = 0, $fromskew = 0, $imagewidth = 0, $left = 0, $line = 0, $nrow = 0, $nrowsub = 0, $pos = 0, $put = 0, $ret = 0, $right = 0, $row = 0, $rowsperstrip = 0, $rowstoread = 0;
 var $scanline = 0, $subsamplinghor = 0, $subsamplingver = 0, $temp = 0, $tif = 0, $toskew = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_ptr6 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp;
 $rowsperstrip = sp + 60|0;
 $subsamplinghor = sp + 120|0;
 $subsamplingver = sp + 122|0;
 $1 = $img;
 $2 = $raster;
 $3 = $w;
 $4 = $h;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $tif = $6;
 $7 = $1;
 $8 = (($7) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $put = $9;
 $10 = $1;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $imagewidth = $12;
 $ret = 1;
 $13 = $tif;
 $14 = (_TIFFStripSize($13)|0);
 $15 = (__TIFFmalloc($14)|0);
 $buf = $15;
 $16 = $buf;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = $tif;
  $19 = (($18) + 628|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $tif;
  $22 = (_TIFFFileName($21)|0);
  _TIFFErrorExt($20,$22,17360,$vararg_buffer);
  $0 = 0;
  $184 = $0;
  STACKTOP = sp;return ($184|0);
 }
 $23 = $buf;
 $24 = $tif;
 $25 = (_TIFFStripSize($24)|0);
 __TIFFmemset($23,0,$25);
 $26 = $1;
 $27 = (_setorientation($26)|0);
 $flip = $27;
 $28 = $flip;
 $29 = $28 & 1;
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $4;
  $32 = (($31) - 1)|0;
  $y = $32;
  $33 = $3;
  $34 = $3;
  $35 = (($33) + ($34))|0;
  $36 = (0 - ($35))|0;
  $toskew = $36;
 } else {
  $y = 0;
  $37 = $3;
  $38 = $3;
  $39 = (($37) - ($38))|0;
  $40 = (0 - ($39))|0;
  $toskew = $40;
 }
 $41 = $tif;
 HEAP32[$vararg_buffer1>>2] = $rowsperstrip;
 (_TIFFGetFieldDefaulted($41,278,$vararg_buffer1)|0);
 $42 = $tif;
 HEAP32[$vararg_buffer3>>2] = $subsamplinghor;
 $vararg_ptr6 = (($vararg_buffer3) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $subsamplingver;
 (_TIFFGetFieldDefaulted($42,530,$vararg_buffer3)|0);
 $43 = $tif;
 $44 = (_TIFFScanlineSize($43)|0);
 $scanline = $44;
 $45 = $3;
 $46 = $imagewidth;
 $47 = ($45>>>0)<($46>>>0);
 if ($47) {
  $48 = $imagewidth;
  $49 = $3;
  $50 = (($48) - ($49))|0;
  $51 = $50;
 } else {
  $51 = 0;
 }
 $fromskew = $51;
 $row = 0;
 while(1) {
  $52 = $row;
  $53 = $4;
  $54 = ($52>>>0)<($53>>>0);
  if (!($54)) {
   break;
  }
  $55 = HEAP32[$rowsperstrip>>2]|0;
  $56 = $row;
  $57 = $1;
  $58 = (($57) + 84|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($56) + ($59))|0;
  $61 = HEAP32[$rowsperstrip>>2]|0;
  $62 = (($60>>>0) % ($61>>>0))&-1;
  $63 = (($55) - ($62))|0;
  $rowstoread = $63;
  $64 = $row;
  $65 = $rowstoread;
  $66 = (($64) + ($65))|0;
  $67 = $4;
  $68 = ($66>>>0)>($67>>>0);
  if ($68) {
   $69 = $4;
   $70 = $row;
   $71 = (($69) - ($70))|0;
   $73 = $71;
  } else {
   $72 = $rowstoread;
   $73 = $72;
  }
  $nrow = $73;
  $74 = $nrow;
  $nrowsub = $74;
  $75 = $nrowsub;
  $76 = HEAP16[$subsamplingver>>1]|0;
  $77 = $76&65535;
  $78 = (($75>>>0) % ($77>>>0))&-1;
  $79 = ($78|0)!=(0);
  if ($79) {
   $80 = HEAP16[$subsamplingver>>1]|0;
   $81 = $80&65535;
   $82 = $nrowsub;
   $83 = HEAP16[$subsamplingver>>1]|0;
   $84 = $83&65535;
   $85 = (($82>>>0) % ($84>>>0))&-1;
   $86 = (($81) - ($85))|0;
   $87 = $nrowsub;
   $88 = (($87) + ($86))|0;
   $nrowsub = $88;
  }
  $89 = $tif;
  $90 = $tif;
  $91 = $row;
  $92 = $1;
  $93 = (($92) + 84|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($91) + ($94))|0;
  $96 = (_TIFFComputeStrip($90,$95,0)|0);
  $97 = $buf;
  $98 = $row;
  $99 = $1;
  $100 = (($99) + 84|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) + ($101))|0;
  $103 = HEAP32[$rowsperstrip>>2]|0;
  $104 = (($102>>>0) % ($103>>>0))&-1;
  $105 = $nrowsub;
  $106 = (($104) + ($105))|0;
  $107 = $scanline;
  $108 = Math_imul($106, $107)|0;
  $109 = (_TIFFReadEncodedStrip($89,$96,$97,$108)|0);
  $110 = ($109|0)==(-1);
  if ($110) {
   $111 = $1;
   $112 = (($111) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($113|0)!=(0);
   if ($114) {
    label = 18;
    break;
   }
  }
  $115 = $row;
  $116 = $1;
  $117 = (($116) + 84|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($115) + ($118))|0;
  $120 = HEAP32[$rowsperstrip>>2]|0;
  $121 = (($119>>>0) % ($120>>>0))&-1;
  $122 = $scanline;
  $123 = Math_imul($121, $122)|0;
  $pos = $123;
  $124 = $put;
  $125 = $1;
  $126 = $2;
  $127 = $y;
  $128 = $3;
  $129 = Math_imul($127, $128)|0;
  $130 = (($126) + ($129<<2)|0);
  $131 = $y;
  $132 = $3;
  $133 = $nrow;
  $134 = $fromskew;
  $135 = $toskew;
  $136 = $buf;
  $137 = $pos;
  $138 = (($136) + ($137)|0);
  FUNCTION_TABLE_viiiiiiiii[$124 & 63]($125,$130,0,$131,$132,$133,$134,$135,$138);
  $139 = $flip;
  $140 = $139 & 1;
  $141 = ($140|0)!=(0);
  if ($141) {
   $142 = $nrow;
   $143 = (0 - ($142))|0;
   $147 = $143;
  } else {
   $144 = $nrow;
   $147 = $144;
  }
  $145 = $y;
  $146 = (($145) + ($147))|0;
  $y = $146;
  $148 = $nrow;
  $149 = $row;
  $150 = (($149) + ($148))|0;
  $row = $150;
 }
 if ((label|0) == 18) {
  $ret = 0;
 }
 $151 = $flip;
 $152 = $151 & 2;
 $153 = ($152|0)!=(0);
 if ($153) {
  $line = 0;
  while(1) {
   $154 = $line;
   $155 = $4;
   $156 = ($154>>>0)<($155>>>0);
   if (!($156)) {
    break;
   }
   $157 = $2;
   $158 = $line;
   $159 = $3;
   $160 = Math_imul($158, $159)|0;
   $161 = (($157) + ($160<<2)|0);
   $left = $161;
   $162 = $left;
   $163 = $3;
   $164 = (($162) + ($163<<2)|0);
   $165 = (($164) + -4|0);
   $right = $165;
   while(1) {
    $166 = $left;
    $167 = $right;
    $168 = ($166>>>0)<($167>>>0);
    if (!($168)) {
     break;
    }
    $169 = $left;
    $170 = HEAP32[$169>>2]|0;
    $temp = $170;
    $171 = $right;
    $172 = HEAP32[$171>>2]|0;
    $173 = $left;
    HEAP32[$173>>2] = $172;
    $174 = $temp;
    $175 = $right;
    HEAP32[$175>>2] = $174;
    $176 = $left;
    $177 = (($176) + 4|0);
    $left = $177;
    $178 = $right;
    $179 = (($178) + -4|0);
    $right = $179;
   }
   $180 = $line;
   $181 = (($180) + 1)|0;
   $line = $181;
  }
 }
 $182 = $buf;
 __TIFFfree($182);
 $183 = $ret;
 $0 = $183;
 $184 = $0;
 STACKTOP = sp;return ($184|0);
}
function _putRGBAAcontig8bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $_x = 0, $samplesperpixel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 26|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $samplesperpixel = $12;
 $13 = $samplesperpixel;
 $14 = $6;
 $15 = Math_imul($14, $13)|0;
 $6 = $15;
 while(1) {
  $16 = $5;
  $17 = (($16) + -1)|0;
  $5 = $17;
  $18 = ($16>>>0)>(0);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $_x = $19;
  while(1) {
   $20 = $_x;
   $21 = ($20>>>0)>=(8);
   if (!($21)) {
    break;
   }
   $22 = $8;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $8;
   $26 = (($25) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 << 8;
   $30 = $24 | $29;
   $31 = $8;
   $32 = (($31) + 2|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $34 << 16;
   $36 = $30 | $35;
   $37 = $8;
   $38 = (($37) + 3|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $40 << 24;
   $42 = $36 | $41;
   $43 = $1;
   $44 = (($43) + 4|0);
   $1 = $44;
   HEAP32[$43>>2] = $42;
   $45 = $samplesperpixel;
   $46 = $8;
   $47 = (($46) + ($45)|0);
   $8 = $47;
   $48 = $8;
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = $8;
   $52 = (($51) + 1|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = $54 << 8;
   $56 = $50 | $55;
   $57 = $8;
   $58 = (($57) + 2|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = $60 << 16;
   $62 = $56 | $61;
   $63 = $8;
   $64 = (($63) + 3|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $66 << 24;
   $68 = $62 | $67;
   $69 = $1;
   $70 = (($69) + 4|0);
   $1 = $70;
   HEAP32[$69>>2] = $68;
   $71 = $samplesperpixel;
   $72 = $8;
   $73 = (($72) + ($71)|0);
   $8 = $73;
   $74 = $8;
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $8;
   $78 = (($77) + 1|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = $80 << 8;
   $82 = $76 | $81;
   $83 = $8;
   $84 = (($83) + 2|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = $85&255;
   $87 = $86 << 16;
   $88 = $82 | $87;
   $89 = $8;
   $90 = (($89) + 3|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = $92 << 24;
   $94 = $88 | $93;
   $95 = $1;
   $96 = (($95) + 4|0);
   $1 = $96;
   HEAP32[$95>>2] = $94;
   $97 = $samplesperpixel;
   $98 = $8;
   $99 = (($98) + ($97)|0);
   $8 = $99;
   $100 = $8;
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = $8;
   $104 = (($103) + 1|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = $105&255;
   $107 = $106 << 8;
   $108 = $102 | $107;
   $109 = $8;
   $110 = (($109) + 2|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   $113 = $112 << 16;
   $114 = $108 | $113;
   $115 = $8;
   $116 = (($115) + 3|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $119 = $118 << 24;
   $120 = $114 | $119;
   $121 = $1;
   $122 = (($121) + 4|0);
   $1 = $122;
   HEAP32[$121>>2] = $120;
   $123 = $samplesperpixel;
   $124 = $8;
   $125 = (($124) + ($123)|0);
   $8 = $125;
   $126 = $8;
   $127 = HEAP8[$126>>0]|0;
   $128 = $127&255;
   $129 = $8;
   $130 = (($129) + 1|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = $131&255;
   $133 = $132 << 8;
   $134 = $128 | $133;
   $135 = $8;
   $136 = (($135) + 2|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = $138 << 16;
   $140 = $134 | $139;
   $141 = $8;
   $142 = (($141) + 3|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $143&255;
   $145 = $144 << 24;
   $146 = $140 | $145;
   $147 = $1;
   $148 = (($147) + 4|0);
   $1 = $148;
   HEAP32[$147>>2] = $146;
   $149 = $samplesperpixel;
   $150 = $8;
   $151 = (($150) + ($149)|0);
   $8 = $151;
   $152 = $8;
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = $8;
   $156 = (($155) + 1|0);
   $157 = HEAP8[$156>>0]|0;
   $158 = $157&255;
   $159 = $158 << 8;
   $160 = $154 | $159;
   $161 = $8;
   $162 = (($161) + 2|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = $164 << 16;
   $166 = $160 | $165;
   $167 = $8;
   $168 = (($167) + 3|0);
   $169 = HEAP8[$168>>0]|0;
   $170 = $169&255;
   $171 = $170 << 24;
   $172 = $166 | $171;
   $173 = $1;
   $174 = (($173) + 4|0);
   $1 = $174;
   HEAP32[$173>>2] = $172;
   $175 = $samplesperpixel;
   $176 = $8;
   $177 = (($176) + ($175)|0);
   $8 = $177;
   $178 = $8;
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = $8;
   $182 = (($181) + 1|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = $184 << 8;
   $186 = $180 | $185;
   $187 = $8;
   $188 = (($187) + 2|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = $189&255;
   $191 = $190 << 16;
   $192 = $186 | $191;
   $193 = $8;
   $194 = (($193) + 3|0);
   $195 = HEAP8[$194>>0]|0;
   $196 = $195&255;
   $197 = $196 << 24;
   $198 = $192 | $197;
   $199 = $1;
   $200 = (($199) + 4|0);
   $1 = $200;
   HEAP32[$199>>2] = $198;
   $201 = $samplesperpixel;
   $202 = $8;
   $203 = (($202) + ($201)|0);
   $8 = $203;
   $204 = $8;
   $205 = HEAP8[$204>>0]|0;
   $206 = $205&255;
   $207 = $8;
   $208 = (($207) + 1|0);
   $209 = HEAP8[$208>>0]|0;
   $210 = $209&255;
   $211 = $210 << 8;
   $212 = $206 | $211;
   $213 = $8;
   $214 = (($213) + 2|0);
   $215 = HEAP8[$214>>0]|0;
   $216 = $215&255;
   $217 = $216 << 16;
   $218 = $212 | $217;
   $219 = $8;
   $220 = (($219) + 3|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $221&255;
   $223 = $222 << 24;
   $224 = $218 | $223;
   $225 = $1;
   $226 = (($225) + 4|0);
   $1 = $226;
   HEAP32[$225>>2] = $224;
   $227 = $samplesperpixel;
   $228 = $8;
   $229 = (($228) + ($227)|0);
   $8 = $229;
   $230 = $_x;
   $231 = (($230) - 8)|0;
   $_x = $231;
  }
  $232 = $_x;
  $233 = ($232>>>0)>(0);
  if ($233) {
   $234 = $_x;
   switch ($234|0) {
   case 6:  {
    label = 10;
    break;
   }
   case 3:  {
    label = 13;
    break;
   }
   case 1:  {
    label = 15;
    break;
   }
   case 5:  {
    label = 11;
    break;
   }
   case 4:  {
    label = 12;
    break;
   }
   case 7:  {
    $235 = $8;
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = $8;
    $239 = (($238) + 1|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = $241 << 8;
    $243 = $237 | $242;
    $244 = $8;
    $245 = (($244) + 2|0);
    $246 = HEAP8[$245>>0]|0;
    $247 = $246&255;
    $248 = $247 << 16;
    $249 = $243 | $248;
    $250 = $8;
    $251 = (($250) + 3|0);
    $252 = HEAP8[$251>>0]|0;
    $253 = $252&255;
    $254 = $253 << 24;
    $255 = $249 | $254;
    $256 = $1;
    $257 = (($256) + 4|0);
    $1 = $257;
    HEAP32[$256>>2] = $255;
    $258 = $samplesperpixel;
    $259 = $8;
    $260 = (($259) + ($258)|0);
    $8 = $260;
    label = 10;
    break;
   }
   case 2:  {
    label = 14;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 10) {
    label = 0;
    $261 = $8;
    $262 = HEAP8[$261>>0]|0;
    $263 = $262&255;
    $264 = $8;
    $265 = (($264) + 1|0);
    $266 = HEAP8[$265>>0]|0;
    $267 = $266&255;
    $268 = $267 << 8;
    $269 = $263 | $268;
    $270 = $8;
    $271 = (($270) + 2|0);
    $272 = HEAP8[$271>>0]|0;
    $273 = $272&255;
    $274 = $273 << 16;
    $275 = $269 | $274;
    $276 = $8;
    $277 = (($276) + 3|0);
    $278 = HEAP8[$277>>0]|0;
    $279 = $278&255;
    $280 = $279 << 24;
    $281 = $275 | $280;
    $282 = $1;
    $283 = (($282) + 4|0);
    $1 = $283;
    HEAP32[$282>>2] = $281;
    $284 = $samplesperpixel;
    $285 = $8;
    $286 = (($285) + ($284)|0);
    $8 = $286;
    label = 11;
   }
   if ((label|0) == 11) {
    label = 0;
    $287 = $8;
    $288 = HEAP8[$287>>0]|0;
    $289 = $288&255;
    $290 = $8;
    $291 = (($290) + 1|0);
    $292 = HEAP8[$291>>0]|0;
    $293 = $292&255;
    $294 = $293 << 8;
    $295 = $289 | $294;
    $296 = $8;
    $297 = (($296) + 2|0);
    $298 = HEAP8[$297>>0]|0;
    $299 = $298&255;
    $300 = $299 << 16;
    $301 = $295 | $300;
    $302 = $8;
    $303 = (($302) + 3|0);
    $304 = HEAP8[$303>>0]|0;
    $305 = $304&255;
    $306 = $305 << 24;
    $307 = $301 | $306;
    $308 = $1;
    $309 = (($308) + 4|0);
    $1 = $309;
    HEAP32[$308>>2] = $307;
    $310 = $samplesperpixel;
    $311 = $8;
    $312 = (($311) + ($310)|0);
    $8 = $312;
    label = 12;
   }
   if ((label|0) == 12) {
    label = 0;
    $313 = $8;
    $314 = HEAP8[$313>>0]|0;
    $315 = $314&255;
    $316 = $8;
    $317 = (($316) + 1|0);
    $318 = HEAP8[$317>>0]|0;
    $319 = $318&255;
    $320 = $319 << 8;
    $321 = $315 | $320;
    $322 = $8;
    $323 = (($322) + 2|0);
    $324 = HEAP8[$323>>0]|0;
    $325 = $324&255;
    $326 = $325 << 16;
    $327 = $321 | $326;
    $328 = $8;
    $329 = (($328) + 3|0);
    $330 = HEAP8[$329>>0]|0;
    $331 = $330&255;
    $332 = $331 << 24;
    $333 = $327 | $332;
    $334 = $1;
    $335 = (($334) + 4|0);
    $1 = $335;
    HEAP32[$334>>2] = $333;
    $336 = $samplesperpixel;
    $337 = $8;
    $338 = (($337) + ($336)|0);
    $8 = $338;
    label = 13;
   }
   if ((label|0) == 13) {
    label = 0;
    $339 = $8;
    $340 = HEAP8[$339>>0]|0;
    $341 = $340&255;
    $342 = $8;
    $343 = (($342) + 1|0);
    $344 = HEAP8[$343>>0]|0;
    $345 = $344&255;
    $346 = $345 << 8;
    $347 = $341 | $346;
    $348 = $8;
    $349 = (($348) + 2|0);
    $350 = HEAP8[$349>>0]|0;
    $351 = $350&255;
    $352 = $351 << 16;
    $353 = $347 | $352;
    $354 = $8;
    $355 = (($354) + 3|0);
    $356 = HEAP8[$355>>0]|0;
    $357 = $356&255;
    $358 = $357 << 24;
    $359 = $353 | $358;
    $360 = $1;
    $361 = (($360) + 4|0);
    $1 = $361;
    HEAP32[$360>>2] = $359;
    $362 = $samplesperpixel;
    $363 = $8;
    $364 = (($363) + ($362)|0);
    $8 = $364;
    label = 14;
   }
   if ((label|0) == 14) {
    label = 0;
    $365 = $8;
    $366 = HEAP8[$365>>0]|0;
    $367 = $366&255;
    $368 = $8;
    $369 = (($368) + 1|0);
    $370 = HEAP8[$369>>0]|0;
    $371 = $370&255;
    $372 = $371 << 8;
    $373 = $367 | $372;
    $374 = $8;
    $375 = (($374) + 2|0);
    $376 = HEAP8[$375>>0]|0;
    $377 = $376&255;
    $378 = $377 << 16;
    $379 = $373 | $378;
    $380 = $8;
    $381 = (($380) + 3|0);
    $382 = HEAP8[$381>>0]|0;
    $383 = $382&255;
    $384 = $383 << 24;
    $385 = $379 | $384;
    $386 = $1;
    $387 = (($386) + 4|0);
    $1 = $387;
    HEAP32[$386>>2] = $385;
    $388 = $samplesperpixel;
    $389 = $8;
    $390 = (($389) + ($388)|0);
    $8 = $390;
    label = 15;
   }
   if ((label|0) == 15) {
    label = 0;
    $391 = $8;
    $392 = HEAP8[$391>>0]|0;
    $393 = $392&255;
    $394 = $8;
    $395 = (($394) + 1|0);
    $396 = HEAP8[$395>>0]|0;
    $397 = $396&255;
    $398 = $397 << 8;
    $399 = $393 | $398;
    $400 = $8;
    $401 = (($400) + 2|0);
    $402 = HEAP8[$401>>0]|0;
    $403 = $402&255;
    $404 = $403 << 16;
    $405 = $399 | $404;
    $406 = $8;
    $407 = (($406) + 3|0);
    $408 = HEAP8[$407>>0]|0;
    $409 = $408&255;
    $410 = $409 << 24;
    $411 = $405 | $410;
    $412 = $1;
    $413 = (($412) + 4|0);
    $1 = $413;
    HEAP32[$412>>2] = $411;
    $414 = $samplesperpixel;
    $415 = $8;
    $416 = (($415) + ($414)|0);
    $8 = $416;
   }
  }
  $417 = $7;
  $418 = $1;
  $419 = (($418) + ($417<<2)|0);
  $1 = $419;
  $420 = $6;
  $421 = $8;
  $422 = (($421) + ($420)|0);
  $8 = $422;
 }
 STACKTOP = sp;return;
}
function _BuildMapUaToAa($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $m = 0, $na = 0, $nv = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $img;
 $2 = $1;
 $3 = (($2) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  ___assert_fail((16872|0),(16800|0),2667,(16896|0));
  // unreachable;
 }
 $6 = (__TIFFmalloc(65536)|0);
 $7 = $1;
 $8 = (($7) + 76|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = (($9) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 628|0);
  $16 = HEAP32[$15>>2]|0;
  _TIFFErrorExt($16,16856,16840,$vararg_buffer);
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $17 = $1;
 $18 = (($17) + 76|0);
 $19 = HEAP32[$18>>2]|0;
 $m = $19;
 $na = 0;
 while(1) {
  $20 = $na;
  $21 = $20&65535;
  $22 = ($21|0)<(256);
  if (!($22)) {
   break;
  }
  $nv = 0;
  while(1) {
   $23 = $nv;
   $24 = $23&65535;
   $25 = ($24|0)<(256);
   if (!($25)) {
    break;
   }
   $26 = $nv;
   $27 = $26&65535;
   $28 = $na;
   $29 = $28&65535;
   $30 = Math_imul($27, $29)|0;
   $31 = (($30) + 127)|0;
   $32 = (($31|0) / 255)&-1;
   $33 = $32&255;
   $34 = $m;
   $35 = (($34) + 1|0);
   $m = $35;
   HEAP8[$34>>0] = $33;
   $36 = $nv;
   $37 = (($36) + 1)<<16>>16;
   $nv = $37;
  }
  $38 = $na;
  $39 = (($38) + 1)<<16>>16;
  $na = $39;
 }
 $0 = 1;
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function _putRGBUAcontig8bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $g = 0;
 var $m = 0, $r = 0, $samplesperpixel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 26|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $samplesperpixel = $12;
 $13 = $samplesperpixel;
 $14 = $6;
 $15 = Math_imul($14, $13)|0;
 $6 = $15;
 while(1) {
  $16 = $5;
  $17 = (($16) + -1)|0;
  $5 = $17;
  $18 = ($16>>>0)>(0);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $2 = $19;
  while(1) {
   $20 = $2;
   $21 = (($20) + -1)|0;
   $2 = $21;
   $22 = ($20>>>0)>(0);
   if (!($22)) {
    break;
   }
   $23 = $8;
   $24 = (($23) + 3|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $a = $26;
   $27 = $0;
   $28 = (($27) + 76|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $a;
   $31 = $30 << 8;
   $32 = (($29) + ($31)|0);
   $m = $32;
   $33 = $8;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $m;
   $37 = (($36) + ($35)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $r = $39;
   $40 = $8;
   $41 = (($40) + 1|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = $m;
   $45 = (($44) + ($43)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $g = $47;
   $48 = $8;
   $49 = (($48) + 2|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = $m;
   $53 = (($52) + ($51)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $b = $55;
   $56 = $r;
   $57 = $g;
   $58 = $57 << 8;
   $59 = $56 | $58;
   $60 = $b;
   $61 = $60 << 16;
   $62 = $59 | $61;
   $63 = $a;
   $64 = $63 << 24;
   $65 = $62 | $64;
   $66 = $1;
   $67 = (($66) + 4|0);
   $1 = $67;
   HEAP32[$66>>2] = $65;
   $68 = $samplesperpixel;
   $69 = $8;
   $70 = (($69) + ($68)|0);
   $8 = $70;
  }
  $71 = $7;
  $72 = $1;
  $73 = (($72) + ($71<<2)|0);
  $1 = $73;
  $74 = $6;
  $75 = $8;
  $76 = (($75) + ($74)|0);
  $8 = $76;
 }
 STACKTOP = sp;return;
}
function _putRGBcontig8bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_x = 0, $samplesperpixel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 26|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $samplesperpixel = $12;
 $13 = $samplesperpixel;
 $14 = $6;
 $15 = Math_imul($14, $13)|0;
 $6 = $15;
 while(1) {
  $16 = $5;
  $17 = (($16) + -1)|0;
  $5 = $17;
  $18 = ($16>>>0)>(0);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $_x = $19;
  while(1) {
   $20 = $_x;
   $21 = ($20>>>0)>=(8);
   if (!($21)) {
    break;
   }
   $22 = $8;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $8;
   $26 = (($25) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 << 8;
   $30 = $24 | $29;
   $31 = $8;
   $32 = (($31) + 2|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $34 << 16;
   $36 = $30 | $35;
   $37 = $36 | -16777216;
   $38 = $1;
   $39 = (($38) + 4|0);
   $1 = $39;
   HEAP32[$38>>2] = $37;
   $40 = $samplesperpixel;
   $41 = $8;
   $42 = (($41) + ($40)|0);
   $8 = $42;
   $43 = $8;
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = $8;
   $47 = (($46) + 1|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = $49 << 8;
   $51 = $45 | $50;
   $52 = $8;
   $53 = (($52) + 2|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 << 16;
   $57 = $51 | $56;
   $58 = $57 | -16777216;
   $59 = $1;
   $60 = (($59) + 4|0);
   $1 = $60;
   HEAP32[$59>>2] = $58;
   $61 = $samplesperpixel;
   $62 = $8;
   $63 = (($62) + ($61)|0);
   $8 = $63;
   $64 = $8;
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $8;
   $68 = (($67) + 1|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = $70 << 8;
   $72 = $66 | $71;
   $73 = $8;
   $74 = (($73) + 2|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $76 << 16;
   $78 = $72 | $77;
   $79 = $78 | -16777216;
   $80 = $1;
   $81 = (($80) + 4|0);
   $1 = $81;
   HEAP32[$80>>2] = $79;
   $82 = $samplesperpixel;
   $83 = $8;
   $84 = (($83) + ($82)|0);
   $8 = $84;
   $85 = $8;
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = $8;
   $89 = (($88) + 1|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = $91 << 8;
   $93 = $87 | $92;
   $94 = $8;
   $95 = (($94) + 2|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = $97 << 16;
   $99 = $93 | $98;
   $100 = $99 | -16777216;
   $101 = $1;
   $102 = (($101) + 4|0);
   $1 = $102;
   HEAP32[$101>>2] = $100;
   $103 = $samplesperpixel;
   $104 = $8;
   $105 = (($104) + ($103)|0);
   $8 = $105;
   $106 = $8;
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&255;
   $109 = $8;
   $110 = (($109) + 1|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   $113 = $112 << 8;
   $114 = $108 | $113;
   $115 = $8;
   $116 = (($115) + 2|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $119 = $118 << 16;
   $120 = $114 | $119;
   $121 = $120 | -16777216;
   $122 = $1;
   $123 = (($122) + 4|0);
   $1 = $123;
   HEAP32[$122>>2] = $121;
   $124 = $samplesperpixel;
   $125 = $8;
   $126 = (($125) + ($124)|0);
   $8 = $126;
   $127 = $8;
   $128 = HEAP8[$127>>0]|0;
   $129 = $128&255;
   $130 = $8;
   $131 = (($130) + 1|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = $133 << 8;
   $135 = $129 | $134;
   $136 = $8;
   $137 = (($136) + 2|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = $139 << 16;
   $141 = $135 | $140;
   $142 = $141 | -16777216;
   $143 = $1;
   $144 = (($143) + 4|0);
   $1 = $144;
   HEAP32[$143>>2] = $142;
   $145 = $samplesperpixel;
   $146 = $8;
   $147 = (($146) + ($145)|0);
   $8 = $147;
   $148 = $8;
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = $8;
   $152 = (($151) + 1|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = $154 << 8;
   $156 = $150 | $155;
   $157 = $8;
   $158 = (($157) + 2|0);
   $159 = HEAP8[$158>>0]|0;
   $160 = $159&255;
   $161 = $160 << 16;
   $162 = $156 | $161;
   $163 = $162 | -16777216;
   $164 = $1;
   $165 = (($164) + 4|0);
   $1 = $165;
   HEAP32[$164>>2] = $163;
   $166 = $samplesperpixel;
   $167 = $8;
   $168 = (($167) + ($166)|0);
   $8 = $168;
   $169 = $8;
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = $8;
   $173 = (($172) + 1|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&255;
   $176 = $175 << 8;
   $177 = $171 | $176;
   $178 = $8;
   $179 = (($178) + 2|0);
   $180 = HEAP8[$179>>0]|0;
   $181 = $180&255;
   $182 = $181 << 16;
   $183 = $177 | $182;
   $184 = $183 | -16777216;
   $185 = $1;
   $186 = (($185) + 4|0);
   $1 = $186;
   HEAP32[$185>>2] = $184;
   $187 = $samplesperpixel;
   $188 = $8;
   $189 = (($188) + ($187)|0);
   $8 = $189;
   $190 = $_x;
   $191 = (($190) - 8)|0;
   $_x = $191;
  }
  $192 = $_x;
  $193 = ($192>>>0)>(0);
  if ($193) {
   $194 = $_x;
   switch ($194|0) {
   case 6:  {
    label = 10;
    break;
   }
   case 3:  {
    label = 13;
    break;
   }
   case 2:  {
    label = 14;
    break;
   }
   case 1:  {
    label = 15;
    break;
   }
   case 5:  {
    label = 11;
    break;
   }
   case 4:  {
    label = 12;
    break;
   }
   case 7:  {
    $195 = $8;
    $196 = HEAP8[$195>>0]|0;
    $197 = $196&255;
    $198 = $8;
    $199 = (($198) + 1|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200&255;
    $202 = $201 << 8;
    $203 = $197 | $202;
    $204 = $8;
    $205 = (($204) + 2|0);
    $206 = HEAP8[$205>>0]|0;
    $207 = $206&255;
    $208 = $207 << 16;
    $209 = $203 | $208;
    $210 = $209 | -16777216;
    $211 = $1;
    $212 = (($211) + 4|0);
    $1 = $212;
    HEAP32[$211>>2] = $210;
    $213 = $samplesperpixel;
    $214 = $8;
    $215 = (($214) + ($213)|0);
    $8 = $215;
    label = 10;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 10) {
    label = 0;
    $216 = $8;
    $217 = HEAP8[$216>>0]|0;
    $218 = $217&255;
    $219 = $8;
    $220 = (($219) + 1|0);
    $221 = HEAP8[$220>>0]|0;
    $222 = $221&255;
    $223 = $222 << 8;
    $224 = $218 | $223;
    $225 = $8;
    $226 = (($225) + 2|0);
    $227 = HEAP8[$226>>0]|0;
    $228 = $227&255;
    $229 = $228 << 16;
    $230 = $224 | $229;
    $231 = $230 | -16777216;
    $232 = $1;
    $233 = (($232) + 4|0);
    $1 = $233;
    HEAP32[$232>>2] = $231;
    $234 = $samplesperpixel;
    $235 = $8;
    $236 = (($235) + ($234)|0);
    $8 = $236;
    label = 11;
   }
   if ((label|0) == 11) {
    label = 0;
    $237 = $8;
    $238 = HEAP8[$237>>0]|0;
    $239 = $238&255;
    $240 = $8;
    $241 = (($240) + 1|0);
    $242 = HEAP8[$241>>0]|0;
    $243 = $242&255;
    $244 = $243 << 8;
    $245 = $239 | $244;
    $246 = $8;
    $247 = (($246) + 2|0);
    $248 = HEAP8[$247>>0]|0;
    $249 = $248&255;
    $250 = $249 << 16;
    $251 = $245 | $250;
    $252 = $251 | -16777216;
    $253 = $1;
    $254 = (($253) + 4|0);
    $1 = $254;
    HEAP32[$253>>2] = $252;
    $255 = $samplesperpixel;
    $256 = $8;
    $257 = (($256) + ($255)|0);
    $8 = $257;
    label = 12;
   }
   if ((label|0) == 12) {
    label = 0;
    $258 = $8;
    $259 = HEAP8[$258>>0]|0;
    $260 = $259&255;
    $261 = $8;
    $262 = (($261) + 1|0);
    $263 = HEAP8[$262>>0]|0;
    $264 = $263&255;
    $265 = $264 << 8;
    $266 = $260 | $265;
    $267 = $8;
    $268 = (($267) + 2|0);
    $269 = HEAP8[$268>>0]|0;
    $270 = $269&255;
    $271 = $270 << 16;
    $272 = $266 | $271;
    $273 = $272 | -16777216;
    $274 = $1;
    $275 = (($274) + 4|0);
    $1 = $275;
    HEAP32[$274>>2] = $273;
    $276 = $samplesperpixel;
    $277 = $8;
    $278 = (($277) + ($276)|0);
    $8 = $278;
    label = 13;
   }
   if ((label|0) == 13) {
    label = 0;
    $279 = $8;
    $280 = HEAP8[$279>>0]|0;
    $281 = $280&255;
    $282 = $8;
    $283 = (($282) + 1|0);
    $284 = HEAP8[$283>>0]|0;
    $285 = $284&255;
    $286 = $285 << 8;
    $287 = $281 | $286;
    $288 = $8;
    $289 = (($288) + 2|0);
    $290 = HEAP8[$289>>0]|0;
    $291 = $290&255;
    $292 = $291 << 16;
    $293 = $287 | $292;
    $294 = $293 | -16777216;
    $295 = $1;
    $296 = (($295) + 4|0);
    $1 = $296;
    HEAP32[$295>>2] = $294;
    $297 = $samplesperpixel;
    $298 = $8;
    $299 = (($298) + ($297)|0);
    $8 = $299;
    label = 14;
   }
   if ((label|0) == 14) {
    label = 0;
    $300 = $8;
    $301 = HEAP8[$300>>0]|0;
    $302 = $301&255;
    $303 = $8;
    $304 = (($303) + 1|0);
    $305 = HEAP8[$304>>0]|0;
    $306 = $305&255;
    $307 = $306 << 8;
    $308 = $302 | $307;
    $309 = $8;
    $310 = (($309) + 2|0);
    $311 = HEAP8[$310>>0]|0;
    $312 = $311&255;
    $313 = $312 << 16;
    $314 = $308 | $313;
    $315 = $314 | -16777216;
    $316 = $1;
    $317 = (($316) + 4|0);
    $1 = $317;
    HEAP32[$316>>2] = $315;
    $318 = $samplesperpixel;
    $319 = $8;
    $320 = (($319) + ($318)|0);
    $8 = $320;
    label = 15;
   }
   if ((label|0) == 15) {
    label = 0;
    $321 = $8;
    $322 = HEAP8[$321>>0]|0;
    $323 = $322&255;
    $324 = $8;
    $325 = (($324) + 1|0);
    $326 = HEAP8[$325>>0]|0;
    $327 = $326&255;
    $328 = $327 << 8;
    $329 = $323 | $328;
    $330 = $8;
    $331 = (($330) + 2|0);
    $332 = HEAP8[$331>>0]|0;
    $333 = $332&255;
    $334 = $333 << 16;
    $335 = $329 | $334;
    $336 = $335 | -16777216;
    $337 = $1;
    $338 = (($337) + 4|0);
    $1 = $338;
    HEAP32[$337>>2] = $336;
    $339 = $samplesperpixel;
    $340 = $8;
    $341 = (($340) + ($339)|0);
    $8 = $341;
   }
  }
  $342 = $7;
  $343 = $1;
  $344 = (($343) + ($342<<2)|0);
  $1 = $344;
  $345 = $6;
  $346 = $8;
  $347 = (($346) + ($345)|0);
  $8 = $347;
 }
 STACKTOP = sp;return;
}
function _BuildMapBitdepth16To8($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $img;
 $2 = $1;
 $3 = (($2) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  ___assert_fail((16768|0),(16800|0),2689,(16816|0));
  // unreachable;
 }
 $6 = (__TIFFmalloc(65536)|0);
 $7 = $1;
 $8 = (($7) + 80|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = (($9) + 80|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 628|0);
  $16 = HEAP32[$15>>2]|0;
  _TIFFErrorExt($16,16744,16840,$vararg_buffer);
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $17 = $1;
 $18 = (($17) + 80|0);
 $19 = HEAP32[$18>>2]|0;
 $m = $19;
 $n = 0;
 while(1) {
  $20 = $n;
  $21 = ($20>>>0)<(65536);
  if (!($21)) {
   break;
  }
  $22 = $n;
  $23 = (($22) + 128)|0;
  $24 = (($23>>>0) / 257)&-1;
  $25 = $24&255;
  $26 = $m;
  $27 = (($26) + 1|0);
  $m = $27;
  HEAP8[$26>>0] = $25;
  $28 = $n;
  $29 = (($28) + 1)|0;
  $n = $29;
 }
 $0 = 1;
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function _putRGBAAcontig16bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $samplesperpixel = 0, $wp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 26|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $samplesperpixel = $12;
 $13 = $8;
 $wp = $13;
 $14 = $samplesperpixel;
 $15 = $6;
 $16 = Math_imul($15, $14)|0;
 $6 = $16;
 while(1) {
  $17 = $5;
  $18 = (($17) + -1)|0;
  $5 = $18;
  $19 = ($17>>>0)>(0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $2 = $20;
  while(1) {
   $21 = $2;
   $22 = (($21) + -1)|0;
   $2 = $22;
   $23 = ($21>>>0)>(0);
   if (!($23)) {
    break;
   }
   $24 = $wp;
   $25 = HEAP16[$24>>1]|0;
   $26 = $25&65535;
   $27 = $0;
   $28 = (($27) + 80|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($26)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $wp;
   $34 = (($33) + 2|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35&65535;
   $37 = $0;
   $38 = (($37) + 80|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($36)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = $42 << 8;
   $44 = $32 | $43;
   $45 = $wp;
   $46 = (($45) + 4|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47&65535;
   $49 = $0;
   $50 = (($49) + 80|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($48)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = $54 << 16;
   $56 = $44 | $55;
   $57 = $wp;
   $58 = (($57) + 6|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59&65535;
   $61 = $0;
   $62 = (($61) + 80|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $66 << 24;
   $68 = $56 | $67;
   $69 = $1;
   $70 = (($69) + 4|0);
   $1 = $70;
   HEAP32[$69>>2] = $68;
   $71 = $samplesperpixel;
   $72 = $wp;
   $73 = (($72) + ($71<<1)|0);
   $wp = $73;
  }
  $74 = $7;
  $75 = $1;
  $76 = (($75) + ($74<<2)|0);
  $1 = $76;
  $77 = $6;
  $78 = $wp;
  $79 = (($78) + ($77<<1)|0);
  $wp = $79;
 }
 STACKTOP = sp;return;
}
function _putRGBUAcontig16bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $b = 0, $g = 0, $m = 0, $r = 0, $samplesperpixel = 0, $wp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 26|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $samplesperpixel = $12;
 $13 = $8;
 $wp = $13;
 $14 = $samplesperpixel;
 $15 = $6;
 $16 = Math_imul($15, $14)|0;
 $6 = $16;
 while(1) {
  $17 = $5;
  $18 = (($17) + -1)|0;
  $5 = $18;
  $19 = ($17>>>0)>(0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $2 = $20;
  while(1) {
   $21 = $2;
   $22 = (($21) + -1)|0;
   $2 = $22;
   $23 = ($21>>>0)>(0);
   if (!($23)) {
    break;
   }
   $24 = $wp;
   $25 = (($24) + 6|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26&65535;
   $28 = $0;
   $29 = (($28) + 80|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($27)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $a = $33;
   $34 = $0;
   $35 = (($34) + 76|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $a;
   $38 = $37 << 8;
   $39 = (($36) + ($38)|0);
   $m = $39;
   $40 = $wp;
   $41 = HEAP16[$40>>1]|0;
   $42 = $41&65535;
   $43 = $0;
   $44 = (($43) + 80|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($42)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = $m;
   $50 = (($49) + ($48)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $r = $52;
   $53 = $wp;
   $54 = (($53) + 2|0);
   $55 = HEAP16[$54>>1]|0;
   $56 = $55&65535;
   $57 = $0;
   $58 = (($57) + 80|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + ($56)|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = $m;
   $64 = (($63) + ($62)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $g = $66;
   $67 = $wp;
   $68 = (($67) + 4|0);
   $69 = HEAP16[$68>>1]|0;
   $70 = $69&65535;
   $71 = $0;
   $72 = (($71) + 80|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + ($70)|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $m;
   $78 = (($77) + ($76)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $b = $80;
   $81 = $r;
   $82 = $g;
   $83 = $82 << 8;
   $84 = $81 | $83;
   $85 = $b;
   $86 = $85 << 16;
   $87 = $84 | $86;
   $88 = $a;
   $89 = $88 << 24;
   $90 = $87 | $89;
   $91 = $1;
   $92 = (($91) + 4|0);
   $1 = $92;
   HEAP32[$91>>2] = $90;
   $93 = $samplesperpixel;
   $94 = $wp;
   $95 = (($94) + ($93<<1)|0);
   $wp = $95;
  }
  $96 = $7;
  $97 = $1;
  $98 = (($97) + ($96<<2)|0);
  $1 = $98;
  $99 = $6;
  $100 = $wp;
  $101 = (($100) + ($99<<1)|0);
  $wp = $101;
 }
 STACKTOP = sp;return;
}
function _putRGBcontig16bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $samplesperpixel = 0, $wp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 26|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $samplesperpixel = $12;
 $13 = $8;
 $wp = $13;
 $14 = $samplesperpixel;
 $15 = $6;
 $16 = Math_imul($15, $14)|0;
 $6 = $16;
 while(1) {
  $17 = $5;
  $18 = (($17) + -1)|0;
  $5 = $18;
  $19 = ($17>>>0)>(0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $2 = $20;
  while(1) {
   $21 = $2;
   $22 = (($21) + -1)|0;
   $2 = $22;
   $23 = ($21>>>0)>(0);
   if (!($23)) {
    break;
   }
   $24 = $wp;
   $25 = HEAP16[$24>>1]|0;
   $26 = $25&65535;
   $27 = $0;
   $28 = (($27) + 80|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($26)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $wp;
   $34 = (($33) + 2|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35&65535;
   $37 = $0;
   $38 = (($37) + 80|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($36)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = $42 << 8;
   $44 = $32 | $43;
   $45 = $wp;
   $46 = (($45) + 4|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47&65535;
   $49 = $0;
   $50 = (($49) + 80|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($48)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = $54 << 16;
   $56 = $44 | $55;
   $57 = $56 | -16777216;
   $58 = $1;
   $59 = (($58) + 4|0);
   $1 = $59;
   HEAP32[$58>>2] = $57;
   $60 = $samplesperpixel;
   $61 = $wp;
   $62 = (($61) + ($60<<1)|0);
   $wp = $62;
  }
  $63 = $7;
  $64 = $1;
  $65 = (($64) + ($63<<2)|0);
  $1 = $65;
  $66 = $6;
  $67 = $wp;
  $68 = (($67) + ($66<<1)|0);
  $wp = $68;
 }
 STACKTOP = sp;return;
}
function _buildMap($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $img;
 $2 = $1;
 $3 = (($2) + 32|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 L1: do {
  switch ($5|0) {
  case 3:  {
   $14 = $1;
   $15 = (_checkcmap($14)|0);
   $16 = ($15|0)==(16);
   if ($16) {
    $17 = $1;
    _cvtcmap($17);
   } else {
    $18 = $1;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + 628|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $1;
    $23 = HEAP32[$22>>2]|0;
    $24 = (_TIFFFileName($23)|0);
    _TIFFWarningExt($21,$24,17216,$vararg_buffer);
   }
   $25 = $1;
   $26 = (($25) + 24|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27&65535;
   $29 = ($28|0)<=(8);
   if ($29) {
    $30 = $1;
    $31 = (_makecmap($30)|0);
    $32 = ($31|0)!=(0);
    if (!($32)) {
     $0 = 0;
     $33 = $0;
     STACKTOP = sp;return ($33|0);
    }
   }
   break;
  }
  case 5: case 6: case 2:  {
   $6 = $1;
   $7 = (($6) + 24|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8&65535;
   $10 = ($9|0)==(8);
   if ($10) {
    break L1;
   } else {
    label = 5;
    break L1;
   }
   break;
  }
  case 0: case 1:  {
   label = 5;
   break;
  }
  default: {
  }
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $11 = $1;
   $12 = (_setupMap($11)|0);
   $13 = ($12|0)!=(0);
   if ($13) {
    break;
   }
   $0 = 0;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 } while(0);
 $0 = 1;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _putRGBcontig8bitCMYKtile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_x = 0, $b = 0;
 var $g = 0, $k = 0, $r = 0, $samplesperpixel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 26|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $samplesperpixel = $12;
 $13 = $samplesperpixel;
 $14 = $6;
 $15 = Math_imul($14, $13)|0;
 $6 = $15;
 while(1) {
  $16 = $5;
  $17 = (($16) + -1)|0;
  $5 = $17;
  $18 = ($16>>>0)>(0);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $_x = $19;
  while(1) {
   $20 = $_x;
   $21 = ($20>>>0)>=(8);
   if (!($21)) {
    break;
   }
   $22 = $8;
   $23 = (($22) + 3|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (255 - ($25))|0;
   $27 = $26&65535;
   $k = $27;
   $28 = $k;
   $29 = $28&65535;
   $30 = $8;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = (255 - ($32))|0;
   $34 = Math_imul($29, $33)|0;
   $35 = (($34|0) / 255)&-1;
   $36 = $35&65535;
   $r = $36;
   $37 = $k;
   $38 = $37&65535;
   $39 = $8;
   $40 = (($39) + 1|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = (255 - ($42))|0;
   $44 = Math_imul($38, $43)|0;
   $45 = (($44|0) / 255)&-1;
   $46 = $45&65535;
   $g = $46;
   $47 = $k;
   $48 = $47&65535;
   $49 = $8;
   $50 = (($49) + 2|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = (255 - ($52))|0;
   $54 = Math_imul($48, $53)|0;
   $55 = (($54|0) / 255)&-1;
   $56 = $55&65535;
   $b = $56;
   $57 = $r;
   $58 = $57&65535;
   $59 = $g;
   $60 = $59&65535;
   $61 = $60 << 8;
   $62 = $58 | $61;
   $63 = $b;
   $64 = $63&65535;
   $65 = $64 << 16;
   $66 = $62 | $65;
   $67 = $66 | -16777216;
   $68 = $1;
   $69 = (($68) + 4|0);
   $1 = $69;
   HEAP32[$68>>2] = $67;
   $70 = $samplesperpixel;
   $71 = $8;
   $72 = (($71) + ($70)|0);
   $8 = $72;
   $73 = $8;
   $74 = (($73) + 3|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = (255 - ($76))|0;
   $78 = $77&65535;
   $k = $78;
   $79 = $k;
   $80 = $79&65535;
   $81 = $8;
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = (255 - ($83))|0;
   $85 = Math_imul($80, $84)|0;
   $86 = (($85|0) / 255)&-1;
   $87 = $86&65535;
   $r = $87;
   $88 = $k;
   $89 = $88&65535;
   $90 = $8;
   $91 = (($90) + 1|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = (255 - ($93))|0;
   $95 = Math_imul($89, $94)|0;
   $96 = (($95|0) / 255)&-1;
   $97 = $96&65535;
   $g = $97;
   $98 = $k;
   $99 = $98&65535;
   $100 = $8;
   $101 = (($100) + 2|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = (255 - ($103))|0;
   $105 = Math_imul($99, $104)|0;
   $106 = (($105|0) / 255)&-1;
   $107 = $106&65535;
   $b = $107;
   $108 = $r;
   $109 = $108&65535;
   $110 = $g;
   $111 = $110&65535;
   $112 = $111 << 8;
   $113 = $109 | $112;
   $114 = $b;
   $115 = $114&65535;
   $116 = $115 << 16;
   $117 = $113 | $116;
   $118 = $117 | -16777216;
   $119 = $1;
   $120 = (($119) + 4|0);
   $1 = $120;
   HEAP32[$119>>2] = $118;
   $121 = $samplesperpixel;
   $122 = $8;
   $123 = (($122) + ($121)|0);
   $8 = $123;
   $124 = $8;
   $125 = (($124) + 3|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = (255 - ($127))|0;
   $129 = $128&65535;
   $k = $129;
   $130 = $k;
   $131 = $130&65535;
   $132 = $8;
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (255 - ($134))|0;
   $136 = Math_imul($131, $135)|0;
   $137 = (($136|0) / 255)&-1;
   $138 = $137&65535;
   $r = $138;
   $139 = $k;
   $140 = $139&65535;
   $141 = $8;
   $142 = (($141) + 1|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $143&255;
   $145 = (255 - ($144))|0;
   $146 = Math_imul($140, $145)|0;
   $147 = (($146|0) / 255)&-1;
   $148 = $147&65535;
   $g = $148;
   $149 = $k;
   $150 = $149&65535;
   $151 = $8;
   $152 = (($151) + 2|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = (255 - ($154))|0;
   $156 = Math_imul($150, $155)|0;
   $157 = (($156|0) / 255)&-1;
   $158 = $157&65535;
   $b = $158;
   $159 = $r;
   $160 = $159&65535;
   $161 = $g;
   $162 = $161&65535;
   $163 = $162 << 8;
   $164 = $160 | $163;
   $165 = $b;
   $166 = $165&65535;
   $167 = $166 << 16;
   $168 = $164 | $167;
   $169 = $168 | -16777216;
   $170 = $1;
   $171 = (($170) + 4|0);
   $1 = $171;
   HEAP32[$170>>2] = $169;
   $172 = $samplesperpixel;
   $173 = $8;
   $174 = (($173) + ($172)|0);
   $8 = $174;
   $175 = $8;
   $176 = (($175) + 3|0);
   $177 = HEAP8[$176>>0]|0;
   $178 = $177&255;
   $179 = (255 - ($178))|0;
   $180 = $179&65535;
   $k = $180;
   $181 = $k;
   $182 = $181&65535;
   $183 = $8;
   $184 = HEAP8[$183>>0]|0;
   $185 = $184&255;
   $186 = (255 - ($185))|0;
   $187 = Math_imul($182, $186)|0;
   $188 = (($187|0) / 255)&-1;
   $189 = $188&65535;
   $r = $189;
   $190 = $k;
   $191 = $190&65535;
   $192 = $8;
   $193 = (($192) + 1|0);
   $194 = HEAP8[$193>>0]|0;
   $195 = $194&255;
   $196 = (255 - ($195))|0;
   $197 = Math_imul($191, $196)|0;
   $198 = (($197|0) / 255)&-1;
   $199 = $198&65535;
   $g = $199;
   $200 = $k;
   $201 = $200&65535;
   $202 = $8;
   $203 = (($202) + 2|0);
   $204 = HEAP8[$203>>0]|0;
   $205 = $204&255;
   $206 = (255 - ($205))|0;
   $207 = Math_imul($201, $206)|0;
   $208 = (($207|0) / 255)&-1;
   $209 = $208&65535;
   $b = $209;
   $210 = $r;
   $211 = $210&65535;
   $212 = $g;
   $213 = $212&65535;
   $214 = $213 << 8;
   $215 = $211 | $214;
   $216 = $b;
   $217 = $216&65535;
   $218 = $217 << 16;
   $219 = $215 | $218;
   $220 = $219 | -16777216;
   $221 = $1;
   $222 = (($221) + 4|0);
   $1 = $222;
   HEAP32[$221>>2] = $220;
   $223 = $samplesperpixel;
   $224 = $8;
   $225 = (($224) + ($223)|0);
   $8 = $225;
   $226 = $8;
   $227 = (($226) + 3|0);
   $228 = HEAP8[$227>>0]|0;
   $229 = $228&255;
   $230 = (255 - ($229))|0;
   $231 = $230&65535;
   $k = $231;
   $232 = $k;
   $233 = $232&65535;
   $234 = $8;
   $235 = HEAP8[$234>>0]|0;
   $236 = $235&255;
   $237 = (255 - ($236))|0;
   $238 = Math_imul($233, $237)|0;
   $239 = (($238|0) / 255)&-1;
   $240 = $239&65535;
   $r = $240;
   $241 = $k;
   $242 = $241&65535;
   $243 = $8;
   $244 = (($243) + 1|0);
   $245 = HEAP8[$244>>0]|0;
   $246 = $245&255;
   $247 = (255 - ($246))|0;
   $248 = Math_imul($242, $247)|0;
   $249 = (($248|0) / 255)&-1;
   $250 = $249&65535;
   $g = $250;
   $251 = $k;
   $252 = $251&65535;
   $253 = $8;
   $254 = (($253) + 2|0);
   $255 = HEAP8[$254>>0]|0;
   $256 = $255&255;
   $257 = (255 - ($256))|0;
   $258 = Math_imul($252, $257)|0;
   $259 = (($258|0) / 255)&-1;
   $260 = $259&65535;
   $b = $260;
   $261 = $r;
   $262 = $261&65535;
   $263 = $g;
   $264 = $263&65535;
   $265 = $264 << 8;
   $266 = $262 | $265;
   $267 = $b;
   $268 = $267&65535;
   $269 = $268 << 16;
   $270 = $266 | $269;
   $271 = $270 | -16777216;
   $272 = $1;
   $273 = (($272) + 4|0);
   $1 = $273;
   HEAP32[$272>>2] = $271;
   $274 = $samplesperpixel;
   $275 = $8;
   $276 = (($275) + ($274)|0);
   $8 = $276;
   $277 = $8;
   $278 = (($277) + 3|0);
   $279 = HEAP8[$278>>0]|0;
   $280 = $279&255;
   $281 = (255 - ($280))|0;
   $282 = $281&65535;
   $k = $282;
   $283 = $k;
   $284 = $283&65535;
   $285 = $8;
   $286 = HEAP8[$285>>0]|0;
   $287 = $286&255;
   $288 = (255 - ($287))|0;
   $289 = Math_imul($284, $288)|0;
   $290 = (($289|0) / 255)&-1;
   $291 = $290&65535;
   $r = $291;
   $292 = $k;
   $293 = $292&65535;
   $294 = $8;
   $295 = (($294) + 1|0);
   $296 = HEAP8[$295>>0]|0;
   $297 = $296&255;
   $298 = (255 - ($297))|0;
   $299 = Math_imul($293, $298)|0;
   $300 = (($299|0) / 255)&-1;
   $301 = $300&65535;
   $g = $301;
   $302 = $k;
   $303 = $302&65535;
   $304 = $8;
   $305 = (($304) + 2|0);
   $306 = HEAP8[$305>>0]|0;
   $307 = $306&255;
   $308 = (255 - ($307))|0;
   $309 = Math_imul($303, $308)|0;
   $310 = (($309|0) / 255)&-1;
   $311 = $310&65535;
   $b = $311;
   $312 = $r;
   $313 = $312&65535;
   $314 = $g;
   $315 = $314&65535;
   $316 = $315 << 8;
   $317 = $313 | $316;
   $318 = $b;
   $319 = $318&65535;
   $320 = $319 << 16;
   $321 = $317 | $320;
   $322 = $321 | -16777216;
   $323 = $1;
   $324 = (($323) + 4|0);
   $1 = $324;
   HEAP32[$323>>2] = $322;
   $325 = $samplesperpixel;
   $326 = $8;
   $327 = (($326) + ($325)|0);
   $8 = $327;
   $328 = $8;
   $329 = (($328) + 3|0);
   $330 = HEAP8[$329>>0]|0;
   $331 = $330&255;
   $332 = (255 - ($331))|0;
   $333 = $332&65535;
   $k = $333;
   $334 = $k;
   $335 = $334&65535;
   $336 = $8;
   $337 = HEAP8[$336>>0]|0;
   $338 = $337&255;
   $339 = (255 - ($338))|0;
   $340 = Math_imul($335, $339)|0;
   $341 = (($340|0) / 255)&-1;
   $342 = $341&65535;
   $r = $342;
   $343 = $k;
   $344 = $343&65535;
   $345 = $8;
   $346 = (($345) + 1|0);
   $347 = HEAP8[$346>>0]|0;
   $348 = $347&255;
   $349 = (255 - ($348))|0;
   $350 = Math_imul($344, $349)|0;
   $351 = (($350|0) / 255)&-1;
   $352 = $351&65535;
   $g = $352;
   $353 = $k;
   $354 = $353&65535;
   $355 = $8;
   $356 = (($355) + 2|0);
   $357 = HEAP8[$356>>0]|0;
   $358 = $357&255;
   $359 = (255 - ($358))|0;
   $360 = Math_imul($354, $359)|0;
   $361 = (($360|0) / 255)&-1;
   $362 = $361&65535;
   $b = $362;
   $363 = $r;
   $364 = $363&65535;
   $365 = $g;
   $366 = $365&65535;
   $367 = $366 << 8;
   $368 = $364 | $367;
   $369 = $b;
   $370 = $369&65535;
   $371 = $370 << 16;
   $372 = $368 | $371;
   $373 = $372 | -16777216;
   $374 = $1;
   $375 = (($374) + 4|0);
   $1 = $375;
   HEAP32[$374>>2] = $373;
   $376 = $samplesperpixel;
   $377 = $8;
   $378 = (($377) + ($376)|0);
   $8 = $378;
   $379 = $8;
   $380 = (($379) + 3|0);
   $381 = HEAP8[$380>>0]|0;
   $382 = $381&255;
   $383 = (255 - ($382))|0;
   $384 = $383&65535;
   $k = $384;
   $385 = $k;
   $386 = $385&65535;
   $387 = $8;
   $388 = HEAP8[$387>>0]|0;
   $389 = $388&255;
   $390 = (255 - ($389))|0;
   $391 = Math_imul($386, $390)|0;
   $392 = (($391|0) / 255)&-1;
   $393 = $392&65535;
   $r = $393;
   $394 = $k;
   $395 = $394&65535;
   $396 = $8;
   $397 = (($396) + 1|0);
   $398 = HEAP8[$397>>0]|0;
   $399 = $398&255;
   $400 = (255 - ($399))|0;
   $401 = Math_imul($395, $400)|0;
   $402 = (($401|0) / 255)&-1;
   $403 = $402&65535;
   $g = $403;
   $404 = $k;
   $405 = $404&65535;
   $406 = $8;
   $407 = (($406) + 2|0);
   $408 = HEAP8[$407>>0]|0;
   $409 = $408&255;
   $410 = (255 - ($409))|0;
   $411 = Math_imul($405, $410)|0;
   $412 = (($411|0) / 255)&-1;
   $413 = $412&65535;
   $b = $413;
   $414 = $r;
   $415 = $414&65535;
   $416 = $g;
   $417 = $416&65535;
   $418 = $417 << 8;
   $419 = $415 | $418;
   $420 = $b;
   $421 = $420&65535;
   $422 = $421 << 16;
   $423 = $419 | $422;
   $424 = $423 | -16777216;
   $425 = $1;
   $426 = (($425) + 4|0);
   $1 = $426;
   HEAP32[$425>>2] = $424;
   $427 = $samplesperpixel;
   $428 = $8;
   $429 = (($428) + ($427)|0);
   $8 = $429;
   $430 = $_x;
   $431 = (($430) - 8)|0;
   $_x = $431;
  }
  $432 = $_x;
  $433 = ($432>>>0)>(0);
  if ($433) {
   $434 = $_x;
   switch ($434|0) {
   case 5:  {
    label = 11;
    break;
   }
   case 4:  {
    label = 12;
    break;
   }
   case 3:  {
    label = 13;
    break;
   }
   case 2:  {
    label = 14;
    break;
   }
   case 1:  {
    label = 15;
    break;
   }
   case 7:  {
    $435 = $8;
    $436 = (($435) + 3|0);
    $437 = HEAP8[$436>>0]|0;
    $438 = $437&255;
    $439 = (255 - ($438))|0;
    $440 = $439&65535;
    $k = $440;
    $441 = $k;
    $442 = $441&65535;
    $443 = $8;
    $444 = HEAP8[$443>>0]|0;
    $445 = $444&255;
    $446 = (255 - ($445))|0;
    $447 = Math_imul($442, $446)|0;
    $448 = (($447|0) / 255)&-1;
    $449 = $448&65535;
    $r = $449;
    $450 = $k;
    $451 = $450&65535;
    $452 = $8;
    $453 = (($452) + 1|0);
    $454 = HEAP8[$453>>0]|0;
    $455 = $454&255;
    $456 = (255 - ($455))|0;
    $457 = Math_imul($451, $456)|0;
    $458 = (($457|0) / 255)&-1;
    $459 = $458&65535;
    $g = $459;
    $460 = $k;
    $461 = $460&65535;
    $462 = $8;
    $463 = (($462) + 2|0);
    $464 = HEAP8[$463>>0]|0;
    $465 = $464&255;
    $466 = (255 - ($465))|0;
    $467 = Math_imul($461, $466)|0;
    $468 = (($467|0) / 255)&-1;
    $469 = $468&65535;
    $b = $469;
    $470 = $r;
    $471 = $470&65535;
    $472 = $g;
    $473 = $472&65535;
    $474 = $473 << 8;
    $475 = $471 | $474;
    $476 = $b;
    $477 = $476&65535;
    $478 = $477 << 16;
    $479 = $475 | $478;
    $480 = $479 | -16777216;
    $481 = $1;
    $482 = (($481) + 4|0);
    $1 = $482;
    HEAP32[$481>>2] = $480;
    $483 = $samplesperpixel;
    $484 = $8;
    $485 = (($484) + ($483)|0);
    $8 = $485;
    label = 10;
    break;
   }
   case 6:  {
    label = 10;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 10) {
    label = 0;
    $486 = $8;
    $487 = (($486) + 3|0);
    $488 = HEAP8[$487>>0]|0;
    $489 = $488&255;
    $490 = (255 - ($489))|0;
    $491 = $490&65535;
    $k = $491;
    $492 = $k;
    $493 = $492&65535;
    $494 = $8;
    $495 = HEAP8[$494>>0]|0;
    $496 = $495&255;
    $497 = (255 - ($496))|0;
    $498 = Math_imul($493, $497)|0;
    $499 = (($498|0) / 255)&-1;
    $500 = $499&65535;
    $r = $500;
    $501 = $k;
    $502 = $501&65535;
    $503 = $8;
    $504 = (($503) + 1|0);
    $505 = HEAP8[$504>>0]|0;
    $506 = $505&255;
    $507 = (255 - ($506))|0;
    $508 = Math_imul($502, $507)|0;
    $509 = (($508|0) / 255)&-1;
    $510 = $509&65535;
    $g = $510;
    $511 = $k;
    $512 = $511&65535;
    $513 = $8;
    $514 = (($513) + 2|0);
    $515 = HEAP8[$514>>0]|0;
    $516 = $515&255;
    $517 = (255 - ($516))|0;
    $518 = Math_imul($512, $517)|0;
    $519 = (($518|0) / 255)&-1;
    $520 = $519&65535;
    $b = $520;
    $521 = $r;
    $522 = $521&65535;
    $523 = $g;
    $524 = $523&65535;
    $525 = $524 << 8;
    $526 = $522 | $525;
    $527 = $b;
    $528 = $527&65535;
    $529 = $528 << 16;
    $530 = $526 | $529;
    $531 = $530 | -16777216;
    $532 = $1;
    $533 = (($532) + 4|0);
    $1 = $533;
    HEAP32[$532>>2] = $531;
    $534 = $samplesperpixel;
    $535 = $8;
    $536 = (($535) + ($534)|0);
    $8 = $536;
    label = 11;
   }
   if ((label|0) == 11) {
    label = 0;
    $537 = $8;
    $538 = (($537) + 3|0);
    $539 = HEAP8[$538>>0]|0;
    $540 = $539&255;
    $541 = (255 - ($540))|0;
    $542 = $541&65535;
    $k = $542;
    $543 = $k;
    $544 = $543&65535;
    $545 = $8;
    $546 = HEAP8[$545>>0]|0;
    $547 = $546&255;
    $548 = (255 - ($547))|0;
    $549 = Math_imul($544, $548)|0;
    $550 = (($549|0) / 255)&-1;
    $551 = $550&65535;
    $r = $551;
    $552 = $k;
    $553 = $552&65535;
    $554 = $8;
    $555 = (($554) + 1|0);
    $556 = HEAP8[$555>>0]|0;
    $557 = $556&255;
    $558 = (255 - ($557))|0;
    $559 = Math_imul($553, $558)|0;
    $560 = (($559|0) / 255)&-1;
    $561 = $560&65535;
    $g = $561;
    $562 = $k;
    $563 = $562&65535;
    $564 = $8;
    $565 = (($564) + 2|0);
    $566 = HEAP8[$565>>0]|0;
    $567 = $566&255;
    $568 = (255 - ($567))|0;
    $569 = Math_imul($563, $568)|0;
    $570 = (($569|0) / 255)&-1;
    $571 = $570&65535;
    $b = $571;
    $572 = $r;
    $573 = $572&65535;
    $574 = $g;
    $575 = $574&65535;
    $576 = $575 << 8;
    $577 = $573 | $576;
    $578 = $b;
    $579 = $578&65535;
    $580 = $579 << 16;
    $581 = $577 | $580;
    $582 = $581 | -16777216;
    $583 = $1;
    $584 = (($583) + 4|0);
    $1 = $584;
    HEAP32[$583>>2] = $582;
    $585 = $samplesperpixel;
    $586 = $8;
    $587 = (($586) + ($585)|0);
    $8 = $587;
    label = 12;
   }
   if ((label|0) == 12) {
    label = 0;
    $588 = $8;
    $589 = (($588) + 3|0);
    $590 = HEAP8[$589>>0]|0;
    $591 = $590&255;
    $592 = (255 - ($591))|0;
    $593 = $592&65535;
    $k = $593;
    $594 = $k;
    $595 = $594&65535;
    $596 = $8;
    $597 = HEAP8[$596>>0]|0;
    $598 = $597&255;
    $599 = (255 - ($598))|0;
    $600 = Math_imul($595, $599)|0;
    $601 = (($600|0) / 255)&-1;
    $602 = $601&65535;
    $r = $602;
    $603 = $k;
    $604 = $603&65535;
    $605 = $8;
    $606 = (($605) + 1|0);
    $607 = HEAP8[$606>>0]|0;
    $608 = $607&255;
    $609 = (255 - ($608))|0;
    $610 = Math_imul($604, $609)|0;
    $611 = (($610|0) / 255)&-1;
    $612 = $611&65535;
    $g = $612;
    $613 = $k;
    $614 = $613&65535;
    $615 = $8;
    $616 = (($615) + 2|0);
    $617 = HEAP8[$616>>0]|0;
    $618 = $617&255;
    $619 = (255 - ($618))|0;
    $620 = Math_imul($614, $619)|0;
    $621 = (($620|0) / 255)&-1;
    $622 = $621&65535;
    $b = $622;
    $623 = $r;
    $624 = $623&65535;
    $625 = $g;
    $626 = $625&65535;
    $627 = $626 << 8;
    $628 = $624 | $627;
    $629 = $b;
    $630 = $629&65535;
    $631 = $630 << 16;
    $632 = $628 | $631;
    $633 = $632 | -16777216;
    $634 = $1;
    $635 = (($634) + 4|0);
    $1 = $635;
    HEAP32[$634>>2] = $633;
    $636 = $samplesperpixel;
    $637 = $8;
    $638 = (($637) + ($636)|0);
    $8 = $638;
    label = 13;
   }
   if ((label|0) == 13) {
    label = 0;
    $639 = $8;
    $640 = (($639) + 3|0);
    $641 = HEAP8[$640>>0]|0;
    $642 = $641&255;
    $643 = (255 - ($642))|0;
    $644 = $643&65535;
    $k = $644;
    $645 = $k;
    $646 = $645&65535;
    $647 = $8;
    $648 = HEAP8[$647>>0]|0;
    $649 = $648&255;
    $650 = (255 - ($649))|0;
    $651 = Math_imul($646, $650)|0;
    $652 = (($651|0) / 255)&-1;
    $653 = $652&65535;
    $r = $653;
    $654 = $k;
    $655 = $654&65535;
    $656 = $8;
    $657 = (($656) + 1|0);
    $658 = HEAP8[$657>>0]|0;
    $659 = $658&255;
    $660 = (255 - ($659))|0;
    $661 = Math_imul($655, $660)|0;
    $662 = (($661|0) / 255)&-1;
    $663 = $662&65535;
    $g = $663;
    $664 = $k;
    $665 = $664&65535;
    $666 = $8;
    $667 = (($666) + 2|0);
    $668 = HEAP8[$667>>0]|0;
    $669 = $668&255;
    $670 = (255 - ($669))|0;
    $671 = Math_imul($665, $670)|0;
    $672 = (($671|0) / 255)&-1;
    $673 = $672&65535;
    $b = $673;
    $674 = $r;
    $675 = $674&65535;
    $676 = $g;
    $677 = $676&65535;
    $678 = $677 << 8;
    $679 = $675 | $678;
    $680 = $b;
    $681 = $680&65535;
    $682 = $681 << 16;
    $683 = $679 | $682;
    $684 = $683 | -16777216;
    $685 = $1;
    $686 = (($685) + 4|0);
    $1 = $686;
    HEAP32[$685>>2] = $684;
    $687 = $samplesperpixel;
    $688 = $8;
    $689 = (($688) + ($687)|0);
    $8 = $689;
    label = 14;
   }
   if ((label|0) == 14) {
    label = 0;
    $690 = $8;
    $691 = (($690) + 3|0);
    $692 = HEAP8[$691>>0]|0;
    $693 = $692&255;
    $694 = (255 - ($693))|0;
    $695 = $694&65535;
    $k = $695;
    $696 = $k;
    $697 = $696&65535;
    $698 = $8;
    $699 = HEAP8[$698>>0]|0;
    $700 = $699&255;
    $701 = (255 - ($700))|0;
    $702 = Math_imul($697, $701)|0;
    $703 = (($702|0) / 255)&-1;
    $704 = $703&65535;
    $r = $704;
    $705 = $k;
    $706 = $705&65535;
    $707 = $8;
    $708 = (($707) + 1|0);
    $709 = HEAP8[$708>>0]|0;
    $710 = $709&255;
    $711 = (255 - ($710))|0;
    $712 = Math_imul($706, $711)|0;
    $713 = (($712|0) / 255)&-1;
    $714 = $713&65535;
    $g = $714;
    $715 = $k;
    $716 = $715&65535;
    $717 = $8;
    $718 = (($717) + 2|0);
    $719 = HEAP8[$718>>0]|0;
    $720 = $719&255;
    $721 = (255 - ($720))|0;
    $722 = Math_imul($716, $721)|0;
    $723 = (($722|0) / 255)&-1;
    $724 = $723&65535;
    $b = $724;
    $725 = $r;
    $726 = $725&65535;
    $727 = $g;
    $728 = $727&65535;
    $729 = $728 << 8;
    $730 = $726 | $729;
    $731 = $b;
    $732 = $731&65535;
    $733 = $732 << 16;
    $734 = $730 | $733;
    $735 = $734 | -16777216;
    $736 = $1;
    $737 = (($736) + 4|0);
    $1 = $737;
    HEAP32[$736>>2] = $735;
    $738 = $samplesperpixel;
    $739 = $8;
    $740 = (($739) + ($738)|0);
    $8 = $740;
    label = 15;
   }
   if ((label|0) == 15) {
    label = 0;
    $741 = $8;
    $742 = (($741) + 3|0);
    $743 = HEAP8[$742>>0]|0;
    $744 = $743&255;
    $745 = (255 - ($744))|0;
    $746 = $745&65535;
    $k = $746;
    $747 = $k;
    $748 = $747&65535;
    $749 = $8;
    $750 = HEAP8[$749>>0]|0;
    $751 = $750&255;
    $752 = (255 - ($751))|0;
    $753 = Math_imul($748, $752)|0;
    $754 = (($753|0) / 255)&-1;
    $755 = $754&65535;
    $r = $755;
    $756 = $k;
    $757 = $756&65535;
    $758 = $8;
    $759 = (($758) + 1|0);
    $760 = HEAP8[$759>>0]|0;
    $761 = $760&255;
    $762 = (255 - ($761))|0;
    $763 = Math_imul($757, $762)|0;
    $764 = (($763|0) / 255)&-1;
    $765 = $764&65535;
    $g = $765;
    $766 = $k;
    $767 = $766&65535;
    $768 = $8;
    $769 = (($768) + 2|0);
    $770 = HEAP8[$769>>0]|0;
    $771 = $770&255;
    $772 = (255 - ($771))|0;
    $773 = Math_imul($767, $772)|0;
    $774 = (($773|0) / 255)&-1;
    $775 = $774&65535;
    $b = $775;
    $776 = $r;
    $777 = $776&65535;
    $778 = $g;
    $779 = $778&65535;
    $780 = $779 << 8;
    $781 = $777 | $780;
    $782 = $b;
    $783 = $782&65535;
    $784 = $783 << 16;
    $785 = $781 | $784;
    $786 = $785 | -16777216;
    $787 = $1;
    $788 = (($787) + 4|0);
    $1 = $788;
    HEAP32[$787>>2] = $786;
    $789 = $samplesperpixel;
    $790 = $8;
    $791 = (($790) + ($789)|0);
    $8 = $791;
   }
  }
  $792 = $7;
  $793 = $1;
  $794 = (($793) + ($792<<2)|0);
  $1 = $794;
  $795 = $6;
  $796 = $8;
  $797 = (($796) + ($795)|0);
  $8 = $797;
 }
 STACKTOP = sp;return;
}
function _putRGBcontig8bitCMYKMaptile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $Map = 0, $b = 0, $g = 0, $k = 0, $r = 0;
 var $samplesperpixel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 26|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $samplesperpixel = $12;
 $13 = $0;
 $14 = (($13) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 $Map = $15;
 $16 = $samplesperpixel;
 $17 = $6;
 $18 = Math_imul($17, $16)|0;
 $6 = $18;
 while(1) {
  $19 = $5;
  $20 = (($19) + -1)|0;
  $5 = $20;
  $21 = ($19>>>0)>(0);
  if (!($21)) {
   break;
  }
  $22 = $4;
  $2 = $22;
  while(1) {
   $23 = $2;
   $24 = (($23) + -1)|0;
   $2 = $24;
   $25 = ($23>>>0)>(0);
   if (!($25)) {
    break;
   }
   $26 = $8;
   $27 = (($26) + 3|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = (255 - ($29))|0;
   $31 = $30&65535;
   $k = $31;
   $32 = $k;
   $33 = $32&65535;
   $34 = $8;
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = (255 - ($36))|0;
   $38 = Math_imul($33, $37)|0;
   $39 = (($38|0) / 255)&-1;
   $40 = $39&65535;
   $r = $40;
   $41 = $k;
   $42 = $41&65535;
   $43 = $8;
   $44 = (($43) + 1|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = (255 - ($46))|0;
   $48 = Math_imul($42, $47)|0;
   $49 = (($48|0) / 255)&-1;
   $50 = $49&65535;
   $g = $50;
   $51 = $k;
   $52 = $51&65535;
   $53 = $8;
   $54 = (($53) + 2|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = (255 - ($56))|0;
   $58 = Math_imul($52, $57)|0;
   $59 = (($58|0) / 255)&-1;
   $60 = $59&65535;
   $b = $60;
   $61 = $r;
   $62 = $61&65535;
   $63 = $Map;
   $64 = (($63) + ($62)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $g;
   $68 = $67&65535;
   $69 = $Map;
   $70 = (($69) + ($68)|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = $72 << 8;
   $74 = $66 | $73;
   $75 = $b;
   $76 = $75&65535;
   $77 = $Map;
   $78 = (($77) + ($76)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = $80 << 16;
   $82 = $74 | $81;
   $83 = $82 | -16777216;
   $84 = $1;
   $85 = (($84) + 4|0);
   $1 = $85;
   HEAP32[$84>>2] = $83;
   $86 = $samplesperpixel;
   $87 = $8;
   $88 = (($87) + ($86)|0);
   $8 = $88;
  }
  $89 = $6;
  $90 = $8;
  $91 = (($90) + ($89)|0);
  $8 = $91;
  $92 = $7;
  $93 = $1;
  $94 = (($93) + ($92<<2)|0);
  $1 = $94;
 }
 STACKTOP = sp;return;
}
function _put8bitcmaptile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $PALmap = 0, $samplesperpixel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $PALmap = $11;
 $12 = $0;
 $13 = (($12) + 26|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $samplesperpixel = $15;
 while(1) {
  $16 = $5;
  $17 = (($16) + -1)|0;
  $5 = $17;
  $18 = ($16>>>0)>(0);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $2 = $19;
  while(1) {
   $20 = $2;
   $21 = (($20) + -1)|0;
   $2 = $21;
   $22 = ($20>>>0)>(0);
   if (!($22)) {
    break;
   }
   $23 = $8;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $PALmap;
   $27 = (($26) + ($25<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   $31 = (($30) + 4|0);
   $1 = $31;
   HEAP32[$30>>2] = $29;
   $32 = $samplesperpixel;
   $33 = $8;
   $34 = (($33) + ($32)|0);
   $8 = $34;
  }
  $35 = $7;
  $36 = $1;
  $37 = (($36) + ($35<<2)|0);
  $1 = $37;
  $38 = $6;
  $39 = $8;
  $40 = (($39) + ($38)|0);
  $8 = $40;
 }
 STACKTOP = sp;return;
}
function _put4bitcmaptile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $PALmap = 0;
 var $_x = 0, $bw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $PALmap = $11;
 $12 = $6;
 $13 = (($12|0) / 2)&-1;
 $6 = $13;
 while(1) {
  $14 = $5;
  $15 = (($14) + -1)|0;
  $5 = $15;
  $16 = ($14>>>0)>(0);
  if (!($16)) {
   break;
  }
  $17 = $4;
  $_x = $17;
  while(1) {
   $18 = $_x;
   $19 = ($18>>>0)>=(2);
   if (!($19)) {
    break;
   }
   $20 = $8;
   $21 = (($20) + 1|0);
   $8 = $21;
   $22 = HEAP8[$20>>0]|0;
   $23 = $22&255;
   $24 = $PALmap;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $bw = $26;
   $27 = $bw;
   $28 = (($27) + 4|0);
   $bw = $28;
   $29 = HEAP32[$27>>2]|0;
   $30 = $1;
   $31 = (($30) + 4|0);
   $1 = $31;
   HEAP32[$30>>2] = $29;
   $32 = $bw;
   $33 = (($32) + 4|0);
   $bw = $33;
   $34 = HEAP32[$32>>2]|0;
   $35 = $1;
   $36 = (($35) + 4|0);
   $1 = $36;
   HEAP32[$35>>2] = $34;
   $37 = $_x;
   $38 = (($37) - 2)|0;
   $_x = $38;
  }
  $39 = $_x;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $8;
   $42 = (($41) + 1|0);
   $8 = $42;
   $43 = HEAP8[$41>>0]|0;
   $44 = $43&255;
   $45 = $PALmap;
   $46 = (($45) + ($44<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $bw = $47;
   $48 = $bw;
   $49 = (($48) + 4|0);
   $bw = $49;
   $50 = HEAP32[$48>>2]|0;
   $51 = $1;
   $52 = (($51) + 4|0);
   $1 = $52;
   HEAP32[$51>>2] = $50;
  }
  $53 = $7;
  $54 = $1;
  $55 = (($54) + ($53<<2)|0);
  $1 = $55;
  $56 = $6;
  $57 = $8;
  $58 = (($57) + ($56)|0);
  $8 = $58;
 }
 STACKTOP = sp;return;
}
function _put2bitcmaptile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $PALmap = 0, $_x = 0, $bw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $PALmap = $11;
 $12 = $6;
 $13 = (($12|0) / 4)&-1;
 $6 = $13;
 while(1) {
  $14 = $5;
  $15 = (($14) + -1)|0;
  $5 = $15;
  $16 = ($14>>>0)>(0);
  if (!($16)) {
   break;
  }
  $17 = $4;
  $_x = $17;
  while(1) {
   $18 = $_x;
   $19 = ($18>>>0)>=(4);
   if (!($19)) {
    break;
   }
   $20 = $8;
   $21 = (($20) + 1|0);
   $8 = $21;
   $22 = HEAP8[$20>>0]|0;
   $23 = $22&255;
   $24 = $PALmap;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $bw = $26;
   $27 = $bw;
   $28 = (($27) + 4|0);
   $bw = $28;
   $29 = HEAP32[$27>>2]|0;
   $30 = $1;
   $31 = (($30) + 4|0);
   $1 = $31;
   HEAP32[$30>>2] = $29;
   $32 = $bw;
   $33 = (($32) + 4|0);
   $bw = $33;
   $34 = HEAP32[$32>>2]|0;
   $35 = $1;
   $36 = (($35) + 4|0);
   $1 = $36;
   HEAP32[$35>>2] = $34;
   $37 = $bw;
   $38 = (($37) + 4|0);
   $bw = $38;
   $39 = HEAP32[$37>>2]|0;
   $40 = $1;
   $41 = (($40) + 4|0);
   $1 = $41;
   HEAP32[$40>>2] = $39;
   $42 = $bw;
   $43 = (($42) + 4|0);
   $bw = $43;
   $44 = HEAP32[$42>>2]|0;
   $45 = $1;
   $46 = (($45) + 4|0);
   $1 = $46;
   HEAP32[$45>>2] = $44;
   $47 = $_x;
   $48 = (($47) - 4)|0;
   $_x = $48;
  }
  $49 = $_x;
  $50 = ($49>>>0)>(0);
  if ($50) {
   $51 = $8;
   $52 = (($51) + 1|0);
   $8 = $52;
   $53 = HEAP8[$51>>0]|0;
   $54 = $53&255;
   $55 = $PALmap;
   $56 = (($55) + ($54<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $bw = $57;
   $58 = $_x;
   if ((($58|0) == 1)) {
    label = 11;
   } else if ((($58|0) == 3)) {
    $59 = $bw;
    $60 = (($59) + 4|0);
    $bw = $60;
    $61 = HEAP32[$59>>2]|0;
    $62 = $1;
    $63 = (($62) + 4|0);
    $1 = $63;
    HEAP32[$62>>2] = $61;
    label = 10;
   } else if ((($58|0) == 2)) {
    label = 10;
   }
   if ((label|0) == 10) {
    label = 0;
    $64 = $bw;
    $65 = (($64) + 4|0);
    $bw = $65;
    $66 = HEAP32[$64>>2]|0;
    $67 = $1;
    $68 = (($67) + 4|0);
    $1 = $68;
    HEAP32[$67>>2] = $66;
    label = 11;
   }
   if ((label|0) == 11) {
    label = 0;
    $69 = $bw;
    $70 = (($69) + 4|0);
    $bw = $70;
    $71 = HEAP32[$69>>2]|0;
    $72 = $1;
    $73 = (($72) + 4|0);
    $1 = $73;
    HEAP32[$72>>2] = $71;
   }
  }
  $74 = $7;
  $75 = $1;
  $76 = (($75) + ($74<<2)|0);
  $1 = $76;
  $77 = $6;
  $78 = $8;
  $79 = (($78) + ($77)|0);
  $8 = $79;
 }
 STACKTOP = sp;return;
}
function _put1bitcmaptile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $PALmap = 0, $_x = 0, $bw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $PALmap = $11;
 $12 = $6;
 $13 = (($12|0) / 8)&-1;
 $6 = $13;
 while(1) {
  $14 = $5;
  $15 = (($14) + -1)|0;
  $5 = $15;
  $16 = ($14>>>0)>(0);
  if (!($16)) {
   break;
  }
  $17 = $4;
  $_x = $17;
  while(1) {
   $18 = $_x;
   $19 = ($18>>>0)>=(8);
   if (!($19)) {
    break;
   }
   $20 = $8;
   $21 = (($20) + 1|0);
   $8 = $21;
   $22 = HEAP8[$20>>0]|0;
   $23 = $22&255;
   $24 = $PALmap;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $bw = $26;
   $27 = $bw;
   $28 = (($27) + 4|0);
   $bw = $28;
   $29 = HEAP32[$27>>2]|0;
   $30 = $1;
   $31 = (($30) + 4|0);
   $1 = $31;
   HEAP32[$30>>2] = $29;
   $32 = $bw;
   $33 = (($32) + 4|0);
   $bw = $33;
   $34 = HEAP32[$32>>2]|0;
   $35 = $1;
   $36 = (($35) + 4|0);
   $1 = $36;
   HEAP32[$35>>2] = $34;
   $37 = $bw;
   $38 = (($37) + 4|0);
   $bw = $38;
   $39 = HEAP32[$37>>2]|0;
   $40 = $1;
   $41 = (($40) + 4|0);
   $1 = $41;
   HEAP32[$40>>2] = $39;
   $42 = $bw;
   $43 = (($42) + 4|0);
   $bw = $43;
   $44 = HEAP32[$42>>2]|0;
   $45 = $1;
   $46 = (($45) + 4|0);
   $1 = $46;
   HEAP32[$45>>2] = $44;
   $47 = $bw;
   $48 = (($47) + 4|0);
   $bw = $48;
   $49 = HEAP32[$47>>2]|0;
   $50 = $1;
   $51 = (($50) + 4|0);
   $1 = $51;
   HEAP32[$50>>2] = $49;
   $52 = $bw;
   $53 = (($52) + 4|0);
   $bw = $53;
   $54 = HEAP32[$52>>2]|0;
   $55 = $1;
   $56 = (($55) + 4|0);
   $1 = $56;
   HEAP32[$55>>2] = $54;
   $57 = $bw;
   $58 = (($57) + 4|0);
   $bw = $58;
   $59 = HEAP32[$57>>2]|0;
   $60 = $1;
   $61 = (($60) + 4|0);
   $1 = $61;
   HEAP32[$60>>2] = $59;
   $62 = $bw;
   $63 = (($62) + 4|0);
   $bw = $63;
   $64 = HEAP32[$62>>2]|0;
   $65 = $1;
   $66 = (($65) + 4|0);
   $1 = $66;
   HEAP32[$65>>2] = $64;
   $67 = $_x;
   $68 = (($67) - 8)|0;
   $_x = $68;
  }
  $69 = $_x;
  $70 = ($69>>>0)>(0);
  if ($70) {
   $71 = $8;
   $72 = (($71) + 1|0);
   $8 = $72;
   $73 = HEAP8[$71>>0]|0;
   $74 = $73&255;
   $75 = $PALmap;
   $76 = (($75) + ($74<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $bw = $77;
   $78 = $_x;
   switch ($78|0) {
   case 3:  {
    label = 13;
    break;
   }
   case 1:  {
    label = 15;
    break;
   }
   case 4:  {
    label = 12;
    break;
   }
   case 5:  {
    label = 11;
    break;
   }
   case 6:  {
    label = 10;
    break;
   }
   case 7:  {
    $79 = $bw;
    $80 = (($79) + 4|0);
    $bw = $80;
    $81 = HEAP32[$79>>2]|0;
    $82 = $1;
    $83 = (($82) + 4|0);
    $1 = $83;
    HEAP32[$82>>2] = $81;
    label = 10;
    break;
   }
   case 2:  {
    label = 14;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 10) {
    label = 0;
    $84 = $bw;
    $85 = (($84) + 4|0);
    $bw = $85;
    $86 = HEAP32[$84>>2]|0;
    $87 = $1;
    $88 = (($87) + 4|0);
    $1 = $88;
    HEAP32[$87>>2] = $86;
    label = 11;
   }
   if ((label|0) == 11) {
    label = 0;
    $89 = $bw;
    $90 = (($89) + 4|0);
    $bw = $90;
    $91 = HEAP32[$89>>2]|0;
    $92 = $1;
    $93 = (($92) + 4|0);
    $1 = $93;
    HEAP32[$92>>2] = $91;
    label = 12;
   }
   if ((label|0) == 12) {
    label = 0;
    $94 = $bw;
    $95 = (($94) + 4|0);
    $bw = $95;
    $96 = HEAP32[$94>>2]|0;
    $97 = $1;
    $98 = (($97) + 4|0);
    $1 = $98;
    HEAP32[$97>>2] = $96;
    label = 13;
   }
   if ((label|0) == 13) {
    label = 0;
    $99 = $bw;
    $100 = (($99) + 4|0);
    $bw = $100;
    $101 = HEAP32[$99>>2]|0;
    $102 = $1;
    $103 = (($102) + 4|0);
    $1 = $103;
    HEAP32[$102>>2] = $101;
    label = 14;
   }
   if ((label|0) == 14) {
    label = 0;
    $104 = $bw;
    $105 = (($104) + 4|0);
    $bw = $105;
    $106 = HEAP32[$104>>2]|0;
    $107 = $1;
    $108 = (($107) + 4|0);
    $1 = $108;
    HEAP32[$107>>2] = $106;
    label = 15;
   }
   if ((label|0) == 15) {
    label = 0;
    $109 = $bw;
    $110 = (($109) + 4|0);
    $bw = $110;
    $111 = HEAP32[$109>>2]|0;
    $112 = $1;
    $113 = (($112) + 4|0);
    $1 = $113;
    HEAP32[$112>>2] = $111;
   }
  }
  $114 = $7;
  $115 = $1;
  $116 = (($115) + ($114<<2)|0);
  $1 = $116;
  $117 = $6;
  $118 = $8;
  $119 = (($118) + ($117)|0);
  $8 = $119;
 }
 STACKTOP = sp;return;
}
function _put16bitbwtile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BWmap = 0, $samplesperpixel = 0, $wp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 26|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $samplesperpixel = $12;
 $13 = $0;
 $14 = (($13) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $BWmap = $15;
 while(1) {
  $16 = $5;
  $17 = (($16) + -1)|0;
  $5 = $17;
  $18 = ($16>>>0)>(0);
  if (!($18)) {
   break;
  }
  $19 = $8;
  $wp = $19;
  $20 = $4;
  $2 = $20;
  while(1) {
   $21 = $2;
   $22 = (($21) + -1)|0;
   $2 = $22;
   $23 = ($21>>>0)>(0);
   if (!($23)) {
    break;
   }
   $24 = $wp;
   $25 = HEAP16[$24>>1]|0;
   $26 = $25&65535;
   $27 = $26 >> 8;
   $28 = $BWmap;
   $29 = (($28) + ($27<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   $32 = $1;
   $33 = (($32) + 4|0);
   $1 = $33;
   HEAP32[$32>>2] = $31;
   $34 = $samplesperpixel;
   $35 = $34<<1;
   $36 = $8;
   $37 = (($36) + ($35)|0);
   $8 = $37;
   $38 = $samplesperpixel;
   $39 = $wp;
   $40 = (($39) + ($38<<1)|0);
   $wp = $40;
  }
  $41 = $7;
  $42 = $1;
  $43 = (($42) + ($41<<2)|0);
  $1 = $43;
  $44 = $6;
  $45 = $8;
  $46 = (($45) + ($44)|0);
  $8 = $46;
 }
 STACKTOP = sp;return;
}
function _putagreytile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BWmap = 0, $samplesperpixel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 26|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $samplesperpixel = $12;
 $13 = $0;
 $14 = (($13) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $BWmap = $15;
 while(1) {
  $16 = $5;
  $17 = (($16) + -1)|0;
  $5 = $17;
  $18 = ($16>>>0)>(0);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $2 = $19;
  while(1) {
   $20 = $2;
   $21 = (($20) + -1)|0;
   $2 = $21;
   $22 = ($20>>>0)>(0);
   if (!($22)) {
    break;
   }
   $23 = $8;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $BWmap;
   $27 = (($26) + ($25<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$28>>2]|0;
   $30 = $8;
   $31 = (($30) + 1|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 << 24;
   $35 = $34 | 16777215;
   $36 = $29 & $35;
   $37 = $1;
   $38 = (($37) + 4|0);
   $1 = $38;
   HEAP32[$37>>2] = $36;
   $39 = $samplesperpixel;
   $40 = $8;
   $41 = (($40) + ($39)|0);
   $8 = $41;
  }
  $42 = $7;
  $43 = $1;
  $44 = (($43) + ($42<<2)|0);
  $1 = $44;
  $45 = $6;
  $46 = $8;
  $47 = (($46) + ($45)|0);
  $8 = $47;
 }
 STACKTOP = sp;return;
}
function _putgreytile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $BWmap = 0, $samplesperpixel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 26|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $samplesperpixel = $12;
 $13 = $0;
 $14 = (($13) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $BWmap = $15;
 while(1) {
  $16 = $5;
  $17 = (($16) + -1)|0;
  $5 = $17;
  $18 = ($16>>>0)>(0);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $2 = $19;
  while(1) {
   $20 = $2;
   $21 = (($20) + -1)|0;
   $2 = $21;
   $22 = ($20>>>0)>(0);
   if (!($22)) {
    break;
   }
   $23 = $8;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $BWmap;
   $27 = (($26) + ($25<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   $31 = (($30) + 4|0);
   $1 = $31;
   HEAP32[$30>>2] = $29;
   $32 = $samplesperpixel;
   $33 = $8;
   $34 = (($33) + ($32)|0);
   $8 = $34;
  }
  $35 = $7;
  $36 = $1;
  $37 = (($36) + ($35<<2)|0);
  $1 = $37;
  $38 = $6;
  $39 = $8;
  $40 = (($39) + ($38)|0);
  $8 = $40;
 }
 STACKTOP = sp;return;
}
function _put4bitbwtile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BWmap = 0;
 var $_x = 0, $bw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $BWmap = $11;
 $12 = $6;
 $13 = (($12|0) / 2)&-1;
 $6 = $13;
 while(1) {
  $14 = $5;
  $15 = (($14) + -1)|0;
  $5 = $15;
  $16 = ($14>>>0)>(0);
  if (!($16)) {
   break;
  }
  $17 = $4;
  $_x = $17;
  while(1) {
   $18 = $_x;
   $19 = ($18>>>0)>=(2);
   if (!($19)) {
    break;
   }
   $20 = $8;
   $21 = (($20) + 1|0);
   $8 = $21;
   $22 = HEAP8[$20>>0]|0;
   $23 = $22&255;
   $24 = $BWmap;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $bw = $26;
   $27 = $bw;
   $28 = (($27) + 4|0);
   $bw = $28;
   $29 = HEAP32[$27>>2]|0;
   $30 = $1;
   $31 = (($30) + 4|0);
   $1 = $31;
   HEAP32[$30>>2] = $29;
   $32 = $bw;
   $33 = (($32) + 4|0);
   $bw = $33;
   $34 = HEAP32[$32>>2]|0;
   $35 = $1;
   $36 = (($35) + 4|0);
   $1 = $36;
   HEAP32[$35>>2] = $34;
   $37 = $_x;
   $38 = (($37) - 2)|0;
   $_x = $38;
  }
  $39 = $_x;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $8;
   $42 = (($41) + 1|0);
   $8 = $42;
   $43 = HEAP8[$41>>0]|0;
   $44 = $43&255;
   $45 = $BWmap;
   $46 = (($45) + ($44<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $bw = $47;
   $48 = $bw;
   $49 = (($48) + 4|0);
   $bw = $49;
   $50 = HEAP32[$48>>2]|0;
   $51 = $1;
   $52 = (($51) + 4|0);
   $1 = $52;
   HEAP32[$51>>2] = $50;
  }
  $53 = $7;
  $54 = $1;
  $55 = (($54) + ($53<<2)|0);
  $1 = $55;
  $56 = $6;
  $57 = $8;
  $58 = (($57) + ($56)|0);
  $8 = $58;
 }
 STACKTOP = sp;return;
}
function _put2bitbwtile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $BWmap = 0, $_x = 0, $bw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $BWmap = $11;
 $12 = $6;
 $13 = (($12|0) / 4)&-1;
 $6 = $13;
 while(1) {
  $14 = $5;
  $15 = (($14) + -1)|0;
  $5 = $15;
  $16 = ($14>>>0)>(0);
  if (!($16)) {
   break;
  }
  $17 = $4;
  $_x = $17;
  while(1) {
   $18 = $_x;
   $19 = ($18>>>0)>=(4);
   if (!($19)) {
    break;
   }
   $20 = $8;
   $21 = (($20) + 1|0);
   $8 = $21;
   $22 = HEAP8[$20>>0]|0;
   $23 = $22&255;
   $24 = $BWmap;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $bw = $26;
   $27 = $bw;
   $28 = (($27) + 4|0);
   $bw = $28;
   $29 = HEAP32[$27>>2]|0;
   $30 = $1;
   $31 = (($30) + 4|0);
   $1 = $31;
   HEAP32[$30>>2] = $29;
   $32 = $bw;
   $33 = (($32) + 4|0);
   $bw = $33;
   $34 = HEAP32[$32>>2]|0;
   $35 = $1;
   $36 = (($35) + 4|0);
   $1 = $36;
   HEAP32[$35>>2] = $34;
   $37 = $bw;
   $38 = (($37) + 4|0);
   $bw = $38;
   $39 = HEAP32[$37>>2]|0;
   $40 = $1;
   $41 = (($40) + 4|0);
   $1 = $41;
   HEAP32[$40>>2] = $39;
   $42 = $bw;
   $43 = (($42) + 4|0);
   $bw = $43;
   $44 = HEAP32[$42>>2]|0;
   $45 = $1;
   $46 = (($45) + 4|0);
   $1 = $46;
   HEAP32[$45>>2] = $44;
   $47 = $_x;
   $48 = (($47) - 4)|0;
   $_x = $48;
  }
  $49 = $_x;
  $50 = ($49>>>0)>(0);
  if ($50) {
   $51 = $8;
   $52 = (($51) + 1|0);
   $8 = $52;
   $53 = HEAP8[$51>>0]|0;
   $54 = $53&255;
   $55 = $BWmap;
   $56 = (($55) + ($54<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $bw = $57;
   $58 = $_x;
   if ((($58|0) == 2)) {
    label = 10;
   } else if ((($58|0) == 1)) {
    label = 11;
   } else if ((($58|0) == 3)) {
    $59 = $bw;
    $60 = (($59) + 4|0);
    $bw = $60;
    $61 = HEAP32[$59>>2]|0;
    $62 = $1;
    $63 = (($62) + 4|0);
    $1 = $63;
    HEAP32[$62>>2] = $61;
    label = 10;
   }
   if ((label|0) == 10) {
    label = 0;
    $64 = $bw;
    $65 = (($64) + 4|0);
    $bw = $65;
    $66 = HEAP32[$64>>2]|0;
    $67 = $1;
    $68 = (($67) + 4|0);
    $1 = $68;
    HEAP32[$67>>2] = $66;
    label = 11;
   }
   if ((label|0) == 11) {
    label = 0;
    $69 = $bw;
    $70 = (($69) + 4|0);
    $bw = $70;
    $71 = HEAP32[$69>>2]|0;
    $72 = $1;
    $73 = (($72) + 4|0);
    $1 = $73;
    HEAP32[$72>>2] = $71;
   }
  }
  $74 = $7;
  $75 = $1;
  $76 = (($75) + ($74<<2)|0);
  $1 = $76;
  $77 = $6;
  $78 = $8;
  $79 = (($78) + ($77)|0);
  $8 = $79;
 }
 STACKTOP = sp;return;
}
function _put1bitbwtile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $BWmap = 0, $_x = 0, $bw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $0;
 $10 = (($9) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $BWmap = $11;
 $12 = $6;
 $13 = (($12|0) / 8)&-1;
 $6 = $13;
 while(1) {
  $14 = $5;
  $15 = (($14) + -1)|0;
  $5 = $15;
  $16 = ($14>>>0)>(0);
  if (!($16)) {
   break;
  }
  $17 = $4;
  $_x = $17;
  while(1) {
   $18 = $_x;
   $19 = ($18>>>0)>=(8);
   if (!($19)) {
    break;
   }
   $20 = $8;
   $21 = (($20) + 1|0);
   $8 = $21;
   $22 = HEAP8[$20>>0]|0;
   $23 = $22&255;
   $24 = $BWmap;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $bw = $26;
   $27 = $bw;
   $28 = (($27) + 4|0);
   $bw = $28;
   $29 = HEAP32[$27>>2]|0;
   $30 = $1;
   $31 = (($30) + 4|0);
   $1 = $31;
   HEAP32[$30>>2] = $29;
   $32 = $bw;
   $33 = (($32) + 4|0);
   $bw = $33;
   $34 = HEAP32[$32>>2]|0;
   $35 = $1;
   $36 = (($35) + 4|0);
   $1 = $36;
   HEAP32[$35>>2] = $34;
   $37 = $bw;
   $38 = (($37) + 4|0);
   $bw = $38;
   $39 = HEAP32[$37>>2]|0;
   $40 = $1;
   $41 = (($40) + 4|0);
   $1 = $41;
   HEAP32[$40>>2] = $39;
   $42 = $bw;
   $43 = (($42) + 4|0);
   $bw = $43;
   $44 = HEAP32[$42>>2]|0;
   $45 = $1;
   $46 = (($45) + 4|0);
   $1 = $46;
   HEAP32[$45>>2] = $44;
   $47 = $bw;
   $48 = (($47) + 4|0);
   $bw = $48;
   $49 = HEAP32[$47>>2]|0;
   $50 = $1;
   $51 = (($50) + 4|0);
   $1 = $51;
   HEAP32[$50>>2] = $49;
   $52 = $bw;
   $53 = (($52) + 4|0);
   $bw = $53;
   $54 = HEAP32[$52>>2]|0;
   $55 = $1;
   $56 = (($55) + 4|0);
   $1 = $56;
   HEAP32[$55>>2] = $54;
   $57 = $bw;
   $58 = (($57) + 4|0);
   $bw = $58;
   $59 = HEAP32[$57>>2]|0;
   $60 = $1;
   $61 = (($60) + 4|0);
   $1 = $61;
   HEAP32[$60>>2] = $59;
   $62 = $bw;
   $63 = (($62) + 4|0);
   $bw = $63;
   $64 = HEAP32[$62>>2]|0;
   $65 = $1;
   $66 = (($65) + 4|0);
   $1 = $66;
   HEAP32[$65>>2] = $64;
   $67 = $_x;
   $68 = (($67) - 8)|0;
   $_x = $68;
  }
  $69 = $_x;
  $70 = ($69>>>0)>(0);
  if ($70) {
   $71 = $8;
   $72 = (($71) + 1|0);
   $8 = $72;
   $73 = HEAP8[$71>>0]|0;
   $74 = $73&255;
   $75 = $BWmap;
   $76 = (($75) + ($74<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $bw = $77;
   $78 = $_x;
   switch ($78|0) {
   case 4:  {
    label = 12;
    break;
   }
   case 2:  {
    label = 14;
    break;
   }
   case 5:  {
    label = 11;
    break;
   }
   case 3:  {
    label = 13;
    break;
   }
   case 7:  {
    $79 = $bw;
    $80 = (($79) + 4|0);
    $bw = $80;
    $81 = HEAP32[$79>>2]|0;
    $82 = $1;
    $83 = (($82) + 4|0);
    $1 = $83;
    HEAP32[$82>>2] = $81;
    label = 10;
    break;
   }
   case 6:  {
    label = 10;
    break;
   }
   case 1:  {
    label = 15;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 10) {
    label = 0;
    $84 = $bw;
    $85 = (($84) + 4|0);
    $bw = $85;
    $86 = HEAP32[$84>>2]|0;
    $87 = $1;
    $88 = (($87) + 4|0);
    $1 = $88;
    HEAP32[$87>>2] = $86;
    label = 11;
   }
   if ((label|0) == 11) {
    label = 0;
    $89 = $bw;
    $90 = (($89) + 4|0);
    $bw = $90;
    $91 = HEAP32[$89>>2]|0;
    $92 = $1;
    $93 = (($92) + 4|0);
    $1 = $93;
    HEAP32[$92>>2] = $91;
    label = 12;
   }
   if ((label|0) == 12) {
    label = 0;
    $94 = $bw;
    $95 = (($94) + 4|0);
    $bw = $95;
    $96 = HEAP32[$94>>2]|0;
    $97 = $1;
    $98 = (($97) + 4|0);
    $1 = $98;
    HEAP32[$97>>2] = $96;
    label = 13;
   }
   if ((label|0) == 13) {
    label = 0;
    $99 = $bw;
    $100 = (($99) + 4|0);
    $bw = $100;
    $101 = HEAP32[$99>>2]|0;
    $102 = $1;
    $103 = (($102) + 4|0);
    $1 = $103;
    HEAP32[$102>>2] = $101;
    label = 14;
   }
   if ((label|0) == 14) {
    label = 0;
    $104 = $bw;
    $105 = (($104) + 4|0);
    $bw = $105;
    $106 = HEAP32[$104>>2]|0;
    $107 = $1;
    $108 = (($107) + 4|0);
    $1 = $108;
    HEAP32[$107>>2] = $106;
    label = 15;
   }
   if ((label|0) == 15) {
    label = 0;
    $109 = $bw;
    $110 = (($109) + 4|0);
    $bw = $110;
    $111 = HEAP32[$109>>2]|0;
    $112 = $1;
    $113 = (($112) + 4|0);
    $1 = $113;
    HEAP32[$112>>2] = $111;
   }
  }
  $114 = $7;
  $115 = $1;
  $116 = (($115) + ($114<<2)|0);
  $1 = $116;
  $117 = $6;
  $118 = $8;
  $119 = (($118) + ($117)|0);
  $8 = $119;
 }
 STACKTOP = sp;return;
}
function _initYCbCrConversion($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $luma = 0, $refBlackWhite = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $luma = sp + 20|0;
 $refBlackWhite = sp + 28|0;
 $1 = $img;
 $2 = $1;
 $3 = (($2) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $6 = (__TIFFmalloc(6168)|0);
   $7 = $1;
   $8 = (($7) + 68|0);
   HEAP32[$8>>2] = $6;
   $9 = $1;
   $10 = (($9) + 68|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    break;
   }
   $13 = $1;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 628|0);
   $16 = HEAP32[$15>>2]|0;
   _TIFFErrorExt($16,16672,16696,$vararg_buffer);
   $0 = 0;
   $28 = $0;
   STACKTOP = sp;return ($28|0);
  }
 } while(0);
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $luma;
 (_TIFFGetFieldDefaulted($18,529,$vararg_buffer1)|0);
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $refBlackWhite;
 (_TIFFGetFieldDefaulted($20,532,$vararg_buffer3)|0);
 $21 = $1;
 $22 = (($21) + 68|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$luma>>2]|0;
 $25 = HEAP32[$refBlackWhite>>2]|0;
 $26 = (_TIFFYCbCrToRGBInit($23,$24,$25)|0);
 $27 = ($26|0)<(0);
 if ($27) {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 } else {
  $0 = 1;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _putcontig8bitYCbCr44tile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $Cb = 0, $Cb46 = 0, $Cr = 0, $Cr47 = 0, $b = 0, $b12 = 0, $b15 = 0, $b18 = 0, $b21 = 0, $b24 = 0, $b27 = 0, $b3 = 0, $b30 = 0, $b33 = 0, $b36 = 0, $b39 = 0, $b42 = 0, $b45 = 0, $b50 = 0;
 var $b53 = 0, $b56 = 0, $b59 = 0, $b6 = 0, $b62 = 0, $b65 = 0, $b68 = 0, $b71 = 0, $b74 = 0, $b77 = 0, $b80 = 0, $b83 = 0, $b86 = 0, $b89 = 0, $b9 = 0, $b92 = 0, $b95 = 0, $cp1 = 0, $cp2 = 0, $cp3 = 0;
 var $g = 0, $g11 = 0, $g14 = 0, $g17 = 0, $g2 = 0, $g20 = 0, $g23 = 0, $g26 = 0, $g29 = 0, $g32 = 0, $g35 = 0, $g38 = 0, $g41 = 0, $g44 = 0, $g49 = 0, $g5 = 0, $g52 = 0, $g55 = 0, $g58 = 0, $g61 = 0;
 var $g64 = 0, $g67 = 0, $g70 = 0, $g73 = 0, $g76 = 0, $g79 = 0, $g8 = 0, $g82 = 0, $g85 = 0, $g88 = 0, $g91 = 0, $g94 = 0, $incr = 0, $r = 0, $r1 = 0, $r10 = 0, $r13 = 0, $r16 = 0, $r19 = 0, $r22 = 0;
 var $r25 = 0, $r28 = 0, $r31 = 0, $r34 = 0, $r37 = 0, $r4 = 0, $r40 = 0, $r43 = 0, $r48 = 0, $r51 = 0, $r54 = 0, $r57 = 0, $r60 = 0, $r63 = 0, $r66 = 0, $r69 = 0, $r7 = 0, $r72 = 0, $r75 = 0, $r78 = 0;
 var $r81 = 0, $r84 = 0, $r87 = 0, $r90 = 0, $r93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 384|0;
 $g = sp + 44|0;
 $b = sp + 48|0;
 $r1 = sp + 52|0;
 $g2 = sp + 56|0;
 $b3 = sp + 60|0;
 $r4 = sp + 64|0;
 $g5 = sp + 68|0;
 $b6 = sp + 72|0;
 $r7 = sp + 76|0;
 $g8 = sp + 80|0;
 $b9 = sp + 84|0;
 $r10 = sp + 88|0;
 $g11 = sp + 92|0;
 $b12 = sp + 96|0;
 $r13 = sp + 100|0;
 $g14 = sp + 380|0;
 $b15 = sp + 104|0;
 $r16 = sp + 108|0;
 $g17 = sp + 112|0;
 $b18 = sp + 116|0;
 $r19 = sp + 120|0;
 $g20 = sp + 124|0;
 $b21 = sp + 128|0;
 $r22 = sp + 132|0;
 $g23 = sp + 136|0;
 $b24 = sp + 140|0;
 $r25 = sp + 144|0;
 $g26 = sp + 148|0;
 $b27 = sp + 152|0;
 $r28 = sp + 156|0;
 $g29 = sp + 160|0;
 $b30 = sp + 164|0;
 $r31 = sp + 168|0;
 $g32 = sp + 172|0;
 $b33 = sp + 176|0;
 $r34 = sp + 408|0;
 $g35 = sp + 416|0;
 $b36 = sp + 424|0;
 $r37 = sp + 432|0;
 $g38 = sp + 440|0;
 $b39 = sp + 448|0;
 $r40 = sp + 204|0;
 $g41 = sp + 208|0;
 $b42 = sp + 212|0;
 $r43 = sp + 216|0;
 $g44 = sp + 220|0;
 $b45 = sp + 224|0;
 $r48 = sp + 232|0;
 $g49 = sp + 236|0;
 $b50 = sp + 240|0;
 $r51 = sp + 244|0;
 $g52 = sp + 248|0;
 $b53 = sp + 252|0;
 $r54 = sp + 256|0;
 $g55 = sp + 260|0;
 $b56 = sp + 264|0;
 $r57 = sp + 268|0;
 $g58 = sp + 272|0;
 $b59 = sp + 276|0;
 $r60 = sp + 280|0;
 $g61 = sp + 284|0;
 $b62 = sp + 288|0;
 $r63 = sp + 292|0;
 $g64 = sp + 296|0;
 $b65 = sp + 300|0;
 $r66 = sp + 304|0;
 $g67 = sp + 308|0;
 $b68 = sp + 312|0;
 $r69 = sp + 316|0;
 $g70 = sp + 320|0;
 $b71 = sp + 324|0;
 $r72 = sp + 328|0;
 $g73 = sp + 332|0;
 $b74 = sp + 336|0;
 $r75 = sp + 340|0;
 $g76 = sp + 344|0;
 $b77 = sp + 348|0;
 $r78 = sp + 352|0;
 $g79 = sp + 356|0;
 $b80 = sp + 360|0;
 $r81 = sp + 364|0;
 $g82 = sp + 368|0;
 $b83 = sp + 372|0;
 $r84 = sp + 388|0;
 $g85 = sp + 396|0;
 $b86 = sp + 12|0;
 $r87 = sp + 404|0;
 $g88 = sp + 184|0;
 $b89 = sp + 412|0;
 $r90 = sp + 16|0;
 $g91 = sp + 188|0;
 $b92 = sp + 420|0;
 $r93 = sp + 192|0;
 $g94 = sp + 428|0;
 $b95 = sp + 180|0;
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $1;
 $10 = $4;
 $11 = (($9) + ($10<<2)|0);
 $12 = $7;
 $13 = (($11) + ($12<<2)|0);
 $cp1 = $13;
 $14 = $cp1;
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = $7;
 $18 = (($16) + ($17<<2)|0);
 $cp2 = $18;
 $19 = $cp2;
 $20 = $4;
 $21 = (($19) + ($20<<2)|0);
 $22 = $7;
 $23 = (($21) + ($22<<2)|0);
 $cp3 = $23;
 $24 = $4;
 $25 = ($24*3)|0;
 $26 = $7;
 $27 = $26<<2;
 $28 = (($25) + ($27))|0;
 $incr = $28;
 $29 = $6;
 $30 = ($29*18)|0;
 $31 = (($30|0) / 4)&-1;
 $6 = $31;
 $32 = $5;
 $33 = $32 & 3;
 $34 = ($33|0)==(0);
 if ($34) {
  $35 = $4;
  $36 = $35 & 3;
  $37 = ($36|0)==(0);
  if ($37) {
   while(1) {
    $38 = $5;
    $39 = ($38>>>0)>=(4);
    if (!($39)) {
     break;
    }
    $40 = $4;
    $41 = $40 >>> 2;
    $2 = $41;
    while(1) {
     $42 = $8;
     $43 = (($42) + 16|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44&255;
     $Cb = $45;
     $46 = $8;
     $47 = (($46) + 17|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48&255;
     $Cr = $49;
     $50 = $0;
     $51 = (($50) + 68|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $8;
     $54 = HEAP8[$53>>0]|0;
     $55 = $54&255;
     $56 = $Cb;
     $57 = $Cr;
     _TIFFYCbCrtoRGB($52,$55,$56,$57,$r,$g,$b);
     $58 = HEAP32[$r>>2]|0;
     $59 = HEAP32[$g>>2]|0;
     $60 = $59 << 8;
     $61 = $58 | $60;
     $62 = HEAP32[$b>>2]|0;
     $63 = $62 << 16;
     $64 = $61 | $63;
     $65 = $64 | -16777216;
     $66 = $1;
     HEAP32[$66>>2] = $65;
     $67 = $0;
     $68 = (($67) + 68|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $8;
     $71 = (($70) + 1|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = $Cb;
     $75 = $Cr;
     _TIFFYCbCrtoRGB($69,$73,$74,$75,$r1,$g2,$b3);
     $76 = HEAP32[$r1>>2]|0;
     $77 = HEAP32[$g2>>2]|0;
     $78 = $77 << 8;
     $79 = $76 | $78;
     $80 = HEAP32[$b3>>2]|0;
     $81 = $80 << 16;
     $82 = $79 | $81;
     $83 = $82 | -16777216;
     $84 = $1;
     $85 = (($84) + 4|0);
     HEAP32[$85>>2] = $83;
     $86 = $0;
     $87 = (($86) + 68|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $8;
     $90 = (($89) + 2|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91&255;
     $93 = $Cb;
     $94 = $Cr;
     _TIFFYCbCrtoRGB($88,$92,$93,$94,$r4,$g5,$b6);
     $95 = HEAP32[$r4>>2]|0;
     $96 = HEAP32[$g5>>2]|0;
     $97 = $96 << 8;
     $98 = $95 | $97;
     $99 = HEAP32[$b6>>2]|0;
     $100 = $99 << 16;
     $101 = $98 | $100;
     $102 = $101 | -16777216;
     $103 = $1;
     $104 = (($103) + 8|0);
     HEAP32[$104>>2] = $102;
     $105 = $0;
     $106 = (($105) + 68|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $8;
     $109 = (($108) + 3|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = $110&255;
     $112 = $Cb;
     $113 = $Cr;
     _TIFFYCbCrtoRGB($107,$111,$112,$113,$r7,$g8,$b9);
     $114 = HEAP32[$r7>>2]|0;
     $115 = HEAP32[$g8>>2]|0;
     $116 = $115 << 8;
     $117 = $114 | $116;
     $118 = HEAP32[$b9>>2]|0;
     $119 = $118 << 16;
     $120 = $117 | $119;
     $121 = $120 | -16777216;
     $122 = $1;
     $123 = (($122) + 12|0);
     HEAP32[$123>>2] = $121;
     $124 = $0;
     $125 = (($124) + 68|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $8;
     $128 = (($127) + 4|0);
     $129 = HEAP8[$128>>0]|0;
     $130 = $129&255;
     $131 = $Cb;
     $132 = $Cr;
     _TIFFYCbCrtoRGB($126,$130,$131,$132,$r10,$g11,$b12);
     $133 = HEAP32[$r10>>2]|0;
     $134 = HEAP32[$g11>>2]|0;
     $135 = $134 << 8;
     $136 = $133 | $135;
     $137 = HEAP32[$b12>>2]|0;
     $138 = $137 << 16;
     $139 = $136 | $138;
     $140 = $139 | -16777216;
     $141 = $cp1;
     HEAP32[$141>>2] = $140;
     $142 = $0;
     $143 = (($142) + 68|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = $8;
     $146 = (($145) + 5|0);
     $147 = HEAP8[$146>>0]|0;
     $148 = $147&255;
     $149 = $Cb;
     $150 = $Cr;
     _TIFFYCbCrtoRGB($144,$148,$149,$150,$r13,$g14,$b15);
     $151 = HEAP32[$r13>>2]|0;
     $152 = HEAP32[$g14>>2]|0;
     $153 = $152 << 8;
     $154 = $151 | $153;
     $155 = HEAP32[$b15>>2]|0;
     $156 = $155 << 16;
     $157 = $154 | $156;
     $158 = $157 | -16777216;
     $159 = $cp1;
     $160 = (($159) + 4|0);
     HEAP32[$160>>2] = $158;
     $161 = $0;
     $162 = (($161) + 68|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $8;
     $165 = (($164) + 6|0);
     $166 = HEAP8[$165>>0]|0;
     $167 = $166&255;
     $168 = $Cb;
     $169 = $Cr;
     _TIFFYCbCrtoRGB($163,$167,$168,$169,$r16,$g17,$b18);
     $170 = HEAP32[$r16>>2]|0;
     $171 = HEAP32[$g17>>2]|0;
     $172 = $171 << 8;
     $173 = $170 | $172;
     $174 = HEAP32[$b18>>2]|0;
     $175 = $174 << 16;
     $176 = $173 | $175;
     $177 = $176 | -16777216;
     $178 = $cp1;
     $179 = (($178) + 8|0);
     HEAP32[$179>>2] = $177;
     $180 = $0;
     $181 = (($180) + 68|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $8;
     $184 = (($183) + 7|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = $Cb;
     $188 = $Cr;
     _TIFFYCbCrtoRGB($182,$186,$187,$188,$r19,$g20,$b21);
     $189 = HEAP32[$r19>>2]|0;
     $190 = HEAP32[$g20>>2]|0;
     $191 = $190 << 8;
     $192 = $189 | $191;
     $193 = HEAP32[$b21>>2]|0;
     $194 = $193 << 16;
     $195 = $192 | $194;
     $196 = $195 | -16777216;
     $197 = $cp1;
     $198 = (($197) + 12|0);
     HEAP32[$198>>2] = $196;
     $199 = $0;
     $200 = (($199) + 68|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $8;
     $203 = (($202) + 8|0);
     $204 = HEAP8[$203>>0]|0;
     $205 = $204&255;
     $206 = $Cb;
     $207 = $Cr;
     _TIFFYCbCrtoRGB($201,$205,$206,$207,$r22,$g23,$b24);
     $208 = HEAP32[$r22>>2]|0;
     $209 = HEAP32[$g23>>2]|0;
     $210 = $209 << 8;
     $211 = $208 | $210;
     $212 = HEAP32[$b24>>2]|0;
     $213 = $212 << 16;
     $214 = $211 | $213;
     $215 = $214 | -16777216;
     $216 = $cp2;
     HEAP32[$216>>2] = $215;
     $217 = $0;
     $218 = (($217) + 68|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = $8;
     $221 = (($220) + 9|0);
     $222 = HEAP8[$221>>0]|0;
     $223 = $222&255;
     $224 = $Cb;
     $225 = $Cr;
     _TIFFYCbCrtoRGB($219,$223,$224,$225,$r25,$g26,$b27);
     $226 = HEAP32[$r25>>2]|0;
     $227 = HEAP32[$g26>>2]|0;
     $228 = $227 << 8;
     $229 = $226 | $228;
     $230 = HEAP32[$b27>>2]|0;
     $231 = $230 << 16;
     $232 = $229 | $231;
     $233 = $232 | -16777216;
     $234 = $cp2;
     $235 = (($234) + 4|0);
     HEAP32[$235>>2] = $233;
     $236 = $0;
     $237 = (($236) + 68|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = $8;
     $240 = (($239) + 10|0);
     $241 = HEAP8[$240>>0]|0;
     $242 = $241&255;
     $243 = $Cb;
     $244 = $Cr;
     _TIFFYCbCrtoRGB($238,$242,$243,$244,$r28,$g29,$b30);
     $245 = HEAP32[$r28>>2]|0;
     $246 = HEAP32[$g29>>2]|0;
     $247 = $246 << 8;
     $248 = $245 | $247;
     $249 = HEAP32[$b30>>2]|0;
     $250 = $249 << 16;
     $251 = $248 | $250;
     $252 = $251 | -16777216;
     $253 = $cp2;
     $254 = (($253) + 8|0);
     HEAP32[$254>>2] = $252;
     $255 = $0;
     $256 = (($255) + 68|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = $8;
     $259 = (($258) + 11|0);
     $260 = HEAP8[$259>>0]|0;
     $261 = $260&255;
     $262 = $Cb;
     $263 = $Cr;
     _TIFFYCbCrtoRGB($257,$261,$262,$263,$r31,$g32,$b33);
     $264 = HEAP32[$r31>>2]|0;
     $265 = HEAP32[$g32>>2]|0;
     $266 = $265 << 8;
     $267 = $264 | $266;
     $268 = HEAP32[$b33>>2]|0;
     $269 = $268 << 16;
     $270 = $267 | $269;
     $271 = $270 | -16777216;
     $272 = $cp2;
     $273 = (($272) + 12|0);
     HEAP32[$273>>2] = $271;
     $274 = $0;
     $275 = (($274) + 68|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = $8;
     $278 = (($277) + 12|0);
     $279 = HEAP8[$278>>0]|0;
     $280 = $279&255;
     $281 = $Cb;
     $282 = $Cr;
     _TIFFYCbCrtoRGB($276,$280,$281,$282,$r34,$g35,$b36);
     $283 = HEAP32[$r34>>2]|0;
     $284 = HEAP32[$g35>>2]|0;
     $285 = $284 << 8;
     $286 = $283 | $285;
     $287 = HEAP32[$b36>>2]|0;
     $288 = $287 << 16;
     $289 = $286 | $288;
     $290 = $289 | -16777216;
     $291 = $cp3;
     HEAP32[$291>>2] = $290;
     $292 = $0;
     $293 = (($292) + 68|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = $8;
     $296 = (($295) + 13|0);
     $297 = HEAP8[$296>>0]|0;
     $298 = $297&255;
     $299 = $Cb;
     $300 = $Cr;
     _TIFFYCbCrtoRGB($294,$298,$299,$300,$r37,$g38,$b39);
     $301 = HEAP32[$r37>>2]|0;
     $302 = HEAP32[$g38>>2]|0;
     $303 = $302 << 8;
     $304 = $301 | $303;
     $305 = HEAP32[$b39>>2]|0;
     $306 = $305 << 16;
     $307 = $304 | $306;
     $308 = $307 | -16777216;
     $309 = $cp3;
     $310 = (($309) + 4|0);
     HEAP32[$310>>2] = $308;
     $311 = $0;
     $312 = (($311) + 68|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = $8;
     $315 = (($314) + 14|0);
     $316 = HEAP8[$315>>0]|0;
     $317 = $316&255;
     $318 = $Cb;
     $319 = $Cr;
     _TIFFYCbCrtoRGB($313,$317,$318,$319,$r40,$g41,$b42);
     $320 = HEAP32[$r40>>2]|0;
     $321 = HEAP32[$g41>>2]|0;
     $322 = $321 << 8;
     $323 = $320 | $322;
     $324 = HEAP32[$b42>>2]|0;
     $325 = $324 << 16;
     $326 = $323 | $325;
     $327 = $326 | -16777216;
     $328 = $cp3;
     $329 = (($328) + 8|0);
     HEAP32[$329>>2] = $327;
     $330 = $0;
     $331 = (($330) + 68|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = $8;
     $334 = (($333) + 15|0);
     $335 = HEAP8[$334>>0]|0;
     $336 = $335&255;
     $337 = $Cb;
     $338 = $Cr;
     _TIFFYCbCrtoRGB($332,$336,$337,$338,$r43,$g44,$b45);
     $339 = HEAP32[$r43>>2]|0;
     $340 = HEAP32[$g44>>2]|0;
     $341 = $340 << 8;
     $342 = $339 | $341;
     $343 = HEAP32[$b45>>2]|0;
     $344 = $343 << 16;
     $345 = $342 | $344;
     $346 = $345 | -16777216;
     $347 = $cp3;
     $348 = (($347) + 12|0);
     HEAP32[$348>>2] = $346;
     $349 = $1;
     $350 = (($349) + 16|0);
     $1 = $350;
     $351 = $cp1;
     $352 = (($351) + 16|0);
     $cp1 = $352;
     $353 = $cp2;
     $354 = (($353) + 16|0);
     $cp2 = $354;
     $355 = $cp3;
     $356 = (($355) + 16|0);
     $cp3 = $356;
     $357 = $8;
     $358 = (($357) + 18|0);
     $8 = $358;
     $359 = $2;
     $360 = (($359) + -1)|0;
     $2 = $360;
     $361 = ($360|0)!=(0);
     if (!($361)) {
      break;
     }
    }
    $362 = $incr;
    $363 = $1;
    $364 = (($363) + ($362<<2)|0);
    $1 = $364;
    $365 = $incr;
    $366 = $cp1;
    $367 = (($366) + ($365<<2)|0);
    $cp1 = $367;
    $368 = $incr;
    $369 = $cp2;
    $370 = (($369) + ($368<<2)|0);
    $cp2 = $370;
    $371 = $incr;
    $372 = $cp3;
    $373 = (($372) + ($371<<2)|0);
    $cp3 = $373;
    $374 = $6;
    $375 = $8;
    $376 = (($375) + ($374)|0);
    $8 = $376;
    $377 = $5;
    $378 = (($377) - 4)|0;
    $5 = $378;
   }
   STACKTOP = sp;return;
  }
 }
 while(1) {
  $379 = $5;
  $380 = ($379>>>0)>(0);
  if (!($380)) {
   break;
  }
  $381 = $4;
  $2 = $381;
  while(1) {
   $382 = $2;
   $383 = ($382>>>0)>(0);
   if (!($383)) {
    break;
   }
   $384 = $8;
   $385 = (($384) + 16|0);
   $386 = HEAP8[$385>>0]|0;
   $387 = $386&255;
   $Cb46 = $387;
   $388 = $8;
   $389 = (($388) + 17|0);
   $390 = HEAP8[$389>>0]|0;
   $391 = $390&255;
   $Cr47 = $391;
   $392 = $2;
   if ((($392|0) == 3)) {
    label = 22;
   } else if ((($392|0) == 2)) {
    label = 28;
   } else if (!((($392|0) == 1))) {
    $393 = $5;
    if ((($393|0) == 2)) {
     label = 19;
    } else if ((($393|0) == 3)) {
     label = 18;
    } else if (!((($393|0) == 1))) {
     $394 = $0;
     $395 = (($394) + 68|0);
     $396 = HEAP32[$395>>2]|0;
     $397 = $8;
     $398 = (($397) + 15|0);
     $399 = HEAP8[$398>>0]|0;
     $400 = $399&255;
     $401 = $Cb46;
     $402 = $Cr47;
     _TIFFYCbCrtoRGB($396,$400,$401,$402,$r48,$g49,$b50);
     $403 = HEAP32[$r48>>2]|0;
     $404 = HEAP32[$g49>>2]|0;
     $405 = $404 << 8;
     $406 = $403 | $405;
     $407 = HEAP32[$b50>>2]|0;
     $408 = $407 << 16;
     $409 = $406 | $408;
     $410 = $409 | -16777216;
     $411 = $cp3;
     $412 = (($411) + 12|0);
     HEAP32[$412>>2] = $410;
     label = 18;
    }
    if ((label|0) == 18) {
     label = 0;
     $413 = $0;
     $414 = (($413) + 68|0);
     $415 = HEAP32[$414>>2]|0;
     $416 = $8;
     $417 = (($416) + 11|0);
     $418 = HEAP8[$417>>0]|0;
     $419 = $418&255;
     $420 = $Cb46;
     $421 = $Cr47;
     _TIFFYCbCrtoRGB($415,$419,$420,$421,$r51,$g52,$b53);
     $422 = HEAP32[$r51>>2]|0;
     $423 = HEAP32[$g52>>2]|0;
     $424 = $423 << 8;
     $425 = $422 | $424;
     $426 = HEAP32[$b53>>2]|0;
     $427 = $426 << 16;
     $428 = $425 | $427;
     $429 = $428 | -16777216;
     $430 = $cp2;
     $431 = (($430) + 12|0);
     HEAP32[$431>>2] = $429;
     label = 19;
    }
    if ((label|0) == 19) {
     label = 0;
     $432 = $0;
     $433 = (($432) + 68|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = $8;
     $436 = (($435) + 7|0);
     $437 = HEAP8[$436>>0]|0;
     $438 = $437&255;
     $439 = $Cb46;
     $440 = $Cr47;
     _TIFFYCbCrtoRGB($434,$438,$439,$440,$r54,$g55,$b56);
     $441 = HEAP32[$r54>>2]|0;
     $442 = HEAP32[$g55>>2]|0;
     $443 = $442 << 8;
     $444 = $441 | $443;
     $445 = HEAP32[$b56>>2]|0;
     $446 = $445 << 16;
     $447 = $444 | $446;
     $448 = $447 | -16777216;
     $449 = $cp1;
     $450 = (($449) + 12|0);
     HEAP32[$450>>2] = $448;
    }
    $451 = $0;
    $452 = (($451) + 68|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = $8;
    $455 = (($454) + 3|0);
    $456 = HEAP8[$455>>0]|0;
    $457 = $456&255;
    $458 = $Cb46;
    $459 = $Cr47;
    _TIFFYCbCrtoRGB($453,$457,$458,$459,$r57,$g58,$b59);
    $460 = HEAP32[$r57>>2]|0;
    $461 = HEAP32[$g58>>2]|0;
    $462 = $461 << 8;
    $463 = $460 | $462;
    $464 = HEAP32[$b59>>2]|0;
    $465 = $464 << 16;
    $466 = $463 | $465;
    $467 = $466 | -16777216;
    $468 = $1;
    $469 = (($468) + 12|0);
    HEAP32[$469>>2] = $467;
    label = 22;
   }
   if ((label|0) == 22) {
    label = 0;
    $470 = $5;
    if ((($470|0) == 3)) {
     label = 24;
    } else if ((($470|0) == 2)) {
     label = 25;
    } else if (!((($470|0) == 1))) {
     $471 = $0;
     $472 = (($471) + 68|0);
     $473 = HEAP32[$472>>2]|0;
     $474 = $8;
     $475 = (($474) + 14|0);
     $476 = HEAP8[$475>>0]|0;
     $477 = $476&255;
     $478 = $Cb46;
     $479 = $Cr47;
     _TIFFYCbCrtoRGB($473,$477,$478,$479,$r60,$g61,$b62);
     $480 = HEAP32[$r60>>2]|0;
     $481 = HEAP32[$g61>>2]|0;
     $482 = $481 << 8;
     $483 = $480 | $482;
     $484 = HEAP32[$b62>>2]|0;
     $485 = $484 << 16;
     $486 = $483 | $485;
     $487 = $486 | -16777216;
     $488 = $cp3;
     $489 = (($488) + 8|0);
     HEAP32[$489>>2] = $487;
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $490 = $0;
     $491 = (($490) + 68|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = $8;
     $494 = (($493) + 10|0);
     $495 = HEAP8[$494>>0]|0;
     $496 = $495&255;
     $497 = $Cb46;
     $498 = $Cr47;
     _TIFFYCbCrtoRGB($492,$496,$497,$498,$r63,$g64,$b65);
     $499 = HEAP32[$r63>>2]|0;
     $500 = HEAP32[$g64>>2]|0;
     $501 = $500 << 8;
     $502 = $499 | $501;
     $503 = HEAP32[$b65>>2]|0;
     $504 = $503 << 16;
     $505 = $502 | $504;
     $506 = $505 | -16777216;
     $507 = $cp2;
     $508 = (($507) + 8|0);
     HEAP32[$508>>2] = $506;
     label = 25;
    }
    if ((label|0) == 25) {
     label = 0;
     $509 = $0;
     $510 = (($509) + 68|0);
     $511 = HEAP32[$510>>2]|0;
     $512 = $8;
     $513 = (($512) + 6|0);
     $514 = HEAP8[$513>>0]|0;
     $515 = $514&255;
     $516 = $Cb46;
     $517 = $Cr47;
     _TIFFYCbCrtoRGB($511,$515,$516,$517,$r66,$g67,$b68);
     $518 = HEAP32[$r66>>2]|0;
     $519 = HEAP32[$g67>>2]|0;
     $520 = $519 << 8;
     $521 = $518 | $520;
     $522 = HEAP32[$b68>>2]|0;
     $523 = $522 << 16;
     $524 = $521 | $523;
     $525 = $524 | -16777216;
     $526 = $cp1;
     $527 = (($526) + 8|0);
     HEAP32[$527>>2] = $525;
    }
    $528 = $0;
    $529 = (($528) + 68|0);
    $530 = HEAP32[$529>>2]|0;
    $531 = $8;
    $532 = (($531) + 2|0);
    $533 = HEAP8[$532>>0]|0;
    $534 = $533&255;
    $535 = $Cb46;
    $536 = $Cr47;
    _TIFFYCbCrtoRGB($530,$534,$535,$536,$r69,$g70,$b71);
    $537 = HEAP32[$r69>>2]|0;
    $538 = HEAP32[$g70>>2]|0;
    $539 = $538 << 8;
    $540 = $537 | $539;
    $541 = HEAP32[$b71>>2]|0;
    $542 = $541 << 16;
    $543 = $540 | $542;
    $544 = $543 | -16777216;
    $545 = $1;
    $546 = (($545) + 8|0);
    HEAP32[$546>>2] = $544;
    label = 28;
   }
   if ((label|0) == 28) {
    label = 0;
    $547 = $5;
    if ((($547|0) == 3)) {
     label = 30;
    } else if ((($547|0) == 2)) {
     label = 31;
    } else if (!((($547|0) == 1))) {
     $548 = $0;
     $549 = (($548) + 68|0);
     $550 = HEAP32[$549>>2]|0;
     $551 = $8;
     $552 = (($551) + 13|0);
     $553 = HEAP8[$552>>0]|0;
     $554 = $553&255;
     $555 = $Cb46;
     $556 = $Cr47;
     _TIFFYCbCrtoRGB($550,$554,$555,$556,$r72,$g73,$b74);
     $557 = HEAP32[$r72>>2]|0;
     $558 = HEAP32[$g73>>2]|0;
     $559 = $558 << 8;
     $560 = $557 | $559;
     $561 = HEAP32[$b74>>2]|0;
     $562 = $561 << 16;
     $563 = $560 | $562;
     $564 = $563 | -16777216;
     $565 = $cp3;
     $566 = (($565) + 4|0);
     HEAP32[$566>>2] = $564;
     label = 30;
    }
    if ((label|0) == 30) {
     label = 0;
     $567 = $0;
     $568 = (($567) + 68|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = $8;
     $571 = (($570) + 9|0);
     $572 = HEAP8[$571>>0]|0;
     $573 = $572&255;
     $574 = $Cb46;
     $575 = $Cr47;
     _TIFFYCbCrtoRGB($569,$573,$574,$575,$r75,$g76,$b77);
     $576 = HEAP32[$r75>>2]|0;
     $577 = HEAP32[$g76>>2]|0;
     $578 = $577 << 8;
     $579 = $576 | $578;
     $580 = HEAP32[$b77>>2]|0;
     $581 = $580 << 16;
     $582 = $579 | $581;
     $583 = $582 | -16777216;
     $584 = $cp2;
     $585 = (($584) + 4|0);
     HEAP32[$585>>2] = $583;
     label = 31;
    }
    if ((label|0) == 31) {
     label = 0;
     $586 = $0;
     $587 = (($586) + 68|0);
     $588 = HEAP32[$587>>2]|0;
     $589 = $8;
     $590 = (($589) + 5|0);
     $591 = HEAP8[$590>>0]|0;
     $592 = $591&255;
     $593 = $Cb46;
     $594 = $Cr47;
     _TIFFYCbCrtoRGB($588,$592,$593,$594,$r78,$g79,$b80);
     $595 = HEAP32[$r78>>2]|0;
     $596 = HEAP32[$g79>>2]|0;
     $597 = $596 << 8;
     $598 = $595 | $597;
     $599 = HEAP32[$b80>>2]|0;
     $600 = $599 << 16;
     $601 = $598 | $600;
     $602 = $601 | -16777216;
     $603 = $cp1;
     $604 = (($603) + 4|0);
     HEAP32[$604>>2] = $602;
    }
    $605 = $0;
    $606 = (($605) + 68|0);
    $607 = HEAP32[$606>>2]|0;
    $608 = $8;
    $609 = (($608) + 1|0);
    $610 = HEAP8[$609>>0]|0;
    $611 = $610&255;
    $612 = $Cb46;
    $613 = $Cr47;
    _TIFFYCbCrtoRGB($607,$611,$612,$613,$r81,$g82,$b83);
    $614 = HEAP32[$r81>>2]|0;
    $615 = HEAP32[$g82>>2]|0;
    $616 = $615 << 8;
    $617 = $614 | $616;
    $618 = HEAP32[$b83>>2]|0;
    $619 = $618 << 16;
    $620 = $617 | $619;
    $621 = $620 | -16777216;
    $622 = $1;
    $623 = (($622) + 4|0);
    HEAP32[$623>>2] = $621;
   }
   $624 = $5;
   if ((($624|0) == 3)) {
    label = 36;
   } else if ((($624|0) == 2)) {
    label = 37;
   } else if (!((($624|0) == 1))) {
    $625 = $0;
    $626 = (($625) + 68|0);
    $627 = HEAP32[$626>>2]|0;
    $628 = $8;
    $629 = (($628) + 12|0);
    $630 = HEAP8[$629>>0]|0;
    $631 = $630&255;
    $632 = $Cb46;
    $633 = $Cr47;
    _TIFFYCbCrtoRGB($627,$631,$632,$633,$r84,$g85,$b86);
    $634 = HEAP32[$r84>>2]|0;
    $635 = HEAP32[$g85>>2]|0;
    $636 = $635 << 8;
    $637 = $634 | $636;
    $638 = HEAP32[$b86>>2]|0;
    $639 = $638 << 16;
    $640 = $637 | $639;
    $641 = $640 | -16777216;
    $642 = $cp3;
    HEAP32[$642>>2] = $641;
    label = 36;
   }
   if ((label|0) == 36) {
    label = 0;
    $643 = $0;
    $644 = (($643) + 68|0);
    $645 = HEAP32[$644>>2]|0;
    $646 = $8;
    $647 = (($646) + 8|0);
    $648 = HEAP8[$647>>0]|0;
    $649 = $648&255;
    $650 = $Cb46;
    $651 = $Cr47;
    _TIFFYCbCrtoRGB($645,$649,$650,$651,$r87,$g88,$b89);
    $652 = HEAP32[$r87>>2]|0;
    $653 = HEAP32[$g88>>2]|0;
    $654 = $653 << 8;
    $655 = $652 | $654;
    $656 = HEAP32[$b89>>2]|0;
    $657 = $656 << 16;
    $658 = $655 | $657;
    $659 = $658 | -16777216;
    $660 = $cp2;
    HEAP32[$660>>2] = $659;
    label = 37;
   }
   if ((label|0) == 37) {
    label = 0;
    $661 = $0;
    $662 = (($661) + 68|0);
    $663 = HEAP32[$662>>2]|0;
    $664 = $8;
    $665 = (($664) + 4|0);
    $666 = HEAP8[$665>>0]|0;
    $667 = $666&255;
    $668 = $Cb46;
    $669 = $Cr47;
    _TIFFYCbCrtoRGB($663,$667,$668,$669,$r90,$g91,$b92);
    $670 = HEAP32[$r90>>2]|0;
    $671 = HEAP32[$g91>>2]|0;
    $672 = $671 << 8;
    $673 = $670 | $672;
    $674 = HEAP32[$b92>>2]|0;
    $675 = $674 << 16;
    $676 = $673 | $675;
    $677 = $676 | -16777216;
    $678 = $cp1;
    HEAP32[$678>>2] = $677;
   }
   $679 = $0;
   $680 = (($679) + 68|0);
   $681 = HEAP32[$680>>2]|0;
   $682 = $8;
   $683 = HEAP8[$682>>0]|0;
   $684 = $683&255;
   $685 = $Cb46;
   $686 = $Cr47;
   _TIFFYCbCrtoRGB($681,$684,$685,$686,$r93,$g94,$b95);
   $687 = HEAP32[$r93>>2]|0;
   $688 = HEAP32[$g94>>2]|0;
   $689 = $688 << 8;
   $690 = $687 | $689;
   $691 = HEAP32[$b95>>2]|0;
   $692 = $691 << 16;
   $693 = $690 | $692;
   $694 = $693 | -16777216;
   $695 = $1;
   HEAP32[$695>>2] = $694;
   $696 = $2;
   $697 = ($696>>>0)<(4);
   if ($697) {
    $698 = $2;
    $699 = $1;
    $700 = (($699) + ($698<<2)|0);
    $1 = $700;
    $701 = $2;
    $702 = $cp1;
    $703 = (($702) + ($701<<2)|0);
    $cp1 = $703;
    $704 = $2;
    $705 = $cp2;
    $706 = (($705) + ($704<<2)|0);
    $cp2 = $706;
    $707 = $2;
    $708 = $cp3;
    $709 = (($708) + ($707<<2)|0);
    $cp3 = $709;
    $2 = 0;
   } else {
    $710 = $1;
    $711 = (($710) + 16|0);
    $1 = $711;
    $712 = $cp1;
    $713 = (($712) + 16|0);
    $cp1 = $713;
    $714 = $cp2;
    $715 = (($714) + 16|0);
    $cp2 = $715;
    $716 = $cp3;
    $717 = (($716) + 16|0);
    $cp3 = $717;
    $718 = $2;
    $719 = (($718) - 4)|0;
    $2 = $719;
   }
   $720 = $8;
   $721 = (($720) + 18|0);
   $8 = $721;
  }
  $722 = $5;
  $723 = ($722>>>0)<=(4);
  if ($723) {
   label = 45;
   break;
  }
  $724 = $5;
  $725 = (($724) - 4)|0;
  $5 = $725;
  $726 = $incr;
  $727 = $1;
  $728 = (($727) + ($726<<2)|0);
  $1 = $728;
  $729 = $incr;
  $730 = $cp1;
  $731 = (($730) + ($729<<2)|0);
  $cp1 = $731;
  $732 = $incr;
  $733 = $cp2;
  $734 = (($733) + ($732<<2)|0);
  $cp2 = $734;
  $735 = $incr;
  $736 = $cp3;
  $737 = (($736) + ($735<<2)|0);
  $cp3 = $737;
  $738 = $6;
  $739 = $8;
  $740 = (($739) + ($738)|0);
  $8 = $740;
 }
 if ((label|0) == 45) {
 }
 STACKTOP = sp;return;
}
function _putcontig8bitYCbCr42tile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Cb = 0, $Cb22 = 0, $Cr = 0, $Cr23 = 0, $b = 0, $b12 = 0, $b15 = 0, $b18 = 0, $b21 = 0, $b26 = 0, $b29 = 0, $b3 = 0, $b32 = 0, $b35 = 0, $b38 = 0, $b41 = 0;
 var $b44 = 0, $b47 = 0, $b6 = 0, $b9 = 0, $cond = 0, $cond1 = 0, $cond2 = 0, $cond3 = 0, $cp1 = 0, $g = 0, $g11 = 0, $g14 = 0, $g17 = 0, $g2 = 0, $g20 = 0, $g25 = 0, $g28 = 0, $g31 = 0, $g34 = 0, $g37 = 0;
 var $g40 = 0, $g43 = 0, $g46 = 0, $g5 = 0, $g8 = 0, $incr = 0, $r = 0, $r1 = 0, $r10 = 0, $r13 = 0, $r16 = 0, $r19 = 0, $r24 = 0, $r27 = 0, $r30 = 0, $r33 = 0, $r36 = 0, $r39 = 0, $r4 = 0, $r42 = 0;
 var $r45 = 0, $r7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 36|0;
 $g = sp + 40|0;
 $b = sp + 192|0;
 $r1 = sp + 44|0;
 $g2 = sp + 48|0;
 $b3 = sp + 52|0;
 $r4 = sp + 56|0;
 $g5 = sp + 60|0;
 $b6 = sp + 64|0;
 $r7 = sp + 68|0;
 $g8 = sp + 72|0;
 $b9 = sp + 76|0;
 $r10 = sp + 80|0;
 $g11 = sp + 84|0;
 $b12 = sp + 216|0;
 $r13 = sp + 224|0;
 $g14 = sp + 232|0;
 $b15 = sp + 240|0;
 $r16 = sp + 248|0;
 $g17 = sp + 104|0;
 $b18 = sp + 108|0;
 $r19 = sp + 112|0;
 $g20 = sp + 116|0;
 $b21 = sp + 120|0;
 $r24 = sp + 132|0;
 $g25 = sp + 136|0;
 $b26 = sp + 140|0;
 $r27 = sp + 144|0;
 $g28 = sp + 148|0;
 $b29 = sp + 152|0;
 $r30 = sp + 156|0;
 $g31 = sp + 160|0;
 $b32 = sp + 164|0;
 $r33 = sp + 168|0;
 $g34 = sp + 172|0;
 $b35 = sp + 176|0;
 $r36 = sp + 180|0;
 $g37 = sp + 184|0;
 $b38 = sp + 8|0;
 $r39 = sp + 208|0;
 $g40 = sp + 12|0;
 $b41 = sp + 88|0;
 $r42 = sp + 212|0;
 $g43 = sp + 92|0;
 $b44 = sp + 220|0;
 $r45 = sp + 4|0;
 $g46 = sp + 204|0;
 $b47 = sp + 96|0;
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $1;
 $10 = $4;
 $11 = (($9) + ($10<<2)|0);
 $12 = $7;
 $13 = (($11) + ($12<<2)|0);
 $cp1 = $13;
 $14 = $7;
 $15 = $14<<1;
 $16 = $4;
 $17 = (($15) + ($16))|0;
 $incr = $17;
 $18 = $6;
 $19 = ($18*10)|0;
 $20 = (($19|0) / 4)&-1;
 $6 = $20;
 $21 = $5;
 $22 = $21 & 3;
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = $4;
  $25 = $24 & 1;
  $26 = ($25|0)==(0);
  if ($26) {
   while(1) {
    $27 = $5;
    $28 = ($27>>>0)>=(2);
    if (!($28)) {
     break;
    }
    $29 = $4;
    $30 = $29 >>> 2;
    $2 = $30;
    while(1) {
     $31 = $8;
     $32 = (($31) + 8|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $Cb = $34;
     $35 = $8;
     $36 = (($35) + 9|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $37&255;
     $Cr = $38;
     $39 = $0;
     $40 = (($39) + 68|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $8;
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     $45 = $Cb;
     $46 = $Cr;
     _TIFFYCbCrtoRGB($41,$44,$45,$46,$r,$g,$b);
     $47 = HEAP32[$r>>2]|0;
     $48 = HEAP32[$g>>2]|0;
     $49 = $48 << 8;
     $50 = $47 | $49;
     $51 = HEAP32[$b>>2]|0;
     $52 = $51 << 16;
     $53 = $50 | $52;
     $54 = $53 | -16777216;
     $55 = $1;
     HEAP32[$55>>2] = $54;
     $56 = $0;
     $57 = (($56) + 68|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $8;
     $60 = (($59) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = $Cb;
     $64 = $Cr;
     _TIFFYCbCrtoRGB($58,$62,$63,$64,$r1,$g2,$b3);
     $65 = HEAP32[$r1>>2]|0;
     $66 = HEAP32[$g2>>2]|0;
     $67 = $66 << 8;
     $68 = $65 | $67;
     $69 = HEAP32[$b3>>2]|0;
     $70 = $69 << 16;
     $71 = $68 | $70;
     $72 = $71 | -16777216;
     $73 = $1;
     $74 = (($73) + 4|0);
     HEAP32[$74>>2] = $72;
     $75 = $0;
     $76 = (($75) + 68|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $8;
     $79 = (($78) + 2|0);
     $80 = HEAP8[$79>>0]|0;
     $81 = $80&255;
     $82 = $Cb;
     $83 = $Cr;
     _TIFFYCbCrtoRGB($77,$81,$82,$83,$r4,$g5,$b6);
     $84 = HEAP32[$r4>>2]|0;
     $85 = HEAP32[$g5>>2]|0;
     $86 = $85 << 8;
     $87 = $84 | $86;
     $88 = HEAP32[$b6>>2]|0;
     $89 = $88 << 16;
     $90 = $87 | $89;
     $91 = $90 | -16777216;
     $92 = $1;
     $93 = (($92) + 8|0);
     HEAP32[$93>>2] = $91;
     $94 = $0;
     $95 = (($94) + 68|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = $8;
     $98 = (($97) + 3|0);
     $99 = HEAP8[$98>>0]|0;
     $100 = $99&255;
     $101 = $Cb;
     $102 = $Cr;
     _TIFFYCbCrtoRGB($96,$100,$101,$102,$r7,$g8,$b9);
     $103 = HEAP32[$r7>>2]|0;
     $104 = HEAP32[$g8>>2]|0;
     $105 = $104 << 8;
     $106 = $103 | $105;
     $107 = HEAP32[$b9>>2]|0;
     $108 = $107 << 16;
     $109 = $106 | $108;
     $110 = $109 | -16777216;
     $111 = $1;
     $112 = (($111) + 12|0);
     HEAP32[$112>>2] = $110;
     $113 = $0;
     $114 = (($113) + 68|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = $8;
     $117 = (($116) + 4|0);
     $118 = HEAP8[$117>>0]|0;
     $119 = $118&255;
     $120 = $Cb;
     $121 = $Cr;
     _TIFFYCbCrtoRGB($115,$119,$120,$121,$r10,$g11,$b12);
     $122 = HEAP32[$r10>>2]|0;
     $123 = HEAP32[$g11>>2]|0;
     $124 = $123 << 8;
     $125 = $122 | $124;
     $126 = HEAP32[$b12>>2]|0;
     $127 = $126 << 16;
     $128 = $125 | $127;
     $129 = $128 | -16777216;
     $130 = $cp1;
     HEAP32[$130>>2] = $129;
     $131 = $0;
     $132 = (($131) + 68|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $8;
     $135 = (($134) + 5|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136&255;
     $138 = $Cb;
     $139 = $Cr;
     _TIFFYCbCrtoRGB($133,$137,$138,$139,$r13,$g14,$b15);
     $140 = HEAP32[$r13>>2]|0;
     $141 = HEAP32[$g14>>2]|0;
     $142 = $141 << 8;
     $143 = $140 | $142;
     $144 = HEAP32[$b15>>2]|0;
     $145 = $144 << 16;
     $146 = $143 | $145;
     $147 = $146 | -16777216;
     $148 = $cp1;
     $149 = (($148) + 4|0);
     HEAP32[$149>>2] = $147;
     $150 = $0;
     $151 = (($150) + 68|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = $8;
     $154 = (($153) + 6|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = $155&255;
     $157 = $Cb;
     $158 = $Cr;
     _TIFFYCbCrtoRGB($152,$156,$157,$158,$r16,$g17,$b18);
     $159 = HEAP32[$r16>>2]|0;
     $160 = HEAP32[$g17>>2]|0;
     $161 = $160 << 8;
     $162 = $159 | $161;
     $163 = HEAP32[$b18>>2]|0;
     $164 = $163 << 16;
     $165 = $162 | $164;
     $166 = $165 | -16777216;
     $167 = $cp1;
     $168 = (($167) + 8|0);
     HEAP32[$168>>2] = $166;
     $169 = $0;
     $170 = (($169) + 68|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $8;
     $173 = (($172) + 7|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = $Cb;
     $177 = $Cr;
     _TIFFYCbCrtoRGB($171,$175,$176,$177,$r19,$g20,$b21);
     $178 = HEAP32[$r19>>2]|0;
     $179 = HEAP32[$g20>>2]|0;
     $180 = $179 << 8;
     $181 = $178 | $180;
     $182 = HEAP32[$b21>>2]|0;
     $183 = $182 << 16;
     $184 = $181 | $183;
     $185 = $184 | -16777216;
     $186 = $cp1;
     $187 = (($186) + 12|0);
     HEAP32[$187>>2] = $185;
     $188 = $1;
     $189 = (($188) + 16|0);
     $1 = $189;
     $190 = $cp1;
     $191 = (($190) + 16|0);
     $cp1 = $191;
     $192 = $8;
     $193 = (($192) + 10|0);
     $8 = $193;
     $194 = $2;
     $195 = (($194) + -1)|0;
     $2 = $195;
     $196 = ($195|0)!=(0);
     if (!($196)) {
      break;
     }
    }
    $197 = $incr;
    $198 = $1;
    $199 = (($198) + ($197<<2)|0);
    $1 = $199;
    $200 = $incr;
    $201 = $cp1;
    $202 = (($201) + ($200<<2)|0);
    $cp1 = $202;
    $203 = $6;
    $204 = $8;
    $205 = (($204) + ($203)|0);
    $8 = $205;
    $206 = $5;
    $207 = (($206) - 2)|0;
    $5 = $207;
   }
   STACKTOP = sp;return;
  }
 }
 while(1) {
  $208 = $5;
  $209 = ($208>>>0)>(0);
  if (!($209)) {
   break;
  }
  $210 = $4;
  $2 = $210;
  while(1) {
   $211 = $2;
   $212 = ($211>>>0)>(0);
   if (!($212)) {
    break;
   }
   $213 = $8;
   $214 = (($213) + 8|0);
   $215 = HEAP8[$214>>0]|0;
   $216 = $215&255;
   $Cb22 = $216;
   $217 = $8;
   $218 = (($217) + 9|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $219&255;
   $Cr23 = $220;
   $221 = $2;
   if ((($221|0) == 3)) {
    label = 20;
   } else if ((($221|0) == 2)) {
    label = 24;
   } else if (!((($221|0) == 1))) {
    $222 = $5;
    $cond3 = ($222|0)==(1);
    if (!($cond3)) {
     $223 = $0;
     $224 = (($223) + 68|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = $8;
     $227 = (($226) + 7|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = $Cb22;
     $231 = $Cr23;
     _TIFFYCbCrtoRGB($225,$229,$230,$231,$r24,$g25,$b26);
     $232 = HEAP32[$r24>>2]|0;
     $233 = HEAP32[$g25>>2]|0;
     $234 = $233 << 8;
     $235 = $232 | $234;
     $236 = HEAP32[$b26>>2]|0;
     $237 = $236 << 16;
     $238 = $235 | $237;
     $239 = $238 | -16777216;
     $240 = $cp1;
     $241 = (($240) + 12|0);
     HEAP32[$241>>2] = $239;
    }
    $242 = $0;
    $243 = (($242) + 68|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = $8;
    $246 = (($245) + 3|0);
    $247 = HEAP8[$246>>0]|0;
    $248 = $247&255;
    $249 = $Cb22;
    $250 = $Cr23;
    _TIFFYCbCrtoRGB($244,$248,$249,$250,$r27,$g28,$b29);
    $251 = HEAP32[$r27>>2]|0;
    $252 = HEAP32[$g28>>2]|0;
    $253 = $252 << 8;
    $254 = $251 | $253;
    $255 = HEAP32[$b29>>2]|0;
    $256 = $255 << 16;
    $257 = $254 | $256;
    $258 = $257 | -16777216;
    $259 = $1;
    $260 = (($259) + 12|0);
    HEAP32[$260>>2] = $258;
    label = 20;
   }
   if ((label|0) == 20) {
    label = 0;
    $261 = $5;
    $cond2 = ($261|0)==(1);
    if (!($cond2)) {
     $262 = $0;
     $263 = (($262) + 68|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = $8;
     $266 = (($265) + 6|0);
     $267 = HEAP8[$266>>0]|0;
     $268 = $267&255;
     $269 = $Cb22;
     $270 = $Cr23;
     _TIFFYCbCrtoRGB($264,$268,$269,$270,$r30,$g31,$b32);
     $271 = HEAP32[$r30>>2]|0;
     $272 = HEAP32[$g31>>2]|0;
     $273 = $272 << 8;
     $274 = $271 | $273;
     $275 = HEAP32[$b32>>2]|0;
     $276 = $275 << 16;
     $277 = $274 | $276;
     $278 = $277 | -16777216;
     $279 = $cp1;
     $280 = (($279) + 8|0);
     HEAP32[$280>>2] = $278;
    }
    $281 = $0;
    $282 = (($281) + 68|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = $8;
    $285 = (($284) + 2|0);
    $286 = HEAP8[$285>>0]|0;
    $287 = $286&255;
    $288 = $Cb22;
    $289 = $Cr23;
    _TIFFYCbCrtoRGB($283,$287,$288,$289,$r33,$g34,$b35);
    $290 = HEAP32[$r33>>2]|0;
    $291 = HEAP32[$g34>>2]|0;
    $292 = $291 << 8;
    $293 = $290 | $292;
    $294 = HEAP32[$b35>>2]|0;
    $295 = $294 << 16;
    $296 = $293 | $295;
    $297 = $296 | -16777216;
    $298 = $1;
    $299 = (($298) + 8|0);
    HEAP32[$299>>2] = $297;
    label = 24;
   }
   if ((label|0) == 24) {
    label = 0;
    $300 = $5;
    $cond1 = ($300|0)==(1);
    if (!($cond1)) {
     $301 = $0;
     $302 = (($301) + 68|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = $8;
     $305 = (($304) + 5|0);
     $306 = HEAP8[$305>>0]|0;
     $307 = $306&255;
     $308 = $Cb22;
     $309 = $Cr23;
     _TIFFYCbCrtoRGB($303,$307,$308,$309,$r36,$g37,$b38);
     $310 = HEAP32[$r36>>2]|0;
     $311 = HEAP32[$g37>>2]|0;
     $312 = $311 << 8;
     $313 = $310 | $312;
     $314 = HEAP32[$b38>>2]|0;
     $315 = $314 << 16;
     $316 = $313 | $315;
     $317 = $316 | -16777216;
     $318 = $cp1;
     $319 = (($318) + 4|0);
     HEAP32[$319>>2] = $317;
    }
    $320 = $0;
    $321 = (($320) + 68|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = $8;
    $324 = (($323) + 1|0);
    $325 = HEAP8[$324>>0]|0;
    $326 = $325&255;
    $327 = $Cb22;
    $328 = $Cr23;
    _TIFFYCbCrtoRGB($322,$326,$327,$328,$r39,$g40,$b41);
    $329 = HEAP32[$r39>>2]|0;
    $330 = HEAP32[$g40>>2]|0;
    $331 = $330 << 8;
    $332 = $329 | $331;
    $333 = HEAP32[$b41>>2]|0;
    $334 = $333 << 16;
    $335 = $332 | $334;
    $336 = $335 | -16777216;
    $337 = $1;
    $338 = (($337) + 4|0);
    HEAP32[$338>>2] = $336;
   }
   $339 = $5;
   $cond = ($339|0)==(1);
   if (!($cond)) {
    $340 = $0;
    $341 = (($340) + 68|0);
    $342 = HEAP32[$341>>2]|0;
    $343 = $8;
    $344 = (($343) + 4|0);
    $345 = HEAP8[$344>>0]|0;
    $346 = $345&255;
    $347 = $Cb22;
    $348 = $Cr23;
    _TIFFYCbCrtoRGB($342,$346,$347,$348,$r42,$g43,$b44);
    $349 = HEAP32[$r42>>2]|0;
    $350 = HEAP32[$g43>>2]|0;
    $351 = $350 << 8;
    $352 = $349 | $351;
    $353 = HEAP32[$b44>>2]|0;
    $354 = $353 << 16;
    $355 = $352 | $354;
    $356 = $355 | -16777216;
    $357 = $cp1;
    HEAP32[$357>>2] = $356;
   }
   $358 = $0;
   $359 = (($358) + 68|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = $8;
   $362 = HEAP8[$361>>0]|0;
   $363 = $362&255;
   $364 = $Cb22;
   $365 = $Cr23;
   _TIFFYCbCrtoRGB($360,$363,$364,$365,$r45,$g46,$b47);
   $366 = HEAP32[$r45>>2]|0;
   $367 = HEAP32[$g46>>2]|0;
   $368 = $367 << 8;
   $369 = $366 | $368;
   $370 = HEAP32[$b47>>2]|0;
   $371 = $370 << 16;
   $372 = $369 | $371;
   $373 = $372 | -16777216;
   $374 = $1;
   HEAP32[$374>>2] = $373;
   $375 = $2;
   $376 = ($375>>>0)<(4);
   if ($376) {
    $377 = $2;
    $378 = $1;
    $379 = (($378) + ($377<<2)|0);
    $1 = $379;
    $380 = $2;
    $381 = $cp1;
    $382 = (($381) + ($380<<2)|0);
    $cp1 = $382;
    $2 = 0;
   } else {
    $383 = $1;
    $384 = (($383) + 16|0);
    $1 = $384;
    $385 = $cp1;
    $386 = (($385) + 16|0);
    $cp1 = $386;
    $387 = $2;
    $388 = (($387) - 4)|0;
    $2 = $388;
   }
   $389 = $8;
   $390 = (($389) + 10|0);
   $8 = $390;
  }
  $391 = $5;
  $392 = ($391>>>0)<=(2);
  if ($392) {
   label = 37;
   break;
  }
  $393 = $5;
  $394 = (($393) - 2)|0;
  $5 = $394;
  $395 = $incr;
  $396 = $1;
  $397 = (($396) + ($395<<2)|0);
  $1 = $397;
  $398 = $incr;
  $399 = $cp1;
  $400 = (($399) + ($398<<2)|0);
  $cp1 = $400;
  $401 = $6;
  $402 = $8;
  $403 = (($402) + ($401)|0);
  $8 = $403;
 }
 if ((label|0) == 37) {
 }
 STACKTOP = sp;return;
}
function _putcontig8bitYCbCr41tile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $Cb = 0, $Cb10 = 0, $Cr = 0, $Cr11 = 0, $b = 0, $b14 = 0, $b17 = 0, $b20 = 0, $b3 = 0, $b6 = 0, $b9 = 0, $g = 0, $g13 = 0, $g16 = 0, $g19 = 0, $g2 = 0, $g5 = 0;
 var $g8 = 0, $r = 0, $r1 = 0, $r12 = 0, $r15 = 0, $r18 = 0, $r4 = 0, $r7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 28|0;
 $g = sp + 96|0;
 $b = sp + 104|0;
 $r1 = sp + 112|0;
 $g2 = sp + 120|0;
 $b3 = sp + 128|0;
 $r4 = sp + 132|0;
 $g5 = sp + 52|0;
 $b6 = sp + 56|0;
 $r7 = sp + 60|0;
 $g8 = sp + 64|0;
 $b9 = sp + 68|0;
 $r12 = sp;
 $g13 = sp + 88|0;
 $b14 = sp + 84|0;
 $r15 = sp + 32|0;
 $g16 = sp + 36|0;
 $b17 = sp + 100|0;
 $r18 = sp + 40|0;
 $g19 = sp + 116|0;
 $b20 = sp + 44|0;
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 while(1) {
  $9 = $4;
  $10 = $9 >>> 2;
  $2 = $10;
  while(1) {
   $11 = $8;
   $12 = (($11) + 4|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $Cb = $14;
   $15 = $8;
   $16 = (($15) + 5|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $Cr = $18;
   $19 = $0;
   $20 = (($19) + 68|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $8;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $Cb;
   $26 = $Cr;
   _TIFFYCbCrtoRGB($21,$24,$25,$26,$r,$g,$b);
   $27 = HEAP32[$r>>2]|0;
   $28 = HEAP32[$g>>2]|0;
   $29 = $28 << 8;
   $30 = $27 | $29;
   $31 = HEAP32[$b>>2]|0;
   $32 = $31 << 16;
   $33 = $30 | $32;
   $34 = $33 | -16777216;
   $35 = $1;
   HEAP32[$35>>2] = $34;
   $36 = $0;
   $37 = (($36) + 68|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $8;
   $40 = (($39) + 1|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = $Cb;
   $44 = $Cr;
   _TIFFYCbCrtoRGB($38,$42,$43,$44,$r1,$g2,$b3);
   $45 = HEAP32[$r1>>2]|0;
   $46 = HEAP32[$g2>>2]|0;
   $47 = $46 << 8;
   $48 = $45 | $47;
   $49 = HEAP32[$b3>>2]|0;
   $50 = $49 << 16;
   $51 = $48 | $50;
   $52 = $51 | -16777216;
   $53 = $1;
   $54 = (($53) + 4|0);
   HEAP32[$54>>2] = $52;
   $55 = $0;
   $56 = (($55) + 68|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $8;
   $59 = (($58) + 2|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = $Cb;
   $63 = $Cr;
   _TIFFYCbCrtoRGB($57,$61,$62,$63,$r4,$g5,$b6);
   $64 = HEAP32[$r4>>2]|0;
   $65 = HEAP32[$g5>>2]|0;
   $66 = $65 << 8;
   $67 = $64 | $66;
   $68 = HEAP32[$b6>>2]|0;
   $69 = $68 << 16;
   $70 = $67 | $69;
   $71 = $70 | -16777216;
   $72 = $1;
   $73 = (($72) + 8|0);
   HEAP32[$73>>2] = $71;
   $74 = $0;
   $75 = (($74) + 68|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $8;
   $78 = (($77) + 3|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = $Cb;
   $82 = $Cr;
   _TIFFYCbCrtoRGB($76,$80,$81,$82,$r7,$g8,$b9);
   $83 = HEAP32[$r7>>2]|0;
   $84 = HEAP32[$g8>>2]|0;
   $85 = $84 << 8;
   $86 = $83 | $85;
   $87 = HEAP32[$b9>>2]|0;
   $88 = $87 << 16;
   $89 = $86 | $88;
   $90 = $89 | -16777216;
   $91 = $1;
   $92 = (($91) + 12|0);
   HEAP32[$92>>2] = $90;
   $93 = $1;
   $94 = (($93) + 16|0);
   $1 = $94;
   $95 = $8;
   $96 = (($95) + 6|0);
   $8 = $96;
   $97 = $2;
   $98 = (($97) + -1)|0;
   $2 = $98;
   $99 = ($98|0)!=(0);
   if (!($99)) {
    break;
   }
  }
  $100 = $4;
  $101 = $100 & 3;
  $102 = ($101|0)!=(0);
  if ($102) {
   $103 = $8;
   $104 = (($103) + 4|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = $105&255;
   $Cb10 = $106;
   $107 = $8;
   $108 = (($107) + 5|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $Cr11 = $110;
   $111 = $4;
   $112 = $111 & 3;
   if ((($112|0) == 2)) {
    label = 8;
   } else if ((($112|0) == 1)) {
    label = 9;
   } else if ((($112|0) == 0)) {
    label = 10;
   } else if ((($112|0) == 3)) {
    $113 = $0;
    $114 = (($113) + 68|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $8;
    $117 = (($116) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = $Cb10;
    $121 = $Cr11;
    _TIFFYCbCrtoRGB($115,$119,$120,$121,$r12,$g13,$b14);
    $122 = HEAP32[$r12>>2]|0;
    $123 = HEAP32[$g13>>2]|0;
    $124 = $123 << 8;
    $125 = $122 | $124;
    $126 = HEAP32[$b14>>2]|0;
    $127 = $126 << 16;
    $128 = $125 | $127;
    $129 = $128 | -16777216;
    $130 = $1;
    $131 = (($130) + 8|0);
    HEAP32[$131>>2] = $129;
    label = 8;
   }
   if ((label|0) == 8) {
    label = 0;
    $132 = $0;
    $133 = (($132) + 68|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $8;
    $136 = (($135) + 1|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&255;
    $139 = $Cb10;
    $140 = $Cr11;
    _TIFFYCbCrtoRGB($134,$138,$139,$140,$r15,$g16,$b17);
    $141 = HEAP32[$r15>>2]|0;
    $142 = HEAP32[$g16>>2]|0;
    $143 = $142 << 8;
    $144 = $141 | $143;
    $145 = HEAP32[$b17>>2]|0;
    $146 = $145 << 16;
    $147 = $144 | $146;
    $148 = $147 | -16777216;
    $149 = $1;
    $150 = (($149) + 4|0);
    HEAP32[$150>>2] = $148;
    label = 9;
   }
   if ((label|0) == 9) {
    label = 0;
    $151 = $0;
    $152 = (($151) + 68|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = $8;
    $155 = HEAP8[$154>>0]|0;
    $156 = $155&255;
    $157 = $Cb10;
    $158 = $Cr11;
    _TIFFYCbCrtoRGB($153,$156,$157,$158,$r18,$g19,$b20);
    $159 = HEAP32[$r18>>2]|0;
    $160 = HEAP32[$g19>>2]|0;
    $161 = $160 << 8;
    $162 = $159 | $161;
    $163 = HEAP32[$b20>>2]|0;
    $164 = $163 << 16;
    $165 = $162 | $164;
    $166 = $165 | -16777216;
    $167 = $1;
    HEAP32[$167>>2] = $166;
    label = 10;
   }
   if ((label|0) == 10) {
    label = 0;
   }
   $168 = $4;
   $169 = $168 & 3;
   $170 = $1;
   $171 = (($170) + ($169<<2)|0);
   $1 = $171;
   $172 = $8;
   $173 = (($172) + 6|0);
   $8 = $173;
  }
  $174 = $7;
  $175 = $1;
  $176 = (($175) + ($174<<2)|0);
  $1 = $176;
  $177 = $6;
  $178 = $8;
  $179 = (($178) + ($177)|0);
  $8 = $179;
  $180 = $5;
  $181 = (($180) + -1)|0;
  $5 = $181;
  $182 = ($181|0)!=(0);
  if (!($182)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _putcontig8bitYCbCr22tile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $Cb = 0, $Cb10 = 0, $Cb18 = 0, $Cb26 = 0, $Cr = 0, $Cr11 = 0, $Cr19 = 0, $Cr27 = 0, $b = 0, $b14 = 0, $b17 = 0, $b22 = 0, $b25 = 0, $b3 = 0, $b30 = 0, $b6 = 0, $b9 = 0, $cp2 = 0, $g = 0;
 var $g13 = 0, $g16 = 0, $g2 = 0, $g21 = 0, $g24 = 0, $g29 = 0, $g5 = 0, $g8 = 0, $incr = 0, $r = 0, $r1 = 0, $r12 = 0, $r15 = 0, $r20 = 0, $r23 = 0, $r28 = 0, $r4 = 0, $r7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 36|0;
 $g = sp + 40|0;
 $b = sp + 124|0;
 $r1 = sp + 44|0;
 $g2 = sp + 48|0;
 $b3 = sp + 144|0;
 $r4 = sp + 152|0;
 $g5 = sp + 160|0;
 $b6 = sp + 168|0;
 $r7 = sp + 176|0;
 $g8 = sp + 180|0;
 $b9 = sp + 76|0;
 $r12 = sp + 88|0;
 $g13 = sp + 92|0;
 $b14 = sp + 96|0;
 $r15 = sp + 100|0;
 $g16 = sp + 120|0;
 $b17 = sp + 104|0;
 $r20 = sp + 116|0;
 $g21 = sp + 8|0;
 $b22 = sp + 4|0;
 $r23 = sp + 140|0;
 $g24 = sp + 52|0;
 $b25 = sp + 136|0;
 $r28 = sp + 148|0;
 $g29 = sp;
 $b30 = sp + 60|0;
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $7;
 $10 = $9<<1;
 $11 = $4;
 $12 = (($10) + ($11))|0;
 $incr = $12;
 $13 = $6;
 $14 = (($13|0) / 2)&-1;
 $15 = ($14*6)|0;
 $6 = $15;
 $16 = $1;
 $17 = $4;
 $18 = (($16) + ($17<<2)|0);
 $19 = $7;
 $20 = (($18) + ($19<<2)|0);
 $cp2 = $20;
 while(1) {
  $21 = $5;
  $22 = ($21>>>0)>=(2);
  if (!($22)) {
   break;
  }
  $23 = $4;
  $2 = $23;
  while(1) {
   $24 = $2;
   $25 = ($24>>>0)>=(2);
   if (!($25)) {
    break;
   }
   $26 = $8;
   $27 = (($26) + 4|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $Cb = $29;
   $30 = $8;
   $31 = (($30) + 5|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $Cr = $33;
   $34 = $0;
   $35 = (($34) + 68|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $8;
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = $Cb;
   $41 = $Cr;
   _TIFFYCbCrtoRGB($36,$39,$40,$41,$r,$g,$b);
   $42 = HEAP32[$r>>2]|0;
   $43 = HEAP32[$g>>2]|0;
   $44 = $43 << 8;
   $45 = $42 | $44;
   $46 = HEAP32[$b>>2]|0;
   $47 = $46 << 16;
   $48 = $45 | $47;
   $49 = $48 | -16777216;
   $50 = $1;
   HEAP32[$50>>2] = $49;
   $51 = $0;
   $52 = (($51) + 68|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $8;
   $55 = (($54) + 1|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = $Cb;
   $59 = $Cr;
   _TIFFYCbCrtoRGB($53,$57,$58,$59,$r1,$g2,$b3);
   $60 = HEAP32[$r1>>2]|0;
   $61 = HEAP32[$g2>>2]|0;
   $62 = $61 << 8;
   $63 = $60 | $62;
   $64 = HEAP32[$b3>>2]|0;
   $65 = $64 << 16;
   $66 = $63 | $65;
   $67 = $66 | -16777216;
   $68 = $1;
   $69 = (($68) + 4|0);
   HEAP32[$69>>2] = $67;
   $70 = $0;
   $71 = (($70) + 68|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $8;
   $74 = (($73) + 2|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $Cb;
   $78 = $Cr;
   _TIFFYCbCrtoRGB($72,$76,$77,$78,$r4,$g5,$b6);
   $79 = HEAP32[$r4>>2]|0;
   $80 = HEAP32[$g5>>2]|0;
   $81 = $80 << 8;
   $82 = $79 | $81;
   $83 = HEAP32[$b6>>2]|0;
   $84 = $83 << 16;
   $85 = $82 | $84;
   $86 = $85 | -16777216;
   $87 = $cp2;
   HEAP32[$87>>2] = $86;
   $88 = $0;
   $89 = (($88) + 68|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $8;
   $92 = (($91) + 3|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $Cb;
   $96 = $Cr;
   _TIFFYCbCrtoRGB($90,$94,$95,$96,$r7,$g8,$b9);
   $97 = HEAP32[$r7>>2]|0;
   $98 = HEAP32[$g8>>2]|0;
   $99 = $98 << 8;
   $100 = $97 | $99;
   $101 = HEAP32[$b9>>2]|0;
   $102 = $101 << 16;
   $103 = $100 | $102;
   $104 = $103 | -16777216;
   $105 = $cp2;
   $106 = (($105) + 4|0);
   HEAP32[$106>>2] = $104;
   $107 = $1;
   $108 = (($107) + 8|0);
   $1 = $108;
   $109 = $cp2;
   $110 = (($109) + 8|0);
   $cp2 = $110;
   $111 = $8;
   $112 = (($111) + 6|0);
   $8 = $112;
   $113 = $2;
   $114 = (($113) - 2)|0;
   $2 = $114;
  }
  $115 = $2;
  $116 = ($115|0)==(1);
  if ($116) {
   $117 = $8;
   $118 = (($117) + 4|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $Cb10 = $120;
   $121 = $8;
   $122 = (($121) + 5|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = $123&255;
   $Cr11 = $124;
   $125 = $0;
   $126 = (($125) + 68|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $8;
   $129 = HEAP8[$128>>0]|0;
   $130 = $129&255;
   $131 = $Cb10;
   $132 = $Cr11;
   _TIFFYCbCrtoRGB($127,$130,$131,$132,$r12,$g13,$b14);
   $133 = HEAP32[$r12>>2]|0;
   $134 = HEAP32[$g13>>2]|0;
   $135 = $134 << 8;
   $136 = $133 | $135;
   $137 = HEAP32[$b14>>2]|0;
   $138 = $137 << 16;
   $139 = $136 | $138;
   $140 = $139 | -16777216;
   $141 = $1;
   HEAP32[$141>>2] = $140;
   $142 = $0;
   $143 = (($142) + 68|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $8;
   $146 = (($145) + 2|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = $Cb10;
   $150 = $Cr11;
   _TIFFYCbCrtoRGB($144,$148,$149,$150,$r15,$g16,$b17);
   $151 = HEAP32[$r15>>2]|0;
   $152 = HEAP32[$g16>>2]|0;
   $153 = $152 << 8;
   $154 = $151 | $153;
   $155 = HEAP32[$b17>>2]|0;
   $156 = $155 << 16;
   $157 = $154 | $156;
   $158 = $157 | -16777216;
   $159 = $cp2;
   HEAP32[$159>>2] = $158;
   $160 = $1;
   $161 = (($160) + 4|0);
   $1 = $161;
   $162 = $cp2;
   $163 = (($162) + 4|0);
   $cp2 = $163;
   $164 = $8;
   $165 = (($164) + 6|0);
   $8 = $165;
  }
  $166 = $incr;
  $167 = $1;
  $168 = (($167) + ($166<<2)|0);
  $1 = $168;
  $169 = $incr;
  $170 = $cp2;
  $171 = (($170) + ($169<<2)|0);
  $cp2 = $171;
  $172 = $6;
  $173 = $8;
  $174 = (($173) + ($172)|0);
  $8 = $174;
  $175 = $5;
  $176 = (($175) - 2)|0;
  $5 = $176;
 }
 $177 = $5;
 $178 = ($177|0)==(1);
 if (!($178)) {
  STACKTOP = sp;return;
 }
 $179 = $4;
 $2 = $179;
 while(1) {
  $180 = $2;
  $181 = ($180>>>0)>=(2);
  if (!($181)) {
   break;
  }
  $182 = $8;
  $183 = (($182) + 4|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = $184&255;
  $Cb18 = $185;
  $186 = $8;
  $187 = (($186) + 5|0);
  $188 = HEAP8[$187>>0]|0;
  $189 = $188&255;
  $Cr19 = $189;
  $190 = $0;
  $191 = (($190) + 68|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $8;
  $194 = HEAP8[$193>>0]|0;
  $195 = $194&255;
  $196 = $Cb18;
  $197 = $Cr19;
  _TIFFYCbCrtoRGB($192,$195,$196,$197,$r20,$g21,$b22);
  $198 = HEAP32[$r20>>2]|0;
  $199 = HEAP32[$g21>>2]|0;
  $200 = $199 << 8;
  $201 = $198 | $200;
  $202 = HEAP32[$b22>>2]|0;
  $203 = $202 << 16;
  $204 = $201 | $203;
  $205 = $204 | -16777216;
  $206 = $1;
  HEAP32[$206>>2] = $205;
  $207 = $0;
  $208 = (($207) + 68|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $8;
  $211 = (($210) + 1|0);
  $212 = HEAP8[$211>>0]|0;
  $213 = $212&255;
  $214 = $Cb18;
  $215 = $Cr19;
  _TIFFYCbCrtoRGB($209,$213,$214,$215,$r23,$g24,$b25);
  $216 = HEAP32[$r23>>2]|0;
  $217 = HEAP32[$g24>>2]|0;
  $218 = $217 << 8;
  $219 = $216 | $218;
  $220 = HEAP32[$b25>>2]|0;
  $221 = $220 << 16;
  $222 = $219 | $221;
  $223 = $222 | -16777216;
  $224 = $1;
  $225 = (($224) + 4|0);
  HEAP32[$225>>2] = $223;
  $226 = $1;
  $227 = (($226) + 8|0);
  $1 = $227;
  $228 = $cp2;
  $229 = (($228) + 8|0);
  $cp2 = $229;
  $230 = $8;
  $231 = (($230) + 6|0);
  $8 = $231;
  $232 = $2;
  $233 = (($232) - 2)|0;
  $2 = $233;
 }
 $234 = $2;
 $235 = ($234|0)==(1);
 if ($235) {
  $236 = $8;
  $237 = (($236) + 4|0);
  $238 = HEAP8[$237>>0]|0;
  $239 = $238&255;
  $Cb26 = $239;
  $240 = $8;
  $241 = (($240) + 5|0);
  $242 = HEAP8[$241>>0]|0;
  $243 = $242&255;
  $Cr27 = $243;
  $244 = $0;
  $245 = (($244) + 68|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $8;
  $248 = HEAP8[$247>>0]|0;
  $249 = $248&255;
  $250 = $Cb26;
  $251 = $Cr27;
  _TIFFYCbCrtoRGB($246,$249,$250,$251,$r28,$g29,$b30);
  $252 = HEAP32[$r28>>2]|0;
  $253 = HEAP32[$g29>>2]|0;
  $254 = $253 << 8;
  $255 = $252 | $254;
  $256 = HEAP32[$b30>>2]|0;
  $257 = $256 << 16;
  $258 = $255 | $257;
  $259 = $258 | -16777216;
  $260 = $1;
  HEAP32[$260>>2] = $259;
 }
 STACKTOP = sp;return;
}
function _putcontig8bitYCbCr21tile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Cb = 0, $Cb4 = 0, $Cr = 0, $Cr5 = 0, $b = 0, $b3 = 0, $b8 = 0, $g = 0, $g2 = 0, $g7 = 0, $r = 0, $r1 = 0, $r6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 84|0;
 $g = sp + 32|0;
 $b = sp + 36|0;
 $r1 = sp + 44|0;
 $g2 = sp + 48|0;
 $b3 = sp + 40|0;
 $r6 = sp + 4|0;
 $g7 = sp + 20|0;
 $b8 = sp + 68|0;
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $6;
 $10 = $9<<2;
 $11 = (($10|0) / 2)&-1;
 $6 = $11;
 while(1) {
  $12 = $4;
  $13 = $12 >>> 1;
  $2 = $13;
  while(1) {
   $14 = $8;
   $15 = (($14) + 2|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $Cb = $17;
   $18 = $8;
   $19 = (($18) + 3|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $Cr = $21;
   $22 = $0;
   $23 = (($22) + 68|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $8;
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = $Cb;
   $29 = $Cr;
   _TIFFYCbCrtoRGB($24,$27,$28,$29,$r,$g,$b);
   $30 = HEAP32[$r>>2]|0;
   $31 = HEAP32[$g>>2]|0;
   $32 = $31 << 8;
   $33 = $30 | $32;
   $34 = HEAP32[$b>>2]|0;
   $35 = $34 << 16;
   $36 = $33 | $35;
   $37 = $36 | -16777216;
   $38 = $1;
   HEAP32[$38>>2] = $37;
   $39 = $0;
   $40 = (($39) + 68|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $8;
   $43 = (($42) + 1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = $Cb;
   $47 = $Cr;
   _TIFFYCbCrtoRGB($41,$45,$46,$47,$r1,$g2,$b3);
   $48 = HEAP32[$r1>>2]|0;
   $49 = HEAP32[$g2>>2]|0;
   $50 = $49 << 8;
   $51 = $48 | $50;
   $52 = HEAP32[$b3>>2]|0;
   $53 = $52 << 16;
   $54 = $51 | $53;
   $55 = $54 | -16777216;
   $56 = $1;
   $57 = (($56) + 4|0);
   HEAP32[$57>>2] = $55;
   $58 = $1;
   $59 = (($58) + 8|0);
   $1 = $59;
   $60 = $8;
   $61 = (($60) + 4|0);
   $8 = $61;
   $62 = $2;
   $63 = (($62) + -1)|0;
   $2 = $63;
   $64 = ($63|0)!=(0);
   if (!($64)) {
    break;
   }
  }
  $65 = $4;
  $66 = $65 & 1;
  $67 = ($66|0)!=(0);
  if ($67) {
   $68 = $8;
   $69 = (($68) + 2|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $Cb4 = $71;
   $72 = $8;
   $73 = (($72) + 3|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $Cr5 = $75;
   $76 = $0;
   $77 = (($76) + 68|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $8;
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $Cb4;
   $83 = $Cr5;
   _TIFFYCbCrtoRGB($78,$81,$82,$83,$r6,$g7,$b8);
   $84 = HEAP32[$r6>>2]|0;
   $85 = HEAP32[$g7>>2]|0;
   $86 = $85 << 8;
   $87 = $84 | $86;
   $88 = HEAP32[$b8>>2]|0;
   $89 = $88 << 16;
   $90 = $87 | $89;
   $91 = $90 | -16777216;
   $92 = $1;
   HEAP32[$92>>2] = $91;
   $93 = $1;
   $94 = (($93) + 4|0);
   $1 = $94;
   $95 = $8;
   $96 = (($95) + 4|0);
   $8 = $96;
  }
  $97 = $7;
  $98 = $1;
  $99 = (($98) + ($97<<2)|0);
  $1 = $99;
  $100 = $6;
  $101 = $8;
  $102 = (($101) + ($100)|0);
  $8 = $102;
  $103 = $5;
  $104 = (($103) + -1)|0;
  $5 = $104;
  $105 = ($104|0)!=(0);
  if (!($105)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _putcontig8bitYCbCr12tile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $Cb = 0, $Cb4 = 0, $Cr = 0, $Cr5 = 0, $b = 0, $b3 = 0, $b8 = 0, $cp2 = 0, $g = 0, $g2 = 0, $g7 = 0, $incr = 0, $r = 0, $r1 = 0, $r6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 36|0;
 $g = sp + 40|0;
 $b = sp + 44|0;
 $r1 = sp + 52|0;
 $g2 = sp + 60|0;
 $b3 = sp + 16|0;
 $r6 = sp + 68|0;
 $g7 = sp + 24|0;
 $b8 = sp + 76|0;
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $7;
 $10 = $9<<1;
 $11 = $4;
 $12 = (($10) + ($11))|0;
 $incr = $12;
 $13 = $6;
 $14 = (($13|0) / 2)&-1;
 $15 = $14<<2;
 $6 = $15;
 $16 = $1;
 $17 = $4;
 $18 = (($16) + ($17<<2)|0);
 $19 = $7;
 $20 = (($18) + ($19<<2)|0);
 $cp2 = $20;
 while(1) {
  $21 = $5;
  $22 = ($21>>>0)>=(2);
  if (!($22)) {
   break;
  }
  $23 = $4;
  $2 = $23;
  while(1) {
   $24 = $8;
   $25 = (($24) + 2|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $Cb = $27;
   $28 = $8;
   $29 = (($28) + 3|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $Cr = $31;
   $32 = $0;
   $33 = (($32) + 68|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $8;
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $Cb;
   $39 = $Cr;
   _TIFFYCbCrtoRGB($34,$37,$38,$39,$r,$g,$b);
   $40 = HEAP32[$r>>2]|0;
   $41 = HEAP32[$g>>2]|0;
   $42 = $41 << 8;
   $43 = $40 | $42;
   $44 = HEAP32[$b>>2]|0;
   $45 = $44 << 16;
   $46 = $43 | $45;
   $47 = $46 | -16777216;
   $48 = $1;
   HEAP32[$48>>2] = $47;
   $49 = $0;
   $50 = (($49) + 68|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $8;
   $53 = (($52) + 1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $Cb;
   $57 = $Cr;
   _TIFFYCbCrtoRGB($51,$55,$56,$57,$r1,$g2,$b3);
   $58 = HEAP32[$r1>>2]|0;
   $59 = HEAP32[$g2>>2]|0;
   $60 = $59 << 8;
   $61 = $58 | $60;
   $62 = HEAP32[$b3>>2]|0;
   $63 = $62 << 16;
   $64 = $61 | $63;
   $65 = $64 | -16777216;
   $66 = $cp2;
   HEAP32[$66>>2] = $65;
   $67 = $1;
   $68 = (($67) + 4|0);
   $1 = $68;
   $69 = $cp2;
   $70 = (($69) + 4|0);
   $cp2 = $70;
   $71 = $8;
   $72 = (($71) + 4|0);
   $8 = $72;
   $73 = $2;
   $74 = (($73) + -1)|0;
   $2 = $74;
   $75 = ($74|0)!=(0);
   if (!($75)) {
    break;
   }
  }
  $76 = $incr;
  $77 = $1;
  $78 = (($77) + ($76<<2)|0);
  $1 = $78;
  $79 = $incr;
  $80 = $cp2;
  $81 = (($80) + ($79<<2)|0);
  $cp2 = $81;
  $82 = $6;
  $83 = $8;
  $84 = (($83) + ($82)|0);
  $8 = $84;
  $85 = $5;
  $86 = (($85) - 2)|0;
  $5 = $86;
 }
 $87 = $5;
 $88 = ($87|0)==(1);
 if (!($88)) {
  STACKTOP = sp;return;
 }
 $89 = $4;
 $2 = $89;
 while(1) {
  $90 = $8;
  $91 = (($90) + 2|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $Cb4 = $93;
  $94 = $8;
  $95 = (($94) + 3|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $Cr5 = $97;
  $98 = $0;
  $99 = (($98) + 68|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $8;
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = $Cb4;
  $105 = $Cr5;
  _TIFFYCbCrtoRGB($100,$103,$104,$105,$r6,$g7,$b8);
  $106 = HEAP32[$r6>>2]|0;
  $107 = HEAP32[$g7>>2]|0;
  $108 = $107 << 8;
  $109 = $106 | $108;
  $110 = HEAP32[$b8>>2]|0;
  $111 = $110 << 16;
  $112 = $109 | $111;
  $113 = $112 | -16777216;
  $114 = $1;
  HEAP32[$114>>2] = $113;
  $115 = $1;
  $116 = (($115) + 4|0);
  $1 = $116;
  $117 = $8;
  $118 = (($117) + 4|0);
  $8 = $118;
  $119 = $2;
  $120 = (($119) + -1)|0;
  $2 = $120;
  $121 = ($120|0)!=(0);
  if (!($121)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _putcontig8bitYCbCr11tile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Cb = 0, $Cr = 0, $b = 0, $g = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 4|0;
 $g = sp + 24|0;
 $b = sp + 8|0;
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $6;
 $10 = ($9*3)|0;
 $6 = $10;
 while(1) {
  $11 = $4;
  $2 = $11;
  while(1) {
   $12 = $8;
   $13 = (($12) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $Cb = $15;
   $16 = $8;
   $17 = (($16) + 2|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $Cr = $19;
   $20 = $0;
   $21 = (($20) + 68|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $8;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $Cb;
   $27 = $Cr;
   _TIFFYCbCrtoRGB($22,$25,$26,$27,$r,$g,$b);
   $28 = HEAP32[$r>>2]|0;
   $29 = HEAP32[$g>>2]|0;
   $30 = $29 << 8;
   $31 = $28 | $30;
   $32 = HEAP32[$b>>2]|0;
   $33 = $32 << 16;
   $34 = $31 | $33;
   $35 = $34 | -16777216;
   $36 = $1;
   $37 = (($36) + 4|0);
   $1 = $37;
   HEAP32[$36>>2] = $35;
   $38 = $8;
   $39 = (($38) + 3|0);
   $8 = $39;
   $40 = $2;
   $41 = (($40) + -1)|0;
   $2 = $41;
   $42 = ($41|0)!=(0);
   if (!($42)) {
    break;
   }
  }
  $43 = $7;
  $44 = $1;
  $45 = (($44) + ($43<<2)|0);
  $1 = $45;
  $46 = $6;
  $47 = $8;
  $48 = (($47) + ($46)|0);
  $8 = $48;
  $49 = $5;
  $50 = (($49) + -1)|0;
  $5 = $50;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _initCIELabConversion($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $refWhite = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, $whitePoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $whitePoint = sp + 20|0;
 $refWhite = sp + 28|0;
 $1 = $img;
 $2 = $1;
 $3 = (($2) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 do {
  if (!($5)) {
   $6 = (__TIFFmalloc(18124)|0);
   $7 = $1;
   $8 = (($7) + 72|0);
   HEAP32[$8>>2] = $6;
   $9 = $1;
   $10 = (($9) + 72|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(0|0);
   if ($12) {
    break;
   }
   $13 = $1;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 628|0);
   $16 = HEAP32[$15>>2]|0;
   _TIFFErrorExt($16,17000,17024,$vararg_buffer);
   $0 = 0;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  }
 } while(0);
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $whitePoint;
 (_TIFFGetFieldDefaulted($18,318,$vararg_buffer1)|0);
 $19 = (($refWhite) + 4|0);
 HEAPF32[$19>>2] = 100.0;
 $20 = HEAP32[$whitePoint>>2]|0;
 $21 = +HEAPF32[$20>>2];
 $22 = HEAP32[$whitePoint>>2]|0;
 $23 = (($22) + 4|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $21 / $24;
 $26 = (($refWhite) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $25 * $27;
 HEAPF32[$refWhite>>2] = $28;
 $29 = HEAP32[$whitePoint>>2]|0;
 $30 = +HEAPF32[$29>>2];
 $31 = 1.0 - $30;
 $32 = HEAP32[$whitePoint>>2]|0;
 $33 = (($32) + 4|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $31 - $34;
 $36 = HEAP32[$whitePoint>>2]|0;
 $37 = (($36) + 4|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $35 / $38;
 $40 = (($refWhite) + 4|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $39 * $41;
 $43 = (($refWhite) + 8|0);
 HEAPF32[$43>>2] = $42;
 $44 = $1;
 $45 = (($44) + 72|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (_TIFFCIELabToRGBInit($46,17072,$refWhite)|0);
 $48 = ($47|0)<(0);
 if ($48) {
  $49 = $1;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 628|0);
  $52 = HEAP32[$51>>2]|0;
  _TIFFErrorExt($52,17000,17160,$vararg_buffer3);
  $53 = $1;
  $54 = (($53) + 72|0);
  $55 = HEAP32[$54>>2]|0;
  __TIFFfree($55);
  $0 = 0;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 } else {
  $0 = 60;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _gtTileSeparate($img,$raster,$w,$h) {
 $img = $img|0;
 $raster = $raster|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $alpha = 0, $buf = 0, $bufsize = 0, $col = 0, $colorchannels = 0, $flip = 0, $fromskew = 0, $left = 0, $line = 0, $npix = 0, $nrow = 0, $p0 = 0, $p1 = 0, $p2 = 0, $pa = 0, $pos = 0, $put = 0;
 var $ret = 0, $right = 0, $row = 0, $rowstoread = 0, $temp = 0, $th = 0, $tif = 0, $tilesize = 0, $toskew = 0, $tw = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 16|0;
 $tw = sp + 108|0;
 $th = sp + 100|0;
 $1 = $img;
 $2 = $raster;
 $3 = $w;
 $4 = $h;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $tif = $6;
 $7 = $1;
 $8 = (($7) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $put = $9;
 $10 = $1;
 $11 = (($10) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $alpha = $12;
 $ret = 1;
 $13 = $tif;
 $14 = (_TIFFTileSize($13)|0);
 $tilesize = $14;
 $15 = $tilesize;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $alpha;
  $18 = ($17|0)!=(0);
  $19 = $18 ? 4 : 3;
  $20 = $tilesize;
  $21 = Math_imul($19, $20)|0;
  $22 = $tilesize;
  $23 = (($21|0) / ($22|0))&-1;
  $24 = $alpha;
  $25 = ($24|0)!=(0);
  $26 = $25 ? 4 : 3;
  $27 = ($23|0)==($26|0);
  if ($27) {
   $28 = $alpha;
   $29 = ($28|0)!=(0);
   $30 = $29 ? 4 : 3;
   $31 = $tilesize;
   $32 = Math_imul($30, $31)|0;
   $33 = $32;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $33 = 0;
 }
 $bufsize = $33;
 $34 = $bufsize;
 $35 = ($34|0)==(0);
 if ($35) {
  $36 = $tif;
  $37 = (($36) + 628|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $tif;
  $40 = (_TIFFFileName($39)|0);
  HEAP32[$vararg_buffer>>2] = 16984;
  _TIFFErrorExt($38,$40,16912,$vararg_buffer);
  $0 = 0;
  $322 = $0;
  STACKTOP = sp;return ($322|0);
 }
 $41 = $bufsize;
 $42 = (__TIFFmalloc($41)|0);
 $buf = $42;
 $43 = $buf;
 $44 = ($43|0)==(0|0);
 if ($44) {
  $45 = $tif;
  $46 = (($45) + 628|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $tif;
  $49 = (_TIFFFileName($48)|0);
  HEAP32[$vararg_buffer1>>2] = 16952;
  _TIFFErrorExt($47,$49,16664,$vararg_buffer1);
  $0 = 0;
  $322 = $0;
  STACKTOP = sp;return ($322|0);
 }
 $50 = $buf;
 $51 = $bufsize;
 __TIFFmemset($50,0,$51);
 $52 = $buf;
 $p0 = $52;
 $53 = $p0;
 $54 = $tilesize;
 $55 = (($53) + ($54)|0);
 $p1 = $55;
 $56 = $p1;
 $57 = $tilesize;
 $58 = (($56) + ($57)|0);
 $p2 = $58;
 $59 = $alpha;
 $60 = ($59|0)!=(0);
 if ($60) {
  $61 = $p2;
  $62 = $tilesize;
  $63 = (($61) + ($62)|0);
  $64 = $63;
 } else {
  $64 = 0;
 }
 $pa = $64;
 $65 = $tif;
 HEAP32[$vararg_buffer4>>2] = $tw;
 (_TIFFGetField($65,322,$vararg_buffer4)|0);
 $66 = $tif;
 HEAP32[$vararg_buffer7>>2] = $th;
 (_TIFFGetField($66,323,$vararg_buffer7)|0);
 $67 = $1;
 $68 = (_setorientation($67)|0);
 $flip = $68;
 $69 = $flip;
 $70 = $69 & 1;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = $4;
  $73 = (($72) - 1)|0;
  $y = $73;
  $74 = HEAP32[$tw>>2]|0;
  $75 = $3;
  $76 = (($74) + ($75))|0;
  $77 = (0 - ($76))|0;
  $toskew = $77;
 } else {
  $y = 0;
  $78 = HEAP32[$tw>>2]|0;
  $79 = $3;
  $80 = (($78) - ($79))|0;
  $81 = (0 - ($80))|0;
  $toskew = $81;
 }
 $82 = $1;
 $83 = (($82) + 32|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84&65535;
 if ((($85|0) == 3) | (($85|0) == 1) | (($85|0) == 0)) {
  $colorchannels = 1;
  $86 = $p0;
  $p1 = $86;
  $p2 = $86;
 } else {
  $colorchannels = 3;
 }
 $row = 0;
 while(1) {
  $87 = $row;
  $88 = $4;
  $89 = ($87>>>0)<($88>>>0);
  if (!($89)) {
   break;
  }
  $90 = HEAP32[$th>>2]|0;
  $91 = $row;
  $92 = $1;
  $93 = (($92) + 84|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($91) + ($94))|0;
  $96 = HEAP32[$th>>2]|0;
  $97 = (($95>>>0) % ($96>>>0))&-1;
  $98 = (($90) - ($97))|0;
  $rowstoread = $98;
  $99 = $row;
  $100 = $rowstoread;
  $101 = (($99) + ($100))|0;
  $102 = $4;
  $103 = ($101>>>0)>($102>>>0);
  if ($103) {
   $104 = $4;
   $105 = $row;
   $106 = (($104) - ($105))|0;
   $108 = $106;
  } else {
   $107 = $rowstoread;
   $108 = $107;
  }
  $nrow = $108;
  $col = 0;
  while(1) {
   $109 = $col;
   $110 = $3;
   $111 = ($109>>>0)<($110>>>0);
   if (!($111)) {
    break;
   }
   $112 = $tif;
   $113 = $p0;
   $114 = $col;
   $115 = $1;
   $116 = (($115) + 88|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($114) + ($117))|0;
   $119 = $row;
   $120 = $1;
   $121 = (($120) + 84|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($119) + ($122))|0;
   $124 = (_TIFFReadTile($112,$113,$118,$123,0,0)|0);
   $125 = ($124|0)==(-1);
   if ($125) {
    $126 = $1;
    $127 = (($126) + 4|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)!=(0);
    if ($129) {
     label = 27;
     break;
    }
   }
   $130 = $colorchannels;
   $131 = ($130|0)>(1);
   if ($131) {
    $132 = $tif;
    $133 = $p1;
    $134 = $col;
    $135 = $1;
    $136 = (($135) + 88|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($134) + ($137))|0;
    $139 = $row;
    $140 = $1;
    $141 = (($140) + 84|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($139) + ($142))|0;
    $144 = (_TIFFReadTile($132,$133,$138,$143,0,1)|0);
    $145 = ($144|0)==(-1);
    if ($145) {
     $146 = $1;
     $147 = (($146) + 4|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)!=(0);
     if ($149) {
      label = 31;
      break;
     }
    }
   }
   $150 = $colorchannels;
   $151 = ($150|0)>(1);
   if ($151) {
    $152 = $tif;
    $153 = $p2;
    $154 = $col;
    $155 = $1;
    $156 = (($155) + 88|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = (($154) + ($157))|0;
    $159 = $row;
    $160 = $1;
    $161 = (($160) + 84|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = (($159) + ($162))|0;
    $164 = (_TIFFReadTile($152,$153,$158,$163,0,2)|0);
    $165 = ($164|0)==(-1);
    if ($165) {
     $166 = $1;
     $167 = (($166) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)!=(0);
     if ($169) {
      label = 35;
      break;
     }
    }
   }
   $170 = $alpha;
   $171 = ($170|0)!=(0);
   if ($171) {
    $172 = $tif;
    $173 = $pa;
    $174 = $col;
    $175 = $1;
    $176 = (($175) + 88|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = (($174) + ($177))|0;
    $179 = $row;
    $180 = $1;
    $181 = (($180) + 84|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = (($179) + ($182))|0;
    $184 = $colorchannels;
    $185 = $184&65535;
    $186 = (_TIFFReadTile($172,$173,$178,$183,0,$185)|0);
    $187 = ($186|0)==(-1);
    if ($187) {
     $188 = $1;
     $189 = (($188) + 4|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = ($190|0)!=(0);
     if ($191) {
      label = 39;
      break;
     }
    }
   }
   $192 = $row;
   $193 = $1;
   $194 = (($193) + 84|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($192) + ($195))|0;
   $197 = HEAP32[$th>>2]|0;
   $198 = (($196>>>0) % ($197>>>0))&-1;
   $199 = $tif;
   $200 = (_TIFFTileRowSize($199)|0);
   $201 = Math_imul($198, $200)|0;
   $pos = $201;
   $202 = $col;
   $203 = HEAP32[$tw>>2]|0;
   $204 = (($202) + ($203))|0;
   $205 = $3;
   $206 = ($204>>>0)>($205>>>0);
   if ($206) {
    $207 = $3;
    $208 = $col;
    $209 = (($207) - ($208))|0;
    $npix = $209;
    $210 = HEAP32[$tw>>2]|0;
    $211 = $npix;
    $212 = (($210) - ($211))|0;
    $fromskew = $212;
    $213 = $put;
    $214 = $1;
    $215 = $2;
    $216 = $y;
    $217 = $3;
    $218 = Math_imul($216, $217)|0;
    $219 = (($215) + ($218<<2)|0);
    $220 = $col;
    $221 = (($219) + ($220<<2)|0);
    $222 = $col;
    $223 = $y;
    $224 = $npix;
    $225 = $nrow;
    $226 = $fromskew;
    $227 = $toskew;
    $228 = $fromskew;
    $229 = (($227) + ($228))|0;
    $230 = $p0;
    $231 = $pos;
    $232 = (($230) + ($231)|0);
    $233 = $p1;
    $234 = $pos;
    $235 = (($233) + ($234)|0);
    $236 = $p2;
    $237 = $pos;
    $238 = (($236) + ($237)|0);
    $239 = $alpha;
    $240 = ($239|0)!=(0);
    if ($240) {
     $241 = $pa;
     $242 = $pos;
     $243 = (($241) + ($242)|0);
     $244 = $243;
    } else {
     $244 = 0;
    }
    FUNCTION_TABLE_viiiiiiiiiiii[$213 & 63]($214,$221,$222,$223,$224,$225,$226,$229,$232,$235,$238,$244);
   } else {
    $245 = $put;
    $246 = $1;
    $247 = $2;
    $248 = $y;
    $249 = $3;
    $250 = Math_imul($248, $249)|0;
    $251 = (($247) + ($250<<2)|0);
    $252 = $col;
    $253 = (($251) + ($252<<2)|0);
    $254 = $col;
    $255 = $y;
    $256 = HEAP32[$tw>>2]|0;
    $257 = $nrow;
    $258 = $toskew;
    $259 = $p0;
    $260 = $pos;
    $261 = (($259) + ($260)|0);
    $262 = $p1;
    $263 = $pos;
    $264 = (($262) + ($263)|0);
    $265 = $p2;
    $266 = $pos;
    $267 = (($265) + ($266)|0);
    $268 = $alpha;
    $269 = ($268|0)!=(0);
    if ($269) {
     $270 = $pa;
     $271 = $pos;
     $272 = (($270) + ($271)|0);
     $273 = $272;
    } else {
     $273 = 0;
    }
    FUNCTION_TABLE_viiiiiiiiiiii[$245 & 63]($246,$253,$254,$255,$256,$257,0,$258,$261,$264,$267,$273);
   }
   $274 = HEAP32[$tw>>2]|0;
   $275 = $col;
   $276 = (($275) + ($274))|0;
   $col = $276;
  }
  if ((label|0) == 27) {
   label = 0;
   $ret = 0;
  }
  else if ((label|0) == 31) {
   label = 0;
   $ret = 0;
  }
  else if ((label|0) == 35) {
   label = 0;
   $ret = 0;
  }
  else if ((label|0) == 39) {
   label = 0;
   $ret = 0;
  }
  $277 = $flip;
  $278 = $277 & 1;
  $279 = ($278|0)!=(0);
  if ($279) {
   $280 = $nrow;
   $281 = (0 - ($280))|0;
   $285 = $281;
  } else {
   $282 = $nrow;
   $285 = $282;
  }
  $283 = $y;
  $284 = (($283) + ($285))|0;
  $y = $284;
  $286 = $nrow;
  $287 = $row;
  $288 = (($287) + ($286))|0;
  $row = $288;
 }
 $289 = $flip;
 $290 = $289 & 2;
 $291 = ($290|0)!=(0);
 if ($291) {
  $line = 0;
  while(1) {
   $292 = $line;
   $293 = $4;
   $294 = ($292>>>0)<($293>>>0);
   if (!($294)) {
    break;
   }
   $295 = $2;
   $296 = $line;
   $297 = $3;
   $298 = Math_imul($296, $297)|0;
   $299 = (($295) + ($298<<2)|0);
   $left = $299;
   $300 = $left;
   $301 = $3;
   $302 = (($300) + ($301<<2)|0);
   $303 = (($302) + -4|0);
   $right = $303;
   while(1) {
    $304 = $left;
    $305 = $right;
    $306 = ($304>>>0)<($305>>>0);
    if (!($306)) {
     break;
    }
    $307 = $left;
    $308 = HEAP32[$307>>2]|0;
    $temp = $308;
    $309 = $right;
    $310 = HEAP32[$309>>2]|0;
    $311 = $left;
    HEAP32[$311>>2] = $310;
    $312 = $temp;
    $313 = $right;
    HEAP32[$313>>2] = $312;
    $314 = $left;
    $315 = (($314) + 4|0);
    $left = $315;
    $316 = $right;
    $317 = (($316) + -4|0);
    $right = $317;
   }
   $318 = $line;
   $319 = (($318) + 1)|0;
   $line = $319;
  }
 }
 $320 = $buf;
 __TIFFfree($320);
 $321 = $ret;
 $0 = $321;
 $322 = $0;
 STACKTOP = sp;return ($322|0);
}
function _gtStripSeparate($img,$raster,$w,$h) {
 $img = $img|0;
 $raster = $raster|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $alpha = 0, $buf = 0, $bufsize = 0, $colorchannels = 0, $flip = 0, $fromskew = 0, $imagewidth = 0, $left = 0, $line = 0, $nrow = 0, $offset_row = 0, $p0 = 0, $p1 = 0, $p2 = 0, $pa = 0, $pos = 0, $put = 0, $ret = 0;
 var $right = 0, $row = 0, $rowsperstrip = 0, $rowstoread = 0, $scanline = 0, $stripsize = 0, $temp = 0, $tif = 0, $toskew = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $rowsperstrip = sp + 72|0;
 $1 = $img;
 $2 = $raster;
 $3 = $w;
 $4 = $h;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $tif = $6;
 $7 = $1;
 $8 = (($7) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $put = $9;
 $10 = $1;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $imagewidth = $12;
 $13 = $1;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $alpha = $15;
 $ret = 1;
 $16 = $tif;
 $17 = (_TIFFStripSize($16)|0);
 $stripsize = $17;
 $18 = $stripsize;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $alpha;
  $21 = ($20|0)!=(0);
  $22 = $21 ? 4 : 3;
  $23 = $stripsize;
  $24 = Math_imul($22, $23)|0;
  $25 = $stripsize;
  $26 = (($24|0) / ($25|0))&-1;
  $27 = $alpha;
  $28 = ($27|0)!=(0);
  $29 = $28 ? 4 : 3;
  $30 = ($26|0)==($29|0);
  if ($30) {
   $31 = $alpha;
   $32 = ($31|0)!=(0);
   $33 = $32 ? 4 : 3;
   $34 = $stripsize;
   $35 = Math_imul($33, $34)|0;
   $36 = $35;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $36 = 0;
 }
 $bufsize = $36;
 $37 = $bufsize;
 $38 = ($37|0)==(0);
 if ($38) {
  $39 = $tif;
  $40 = (($39) + 628|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $tif;
  $43 = (_TIFFFileName($42)|0);
  HEAP32[$vararg_buffer>>2] = 16936;
  _TIFFErrorExt($41,$43,16912,$vararg_buffer);
  $0 = 0;
  $301 = $0;
  STACKTOP = sp;return ($301|0);
 }
 $44 = $bufsize;
 $45 = (__TIFFmalloc($44)|0);
 $buf = $45;
 $p0 = $45;
 $46 = $buf;
 $47 = ($46|0)==(0|0);
 if ($47) {
  $48 = $tif;
  $49 = (($48) + 628|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $tif;
  $52 = (_TIFFFileName($51)|0);
  _TIFFErrorExt($50,$52,16952,$vararg_buffer1);
  $0 = 0;
  $301 = $0;
  STACKTOP = sp;return ($301|0);
 }
 $53 = $buf;
 $54 = $bufsize;
 __TIFFmemset($53,0,$54);
 $55 = $p0;
 $56 = $stripsize;
 $57 = (($55) + ($56)|0);
 $p1 = $57;
 $58 = $p1;
 $59 = $stripsize;
 $60 = (($58) + ($59)|0);
 $p2 = $60;
 $61 = $alpha;
 $62 = ($61|0)!=(0);
 if ($62) {
  $63 = $p2;
  $64 = $stripsize;
  $65 = (($63) + ($64)|0);
  $66 = $65;
 } else {
  $66 = 0;
 }
 $pa = $66;
 $67 = $1;
 $68 = (_setorientation($67)|0);
 $flip = $68;
 $69 = $flip;
 $70 = $69 & 1;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = $4;
  $73 = (($72) - 1)|0;
  $y = $73;
  $74 = $3;
  $75 = $3;
  $76 = (($74) + ($75))|0;
  $77 = (0 - ($76))|0;
  $toskew = $77;
 } else {
  $y = 0;
  $78 = $3;
  $79 = $3;
  $80 = (($78) - ($79))|0;
  $81 = (0 - ($80))|0;
  $toskew = $81;
 }
 $82 = $1;
 $83 = (($82) + 32|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84&65535;
 if ((($85|0) == 3) | (($85|0) == 1) | (($85|0) == 0)) {
  $colorchannels = 1;
  $86 = $p0;
  $p1 = $86;
  $p2 = $86;
 } else {
  $colorchannels = 3;
 }
 $87 = $tif;
 HEAP32[$vararg_buffer3>>2] = $rowsperstrip;
 (_TIFFGetFieldDefaulted($87,278,$vararg_buffer3)|0);
 $88 = $tif;
 $89 = (_TIFFScanlineSize($88)|0);
 $scanline = $89;
 $90 = $3;
 $91 = $imagewidth;
 $92 = ($90>>>0)<($91>>>0);
 if ($92) {
  $93 = $imagewidth;
  $94 = $3;
  $95 = (($93) - ($94))|0;
  $96 = $95;
 } else {
  $96 = 0;
 }
 $fromskew = $96;
 $row = 0;
 while(1) {
  $97 = $row;
  $98 = $4;
  $99 = ($97>>>0)<($98>>>0);
  if (!($99)) {
   break;
  }
  $100 = HEAP32[$rowsperstrip>>2]|0;
  $101 = $row;
  $102 = $1;
  $103 = (($102) + 84|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($101) + ($104))|0;
  $106 = HEAP32[$rowsperstrip>>2]|0;
  $107 = (($105>>>0) % ($106>>>0))&-1;
  $108 = (($100) - ($107))|0;
  $rowstoread = $108;
  $109 = $row;
  $110 = $rowstoread;
  $111 = (($109) + ($110))|0;
  $112 = $4;
  $113 = ($111>>>0)>($112>>>0);
  if ($113) {
   $114 = $4;
   $115 = $row;
   $116 = (($114) - ($115))|0;
   $118 = $116;
  } else {
   $117 = $rowstoread;
   $118 = $117;
  }
  $nrow = $118;
  $119 = $row;
  $120 = $1;
  $121 = (($120) + 84|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($119) + ($122))|0;
  $offset_row = $123;
  $124 = $tif;
  $125 = $tif;
  $126 = $offset_row;
  $127 = (_TIFFComputeStrip($125,$126,0)|0);
  $128 = $p0;
  $129 = $row;
  $130 = $1;
  $131 = (($130) + 84|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($129) + ($132))|0;
  $134 = HEAP32[$rowsperstrip>>2]|0;
  $135 = (($133>>>0) % ($134>>>0))&-1;
  $136 = $nrow;
  $137 = (($135) + ($136))|0;
  $138 = $scanline;
  $139 = Math_imul($137, $138)|0;
  $140 = (_TIFFReadEncodedStrip($124,$127,$128,$139)|0);
  $141 = ($140|0)==(-1);
  if ($141) {
   $142 = $1;
   $143 = (($142) + 4|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($144|0)!=(0);
   if ($145) {
    label = 28;
    break;
   }
  }
  $146 = $colorchannels;
  $147 = ($146|0)>(1);
  if ($147) {
   $148 = $tif;
   $149 = $tif;
   $150 = $offset_row;
   $151 = (_TIFFComputeStrip($149,$150,1)|0);
   $152 = $p1;
   $153 = $row;
   $154 = $1;
   $155 = (($154) + 84|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($153) + ($156))|0;
   $158 = HEAP32[$rowsperstrip>>2]|0;
   $159 = (($157>>>0) % ($158>>>0))&-1;
   $160 = $nrow;
   $161 = (($159) + ($160))|0;
   $162 = $scanline;
   $163 = Math_imul($161, $162)|0;
   $164 = (_TIFFReadEncodedStrip($148,$151,$152,$163)|0);
   $165 = ($164|0)==(-1);
   if ($165) {
    $166 = $1;
    $167 = (($166) + 4|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = ($168|0)!=(0);
    if ($169) {
     label = 32;
     break;
    }
   }
  }
  $170 = $colorchannels;
  $171 = ($170|0)>(1);
  if ($171) {
   $172 = $tif;
   $173 = $tif;
   $174 = $offset_row;
   $175 = (_TIFFComputeStrip($173,$174,2)|0);
   $176 = $p2;
   $177 = $row;
   $178 = $1;
   $179 = (($178) + 84|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (($177) + ($180))|0;
   $182 = HEAP32[$rowsperstrip>>2]|0;
   $183 = (($181>>>0) % ($182>>>0))&-1;
   $184 = $nrow;
   $185 = (($183) + ($184))|0;
   $186 = $scanline;
   $187 = Math_imul($185, $186)|0;
   $188 = (_TIFFReadEncodedStrip($172,$175,$176,$187)|0);
   $189 = ($188|0)==(-1);
   if ($189) {
    $190 = $1;
    $191 = (($190) + 4|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ($192|0)!=(0);
    if ($193) {
     label = 36;
     break;
    }
   }
  }
  $194 = $alpha;
  $195 = ($194|0)!=(0);
  if ($195) {
   $196 = $tif;
   $197 = $tif;
   $198 = $offset_row;
   $199 = $colorchannels;
   $200 = $199&65535;
   $201 = (_TIFFComputeStrip($197,$198,$200)|0);
   $202 = $pa;
   $203 = $row;
   $204 = $1;
   $205 = (($204) + 84|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = (($203) + ($206))|0;
   $208 = HEAP32[$rowsperstrip>>2]|0;
   $209 = (($207>>>0) % ($208>>>0))&-1;
   $210 = $nrow;
   $211 = (($209) + ($210))|0;
   $212 = $scanline;
   $213 = Math_imul($211, $212)|0;
   $214 = (_TIFFReadEncodedStrip($196,$201,$202,$213)|0);
   $215 = ($214|0)==(-1);
   if ($215) {
    $216 = $1;
    $217 = (($216) + 4|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ($218|0)!=(0);
    if ($219) {
     label = 40;
     break;
    }
   }
  }
  $220 = $row;
  $221 = $1;
  $222 = (($221) + 84|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = (($220) + ($223))|0;
  $225 = HEAP32[$rowsperstrip>>2]|0;
  $226 = (($224>>>0) % ($225>>>0))&-1;
  $227 = $scanline;
  $228 = Math_imul($226, $227)|0;
  $pos = $228;
  $229 = $put;
  $230 = $1;
  $231 = $2;
  $232 = $y;
  $233 = $3;
  $234 = Math_imul($232, $233)|0;
  $235 = (($231) + ($234<<2)|0);
  $236 = $y;
  $237 = $3;
  $238 = $nrow;
  $239 = $fromskew;
  $240 = $toskew;
  $241 = $p0;
  $242 = $pos;
  $243 = (($241) + ($242)|0);
  $244 = $p1;
  $245 = $pos;
  $246 = (($244) + ($245)|0);
  $247 = $p2;
  $248 = $pos;
  $249 = (($247) + ($248)|0);
  $250 = $alpha;
  $251 = ($250|0)!=(0);
  if ($251) {
   $252 = $pa;
   $253 = $pos;
   $254 = (($252) + ($253)|0);
   $255 = $254;
  } else {
   $255 = 0;
  }
  FUNCTION_TABLE_viiiiiiiiiiii[$229 & 63]($230,$235,0,$236,$237,$238,$239,$240,$243,$246,$249,$255);
  $256 = $flip;
  $257 = $256 & 1;
  $258 = ($257|0)!=(0);
  if ($258) {
   $259 = $nrow;
   $260 = (0 - ($259))|0;
   $264 = $260;
  } else {
   $261 = $nrow;
   $264 = $261;
  }
  $262 = $y;
  $263 = (($262) + ($264))|0;
  $y = $263;
  $265 = $nrow;
  $266 = $row;
  $267 = (($266) + ($265))|0;
  $row = $267;
 }
 if ((label|0) == 28) {
  $ret = 0;
 }
 else if ((label|0) == 32) {
  $ret = 0;
 }
 else if ((label|0) == 36) {
  $ret = 0;
 }
 else if ((label|0) == 40) {
  $ret = 0;
 }
 $268 = $flip;
 $269 = $268 & 2;
 $270 = ($269|0)!=(0);
 if ($270) {
  $line = 0;
  while(1) {
   $271 = $line;
   $272 = $4;
   $273 = ($271>>>0)<($272>>>0);
   if (!($273)) {
    break;
   }
   $274 = $2;
   $275 = $line;
   $276 = $3;
   $277 = Math_imul($275, $276)|0;
   $278 = (($274) + ($277<<2)|0);
   $left = $278;
   $279 = $left;
   $280 = $3;
   $281 = (($279) + ($280<<2)|0);
   $282 = (($281) + -4|0);
   $right = $282;
   while(1) {
    $283 = $left;
    $284 = $right;
    $285 = ($283>>>0)<($284>>>0);
    if (!($285)) {
     break;
    }
    $286 = $left;
    $287 = HEAP32[$286>>2]|0;
    $temp = $287;
    $288 = $right;
    $289 = HEAP32[$288>>2]|0;
    $290 = $left;
    HEAP32[$290>>2] = $289;
    $291 = $temp;
    $292 = $right;
    HEAP32[$292>>2] = $291;
    $293 = $left;
    $294 = (($293) + 4|0);
    $left = $294;
    $295 = $right;
    $296 = (($295) + -4|0);
    $right = $296;
   }
   $297 = $line;
   $298 = (($297) + 1)|0;
   $line = $298;
  }
 }
 $299 = $buf;
 __TIFFfree($299);
 $300 = $ret;
 $0 = $300;
 $301 = $0;
 STACKTOP = sp;return ($301|0);
}
function _putRGBAAseparate8bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$r,$g,$b,$a) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_x = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $r;
 $9 = $g;
 $10 = $b;
 $11 = $a;
 while(1) {
  $12 = $5;
  $13 = (($12) + -1)|0;
  $5 = $13;
  $14 = ($12>>>0)>(0);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $_x = $15;
  while(1) {
   $16 = $_x;
   $17 = ($16>>>0)>=(8);
   if (!($17)) {
    break;
   }
   $18 = $8;
   $19 = (($18) + 1|0);
   $8 = $19;
   $20 = HEAP8[$18>>0]|0;
   $21 = $20&255;
   $22 = $9;
   $23 = (($22) + 1|0);
   $9 = $23;
   $24 = HEAP8[$22>>0]|0;
   $25 = $24&255;
   $26 = $25 << 8;
   $27 = $21 | $26;
   $28 = $10;
   $29 = (($28) + 1|0);
   $10 = $29;
   $30 = HEAP8[$28>>0]|0;
   $31 = $30&255;
   $32 = $31 << 16;
   $33 = $27 | $32;
   $34 = $11;
   $35 = (($34) + 1|0);
   $11 = $35;
   $36 = HEAP8[$34>>0]|0;
   $37 = $36&255;
   $38 = $37 << 24;
   $39 = $33 | $38;
   $40 = $1;
   $41 = (($40) + 4|0);
   $1 = $41;
   HEAP32[$40>>2] = $39;
   $42 = $8;
   $43 = (($42) + 1|0);
   $8 = $43;
   $44 = HEAP8[$42>>0]|0;
   $45 = $44&255;
   $46 = $9;
   $47 = (($46) + 1|0);
   $9 = $47;
   $48 = HEAP8[$46>>0]|0;
   $49 = $48&255;
   $50 = $49 << 8;
   $51 = $45 | $50;
   $52 = $10;
   $53 = (($52) + 1|0);
   $10 = $53;
   $54 = HEAP8[$52>>0]|0;
   $55 = $54&255;
   $56 = $55 << 16;
   $57 = $51 | $56;
   $58 = $11;
   $59 = (($58) + 1|0);
   $11 = $59;
   $60 = HEAP8[$58>>0]|0;
   $61 = $60&255;
   $62 = $61 << 24;
   $63 = $57 | $62;
   $64 = $1;
   $65 = (($64) + 4|0);
   $1 = $65;
   HEAP32[$64>>2] = $63;
   $66 = $8;
   $67 = (($66) + 1|0);
   $8 = $67;
   $68 = HEAP8[$66>>0]|0;
   $69 = $68&255;
   $70 = $9;
   $71 = (($70) + 1|0);
   $9 = $71;
   $72 = HEAP8[$70>>0]|0;
   $73 = $72&255;
   $74 = $73 << 8;
   $75 = $69 | $74;
   $76 = $10;
   $77 = (($76) + 1|0);
   $10 = $77;
   $78 = HEAP8[$76>>0]|0;
   $79 = $78&255;
   $80 = $79 << 16;
   $81 = $75 | $80;
   $82 = $11;
   $83 = (($82) + 1|0);
   $11 = $83;
   $84 = HEAP8[$82>>0]|0;
   $85 = $84&255;
   $86 = $85 << 24;
   $87 = $81 | $86;
   $88 = $1;
   $89 = (($88) + 4|0);
   $1 = $89;
   HEAP32[$88>>2] = $87;
   $90 = $8;
   $91 = (($90) + 1|0);
   $8 = $91;
   $92 = HEAP8[$90>>0]|0;
   $93 = $92&255;
   $94 = $9;
   $95 = (($94) + 1|0);
   $9 = $95;
   $96 = HEAP8[$94>>0]|0;
   $97 = $96&255;
   $98 = $97 << 8;
   $99 = $93 | $98;
   $100 = $10;
   $101 = (($100) + 1|0);
   $10 = $101;
   $102 = HEAP8[$100>>0]|0;
   $103 = $102&255;
   $104 = $103 << 16;
   $105 = $99 | $104;
   $106 = $11;
   $107 = (($106) + 1|0);
   $11 = $107;
   $108 = HEAP8[$106>>0]|0;
   $109 = $108&255;
   $110 = $109 << 24;
   $111 = $105 | $110;
   $112 = $1;
   $113 = (($112) + 4|0);
   $1 = $113;
   HEAP32[$112>>2] = $111;
   $114 = $8;
   $115 = (($114) + 1|0);
   $8 = $115;
   $116 = HEAP8[$114>>0]|0;
   $117 = $116&255;
   $118 = $9;
   $119 = (($118) + 1|0);
   $9 = $119;
   $120 = HEAP8[$118>>0]|0;
   $121 = $120&255;
   $122 = $121 << 8;
   $123 = $117 | $122;
   $124 = $10;
   $125 = (($124) + 1|0);
   $10 = $125;
   $126 = HEAP8[$124>>0]|0;
   $127 = $126&255;
   $128 = $127 << 16;
   $129 = $123 | $128;
   $130 = $11;
   $131 = (($130) + 1|0);
   $11 = $131;
   $132 = HEAP8[$130>>0]|0;
   $133 = $132&255;
   $134 = $133 << 24;
   $135 = $129 | $134;
   $136 = $1;
   $137 = (($136) + 4|0);
   $1 = $137;
   HEAP32[$136>>2] = $135;
   $138 = $8;
   $139 = (($138) + 1|0);
   $8 = $139;
   $140 = HEAP8[$138>>0]|0;
   $141 = $140&255;
   $142 = $9;
   $143 = (($142) + 1|0);
   $9 = $143;
   $144 = HEAP8[$142>>0]|0;
   $145 = $144&255;
   $146 = $145 << 8;
   $147 = $141 | $146;
   $148 = $10;
   $149 = (($148) + 1|0);
   $10 = $149;
   $150 = HEAP8[$148>>0]|0;
   $151 = $150&255;
   $152 = $151 << 16;
   $153 = $147 | $152;
   $154 = $11;
   $155 = (($154) + 1|0);
   $11 = $155;
   $156 = HEAP8[$154>>0]|0;
   $157 = $156&255;
   $158 = $157 << 24;
   $159 = $153 | $158;
   $160 = $1;
   $161 = (($160) + 4|0);
   $1 = $161;
   HEAP32[$160>>2] = $159;
   $162 = $8;
   $163 = (($162) + 1|0);
   $8 = $163;
   $164 = HEAP8[$162>>0]|0;
   $165 = $164&255;
   $166 = $9;
   $167 = (($166) + 1|0);
   $9 = $167;
   $168 = HEAP8[$166>>0]|0;
   $169 = $168&255;
   $170 = $169 << 8;
   $171 = $165 | $170;
   $172 = $10;
   $173 = (($172) + 1|0);
   $10 = $173;
   $174 = HEAP8[$172>>0]|0;
   $175 = $174&255;
   $176 = $175 << 16;
   $177 = $171 | $176;
   $178 = $11;
   $179 = (($178) + 1|0);
   $11 = $179;
   $180 = HEAP8[$178>>0]|0;
   $181 = $180&255;
   $182 = $181 << 24;
   $183 = $177 | $182;
   $184 = $1;
   $185 = (($184) + 4|0);
   $1 = $185;
   HEAP32[$184>>2] = $183;
   $186 = $8;
   $187 = (($186) + 1|0);
   $8 = $187;
   $188 = HEAP8[$186>>0]|0;
   $189 = $188&255;
   $190 = $9;
   $191 = (($190) + 1|0);
   $9 = $191;
   $192 = HEAP8[$190>>0]|0;
   $193 = $192&255;
   $194 = $193 << 8;
   $195 = $189 | $194;
   $196 = $10;
   $197 = (($196) + 1|0);
   $10 = $197;
   $198 = HEAP8[$196>>0]|0;
   $199 = $198&255;
   $200 = $199 << 16;
   $201 = $195 | $200;
   $202 = $11;
   $203 = (($202) + 1|0);
   $11 = $203;
   $204 = HEAP8[$202>>0]|0;
   $205 = $204&255;
   $206 = $205 << 24;
   $207 = $201 | $206;
   $208 = $1;
   $209 = (($208) + 4|0);
   $1 = $209;
   HEAP32[$208>>2] = $207;
   $210 = $_x;
   $211 = (($210) - 8)|0;
   $_x = $211;
  }
  $212 = $_x;
  $213 = ($212>>>0)>(0);
  if ($213) {
   $214 = $_x;
   switch ($214|0) {
   case 7:  {
    $215 = $8;
    $216 = (($215) + 1|0);
    $8 = $216;
    $217 = HEAP8[$215>>0]|0;
    $218 = $217&255;
    $219 = $9;
    $220 = (($219) + 1|0);
    $9 = $220;
    $221 = HEAP8[$219>>0]|0;
    $222 = $221&255;
    $223 = $222 << 8;
    $224 = $218 | $223;
    $225 = $10;
    $226 = (($225) + 1|0);
    $10 = $226;
    $227 = HEAP8[$225>>0]|0;
    $228 = $227&255;
    $229 = $228 << 16;
    $230 = $224 | $229;
    $231 = $11;
    $232 = (($231) + 1|0);
    $11 = $232;
    $233 = HEAP8[$231>>0]|0;
    $234 = $233&255;
    $235 = $234 << 24;
    $236 = $230 | $235;
    $237 = $1;
    $238 = (($237) + 4|0);
    $1 = $238;
    HEAP32[$237>>2] = $236;
    label = 10;
    break;
   }
   case 5:  {
    label = 11;
    break;
   }
   case 4:  {
    label = 12;
    break;
   }
   case 3:  {
    label = 13;
    break;
   }
   case 2:  {
    label = 14;
    break;
   }
   case 1:  {
    label = 15;
    break;
   }
   case 6:  {
    label = 10;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 10) {
    label = 0;
    $239 = $8;
    $240 = (($239) + 1|0);
    $8 = $240;
    $241 = HEAP8[$239>>0]|0;
    $242 = $241&255;
    $243 = $9;
    $244 = (($243) + 1|0);
    $9 = $244;
    $245 = HEAP8[$243>>0]|0;
    $246 = $245&255;
    $247 = $246 << 8;
    $248 = $242 | $247;
    $249 = $10;
    $250 = (($249) + 1|0);
    $10 = $250;
    $251 = HEAP8[$249>>0]|0;
    $252 = $251&255;
    $253 = $252 << 16;
    $254 = $248 | $253;
    $255 = $11;
    $256 = (($255) + 1|0);
    $11 = $256;
    $257 = HEAP8[$255>>0]|0;
    $258 = $257&255;
    $259 = $258 << 24;
    $260 = $254 | $259;
    $261 = $1;
    $262 = (($261) + 4|0);
    $1 = $262;
    HEAP32[$261>>2] = $260;
    label = 11;
   }
   if ((label|0) == 11) {
    label = 0;
    $263 = $8;
    $264 = (($263) + 1|0);
    $8 = $264;
    $265 = HEAP8[$263>>0]|0;
    $266 = $265&255;
    $267 = $9;
    $268 = (($267) + 1|0);
    $9 = $268;
    $269 = HEAP8[$267>>0]|0;
    $270 = $269&255;
    $271 = $270 << 8;
    $272 = $266 | $271;
    $273 = $10;
    $274 = (($273) + 1|0);
    $10 = $274;
    $275 = HEAP8[$273>>0]|0;
    $276 = $275&255;
    $277 = $276 << 16;
    $278 = $272 | $277;
    $279 = $11;
    $280 = (($279) + 1|0);
    $11 = $280;
    $281 = HEAP8[$279>>0]|0;
    $282 = $281&255;
    $283 = $282 << 24;
    $284 = $278 | $283;
    $285 = $1;
    $286 = (($285) + 4|0);
    $1 = $286;
    HEAP32[$285>>2] = $284;
    label = 12;
   }
   if ((label|0) == 12) {
    label = 0;
    $287 = $8;
    $288 = (($287) + 1|0);
    $8 = $288;
    $289 = HEAP8[$287>>0]|0;
    $290 = $289&255;
    $291 = $9;
    $292 = (($291) + 1|0);
    $9 = $292;
    $293 = HEAP8[$291>>0]|0;
    $294 = $293&255;
    $295 = $294 << 8;
    $296 = $290 | $295;
    $297 = $10;
    $298 = (($297) + 1|0);
    $10 = $298;
    $299 = HEAP8[$297>>0]|0;
    $300 = $299&255;
    $301 = $300 << 16;
    $302 = $296 | $301;
    $303 = $11;
    $304 = (($303) + 1|0);
    $11 = $304;
    $305 = HEAP8[$303>>0]|0;
    $306 = $305&255;
    $307 = $306 << 24;
    $308 = $302 | $307;
    $309 = $1;
    $310 = (($309) + 4|0);
    $1 = $310;
    HEAP32[$309>>2] = $308;
    label = 13;
   }
   if ((label|0) == 13) {
    label = 0;
    $311 = $8;
    $312 = (($311) + 1|0);
    $8 = $312;
    $313 = HEAP8[$311>>0]|0;
    $314 = $313&255;
    $315 = $9;
    $316 = (($315) + 1|0);
    $9 = $316;
    $317 = HEAP8[$315>>0]|0;
    $318 = $317&255;
    $319 = $318 << 8;
    $320 = $314 | $319;
    $321 = $10;
    $322 = (($321) + 1|0);
    $10 = $322;
    $323 = HEAP8[$321>>0]|0;
    $324 = $323&255;
    $325 = $324 << 16;
    $326 = $320 | $325;
    $327 = $11;
    $328 = (($327) + 1|0);
    $11 = $328;
    $329 = HEAP8[$327>>0]|0;
    $330 = $329&255;
    $331 = $330 << 24;
    $332 = $326 | $331;
    $333 = $1;
    $334 = (($333) + 4|0);
    $1 = $334;
    HEAP32[$333>>2] = $332;
    label = 14;
   }
   if ((label|0) == 14) {
    label = 0;
    $335 = $8;
    $336 = (($335) + 1|0);
    $8 = $336;
    $337 = HEAP8[$335>>0]|0;
    $338 = $337&255;
    $339 = $9;
    $340 = (($339) + 1|0);
    $9 = $340;
    $341 = HEAP8[$339>>0]|0;
    $342 = $341&255;
    $343 = $342 << 8;
    $344 = $338 | $343;
    $345 = $10;
    $346 = (($345) + 1|0);
    $10 = $346;
    $347 = HEAP8[$345>>0]|0;
    $348 = $347&255;
    $349 = $348 << 16;
    $350 = $344 | $349;
    $351 = $11;
    $352 = (($351) + 1|0);
    $11 = $352;
    $353 = HEAP8[$351>>0]|0;
    $354 = $353&255;
    $355 = $354 << 24;
    $356 = $350 | $355;
    $357 = $1;
    $358 = (($357) + 4|0);
    $1 = $358;
    HEAP32[$357>>2] = $356;
    label = 15;
   }
   if ((label|0) == 15) {
    label = 0;
    $359 = $8;
    $360 = (($359) + 1|0);
    $8 = $360;
    $361 = HEAP8[$359>>0]|0;
    $362 = $361&255;
    $363 = $9;
    $364 = (($363) + 1|0);
    $9 = $364;
    $365 = HEAP8[$363>>0]|0;
    $366 = $365&255;
    $367 = $366 << 8;
    $368 = $362 | $367;
    $369 = $10;
    $370 = (($369) + 1|0);
    $10 = $370;
    $371 = HEAP8[$369>>0]|0;
    $372 = $371&255;
    $373 = $372 << 16;
    $374 = $368 | $373;
    $375 = $11;
    $376 = (($375) + 1|0);
    $11 = $376;
    $377 = HEAP8[$375>>0]|0;
    $378 = $377&255;
    $379 = $378 << 24;
    $380 = $374 | $379;
    $381 = $1;
    $382 = (($381) + 4|0);
    $1 = $382;
    HEAP32[$381>>2] = $380;
   }
  }
  $383 = $6;
  $384 = $8;
  $385 = (($384) + ($383)|0);
  $8 = $385;
  $386 = $6;
  $387 = $9;
  $388 = (($387) + ($386)|0);
  $9 = $388;
  $389 = $6;
  $390 = $10;
  $391 = (($390) + ($389)|0);
  $10 = $391;
  $392 = $6;
  $393 = $11;
  $394 = (($393) + ($392)|0);
  $11 = $394;
  $395 = $7;
  $396 = $1;
  $397 = (($396) + ($395<<2)|0);
  $1 = $397;
 }
 STACKTOP = sp;return;
}
function _putRGBUAseparate8bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$r,$g,$b,$a) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $av = 0, $bv = 0, $gv = 0, $m = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $r;
 $9 = $g;
 $10 = $b;
 $11 = $a;
 while(1) {
  $12 = $5;
  $13 = (($12) + -1)|0;
  $5 = $13;
  $14 = ($12>>>0)>(0);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $2 = $15;
  while(1) {
   $16 = $2;
   $17 = (($16) + -1)|0;
   $2 = $17;
   $18 = ($16>>>0)>(0);
   if (!($18)) {
    break;
   }
   $19 = $11;
   $20 = (($19) + 1|0);
   $11 = $20;
   $21 = HEAP8[$19>>0]|0;
   $22 = $21&255;
   $av = $22;
   $23 = $0;
   $24 = (($23) + 76|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $av;
   $27 = $26 << 8;
   $28 = (($25) + ($27)|0);
   $m = $28;
   $29 = $8;
   $30 = (($29) + 1|0);
   $8 = $30;
   $31 = HEAP8[$29>>0]|0;
   $32 = $31&255;
   $33 = $m;
   $34 = (($33) + ($32)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $rv = $36;
   $37 = $9;
   $38 = (($37) + 1|0);
   $9 = $38;
   $39 = HEAP8[$37>>0]|0;
   $40 = $39&255;
   $41 = $m;
   $42 = (($41) + ($40)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $gv = $44;
   $45 = $10;
   $46 = (($45) + 1|0);
   $10 = $46;
   $47 = HEAP8[$45>>0]|0;
   $48 = $47&255;
   $49 = $m;
   $50 = (($49) + ($48)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $bv = $52;
   $53 = $rv;
   $54 = $gv;
   $55 = $54 << 8;
   $56 = $53 | $55;
   $57 = $bv;
   $58 = $57 << 16;
   $59 = $56 | $58;
   $60 = $av;
   $61 = $60 << 24;
   $62 = $59 | $61;
   $63 = $1;
   $64 = (($63) + 4|0);
   $1 = $64;
   HEAP32[$63>>2] = $62;
  }
  $65 = $6;
  $66 = $8;
  $67 = (($66) + ($65)|0);
  $8 = $67;
  $68 = $6;
  $69 = $9;
  $70 = (($69) + ($68)|0);
  $9 = $70;
  $71 = $6;
  $72 = $10;
  $73 = (($72) + ($71)|0);
  $10 = $73;
  $74 = $6;
  $75 = $11;
  $76 = (($75) + ($74)|0);
  $11 = $76;
  $77 = $7;
  $78 = $1;
  $79 = (($78) + ($77<<2)|0);
  $1 = $79;
 }
 STACKTOP = sp;return;
}
function _putRGBseparate8bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$r,$g,$b,$a) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $_x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $r;
 $9 = $g;
 $10 = $b;
 $11 = $a;
 while(1) {
  $12 = $5;
  $13 = (($12) + -1)|0;
  $5 = $13;
  $14 = ($12>>>0)>(0);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $_x = $15;
  while(1) {
   $16 = $_x;
   $17 = ($16>>>0)>=(8);
   if (!($17)) {
    break;
   }
   $18 = $8;
   $19 = (($18) + 1|0);
   $8 = $19;
   $20 = HEAP8[$18>>0]|0;
   $21 = $20&255;
   $22 = $9;
   $23 = (($22) + 1|0);
   $9 = $23;
   $24 = HEAP8[$22>>0]|0;
   $25 = $24&255;
   $26 = $25 << 8;
   $27 = $21 | $26;
   $28 = $10;
   $29 = (($28) + 1|0);
   $10 = $29;
   $30 = HEAP8[$28>>0]|0;
   $31 = $30&255;
   $32 = $31 << 16;
   $33 = $27 | $32;
   $34 = $33 | -16777216;
   $35 = $1;
   $36 = (($35) + 4|0);
   $1 = $36;
   HEAP32[$35>>2] = $34;
   $37 = $8;
   $38 = (($37) + 1|0);
   $8 = $38;
   $39 = HEAP8[$37>>0]|0;
   $40 = $39&255;
   $41 = $9;
   $42 = (($41) + 1|0);
   $9 = $42;
   $43 = HEAP8[$41>>0]|0;
   $44 = $43&255;
   $45 = $44 << 8;
   $46 = $40 | $45;
   $47 = $10;
   $48 = (($47) + 1|0);
   $10 = $48;
   $49 = HEAP8[$47>>0]|0;
   $50 = $49&255;
   $51 = $50 << 16;
   $52 = $46 | $51;
   $53 = $52 | -16777216;
   $54 = $1;
   $55 = (($54) + 4|0);
   $1 = $55;
   HEAP32[$54>>2] = $53;
   $56 = $8;
   $57 = (($56) + 1|0);
   $8 = $57;
   $58 = HEAP8[$56>>0]|0;
   $59 = $58&255;
   $60 = $9;
   $61 = (($60) + 1|0);
   $9 = $61;
   $62 = HEAP8[$60>>0]|0;
   $63 = $62&255;
   $64 = $63 << 8;
   $65 = $59 | $64;
   $66 = $10;
   $67 = (($66) + 1|0);
   $10 = $67;
   $68 = HEAP8[$66>>0]|0;
   $69 = $68&255;
   $70 = $69 << 16;
   $71 = $65 | $70;
   $72 = $71 | -16777216;
   $73 = $1;
   $74 = (($73) + 4|0);
   $1 = $74;
   HEAP32[$73>>2] = $72;
   $75 = $8;
   $76 = (($75) + 1|0);
   $8 = $76;
   $77 = HEAP8[$75>>0]|0;
   $78 = $77&255;
   $79 = $9;
   $80 = (($79) + 1|0);
   $9 = $80;
   $81 = HEAP8[$79>>0]|0;
   $82 = $81&255;
   $83 = $82 << 8;
   $84 = $78 | $83;
   $85 = $10;
   $86 = (($85) + 1|0);
   $10 = $86;
   $87 = HEAP8[$85>>0]|0;
   $88 = $87&255;
   $89 = $88 << 16;
   $90 = $84 | $89;
   $91 = $90 | -16777216;
   $92 = $1;
   $93 = (($92) + 4|0);
   $1 = $93;
   HEAP32[$92>>2] = $91;
   $94 = $8;
   $95 = (($94) + 1|0);
   $8 = $95;
   $96 = HEAP8[$94>>0]|0;
   $97 = $96&255;
   $98 = $9;
   $99 = (($98) + 1|0);
   $9 = $99;
   $100 = HEAP8[$98>>0]|0;
   $101 = $100&255;
   $102 = $101 << 8;
   $103 = $97 | $102;
   $104 = $10;
   $105 = (($104) + 1|0);
   $10 = $105;
   $106 = HEAP8[$104>>0]|0;
   $107 = $106&255;
   $108 = $107 << 16;
   $109 = $103 | $108;
   $110 = $109 | -16777216;
   $111 = $1;
   $112 = (($111) + 4|0);
   $1 = $112;
   HEAP32[$111>>2] = $110;
   $113 = $8;
   $114 = (($113) + 1|0);
   $8 = $114;
   $115 = HEAP8[$113>>0]|0;
   $116 = $115&255;
   $117 = $9;
   $118 = (($117) + 1|0);
   $9 = $118;
   $119 = HEAP8[$117>>0]|0;
   $120 = $119&255;
   $121 = $120 << 8;
   $122 = $116 | $121;
   $123 = $10;
   $124 = (($123) + 1|0);
   $10 = $124;
   $125 = HEAP8[$123>>0]|0;
   $126 = $125&255;
   $127 = $126 << 16;
   $128 = $122 | $127;
   $129 = $128 | -16777216;
   $130 = $1;
   $131 = (($130) + 4|0);
   $1 = $131;
   HEAP32[$130>>2] = $129;
   $132 = $8;
   $133 = (($132) + 1|0);
   $8 = $133;
   $134 = HEAP8[$132>>0]|0;
   $135 = $134&255;
   $136 = $9;
   $137 = (($136) + 1|0);
   $9 = $137;
   $138 = HEAP8[$136>>0]|0;
   $139 = $138&255;
   $140 = $139 << 8;
   $141 = $135 | $140;
   $142 = $10;
   $143 = (($142) + 1|0);
   $10 = $143;
   $144 = HEAP8[$142>>0]|0;
   $145 = $144&255;
   $146 = $145 << 16;
   $147 = $141 | $146;
   $148 = $147 | -16777216;
   $149 = $1;
   $150 = (($149) + 4|0);
   $1 = $150;
   HEAP32[$149>>2] = $148;
   $151 = $8;
   $152 = (($151) + 1|0);
   $8 = $152;
   $153 = HEAP8[$151>>0]|0;
   $154 = $153&255;
   $155 = $9;
   $156 = (($155) + 1|0);
   $9 = $156;
   $157 = HEAP8[$155>>0]|0;
   $158 = $157&255;
   $159 = $158 << 8;
   $160 = $154 | $159;
   $161 = $10;
   $162 = (($161) + 1|0);
   $10 = $162;
   $163 = HEAP8[$161>>0]|0;
   $164 = $163&255;
   $165 = $164 << 16;
   $166 = $160 | $165;
   $167 = $166 | -16777216;
   $168 = $1;
   $169 = (($168) + 4|0);
   $1 = $169;
   HEAP32[$168>>2] = $167;
   $170 = $_x;
   $171 = (($170) - 8)|0;
   $_x = $171;
  }
  $172 = $_x;
  $173 = ($172>>>0)>(0);
  if ($173) {
   $174 = $_x;
   switch ($174|0) {
   case 4:  {
    label = 12;
    break;
   }
   case 3:  {
    label = 13;
    break;
   }
   case 2:  {
    label = 14;
    break;
   }
   case 1:  {
    label = 15;
    break;
   }
   case 7:  {
    $175 = $8;
    $176 = (($175) + 1|0);
    $8 = $176;
    $177 = HEAP8[$175>>0]|0;
    $178 = $177&255;
    $179 = $9;
    $180 = (($179) + 1|0);
    $9 = $180;
    $181 = HEAP8[$179>>0]|0;
    $182 = $181&255;
    $183 = $182 << 8;
    $184 = $178 | $183;
    $185 = $10;
    $186 = (($185) + 1|0);
    $10 = $186;
    $187 = HEAP8[$185>>0]|0;
    $188 = $187&255;
    $189 = $188 << 16;
    $190 = $184 | $189;
    $191 = $190 | -16777216;
    $192 = $1;
    $193 = (($192) + 4|0);
    $1 = $193;
    HEAP32[$192>>2] = $191;
    label = 10;
    break;
   }
   case 5:  {
    label = 11;
    break;
   }
   case 6:  {
    label = 10;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 10) {
    label = 0;
    $194 = $8;
    $195 = (($194) + 1|0);
    $8 = $195;
    $196 = HEAP8[$194>>0]|0;
    $197 = $196&255;
    $198 = $9;
    $199 = (($198) + 1|0);
    $9 = $199;
    $200 = HEAP8[$198>>0]|0;
    $201 = $200&255;
    $202 = $201 << 8;
    $203 = $197 | $202;
    $204 = $10;
    $205 = (($204) + 1|0);
    $10 = $205;
    $206 = HEAP8[$204>>0]|0;
    $207 = $206&255;
    $208 = $207 << 16;
    $209 = $203 | $208;
    $210 = $209 | -16777216;
    $211 = $1;
    $212 = (($211) + 4|0);
    $1 = $212;
    HEAP32[$211>>2] = $210;
    label = 11;
   }
   if ((label|0) == 11) {
    label = 0;
    $213 = $8;
    $214 = (($213) + 1|0);
    $8 = $214;
    $215 = HEAP8[$213>>0]|0;
    $216 = $215&255;
    $217 = $9;
    $218 = (($217) + 1|0);
    $9 = $218;
    $219 = HEAP8[$217>>0]|0;
    $220 = $219&255;
    $221 = $220 << 8;
    $222 = $216 | $221;
    $223 = $10;
    $224 = (($223) + 1|0);
    $10 = $224;
    $225 = HEAP8[$223>>0]|0;
    $226 = $225&255;
    $227 = $226 << 16;
    $228 = $222 | $227;
    $229 = $228 | -16777216;
    $230 = $1;
    $231 = (($230) + 4|0);
    $1 = $231;
    HEAP32[$230>>2] = $229;
    label = 12;
   }
   if ((label|0) == 12) {
    label = 0;
    $232 = $8;
    $233 = (($232) + 1|0);
    $8 = $233;
    $234 = HEAP8[$232>>0]|0;
    $235 = $234&255;
    $236 = $9;
    $237 = (($236) + 1|0);
    $9 = $237;
    $238 = HEAP8[$236>>0]|0;
    $239 = $238&255;
    $240 = $239 << 8;
    $241 = $235 | $240;
    $242 = $10;
    $243 = (($242) + 1|0);
    $10 = $243;
    $244 = HEAP8[$242>>0]|0;
    $245 = $244&255;
    $246 = $245 << 16;
    $247 = $241 | $246;
    $248 = $247 | -16777216;
    $249 = $1;
    $250 = (($249) + 4|0);
    $1 = $250;
    HEAP32[$249>>2] = $248;
    label = 13;
   }
   if ((label|0) == 13) {
    label = 0;
    $251 = $8;
    $252 = (($251) + 1|0);
    $8 = $252;
    $253 = HEAP8[$251>>0]|0;
    $254 = $253&255;
    $255 = $9;
    $256 = (($255) + 1|0);
    $9 = $256;
    $257 = HEAP8[$255>>0]|0;
    $258 = $257&255;
    $259 = $258 << 8;
    $260 = $254 | $259;
    $261 = $10;
    $262 = (($261) + 1|0);
    $10 = $262;
    $263 = HEAP8[$261>>0]|0;
    $264 = $263&255;
    $265 = $264 << 16;
    $266 = $260 | $265;
    $267 = $266 | -16777216;
    $268 = $1;
    $269 = (($268) + 4|0);
    $1 = $269;
    HEAP32[$268>>2] = $267;
    label = 14;
   }
   if ((label|0) == 14) {
    label = 0;
    $270 = $8;
    $271 = (($270) + 1|0);
    $8 = $271;
    $272 = HEAP8[$270>>0]|0;
    $273 = $272&255;
    $274 = $9;
    $275 = (($274) + 1|0);
    $9 = $275;
    $276 = HEAP8[$274>>0]|0;
    $277 = $276&255;
    $278 = $277 << 8;
    $279 = $273 | $278;
    $280 = $10;
    $281 = (($280) + 1|0);
    $10 = $281;
    $282 = HEAP8[$280>>0]|0;
    $283 = $282&255;
    $284 = $283 << 16;
    $285 = $279 | $284;
    $286 = $285 | -16777216;
    $287 = $1;
    $288 = (($287) + 4|0);
    $1 = $288;
    HEAP32[$287>>2] = $286;
    label = 15;
   }
   if ((label|0) == 15) {
    label = 0;
    $289 = $8;
    $290 = (($289) + 1|0);
    $8 = $290;
    $291 = HEAP8[$289>>0]|0;
    $292 = $291&255;
    $293 = $9;
    $294 = (($293) + 1|0);
    $9 = $294;
    $295 = HEAP8[$293>>0]|0;
    $296 = $295&255;
    $297 = $296 << 8;
    $298 = $292 | $297;
    $299 = $10;
    $300 = (($299) + 1|0);
    $10 = $300;
    $301 = HEAP8[$299>>0]|0;
    $302 = $301&255;
    $303 = $302 << 16;
    $304 = $298 | $303;
    $305 = $304 | -16777216;
    $306 = $1;
    $307 = (($306) + 4|0);
    $1 = $307;
    HEAP32[$306>>2] = $305;
   }
  }
  $308 = $6;
  $309 = $8;
  $310 = (($309) + ($308)|0);
  $8 = $310;
  $311 = $6;
  $312 = $9;
  $313 = (($312) + ($311)|0);
  $9 = $313;
  $314 = $6;
  $315 = $10;
  $316 = (($315) + ($314)|0);
  $10 = $316;
  $317 = $7;
  $318 = $1;
  $319 = (($318) + ($317<<2)|0);
  $1 = $319;
 }
 STACKTOP = sp;return;
}
function _putRGBAAseparate16bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$r,$g,$b,$a) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $wa = 0, $wb = 0, $wg = 0, $wr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $r;
 $9 = $g;
 $10 = $b;
 $11 = $a;
 $12 = $8;
 $wr = $12;
 $13 = $9;
 $wg = $13;
 $14 = $10;
 $wb = $14;
 $15 = $11;
 $wa = $15;
 while(1) {
  $16 = $5;
  $17 = (($16) + -1)|0;
  $5 = $17;
  $18 = ($16>>>0)>(0);
  if (!($18)) {
   break;
  }
  $2 = 0;
  while(1) {
   $19 = $2;
   $20 = $4;
   $21 = ($19>>>0)<($20>>>0);
   if (!($21)) {
    break;
   }
   $22 = $wr;
   $23 = (($22) + 2|0);
   $wr = $23;
   $24 = HEAP16[$22>>1]|0;
   $25 = $24&65535;
   $26 = $0;
   $27 = (($26) + 80|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($25)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $wg;
   $33 = (($32) + 2|0);
   $wg = $33;
   $34 = HEAP16[$32>>1]|0;
   $35 = $34&65535;
   $36 = $0;
   $37 = (($36) + 80|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + ($35)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $41 << 8;
   $43 = $31 | $42;
   $44 = $wb;
   $45 = (($44) + 2|0);
   $wb = $45;
   $46 = HEAP16[$44>>1]|0;
   $47 = $46&65535;
   $48 = $0;
   $49 = (($48) + 80|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($47)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 << 16;
   $55 = $43 | $54;
   $56 = $wa;
   $57 = (($56) + 2|0);
   $wa = $57;
   $58 = HEAP16[$56>>1]|0;
   $59 = $58&65535;
   $60 = $0;
   $61 = (($60) + 80|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + ($59)|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $64&255;
   $66 = $65 << 24;
   $67 = $55 | $66;
   $68 = $1;
   $69 = (($68) + 4|0);
   $1 = $69;
   HEAP32[$68>>2] = $67;
   $70 = $2;
   $71 = (($70) + 1)|0;
   $2 = $71;
  }
  $72 = $6;
  $73 = $wr;
  $74 = (($73) + ($72<<1)|0);
  $wr = $74;
  $75 = $6;
  $76 = $wg;
  $77 = (($76) + ($75<<1)|0);
  $wg = $77;
  $78 = $6;
  $79 = $wb;
  $80 = (($79) + ($78<<1)|0);
  $wb = $80;
  $81 = $6;
  $82 = $wa;
  $83 = (($82) + ($81<<1)|0);
  $wa = $83;
  $84 = $7;
  $85 = $1;
  $86 = (($85) + ($84<<2)|0);
  $1 = $86;
 }
 STACKTOP = sp;return;
}
function _putRGBUAseparate16bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$r,$g,$b,$a) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a4 = 0, $b3 = 0, $g2 = 0, $m = 0, $r1 = 0, $wa = 0, $wb = 0, $wg = 0, $wr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $r;
 $9 = $g;
 $10 = $b;
 $11 = $a;
 $12 = $8;
 $wr = $12;
 $13 = $9;
 $wg = $13;
 $14 = $10;
 $wb = $14;
 $15 = $11;
 $wa = $15;
 while(1) {
  $16 = $5;
  $17 = (($16) + -1)|0;
  $5 = $17;
  $18 = ($16>>>0)>(0);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $2 = $19;
  while(1) {
   $20 = $2;
   $21 = (($20) + -1)|0;
   $2 = $21;
   $22 = ($20>>>0)>(0);
   if (!($22)) {
    break;
   }
   $23 = $wa;
   $24 = (($23) + 2|0);
   $wa = $24;
   $25 = HEAP16[$23>>1]|0;
   $26 = $25&65535;
   $27 = $0;
   $28 = (($27) + 80|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($26)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $a4 = $32;
   $33 = $0;
   $34 = (($33) + 76|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $a4;
   $37 = $36 << 8;
   $38 = (($35) + ($37)|0);
   $m = $38;
   $39 = $wr;
   $40 = (($39) + 2|0);
   $wr = $40;
   $41 = HEAP16[$39>>1]|0;
   $42 = $41&65535;
   $43 = $0;
   $44 = (($43) + 80|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($42)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = $m;
   $50 = (($49) + ($48)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $r1 = $52;
   $53 = $wg;
   $54 = (($53) + 2|0);
   $wg = $54;
   $55 = HEAP16[$53>>1]|0;
   $56 = $55&65535;
   $57 = $0;
   $58 = (($57) + 80|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + ($56)|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = $m;
   $64 = (($63) + ($62)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $g2 = $66;
   $67 = $wb;
   $68 = (($67) + 2|0);
   $wb = $68;
   $69 = HEAP16[$67>>1]|0;
   $70 = $69&65535;
   $71 = $0;
   $72 = (($71) + 80|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + ($70)|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $m;
   $78 = (($77) + ($76)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $b3 = $80;
   $81 = $r1;
   $82 = $g2;
   $83 = $82 << 8;
   $84 = $81 | $83;
   $85 = $b3;
   $86 = $85 << 16;
   $87 = $84 | $86;
   $88 = $a4;
   $89 = $88 << 24;
   $90 = $87 | $89;
   $91 = $1;
   $92 = (($91) + 4|0);
   $1 = $92;
   HEAP32[$91>>2] = $90;
  }
  $93 = $6;
  $94 = $wr;
  $95 = (($94) + ($93<<1)|0);
  $wr = $95;
  $96 = $6;
  $97 = $wg;
  $98 = (($97) + ($96<<1)|0);
  $wg = $98;
  $99 = $6;
  $100 = $wb;
  $101 = (($100) + ($99<<1)|0);
  $wb = $101;
  $102 = $6;
  $103 = $wa;
  $104 = (($103) + ($102<<1)|0);
  $wa = $104;
  $105 = $7;
  $106 = $1;
  $107 = (($106) + ($105<<2)|0);
  $1 = $107;
 }
 STACKTOP = sp;return;
}
function _putRGBseparate16bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$r,$g,$b,$a) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $wb = 0, $wg = 0, $wr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $r;
 $9 = $g;
 $10 = $b;
 $11 = $a;
 $12 = $8;
 $wr = $12;
 $13 = $9;
 $wg = $13;
 $14 = $10;
 $wb = $14;
 while(1) {
  $15 = $5;
  $16 = (($15) + -1)|0;
  $5 = $16;
  $17 = ($15>>>0)>(0);
  if (!($17)) {
   break;
  }
  $2 = 0;
  while(1) {
   $18 = $2;
   $19 = $4;
   $20 = ($18>>>0)<($19>>>0);
   if (!($20)) {
    break;
   }
   $21 = $wr;
   $22 = (($21) + 2|0);
   $wr = $22;
   $23 = HEAP16[$21>>1]|0;
   $24 = $23&65535;
   $25 = $0;
   $26 = (($25) + 80|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($24)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = $wg;
   $32 = (($31) + 2|0);
   $wg = $32;
   $33 = HEAP16[$31>>1]|0;
   $34 = $33&65535;
   $35 = $0;
   $36 = (($35) + 80|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + ($34)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $40 << 8;
   $42 = $30 | $41;
   $43 = $wb;
   $44 = (($43) + 2|0);
   $wb = $44;
   $45 = HEAP16[$43>>1]|0;
   $46 = $45&65535;
   $47 = $0;
   $48 = (($47) + 80|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($46)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = $52 << 16;
   $54 = $42 | $53;
   $55 = $54 | -16777216;
   $56 = $1;
   $57 = (($56) + 4|0);
   $1 = $57;
   HEAP32[$56>>2] = $55;
   $58 = $2;
   $59 = (($58) + 1)|0;
   $2 = $59;
  }
  $60 = $6;
  $61 = $wr;
  $62 = (($61) + ($60<<1)|0);
  $wr = $62;
  $63 = $6;
  $64 = $wg;
  $65 = (($64) + ($63<<1)|0);
  $wg = $65;
  $66 = $6;
  $67 = $wb;
  $68 = (($67) + ($66<<1)|0);
  $wb = $68;
  $69 = $7;
  $70 = $1;
  $71 = (($70) + ($69<<2)|0);
  $1 = $71;
 }
 STACKTOP = sp;return;
}
function _putCMYKseparate8bittile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$r,$g,$b,$a) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $bv = 0, $gv = 0, $kv = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $r;
 $9 = $g;
 $10 = $b;
 $11 = $a;
 while(1) {
  $12 = $5;
  $13 = (($12) + -1)|0;
  $5 = $13;
  $14 = ($12>>>0)>(0);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $2 = $15;
  while(1) {
   $16 = $2;
   $17 = (($16) + -1)|0;
   $2 = $17;
   $18 = ($16>>>0)>(0);
   if (!($18)) {
    break;
   }
   $19 = $11;
   $20 = (($19) + 1|0);
   $11 = $20;
   $21 = HEAP8[$19>>0]|0;
   $22 = $21&255;
   $23 = (255 - ($22))|0;
   $kv = $23;
   $24 = $kv;
   $25 = $8;
   $26 = (($25) + 1|0);
   $8 = $26;
   $27 = HEAP8[$25>>0]|0;
   $28 = $27&255;
   $29 = (255 - ($28))|0;
   $30 = Math_imul($24, $29)|0;
   $31 = (($30>>>0) / 255)&-1;
   $rv = $31;
   $32 = $kv;
   $33 = $9;
   $34 = (($33) + 1|0);
   $9 = $34;
   $35 = HEAP8[$33>>0]|0;
   $36 = $35&255;
   $37 = (255 - ($36))|0;
   $38 = Math_imul($32, $37)|0;
   $39 = (($38>>>0) / 255)&-1;
   $gv = $39;
   $40 = $kv;
   $41 = $10;
   $42 = (($41) + 1|0);
   $10 = $42;
   $43 = HEAP8[$41>>0]|0;
   $44 = $43&255;
   $45 = (255 - ($44))|0;
   $46 = Math_imul($40, $45)|0;
   $47 = (($46>>>0) / 255)&-1;
   $bv = $47;
   $48 = $rv;
   $49 = $gv;
   $50 = $49 << 8;
   $51 = $48 | $50;
   $52 = $bv;
   $53 = $52 << 16;
   $54 = $51 | $53;
   $55 = $54 | -16777216;
   $56 = $1;
   $57 = (($56) + 4|0);
   $1 = $57;
   HEAP32[$56>>2] = $55;
  }
  $58 = $6;
  $59 = $8;
  $60 = (($59) + ($58)|0);
  $8 = $60;
  $61 = $6;
  $62 = $9;
  $63 = (($62) + ($61)|0);
  $9 = $63;
  $64 = $6;
  $65 = $10;
  $66 = (($65) + ($64)|0);
  $10 = $66;
  $67 = $6;
  $68 = $11;
  $69 = (($68) + ($67)|0);
  $11 = $69;
  $70 = $7;
  $71 = $1;
  $72 = (($71) + ($70<<2)|0);
  $1 = $72;
 }
 STACKTOP = sp;return;
}
function _putseparate8bitYCbCr11tile($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$r,$g,$b,$a) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $db = 0, $dg = 0, $dr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dr = sp + 28|0;
 $dg = sp + 8|0;
 $db = sp + 36|0;
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $r;
 $9 = $g;
 $10 = $b;
 $11 = $a;
 while(1) {
  $12 = $5;
  $13 = (($12) + -1)|0;
  $5 = $13;
  $14 = ($12>>>0)>(0);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $2 = $15;
  while(1) {
   $16 = $0;
   $17 = (($16) + 68|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $8;
   $20 = (($19) + 1|0);
   $8 = $20;
   $21 = HEAP8[$19>>0]|0;
   $22 = $21&255;
   $23 = $9;
   $24 = (($23) + 1|0);
   $9 = $24;
   $25 = HEAP8[$23>>0]|0;
   $26 = $25&255;
   $27 = $10;
   $28 = (($27) + 1|0);
   $10 = $28;
   $29 = HEAP8[$27>>0]|0;
   $30 = $29&255;
   _TIFFYCbCrtoRGB($18,$22,$26,$30,$dr,$dg,$db);
   $31 = HEAP32[$dr>>2]|0;
   $32 = HEAP32[$dg>>2]|0;
   $33 = $32 << 8;
   $34 = $31 | $33;
   $35 = HEAP32[$db>>2]|0;
   $36 = $35 << 16;
   $37 = $34 | $36;
   $38 = $37 | -16777216;
   $39 = $1;
   $40 = (($39) + 4|0);
   $1 = $40;
   HEAP32[$39>>2] = $38;
   $41 = $2;
   $42 = (($41) + -1)|0;
   $2 = $42;
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
  }
  $44 = $6;
  $45 = $8;
  $46 = (($45) + ($44)|0);
  $8 = $46;
  $47 = $6;
  $48 = $9;
  $49 = (($48) + ($47)|0);
  $9 = $49;
  $50 = $6;
  $51 = $10;
  $52 = (($51) + ($50)|0);
  $10 = $52;
  $53 = $7;
  $54 = $1;
  $55 = (($54) + ($53<<2)|0);
  $1 = $55;
 }
 STACKTOP = sp;return;
}
function _setorientation($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $img;
 $2 = $1;
 $3 = (($2) + 28|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 L1: do {
  switch ($5|0) {
  case 8: case 4:  {
   $96 = $1;
   $97 = (($96) + 30|0);
   $98 = HEAP16[$97>>1]|0;
   $99 = $98&65535;
   $100 = ($99|0)==(1);
   if (!($100)) {
    $101 = $1;
    $102 = (($101) + 30|0);
    $103 = HEAP16[$102>>1]|0;
    $104 = $103&65535;
    $105 = ($104|0)==(5);
    if (!($105)) {
     $106 = $1;
     $107 = (($106) + 30|0);
     $108 = HEAP16[$107>>1]|0;
     $109 = $108&65535;
     $110 = ($109|0)==(2);
     if (!($110)) {
      $111 = $1;
      $112 = (($111) + 30|0);
      $113 = HEAP16[$112>>1]|0;
      $114 = $113&65535;
      $115 = ($114|0)==(6);
      if (!($115)) {
       $116 = $1;
       $117 = (($116) + 30|0);
       $118 = HEAP16[$117>>1]|0;
       $119 = $118&65535;
       $120 = ($119|0)==(3);
       if (!($120)) {
        $121 = $1;
        $122 = (($121) + 30|0);
        $123 = HEAP16[$122>>1]|0;
        $124 = $123&65535;
        $125 = ($124|0)==(7);
        if (!($125)) {
         $0 = 0;
         break L1;
        }
       }
       $0 = 2;
       break L1;
      }
     }
     $0 = 3;
     break L1;
    }
   }
   $0 = 1;
   break;
  }
  case 6: case 2:  {
   $36 = $1;
   $37 = (($36) + 30|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38&65535;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = $1;
    $42 = (($41) + 30|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = $43&65535;
    $45 = ($44|0)==(5);
    if (!($45)) {
     $46 = $1;
     $47 = (($46) + 30|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48&65535;
     $50 = ($49|0)==(3);
     if (!($50)) {
      $51 = $1;
      $52 = (($51) + 30|0);
      $53 = HEAP16[$52>>1]|0;
      $54 = $53&65535;
      $55 = ($54|0)==(7);
      if (!($55)) {
       $56 = $1;
       $57 = (($56) + 30|0);
       $58 = HEAP16[$57>>1]|0;
       $59 = $58&65535;
       $60 = ($59|0)==(4);
       if (!($60)) {
        $61 = $1;
        $62 = (($61) + 30|0);
        $63 = HEAP16[$62>>1]|0;
        $64 = $63&65535;
        $65 = ($64|0)==(8);
        if (!($65)) {
         $0 = 0;
         break L1;
        }
       }
       $0 = 3;
       break L1;
      }
     }
     $0 = 1;
     break L1;
    }
   }
   $0 = 2;
   break;
  }
  case 7: case 3:  {
   $66 = $1;
   $67 = (($66) + 30|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68&65535;
   $70 = ($69|0)==(1);
   if (!($70)) {
    $71 = $1;
    $72 = (($71) + 30|0);
    $73 = HEAP16[$72>>1]|0;
    $74 = $73&65535;
    $75 = ($74|0)==(5);
    if (!($75)) {
     $76 = $1;
     $77 = (($76) + 30|0);
     $78 = HEAP16[$77>>1]|0;
     $79 = $78&65535;
     $80 = ($79|0)==(2);
     if (!($80)) {
      $81 = $1;
      $82 = (($81) + 30|0);
      $83 = HEAP16[$82>>1]|0;
      $84 = $83&65535;
      $85 = ($84|0)==(6);
      if (!($85)) {
       $86 = $1;
       $87 = (($86) + 30|0);
       $88 = HEAP16[$87>>1]|0;
       $89 = $88&65535;
       $90 = ($89|0)==(4);
       if (!($90)) {
        $91 = $1;
        $92 = (($91) + 30|0);
        $93 = HEAP16[$92>>1]|0;
        $94 = $93&65535;
        $95 = ($94|0)==(8);
        if (!($95)) {
         $0 = 0;
         break L1;
        }
       }
       $0 = 2;
       break L1;
      }
     }
     $0 = 1;
     break L1;
    }
   }
   $0 = 3;
   break;
  }
  case 5: case 1:  {
   $6 = $1;
   $7 = (($6) + 30|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8&65535;
   $10 = ($9|0)==(2);
   if (!($10)) {
    $11 = $1;
    $12 = (($11) + 30|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = $13&65535;
    $15 = ($14|0)==(6);
    if (!($15)) {
     $16 = $1;
     $17 = (($16) + 30|0);
     $18 = HEAP16[$17>>1]|0;
     $19 = $18&65535;
     $20 = ($19|0)==(3);
     if (!($20)) {
      $21 = $1;
      $22 = (($21) + 30|0);
      $23 = HEAP16[$22>>1]|0;
      $24 = $23&65535;
      $25 = ($24|0)==(7);
      if (!($25)) {
       $26 = $1;
       $27 = (($26) + 30|0);
       $28 = HEAP16[$27>>1]|0;
       $29 = $28&65535;
       $30 = ($29|0)==(4);
       if (!($30)) {
        $31 = $1;
        $32 = (($31) + 30|0);
        $33 = HEAP16[$32>>1]|0;
        $34 = $33&65535;
        $35 = ($34|0)==(8);
        if (!($35)) {
         $0 = 0;
         break L1;
        }
       }
       $0 = 1;
       break L1;
      }
     }
     $0 = 3;
     break L1;
    }
   }
   $0 = 2;
   break;
  }
  default: {
   $0 = 0;
  }
  }
 } while(0);
 $126 = $0;
 STACKTOP = sp;return ($126|0);
}
function _setupMap($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $range = 0, $vararg_buffer = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $img;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = 1 << $5;
 $7 = (($6) - 1)|0;
 $range = $7;
 $8 = $1;
 $9 = (($8) + 24|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ($11|0)==(16);
 if ($12) {
  $range = 255;
 }
 $13 = $range;
 $14 = (($13) + 1)|0;
 $15 = $14;
 $16 = (__TIFFmalloc($15)|0);
 $17 = $1;
 $18 = (($17) + 56|0);
 HEAP32[$18>>2] = $16;
 $19 = $1;
 $20 = (($19) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = $1;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 628|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = HEAP32[$27>>2]|0;
  $29 = (_TIFFFileName($28)|0);
  _TIFFErrorExt($26,$29,17280,$vararg_buffer);
  $0 = 0;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 $30 = $1;
 $31 = (($30) + 32|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = ($33|0)==(0);
 if ($34) {
  $x = 0;
  while(1) {
   $35 = $x;
   $36 = $range;
   $37 = ($35|0)<=($36|0);
   if (!($37)) {
    break;
   }
   $38 = $range;
   $39 = $x;
   $40 = (($38) - ($39))|0;
   $41 = ($40*255)|0;
   $42 = $range;
   $43 = (($41|0) / ($42|0))&-1;
   $44 = $43&255;
   $45 = $x;
   $46 = $1;
   $47 = (($46) + 56|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($45)|0);
   HEAP8[$49>>0] = $44;
   $50 = $x;
   $51 = (($50) + 1)|0;
   $x = $51;
  }
 } else {
  $x = 0;
  while(1) {
   $52 = $x;
   $53 = $range;
   $54 = ($52|0)<=($53|0);
   if (!($54)) {
    break;
   }
   $55 = $x;
   $56 = ($55*255)|0;
   $57 = $range;
   $58 = (($56|0) / ($57|0))&-1;
   $59 = $58&255;
   $60 = $x;
   $61 = $1;
   $62 = (($61) + 56|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60)|0);
   HEAP8[$64>>0] = $59;
   $65 = $x;
   $66 = (($65) + 1)|0;
   $x = $66;
  }
 }
 $67 = $1;
 $68 = (($67) + 24|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = $69&65535;
 $71 = ($70|0)<=(16);
 do {
  if ($71) {
   $72 = $1;
   $73 = (($72) + 32|0);
   $74 = HEAP16[$73>>1]|0;
   $75 = $74&65535;
   $76 = ($75|0)==(1);
   if (!($76)) {
    $77 = $1;
    $78 = (($77) + 32|0);
    $79 = HEAP16[$78>>1]|0;
    $80 = $79&65535;
    $81 = ($80|0)==(0);
    if (!($81)) {
     break;
    }
   }
   $82 = $1;
   $83 = (_makebwmap($82)|0);
   $84 = ($83|0)!=(0);
   if ($84) {
    $85 = $1;
    $86 = (($85) + 56|0);
    $87 = HEAP32[$86>>2]|0;
    __TIFFfree($87);
    $88 = $1;
    $89 = (($88) + 56|0);
    HEAP32[$89>>2] = 0;
    break;
   }
   $0 = 0;
   $90 = $0;
   STACKTOP = sp;return ($90|0);
  }
 } while(0);
 $0 = 1;
 $90 = $0;
 STACKTOP = sp;return ($90|0);
}
function _checkcmap($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $n = 0, $r = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $img;
 $2 = $1;
 $3 = (($2) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $r = $4;
 $5 = $1;
 $6 = (($5) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $g = $7;
 $8 = $1;
 $9 = (($8) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $b = $10;
 $11 = $1;
 $12 = (($11) + 24|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = 1 << $14;
 $n = $15;
 while(1) {
  $16 = $n;
  $17 = (($16) + -1)|0;
  $n = $17;
  $18 = ($16|0)>(0);
  if (!($18)) {
   label = 8;
   break;
  }
  $19 = $r;
  $20 = (($19) + 2|0);
  $r = $20;
  $21 = HEAP16[$19>>1]|0;
  $22 = $21&65535;
  $23 = ($22|0)>=(256);
  if ($23) {
   label = 6;
   break;
  }
  $24 = $g;
  $25 = (($24) + 2|0);
  $g = $25;
  $26 = HEAP16[$24>>1]|0;
  $27 = $26&65535;
  $28 = ($27|0)>=(256);
  if ($28) {
   label = 6;
   break;
  }
  $29 = $b;
  $30 = (($29) + 2|0);
  $b = $30;
  $31 = HEAP16[$29>>1]|0;
  $32 = $31&65535;
  $33 = ($32|0)>=(256);
  if ($33) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $0 = 16;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 8) {
  $0 = 8;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _cvtcmap($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $i = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $img;
 $1 = $0;
 $2 = (($1) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $r = $3;
 $4 = $0;
 $5 = (($4) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $g = $6;
 $7 = $0;
 $8 = (($7) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $b = $9;
 $10 = $0;
 $11 = (($10) + 24|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = 1 << $13;
 $15 = (($14) - 1)|0;
 $i = $15;
 while(1) {
  $16 = $i;
  $17 = ($16|0)>=(0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = $r;
  $20 = (($19) + ($18<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 >> 8;
  $24 = $23&65535;
  $25 = $i;
  $26 = $r;
  $27 = (($26) + ($25<<1)|0);
  HEAP16[$27>>1] = $24;
  $28 = $i;
  $29 = $g;
  $30 = (($29) + ($28<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $33 = $32 >> 8;
  $34 = $33&65535;
  $35 = $i;
  $36 = $g;
  $37 = (($36) + ($35<<1)|0);
  HEAP16[$37>>1] = $34;
  $38 = $i;
  $39 = $b;
  $40 = (($39) + ($38<<1)|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $42 >> 8;
  $44 = $43&65535;
  $45 = $i;
  $46 = $b;
  $47 = (($46) + ($45<<1)|0);
  HEAP16[$47>>1] = $44;
  $48 = $i;
  $49 = (($48) + -1)|0;
  $i = $49;
 }
 STACKTOP = sp;return;
}
function _makecmap($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $bitspersample = 0, $c = 0, $g = 0, $i = 0, $nsamples = 0, $p = 0, $r = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $img;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $bitspersample = $5;
 $6 = $bitspersample;
 $7 = (8 / ($6|0))&-1;
 $nsamples = $7;
 $8 = $1;
 $9 = (($8) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $r = $10;
 $11 = $1;
 $12 = (($11) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $g = $13;
 $14 = $1;
 $15 = (($14) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $b = $16;
 $17 = $nsamples;
 $18 = $17<<8;
 $19 = $18<<2;
 $20 = (1024 + ($19))|0;
 $21 = (__TIFFmalloc($20)|0);
 $22 = $1;
 $23 = (($22) + 64|0);
 HEAP32[$23>>2] = $21;
 $24 = $1;
 $25 = (($24) + 64|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $28 = $1;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 628|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $1;
  $33 = HEAP32[$32>>2]|0;
  $34 = (_TIFFFileName($33)|0);
  _TIFFErrorExt($31,$34,17240,$vararg_buffer);
  $0 = 0;
  $550 = $0;
  STACKTOP = sp;return ($550|0);
 }
 $35 = $1;
 $36 = (($35) + 64|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 1024|0);
 $p = $38;
 $i = 0;
 while(1) {
  $39 = $i;
  $40 = ($39|0)<(256);
  if (!($40)) {
   break;
  }
  $41 = $p;
  $42 = $i;
  $43 = $1;
  $44 = (($43) + 64|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($42<<2)|0);
  HEAP32[$46>>2] = $41;
  $47 = $bitspersample;
  if ((($47|0) == 8)) {
   $518 = $i;
   $519 = $518&255;
   $c = $519;
   $520 = $c;
   $521 = $520&255;
   $522 = $r;
   $523 = (($522) + ($521<<1)|0);
   $524 = HEAP16[$523>>1]|0;
   $525 = $524&65535;
   $526 = $525 & 255;
   $527 = $c;
   $528 = $527&255;
   $529 = $g;
   $530 = (($529) + ($528<<1)|0);
   $531 = HEAP16[$530>>1]|0;
   $532 = $531&65535;
   $533 = $532 & 255;
   $534 = $533 << 8;
   $535 = $526 | $534;
   $536 = $c;
   $537 = $536&255;
   $538 = $b;
   $539 = (($538) + ($537<<1)|0);
   $540 = HEAP16[$539>>1]|0;
   $541 = $540&65535;
   $542 = $541 & 255;
   $543 = $542 << 16;
   $544 = $535 | $543;
   $545 = $544 | -16777216;
   $546 = $p;
   $547 = (($546) + 4|0);
   $p = $547;
   HEAP32[$546>>2] = $545;
  } else if ((($47|0) == 1)) {
   $48 = $i;
   $49 = $48&255;
   $50 = $49&255;
   $51 = $50 >> 7;
   $52 = $51&255;
   $c = $52;
   $53 = $c;
   $54 = $53&255;
   $55 = $r;
   $56 = (($55) + ($54<<1)|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $57&65535;
   $59 = $58 & 255;
   $60 = $c;
   $61 = $60&255;
   $62 = $g;
   $63 = (($62) + ($61<<1)|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $64&65535;
   $66 = $65 & 255;
   $67 = $66 << 8;
   $68 = $59 | $67;
   $69 = $c;
   $70 = $69&255;
   $71 = $b;
   $72 = (($71) + ($70<<1)|0);
   $73 = HEAP16[$72>>1]|0;
   $74 = $73&65535;
   $75 = $74 & 255;
   $76 = $75 << 16;
   $77 = $68 | $76;
   $78 = $77 | -16777216;
   $79 = $p;
   $80 = (($79) + 4|0);
   $p = $80;
   HEAP32[$79>>2] = $78;
   $81 = $i;
   $82 = $81 >> 6;
   $83 = $82&255;
   $84 = $83&255;
   $85 = $84 & 1;
   $86 = $85&255;
   $c = $86;
   $87 = $c;
   $88 = $87&255;
   $89 = $r;
   $90 = (($89) + ($88<<1)|0);
   $91 = HEAP16[$90>>1]|0;
   $92 = $91&65535;
   $93 = $92 & 255;
   $94 = $c;
   $95 = $94&255;
   $96 = $g;
   $97 = (($96) + ($95<<1)|0);
   $98 = HEAP16[$97>>1]|0;
   $99 = $98&65535;
   $100 = $99 & 255;
   $101 = $100 << 8;
   $102 = $93 | $101;
   $103 = $c;
   $104 = $103&255;
   $105 = $b;
   $106 = (($105) + ($104<<1)|0);
   $107 = HEAP16[$106>>1]|0;
   $108 = $107&65535;
   $109 = $108 & 255;
   $110 = $109 << 16;
   $111 = $102 | $110;
   $112 = $111 | -16777216;
   $113 = $p;
   $114 = (($113) + 4|0);
   $p = $114;
   HEAP32[$113>>2] = $112;
   $115 = $i;
   $116 = $115 >> 5;
   $117 = $116&255;
   $118 = $117&255;
   $119 = $118 & 1;
   $120 = $119&255;
   $c = $120;
   $121 = $c;
   $122 = $121&255;
   $123 = $r;
   $124 = (($123) + ($122<<1)|0);
   $125 = HEAP16[$124>>1]|0;
   $126 = $125&65535;
   $127 = $126 & 255;
   $128 = $c;
   $129 = $128&255;
   $130 = $g;
   $131 = (($130) + ($129<<1)|0);
   $132 = HEAP16[$131>>1]|0;
   $133 = $132&65535;
   $134 = $133 & 255;
   $135 = $134 << 8;
   $136 = $127 | $135;
   $137 = $c;
   $138 = $137&255;
   $139 = $b;
   $140 = (($139) + ($138<<1)|0);
   $141 = HEAP16[$140>>1]|0;
   $142 = $141&65535;
   $143 = $142 & 255;
   $144 = $143 << 16;
   $145 = $136 | $144;
   $146 = $145 | -16777216;
   $147 = $p;
   $148 = (($147) + 4|0);
   $p = $148;
   HEAP32[$147>>2] = $146;
   $149 = $i;
   $150 = $149 >> 4;
   $151 = $150&255;
   $152 = $151&255;
   $153 = $152 & 1;
   $154 = $153&255;
   $c = $154;
   $155 = $c;
   $156 = $155&255;
   $157 = $r;
   $158 = (($157) + ($156<<1)|0);
   $159 = HEAP16[$158>>1]|0;
   $160 = $159&65535;
   $161 = $160 & 255;
   $162 = $c;
   $163 = $162&255;
   $164 = $g;
   $165 = (($164) + ($163<<1)|0);
   $166 = HEAP16[$165>>1]|0;
   $167 = $166&65535;
   $168 = $167 & 255;
   $169 = $168 << 8;
   $170 = $161 | $169;
   $171 = $c;
   $172 = $171&255;
   $173 = $b;
   $174 = (($173) + ($172<<1)|0);
   $175 = HEAP16[$174>>1]|0;
   $176 = $175&65535;
   $177 = $176 & 255;
   $178 = $177 << 16;
   $179 = $170 | $178;
   $180 = $179 | -16777216;
   $181 = $p;
   $182 = (($181) + 4|0);
   $p = $182;
   HEAP32[$181>>2] = $180;
   $183 = $i;
   $184 = $183 >> 3;
   $185 = $184&255;
   $186 = $185&255;
   $187 = $186 & 1;
   $188 = $187&255;
   $c = $188;
   $189 = $c;
   $190 = $189&255;
   $191 = $r;
   $192 = (($191) + ($190<<1)|0);
   $193 = HEAP16[$192>>1]|0;
   $194 = $193&65535;
   $195 = $194 & 255;
   $196 = $c;
   $197 = $196&255;
   $198 = $g;
   $199 = (($198) + ($197<<1)|0);
   $200 = HEAP16[$199>>1]|0;
   $201 = $200&65535;
   $202 = $201 & 255;
   $203 = $202 << 8;
   $204 = $195 | $203;
   $205 = $c;
   $206 = $205&255;
   $207 = $b;
   $208 = (($207) + ($206<<1)|0);
   $209 = HEAP16[$208>>1]|0;
   $210 = $209&65535;
   $211 = $210 & 255;
   $212 = $211 << 16;
   $213 = $204 | $212;
   $214 = $213 | -16777216;
   $215 = $p;
   $216 = (($215) + 4|0);
   $p = $216;
   HEAP32[$215>>2] = $214;
   $217 = $i;
   $218 = $217 >> 2;
   $219 = $218&255;
   $220 = $219&255;
   $221 = $220 & 1;
   $222 = $221&255;
   $c = $222;
   $223 = $c;
   $224 = $223&255;
   $225 = $r;
   $226 = (($225) + ($224<<1)|0);
   $227 = HEAP16[$226>>1]|0;
   $228 = $227&65535;
   $229 = $228 & 255;
   $230 = $c;
   $231 = $230&255;
   $232 = $g;
   $233 = (($232) + ($231<<1)|0);
   $234 = HEAP16[$233>>1]|0;
   $235 = $234&65535;
   $236 = $235 & 255;
   $237 = $236 << 8;
   $238 = $229 | $237;
   $239 = $c;
   $240 = $239&255;
   $241 = $b;
   $242 = (($241) + ($240<<1)|0);
   $243 = HEAP16[$242>>1]|0;
   $244 = $243&65535;
   $245 = $244 & 255;
   $246 = $245 << 16;
   $247 = $238 | $246;
   $248 = $247 | -16777216;
   $249 = $p;
   $250 = (($249) + 4|0);
   $p = $250;
   HEAP32[$249>>2] = $248;
   $251 = $i;
   $252 = $251 >> 1;
   $253 = $252&255;
   $254 = $253&255;
   $255 = $254 & 1;
   $256 = $255&255;
   $c = $256;
   $257 = $c;
   $258 = $257&255;
   $259 = $r;
   $260 = (($259) + ($258<<1)|0);
   $261 = HEAP16[$260>>1]|0;
   $262 = $261&65535;
   $263 = $262 & 255;
   $264 = $c;
   $265 = $264&255;
   $266 = $g;
   $267 = (($266) + ($265<<1)|0);
   $268 = HEAP16[$267>>1]|0;
   $269 = $268&65535;
   $270 = $269 & 255;
   $271 = $270 << 8;
   $272 = $263 | $271;
   $273 = $c;
   $274 = $273&255;
   $275 = $b;
   $276 = (($275) + ($274<<1)|0);
   $277 = HEAP16[$276>>1]|0;
   $278 = $277&65535;
   $279 = $278 & 255;
   $280 = $279 << 16;
   $281 = $272 | $280;
   $282 = $281 | -16777216;
   $283 = $p;
   $284 = (($283) + 4|0);
   $p = $284;
   HEAP32[$283>>2] = $282;
   $285 = $i;
   $286 = $285&255;
   $287 = $286&255;
   $288 = $287 & 1;
   $289 = $288&255;
   $c = $289;
   $290 = $c;
   $291 = $290&255;
   $292 = $r;
   $293 = (($292) + ($291<<1)|0);
   $294 = HEAP16[$293>>1]|0;
   $295 = $294&65535;
   $296 = $295 & 255;
   $297 = $c;
   $298 = $297&255;
   $299 = $g;
   $300 = (($299) + ($298<<1)|0);
   $301 = HEAP16[$300>>1]|0;
   $302 = $301&65535;
   $303 = $302 & 255;
   $304 = $303 << 8;
   $305 = $296 | $304;
   $306 = $c;
   $307 = $306&255;
   $308 = $b;
   $309 = (($308) + ($307<<1)|0);
   $310 = HEAP16[$309>>1]|0;
   $311 = $310&65535;
   $312 = $311 & 255;
   $313 = $312 << 16;
   $314 = $305 | $313;
   $315 = $314 | -16777216;
   $316 = $p;
   $317 = (($316) + 4|0);
   $p = $317;
   HEAP32[$316>>2] = $315;
  } else if ((($47|0) == 2)) {
   $318 = $i;
   $319 = $318&255;
   $320 = $319&255;
   $321 = $320 >> 6;
   $322 = $321&255;
   $c = $322;
   $323 = $c;
   $324 = $323&255;
   $325 = $r;
   $326 = (($325) + ($324<<1)|0);
   $327 = HEAP16[$326>>1]|0;
   $328 = $327&65535;
   $329 = $328 & 255;
   $330 = $c;
   $331 = $330&255;
   $332 = $g;
   $333 = (($332) + ($331<<1)|0);
   $334 = HEAP16[$333>>1]|0;
   $335 = $334&65535;
   $336 = $335 & 255;
   $337 = $336 << 8;
   $338 = $329 | $337;
   $339 = $c;
   $340 = $339&255;
   $341 = $b;
   $342 = (($341) + ($340<<1)|0);
   $343 = HEAP16[$342>>1]|0;
   $344 = $343&65535;
   $345 = $344 & 255;
   $346 = $345 << 16;
   $347 = $338 | $346;
   $348 = $347 | -16777216;
   $349 = $p;
   $350 = (($349) + 4|0);
   $p = $350;
   HEAP32[$349>>2] = $348;
   $351 = $i;
   $352 = $351 >> 4;
   $353 = $352&255;
   $354 = $353&255;
   $355 = $354 & 3;
   $356 = $355&255;
   $c = $356;
   $357 = $c;
   $358 = $357&255;
   $359 = $r;
   $360 = (($359) + ($358<<1)|0);
   $361 = HEAP16[$360>>1]|0;
   $362 = $361&65535;
   $363 = $362 & 255;
   $364 = $c;
   $365 = $364&255;
   $366 = $g;
   $367 = (($366) + ($365<<1)|0);
   $368 = HEAP16[$367>>1]|0;
   $369 = $368&65535;
   $370 = $369 & 255;
   $371 = $370 << 8;
   $372 = $363 | $371;
   $373 = $c;
   $374 = $373&255;
   $375 = $b;
   $376 = (($375) + ($374<<1)|0);
   $377 = HEAP16[$376>>1]|0;
   $378 = $377&65535;
   $379 = $378 & 255;
   $380 = $379 << 16;
   $381 = $372 | $380;
   $382 = $381 | -16777216;
   $383 = $p;
   $384 = (($383) + 4|0);
   $p = $384;
   HEAP32[$383>>2] = $382;
   $385 = $i;
   $386 = $385 >> 2;
   $387 = $386&255;
   $388 = $387&255;
   $389 = $388 & 3;
   $390 = $389&255;
   $c = $390;
   $391 = $c;
   $392 = $391&255;
   $393 = $r;
   $394 = (($393) + ($392<<1)|0);
   $395 = HEAP16[$394>>1]|0;
   $396 = $395&65535;
   $397 = $396 & 255;
   $398 = $c;
   $399 = $398&255;
   $400 = $g;
   $401 = (($400) + ($399<<1)|0);
   $402 = HEAP16[$401>>1]|0;
   $403 = $402&65535;
   $404 = $403 & 255;
   $405 = $404 << 8;
   $406 = $397 | $405;
   $407 = $c;
   $408 = $407&255;
   $409 = $b;
   $410 = (($409) + ($408<<1)|0);
   $411 = HEAP16[$410>>1]|0;
   $412 = $411&65535;
   $413 = $412 & 255;
   $414 = $413 << 16;
   $415 = $406 | $414;
   $416 = $415 | -16777216;
   $417 = $p;
   $418 = (($417) + 4|0);
   $p = $418;
   HEAP32[$417>>2] = $416;
   $419 = $i;
   $420 = $419&255;
   $421 = $420&255;
   $422 = $421 & 3;
   $423 = $422&255;
   $c = $423;
   $424 = $c;
   $425 = $424&255;
   $426 = $r;
   $427 = (($426) + ($425<<1)|0);
   $428 = HEAP16[$427>>1]|0;
   $429 = $428&65535;
   $430 = $429 & 255;
   $431 = $c;
   $432 = $431&255;
   $433 = $g;
   $434 = (($433) + ($432<<1)|0);
   $435 = HEAP16[$434>>1]|0;
   $436 = $435&65535;
   $437 = $436 & 255;
   $438 = $437 << 8;
   $439 = $430 | $438;
   $440 = $c;
   $441 = $440&255;
   $442 = $b;
   $443 = (($442) + ($441<<1)|0);
   $444 = HEAP16[$443>>1]|0;
   $445 = $444&65535;
   $446 = $445 & 255;
   $447 = $446 << 16;
   $448 = $439 | $447;
   $449 = $448 | -16777216;
   $450 = $p;
   $451 = (($450) + 4|0);
   $p = $451;
   HEAP32[$450>>2] = $449;
  } else if ((($47|0) == 4)) {
   $452 = $i;
   $453 = $452&255;
   $454 = $453&255;
   $455 = $454 >> 4;
   $456 = $455&255;
   $c = $456;
   $457 = $c;
   $458 = $457&255;
   $459 = $r;
   $460 = (($459) + ($458<<1)|0);
   $461 = HEAP16[$460>>1]|0;
   $462 = $461&65535;
   $463 = $462 & 255;
   $464 = $c;
   $465 = $464&255;
   $466 = $g;
   $467 = (($466) + ($465<<1)|0);
   $468 = HEAP16[$467>>1]|0;
   $469 = $468&65535;
   $470 = $469 & 255;
   $471 = $470 << 8;
   $472 = $463 | $471;
   $473 = $c;
   $474 = $473&255;
   $475 = $b;
   $476 = (($475) + ($474<<1)|0);
   $477 = HEAP16[$476>>1]|0;
   $478 = $477&65535;
   $479 = $478 & 255;
   $480 = $479 << 16;
   $481 = $472 | $480;
   $482 = $481 | -16777216;
   $483 = $p;
   $484 = (($483) + 4|0);
   $p = $484;
   HEAP32[$483>>2] = $482;
   $485 = $i;
   $486 = $485&255;
   $487 = $486&255;
   $488 = $487 & 15;
   $489 = $488&255;
   $c = $489;
   $490 = $c;
   $491 = $490&255;
   $492 = $r;
   $493 = (($492) + ($491<<1)|0);
   $494 = HEAP16[$493>>1]|0;
   $495 = $494&65535;
   $496 = $495 & 255;
   $497 = $c;
   $498 = $497&255;
   $499 = $g;
   $500 = (($499) + ($498<<1)|0);
   $501 = HEAP16[$500>>1]|0;
   $502 = $501&65535;
   $503 = $502 & 255;
   $504 = $503 << 8;
   $505 = $496 | $504;
   $506 = $c;
   $507 = $506&255;
   $508 = $b;
   $509 = (($508) + ($507<<1)|0);
   $510 = HEAP16[$509>>1]|0;
   $511 = $510&65535;
   $512 = $511 & 255;
   $513 = $512 << 16;
   $514 = $505 | $513;
   $515 = $514 | -16777216;
   $516 = $p;
   $517 = (($516) + 4|0);
   $p = $517;
   HEAP32[$516>>2] = $515;
  }
  $548 = $i;
  $549 = (($548) + 1)|0;
  $i = $549;
 }
 $0 = 1;
 $550 = $0;
 STACKTOP = sp;return ($550|0);
}
function _putcontig8bitCIELab($img,$cp,$x,$y,$w,$h,$fromskew,$toskew,$pp) {
 $img = $img|0;
 $cp = $cp|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $fromskew = $fromskew|0;
 $toskew = $toskew|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $X = 0, $Y = 0, $Z = 0, $b = 0;
 var $g = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $X = sp + 24|0;
 $Y = sp;
 $Z = sp + 32|0;
 $r = sp + 28|0;
 $g = sp + 8|0;
 $b = sp + 36|0;
 $0 = $img;
 $1 = $cp;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $fromskew;
 $7 = $toskew;
 $8 = $pp;
 $9 = $6;
 $10 = ($9*3)|0;
 $6 = $10;
 while(1) {
  $11 = $5;
  $12 = (($11) + -1)|0;
  $5 = $12;
  $13 = ($11>>>0)>(0);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $2 = $14;
  while(1) {
   $15 = $2;
   $16 = (($15) + -1)|0;
   $2 = $16;
   $17 = ($15>>>0)>(0);
   if (!($17)) {
    break;
   }
   $18 = $0;
   $19 = (($18) + 72|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $8;
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $8;
   $25 = (($24) + 1|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = $8;
   $29 = (($28) + 2|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   _TIFFCIELabToXYZ($20,$23,$27,$31,$X,$Y,$Z);
   $32 = $0;
   $33 = (($32) + 72|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = +HEAPF32[$X>>2];
   $36 = +HEAPF32[$Y>>2];
   $37 = +HEAPF32[$Z>>2];
   _TIFFXYZToRGB($34,$35,$36,$37,$r,$g,$b);
   $38 = HEAP32[$r>>2]|0;
   $39 = HEAP32[$g>>2]|0;
   $40 = $39 << 8;
   $41 = $38 | $40;
   $42 = HEAP32[$b>>2]|0;
   $43 = $42 << 16;
   $44 = $41 | $43;
   $45 = $44 | -16777216;
   $46 = $1;
   $47 = (($46) + 4|0);
   $1 = $47;
   HEAP32[$46>>2] = $45;
   $48 = $8;
   $49 = (($48) + 3|0);
   $8 = $49;
  }
  $50 = $7;
  $51 = $1;
  $52 = (($51) + ($50<<2)|0);
  $1 = $52;
  $53 = $6;
  $54 = $8;
  $55 = (($54) + ($53)|0);
  $8 = $55;
 }
 STACKTOP = sp;return;
}
function _makebwmap($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Map = 0, $bitspersample = 0, $c = 0, $i = 0, $nsamples = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $img;
 $2 = $1;
 $3 = (($2) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $Map = $4;
 $5 = $1;
 $6 = (($5) + 24|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $bitspersample = $8;
 $9 = $bitspersample;
 $10 = (8 / ($9|0))&-1;
 $nsamples = $10;
 $11 = $nsamples;
 $12 = ($11|0)==(0);
 if ($12) {
  $nsamples = 1;
 }
 $13 = $nsamples;
 $14 = $13<<8;
 $15 = $14<<2;
 $16 = (1024 + ($15))|0;
 $17 = (__TIFFmalloc($16)|0);
 $18 = $1;
 $19 = (($18) + 60|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = (($20) + 60|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 628|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $1;
  $29 = HEAP32[$28>>2]|0;
  $30 = (_TIFFFileName($29)|0);
  _TIFFErrorExt($27,$30,17328,$vararg_buffer);
  $0 = 0;
  $323 = $0;
  STACKTOP = sp;return ($323|0);
 }
 $31 = $1;
 $32 = (($31) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 1024|0);
 $p = $34;
 $i = 0;
 while(1) {
  $35 = $i;
  $36 = ($35|0)<(256);
  if (!($36)) {
   break;
  }
  $37 = $p;
  $38 = $i;
  $39 = $1;
  $40 = (($39) + 60|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($38<<2)|0);
  HEAP32[$42>>2] = $37;
  $43 = $bitspersample;
  switch ($43|0) {
  case 4:  {
   $268 = $i;
   $269 = $268 >> 4;
   $270 = $Map;
   $271 = (($270) + ($269)|0);
   $272 = HEAP8[$271>>0]|0;
   $c = $272;
   $273 = $c;
   $274 = $273&255;
   $275 = $c;
   $276 = $275&255;
   $277 = $276 << 8;
   $278 = $274 | $277;
   $279 = $c;
   $280 = $279&255;
   $281 = $280 << 16;
   $282 = $278 | $281;
   $283 = $282 | -16777216;
   $284 = $p;
   $285 = (($284) + 4|0);
   $p = $285;
   HEAP32[$284>>2] = $283;
   $286 = $i;
   $287 = $286 & 15;
   $288 = $Map;
   $289 = (($288) + ($287)|0);
   $290 = HEAP8[$289>>0]|0;
   $c = $290;
   $291 = $c;
   $292 = $291&255;
   $293 = $c;
   $294 = $293&255;
   $295 = $294 << 8;
   $296 = $292 | $295;
   $297 = $c;
   $298 = $297&255;
   $299 = $298 << 16;
   $300 = $296 | $299;
   $301 = $300 | -16777216;
   $302 = $p;
   $303 = (($302) + 4|0);
   $p = $303;
   HEAP32[$302>>2] = $301;
   break;
  }
  case 16: case 8:  {
   $304 = $i;
   $305 = $Map;
   $306 = (($305) + ($304)|0);
   $307 = HEAP8[$306>>0]|0;
   $c = $307;
   $308 = $c;
   $309 = $308&255;
   $310 = $c;
   $311 = $310&255;
   $312 = $311 << 8;
   $313 = $309 | $312;
   $314 = $c;
   $315 = $314&255;
   $316 = $315 << 16;
   $317 = $313 | $316;
   $318 = $317 | -16777216;
   $319 = $p;
   $320 = (($319) + 4|0);
   $p = $320;
   HEAP32[$319>>2] = $318;
   break;
  }
  case 2:  {
   $194 = $i;
   $195 = $194 >> 6;
   $196 = $Map;
   $197 = (($196) + ($195)|0);
   $198 = HEAP8[$197>>0]|0;
   $c = $198;
   $199 = $c;
   $200 = $199&255;
   $201 = $c;
   $202 = $201&255;
   $203 = $202 << 8;
   $204 = $200 | $203;
   $205 = $c;
   $206 = $205&255;
   $207 = $206 << 16;
   $208 = $204 | $207;
   $209 = $208 | -16777216;
   $210 = $p;
   $211 = (($210) + 4|0);
   $p = $211;
   HEAP32[$210>>2] = $209;
   $212 = $i;
   $213 = $212 >> 4;
   $214 = $213 & 3;
   $215 = $Map;
   $216 = (($215) + ($214)|0);
   $217 = HEAP8[$216>>0]|0;
   $c = $217;
   $218 = $c;
   $219 = $218&255;
   $220 = $c;
   $221 = $220&255;
   $222 = $221 << 8;
   $223 = $219 | $222;
   $224 = $c;
   $225 = $224&255;
   $226 = $225 << 16;
   $227 = $223 | $226;
   $228 = $227 | -16777216;
   $229 = $p;
   $230 = (($229) + 4|0);
   $p = $230;
   HEAP32[$229>>2] = $228;
   $231 = $i;
   $232 = $231 >> 2;
   $233 = $232 & 3;
   $234 = $Map;
   $235 = (($234) + ($233)|0);
   $236 = HEAP8[$235>>0]|0;
   $c = $236;
   $237 = $c;
   $238 = $237&255;
   $239 = $c;
   $240 = $239&255;
   $241 = $240 << 8;
   $242 = $238 | $241;
   $243 = $c;
   $244 = $243&255;
   $245 = $244 << 16;
   $246 = $242 | $245;
   $247 = $246 | -16777216;
   $248 = $p;
   $249 = (($248) + 4|0);
   $p = $249;
   HEAP32[$248>>2] = $247;
   $250 = $i;
   $251 = $250 & 3;
   $252 = $Map;
   $253 = (($252) + ($251)|0);
   $254 = HEAP8[$253>>0]|0;
   $c = $254;
   $255 = $c;
   $256 = $255&255;
   $257 = $c;
   $258 = $257&255;
   $259 = $258 << 8;
   $260 = $256 | $259;
   $261 = $c;
   $262 = $261&255;
   $263 = $262 << 16;
   $264 = $260 | $263;
   $265 = $264 | -16777216;
   $266 = $p;
   $267 = (($266) + 4|0);
   $p = $267;
   HEAP32[$266>>2] = $265;
   break;
  }
  case 1:  {
   $44 = $i;
   $45 = $44 >> 7;
   $46 = $Map;
   $47 = (($46) + ($45)|0);
   $48 = HEAP8[$47>>0]|0;
   $c = $48;
   $49 = $c;
   $50 = $49&255;
   $51 = $c;
   $52 = $51&255;
   $53 = $52 << 8;
   $54 = $50 | $53;
   $55 = $c;
   $56 = $55&255;
   $57 = $56 << 16;
   $58 = $54 | $57;
   $59 = $58 | -16777216;
   $60 = $p;
   $61 = (($60) + 4|0);
   $p = $61;
   HEAP32[$60>>2] = $59;
   $62 = $i;
   $63 = $62 >> 6;
   $64 = $63 & 1;
   $65 = $Map;
   $66 = (($65) + ($64)|0);
   $67 = HEAP8[$66>>0]|0;
   $c = $67;
   $68 = $c;
   $69 = $68&255;
   $70 = $c;
   $71 = $70&255;
   $72 = $71 << 8;
   $73 = $69 | $72;
   $74 = $c;
   $75 = $74&255;
   $76 = $75 << 16;
   $77 = $73 | $76;
   $78 = $77 | -16777216;
   $79 = $p;
   $80 = (($79) + 4|0);
   $p = $80;
   HEAP32[$79>>2] = $78;
   $81 = $i;
   $82 = $81 >> 5;
   $83 = $82 & 1;
   $84 = $Map;
   $85 = (($84) + ($83)|0);
   $86 = HEAP8[$85>>0]|0;
   $c = $86;
   $87 = $c;
   $88 = $87&255;
   $89 = $c;
   $90 = $89&255;
   $91 = $90 << 8;
   $92 = $88 | $91;
   $93 = $c;
   $94 = $93&255;
   $95 = $94 << 16;
   $96 = $92 | $95;
   $97 = $96 | -16777216;
   $98 = $p;
   $99 = (($98) + 4|0);
   $p = $99;
   HEAP32[$98>>2] = $97;
   $100 = $i;
   $101 = $100 >> 4;
   $102 = $101 & 1;
   $103 = $Map;
   $104 = (($103) + ($102)|0);
   $105 = HEAP8[$104>>0]|0;
   $c = $105;
   $106 = $c;
   $107 = $106&255;
   $108 = $c;
   $109 = $108&255;
   $110 = $109 << 8;
   $111 = $107 | $110;
   $112 = $c;
   $113 = $112&255;
   $114 = $113 << 16;
   $115 = $111 | $114;
   $116 = $115 | -16777216;
   $117 = $p;
   $118 = (($117) + 4|0);
   $p = $118;
   HEAP32[$117>>2] = $116;
   $119 = $i;
   $120 = $119 >> 3;
   $121 = $120 & 1;
   $122 = $Map;
   $123 = (($122) + ($121)|0);
   $124 = HEAP8[$123>>0]|0;
   $c = $124;
   $125 = $c;
   $126 = $125&255;
   $127 = $c;
   $128 = $127&255;
   $129 = $128 << 8;
   $130 = $126 | $129;
   $131 = $c;
   $132 = $131&255;
   $133 = $132 << 16;
   $134 = $130 | $133;
   $135 = $134 | -16777216;
   $136 = $p;
   $137 = (($136) + 4|0);
   $p = $137;
   HEAP32[$136>>2] = $135;
   $138 = $i;
   $139 = $138 >> 2;
   $140 = $139 & 1;
   $141 = $Map;
   $142 = (($141) + ($140)|0);
   $143 = HEAP8[$142>>0]|0;
   $c = $143;
   $144 = $c;
   $145 = $144&255;
   $146 = $c;
   $147 = $146&255;
   $148 = $147 << 8;
   $149 = $145 | $148;
   $150 = $c;
   $151 = $150&255;
   $152 = $151 << 16;
   $153 = $149 | $152;
   $154 = $153 | -16777216;
   $155 = $p;
   $156 = (($155) + 4|0);
   $p = $156;
   HEAP32[$155>>2] = $154;
   $157 = $i;
   $158 = $157 >> 1;
   $159 = $158 & 1;
   $160 = $Map;
   $161 = (($160) + ($159)|0);
   $162 = HEAP8[$161>>0]|0;
   $c = $162;
   $163 = $c;
   $164 = $163&255;
   $165 = $c;
   $166 = $165&255;
   $167 = $166 << 8;
   $168 = $164 | $167;
   $169 = $c;
   $170 = $169&255;
   $171 = $170 << 16;
   $172 = $168 | $171;
   $173 = $172 | -16777216;
   $174 = $p;
   $175 = (($174) + 4|0);
   $p = $175;
   HEAP32[$174>>2] = $173;
   $176 = $i;
   $177 = $176 & 1;
   $178 = $Map;
   $179 = (($178) + ($177)|0);
   $180 = HEAP8[$179>>0]|0;
   $c = $180;
   $181 = $c;
   $182 = $181&255;
   $183 = $c;
   $184 = $183&255;
   $185 = $184 << 8;
   $186 = $182 | $185;
   $187 = $c;
   $188 = $187&255;
   $189 = $188 << 16;
   $190 = $186 | $189;
   $191 = $190 | -16777216;
   $192 = $p;
   $193 = (($192) + 4|0);
   $p = $193;
   HEAP32[$192>>2] = $191;
   break;
  }
  default: {
  }
  }
  $321 = $i;
  $322 = (($321) + 1)|0;
  $i = $322;
 }
 $0 = 1;
 $323 = $0;
 STACKTOP = sp;return ($323|0);
}
function __TIFFgetMode($mode,$module) {
 $mode = $mode|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $mode;
 $1 = $module;
 $m = -1;
 $2 = $0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 if ((($4|0) == 97) | (($4|0) == 119)) {
  $m = 66;
  $10 = $0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(119);
  if ($13) {
   $14 = $m;
   $15 = $14 | 512;
   $m = $15;
  }
  $18 = $m;
  STACKTOP = sp;return ($18|0);
 } else if ((($4|0) == 114)) {
  $m = 0;
  $5 = $0;
  $6 = (($5) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)==(43);
  if ($9) {
   $m = 2;
  }
  $18 = $m;
  STACKTOP = sp;return ($18|0);
 } else {
  $16 = $1;
  $17 = $0;
  HEAP32[$vararg_buffer>>2] = $17;
  _TIFFErrorExt(0,$16,17392,$vararg_buffer);
  $18 = $m;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _TIFFClientOpen($name,$mode,$clientdata,$readproc,$writeproc,$seekproc,$closeproc,$sizeproc,$mapproc,$unmapproc) {
 $name = $name|0;
 $mode = $mode|0;
 $clientdata = $clientdata|0;
 $readproc = $readproc|0;
 $writeproc = $writeproc|0;
 $seekproc = $seekproc|0;
 $closeproc = $closeproc|0;
 $sizeproc = $sizeproc|0;
 $mapproc = $mapproc|0;
 $unmapproc = $unmapproc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cp = 0, $m = 0, $n = 0, $n1 = 0, $tif = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer17 = sp + 32|0;
 $vararg_buffer15 = sp + 8|0;
 $vararg_buffer11 = sp + 16|0;
 $vararg_buffer7 = sp + 64|0;
 $vararg_buffer5 = sp;
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 40|0;
 $n = sp + 136|0;
 $n1 = sp + 56|0;
 $1 = $name;
 $2 = $mode;
 $3 = $clientdata;
 $4 = $readproc;
 $5 = $writeproc;
 $6 = $seekproc;
 $7 = $closeproc;
 $8 = $sizeproc;
 $9 = $mapproc;
 $10 = $unmapproc;
 HEAP8[$n>>0] = 1;
 $11 = (($n) + 1|0);
 HEAP8[$11>>0] = 0;
 $12 = HEAP16[$n>>1]|0;
 $13 = $12&65535;
 $14 = ($13|0)==(1);
 if (!($14)) {
  ___assert_fail((17424|0),(17440|0),112,(17456|0));
  // unreachable;
 }
 $15 = $2;
 $16 = (__TIFFgetMode($15,17408)|0);
 $m = $16;
 $17 = $m;
 $18 = ($17|0)==(-1);
 do {
  if ($18) {
  } else {
   $19 = $1;
   $20 = (_strlen(($19|0))|0);
   $21 = (696 + ($20))|0;
   $22 = (($21) + 1)|0;
   $23 = (__TIFFmalloc($22)|0);
   $tif = $23;
   $24 = $tif;
   $25 = ($24|0)==(0|0);
   if ($25) {
    $26 = $3;
    $27 = $1;
    HEAP32[$vararg_buffer>>2] = $27;
    _TIFFErrorExt($26,17408,17472,$vararg_buffer);
    break;
   }
   $28 = $tif;
   __TIFFmemset($28,0,696);
   $29 = $tif;
   $30 = (($29) + 696|0);
   $31 = $tif;
   HEAP32[$31>>2] = $30;
   $32 = $tif;
   $33 = HEAP32[$32>>2]|0;
   $34 = $1;
   (_strcpy(($33|0),($34|0))|0);
   $35 = $m;
   $36 = $35 & -577;
   $37 = $tif;
   $38 = (($37) + 8|0);
   HEAP32[$38>>2] = $36;
   $39 = $tif;
   $40 = (($39) + 448|0);
   HEAP16[$40>>1] = -1;
   $41 = $tif;
   $42 = (($41) + 456|0);
   $43 = $42;
   $44 = $43;
   HEAP32[$44>>2] = 0;
   $45 = (($43) + 4)|0;
   $46 = $45;
   HEAP32[$46>>2] = 0;
   $47 = $tif;
   $48 = (($47) + 452|0);
   HEAP32[$48>>2] = -1;
   $49 = $tif;
   $50 = (($49) + 444|0);
   HEAP32[$50>>2] = -1;
   $51 = $3;
   $52 = $tif;
   $53 = (($52) + 628|0);
   HEAP32[$53>>2] = $51;
   $54 = $4;
   $55 = ($54|0)!=(0|0);
   if ($55) {
    $56 = $5;
    $57 = ($56|0)!=(0|0);
    if ($57) {
     $58 = $6;
     $59 = ($58|0)!=(0|0);
     if ($59) {
      $60 = $7;
      $61 = ($60|0)!=(0|0);
      if ($61) {
       $62 = $8;
       $63 = ($62|0)!=(0|0);
       if ($63) {
        $65 = $4;
        $66 = $tif;
        $67 = (($66) + 632|0);
        HEAP32[$67>>2] = $65;
        $68 = $5;
        $69 = $tif;
        $70 = (($69) + 636|0);
        HEAP32[$70>>2] = $68;
        $71 = $6;
        $72 = $tif;
        $73 = (($72) + 640|0);
        HEAP32[$73>>2] = $71;
        $74 = $7;
        $75 = $tif;
        $76 = (($75) + 644|0);
        HEAP32[$76>>2] = $74;
        $77 = $8;
        $78 = $tif;
        $79 = (($78) + 648|0);
        HEAP32[$79>>2] = $77;
        $80 = $9;
        $81 = ($80|0)!=(0|0);
        if ($81) {
         $82 = $9;
         $83 = $tif;
         $84 = (($83) + 620|0);
         HEAP32[$84>>2] = $82;
        } else {
         $85 = $tif;
         $86 = (($85) + 620|0);
         HEAP32[$86>>2] = 61;
        }
        $87 = $10;
        $88 = ($87|0)!=(0|0);
        if ($88) {
         $89 = $10;
         $90 = $tif;
         $91 = (($90) + 624|0);
         HEAP32[$91>>2] = $89;
        } else {
         $92 = $tif;
         $93 = (($92) + 624|0);
         HEAP32[$93>>2] = 62;
        }
        $94 = $tif;
        __TIFFSetDefaultCompressionState($94);
        $95 = $tif;
        $96 = (($95) + 12|0);
        HEAP32[$96>>2] = 1;
        $97 = $m;
        $98 = ($97|0)==(0);
        if ($98) {
         $99 = $tif;
         $100 = (($99) + 12|0);
         $101 = HEAP32[$100>>2]|0;
         $102 = $101 | 2048;
         HEAP32[$100>>2] = $102;
        }
        $103 = $m;
        $104 = ($103|0)==(0);
        if ($104) {
         label = 23;
        } else {
         $105 = $m;
         $106 = ($105|0)==(2);
         if ($106) {
          label = 23;
         }
        }
        if ((label|0) == 23) {
         $107 = $tif;
         $108 = (($107) + 12|0);
         $109 = HEAP32[$108>>2]|0;
         $110 = $109 | 32768;
         HEAP32[$108>>2] = $110;
        }
        $111 = $2;
        $cp = $111;
        while(1) {
         $112 = $cp;
         $113 = HEAP8[$112>>0]|0;
         $114 = ($113<<24>>24)!=(0);
         if (!($114)) {
          break;
         }
         $115 = $cp;
         $116 = HEAP8[$115>>0]|0;
         $117 = $116 << 24 >> 24;
         do {
          switch ($117|0) {
          case 66:  {
           $125 = $tif;
           $126 = (($125) + 12|0);
           $127 = HEAP32[$126>>2]|0;
           $128 = $127 & -4;
           $129 = $128 | 1;
           $130 = $tif;
           $131 = (($130) + 12|0);
           HEAP32[$131>>2] = $129;
           break;
          }
          case 108:  {
           break;
          }
          case 104:  {
           $170 = $tif;
           $171 = (($170) + 12|0);
           $172 = HEAP32[$171>>2]|0;
           $173 = $172 | 65536;
           HEAP32[$171>>2] = $173;
           break;
          }
          case 56:  {
           $174 = $m;
           $175 = $174 & 64;
           $176 = ($175|0)!=(0);
           if ($176) {
            $177 = $tif;
            $178 = (($177) + 12|0);
            $179 = HEAP32[$178>>2]|0;
            $180 = $179 | 524288;
            HEAP32[$178>>2] = $180;
           }
           break;
          }
          case 99:  {
           $164 = $m;
           $165 = ($164|0)==(0);
           if ($165) {
            $166 = $tif;
            $167 = (($166) + 12|0);
            $168 = HEAP32[$167>>2]|0;
            $169 = $168 & -32769;
            HEAP32[$167>>2] = $169;
           }
           break;
          }
          case 98:  {
           $118 = $m;
           $119 = $118 & 64;
           $120 = ($119|0)!=(0);
           if ($120) {
            $121 = $tif;
            $122 = (($121) + 12|0);
            $123 = HEAP32[$122>>2]|0;
            $124 = $123 | 128;
            HEAP32[$122>>2] = $124;
           }
           break;
          }
          case 76:  {
           $132 = $tif;
           $133 = (($132) + 12|0);
           $134 = HEAP32[$133>>2]|0;
           $135 = $134 & -4;
           $136 = $135 | 2;
           $137 = $tif;
           $138 = (($137) + 12|0);
           HEAP32[$138>>2] = $136;
           break;
          }
          case 67:  {
           $158 = $m;
           $159 = ($158|0)==(0);
           if ($159) {
            $160 = $tif;
            $161 = (($160) + 12|0);
            $162 = HEAP32[$161>>2]|0;
            $163 = $162 | 32768;
            HEAP32[$161>>2] = $163;
           }
           break;
          }
          case 109:  {
           $152 = $m;
           $153 = ($152|0)==(0);
           if ($153) {
            $154 = $tif;
            $155 = (($154) + 12|0);
            $156 = HEAP32[$155>>2]|0;
            $157 = $156 & -2049;
            HEAP32[$155>>2] = $157;
           }
           break;
          }
          case 77:  {
           $146 = $m;
           $147 = ($146|0)==(0);
           if ($147) {
            $148 = $tif;
            $149 = (($148) + 12|0);
            $150 = HEAP32[$149>>2]|0;
            $151 = $150 | 2048;
            HEAP32[$149>>2] = $151;
           }
           break;
          }
          case 72:  {
           $139 = $tif;
           $140 = (($139) + 12|0);
           $141 = HEAP32[$140>>2]|0;
           $142 = $141 & -4;
           $143 = $142 | 2;
           $144 = $tif;
           $145 = (($144) + 12|0);
           HEAP32[$145>>2] = $143;
           break;
          }
          default: {
          }
          }
         } while(0);
         $181 = $cp;
         $182 = (($181) + 1|0);
         $cp = $182;
        }
        $183 = $m;
        $184 = $183 & 512;
        $185 = ($184|0)!=(0);
        L67: do {
         if ($185) {
          label = 54;
         } else {
          $186 = $tif;
          $187 = (($186) + 632|0);
          $188 = HEAP32[$187>>2]|0;
          $189 = $tif;
          $190 = (($189) + 628|0);
          $191 = HEAP32[$190>>2]|0;
          $192 = $tif;
          $193 = (($192) + 424|0);
          $194 = (FUNCTION_TABLE_iiii[$188 & 255]($191,$193,8)|0);
          $195 = ($194|0)==(8);
          if ($195) {
           $317 = $tif;
           $318 = (($317) + 424|0);
           $319 = HEAP16[$318>>1]|0;
           $320 = $319&65535;
           $321 = ($320|0)!=(19789);
           do {
            if ($321) {
             $322 = $tif;
             $323 = (($322) + 424|0);
             $324 = HEAP16[$323>>1]|0;
             $325 = $324&65535;
             $326 = ($325|0)!=(18761);
             if ($326) {
              $327 = $tif;
              $328 = (($327) + 424|0);
              $329 = HEAP16[$328>>1]|0;
              $330 = $329&65535;
              $331 = ($330|0)!=(20549);
              if (!($331)) {
               break;
              }
              $332 = $tif;
              $333 = (($332) + 628|0);
              $334 = HEAP32[$333>>2]|0;
              $335 = $1;
              $336 = $tif;
              $337 = (($336) + 424|0);
              $338 = HEAP16[$337>>1]|0;
              $339 = $338&65535;
              $340 = $tif;
              $341 = (($340) + 424|0);
              $342 = HEAP16[$341>>1]|0;
              $343 = $342&65535;
              HEAP32[$vararg_buffer7>>2] = $339;
              $vararg_ptr10 = (($vararg_buffer7) + 4|0);
              HEAP32[$vararg_ptr10>>2] = $343;
              _TIFFErrorExt($334,$335,17616,$vararg_buffer7);
              break L67;
             }
            }
           } while(0);
           $344 = $tif;
           $345 = (($344) + 424|0);
           $346 = HEAP16[$345>>1]|0;
           $347 = $346&65535;
           $348 = ($347|0)==(19789);
           if ($348) {
            $349 = $tif;
            $350 = (($349) + 12|0);
            $351 = HEAP32[$350>>2]|0;
            $352 = $351 | 128;
            HEAP32[$350>>2] = $352;
           } else {
           }
           $353 = $tif;
           $354 = (($353) + 12|0);
           $355 = HEAP32[$354>>2]|0;
           $356 = $355 & 128;
           $357 = ($356|0)!=(0);
           if ($357) {
            $358 = $tif;
            $359 = (($358) + 424|0);
            $360 = (($359) + 2|0);
            _TIFFSwabShort($360);
           }
           $361 = $tif;
           $362 = (($361) + 424|0);
           $363 = (($362) + 2|0);
           $364 = HEAP16[$363>>1]|0;
           $365 = $364&65535;
           $366 = ($365|0)!=(42);
           do {
            if ($366) {
             $367 = $tif;
             $368 = (($367) + 424|0);
             $369 = (($368) + 2|0);
             $370 = HEAP16[$369>>1]|0;
             $371 = $370&65535;
             $372 = ($371|0)!=(43);
             if (!($372)) {
              break;
             }
             $373 = $tif;
             $374 = (($373) + 628|0);
             $375 = HEAP32[$374>>2]|0;
             $376 = $1;
             $377 = $tif;
             $378 = (($377) + 424|0);
             $379 = (($378) + 2|0);
             $380 = HEAP16[$379>>1]|0;
             $381 = $380&65535;
             $382 = $tif;
             $383 = (($382) + 424|0);
             $384 = (($383) + 2|0);
             $385 = HEAP16[$384>>1]|0;
             $386 = $385&65535;
             HEAP32[$vararg_buffer11>>2] = $381;
             $vararg_ptr14 = (($vararg_buffer11) + 4|0);
             HEAP32[$vararg_ptr14>>2] = $386;
             _TIFFErrorExt($375,$376,17672,$vararg_buffer11);
             break L67;
            }
           } while(0);
           $387 = $tif;
           $388 = (($387) + 424|0);
           $389 = (($388) + 2|0);
           $390 = HEAP16[$389>>1]|0;
           $391 = $390&65535;
           $392 = ($391|0)==(42);
           do {
            if ($392) {
             $393 = $tif;
             $394 = (($393) + 12|0);
             $395 = HEAP32[$394>>2]|0;
             $396 = $395 & 128;
             $397 = ($396|0)!=(0);
             if ($397) {
              $398 = $tif;
              $399 = (($398) + 424|0);
              $400 = (($399) + 4|0);
              _TIFFSwabLong($400);
             }
             $401 = $tif;
             $402 = (($401) + 440|0);
             HEAP16[$402>>1] = 8;
            } else {
             $403 = $tif;
             $404 = (($403) + 632|0);
             $405 = HEAP32[$404>>2]|0;
             $406 = $tif;
             $407 = (($406) + 628|0);
             $408 = HEAP32[$407>>2]|0;
             $409 = $tif;
             $410 = (($409) + 424|0);
             $411 = (($410) + 8|0);
             $412 = (FUNCTION_TABLE_iiii[$405 & 255]($408,$411,8)|0);
             $413 = ($412|0)==(8);
             if (!($413)) {
              $414 = $tif;
              $415 = (($414) + 628|0);
              $416 = HEAP32[$415>>2]|0;
              $417 = $1;
              _TIFFErrorExt($416,$417,17560,$vararg_buffer15);
              break L67;
             }
             $418 = $tif;
             $419 = (($418) + 12|0);
             $420 = HEAP32[$419>>2]|0;
             $421 = $420 & 128;
             $422 = ($421|0)!=(0);
             if ($422) {
              $423 = $tif;
              $424 = (($423) + 424|0);
              $425 = (($424) + 4|0);
              _TIFFSwabShort($425);
              $426 = $tif;
              $427 = (($426) + 424|0);
              $428 = (($427) + 8|0);
              _TIFFSwabLong8($428);
             }
             $429 = $tif;
             $430 = (($429) + 424|0);
             $431 = (($430) + 4|0);
             $432 = HEAP16[$431>>1]|0;
             $433 = $432&65535;
             $434 = ($433|0)!=(8);
             if ($434) {
              $435 = $tif;
              $436 = (($435) + 628|0);
              $437 = HEAP32[$436>>2]|0;
              $438 = $1;
              $439 = $tif;
              $440 = (($439) + 424|0);
              $441 = (($440) + 4|0);
              $442 = HEAP16[$441>>1]|0;
              $443 = $442&65535;
              $444 = $tif;
              $445 = (($444) + 424|0);
              $446 = (($445) + 4|0);
              $447 = HEAP16[$446>>1]|0;
              $448 = $447&65535;
              HEAP32[$vararg_buffer17>>2] = $443;
              $vararg_ptr20 = (($vararg_buffer17) + 4|0);
              HEAP32[$vararg_ptr20>>2] = $448;
              _TIFFErrorExt($437,$438,17720,$vararg_buffer17);
              break L67;
             }
             $449 = $tif;
             $450 = (($449) + 424|0);
             $451 = (($450) + 6|0);
             $452 = HEAP16[$451>>1]|0;
             $453 = $452&65535;
             $454 = ($453|0)!=(0);
             if ($454) {
              $455 = $tif;
              $456 = (($455) + 628|0);
              $457 = HEAP32[$456>>2]|0;
              $458 = $1;
              $459 = $tif;
              $460 = (($459) + 424|0);
              $461 = (($460) + 6|0);
              $462 = HEAP16[$461>>1]|0;
              $463 = $462&65535;
              $464 = $tif;
              $465 = (($464) + 424|0);
              $466 = (($465) + 6|0);
              $467 = HEAP16[$466>>1]|0;
              $468 = $467&65535;
              HEAP32[$vararg_buffer21>>2] = $463;
              $vararg_ptr24 = (($vararg_buffer21) + 4|0);
              HEAP32[$vararg_ptr24>>2] = $468;
              _TIFFErrorExt($457,$458,17776,$vararg_buffer21);
              break L67;
             } else {
              $469 = $tif;
              $470 = (($469) + 440|0);
              HEAP16[$470>>1] = 16;
              $471 = $tif;
              $472 = (($471) + 12|0);
              $473 = HEAP32[$472>>2]|0;
              $474 = $473 | 524288;
              HEAP32[$472>>2] = $474;
              break;
             }
            }
           } while(0);
           $475 = $tif;
           $476 = (($475) + 12|0);
           $477 = HEAP32[$476>>2]|0;
           $478 = $477 | 512;
           HEAP32[$476>>2] = $478;
           $479 = $tif;
           $480 = (($479) + 588|0);
           HEAP32[$480>>2] = 0;
           $481 = $tif;
           $482 = (($481) + 604|0);
           HEAP32[$482>>2] = 0;
           $483 = $tif;
           $484 = (($483) + 592|0);
           HEAP32[$484>>2] = 0;
           $485 = $tif;
           $486 = (($485) + 596|0);
           HEAP32[$486>>2] = 0;
           $487 = $tif;
           $488 = (($487) + 600|0);
           HEAP32[$488>>2] = 0;
           $489 = $2;
           $490 = HEAP8[$489>>0]|0;
           $491 = $490 << 24 >> 24;
           if ((($491|0) == 97)) {
            $579 = $tif;
            $580 = (_TIFFDefaultDirectory($579)|0);
            $581 = ($580|0)!=(0);
            if (!($581)) {
             break;
            }
            $582 = $tif;
            $0 = $582;
            $586 = $0;
            STACKTOP = sp;return ($586|0);
           } else if ((($491|0) == 114)) {
            label = 97;
           }
           do {
            if ((label|0) == 97) {
             $492 = $tif;
             $493 = (($492) + 12|0);
             $494 = HEAP32[$493>>2]|0;
             $495 = $494 & 524288;
             $496 = ($495|0)!=(0);
             if ($496) {
              $507 = $tif;
              $508 = (($507) + 424|0);
              $509 = (($508) + 8|0);
              $510 = $509;
              $511 = $510;
              $512 = HEAP32[$511>>2]|0;
              $513 = (($510) + 4)|0;
              $514 = $513;
              $515 = HEAP32[$514>>2]|0;
              $516 = $tif;
              $517 = (($516) + 24|0);
              $518 = $517;
              $519 = $518;
              HEAP32[$519>>2] = $512;
              $520 = (($518) + 4)|0;
              $521 = $520;
              HEAP32[$521>>2] = $515;
             } else {
              $497 = $tif;
              $498 = (($497) + 424|0);
              $499 = (($498) + 4|0);
              $500 = HEAP32[$499>>2]|0;
              $501 = $tif;
              $502 = (($501) + 24|0);
              $503 = $502;
              $504 = $503;
              HEAP32[$504>>2] = $500;
              $505 = (($503) + 4)|0;
              $506 = $505;
              HEAP32[$506>>2] = 0;
             }
             $522 = $tif;
             $523 = (($522) + 12|0);
             $524 = HEAP32[$523>>2]|0;
             $525 = $524 & 2048;
             $526 = ($525|0)!=(0);
             if ($526) {
              $527 = $tif;
              $528 = (($527) + 620|0);
              $529 = HEAP32[$528>>2]|0;
              $530 = $tif;
              $531 = (($530) + 628|0);
              $532 = HEAP32[$531>>2]|0;
              $533 = $tif;
              $534 = (($533) + 612|0);
              $535 = (FUNCTION_TABLE_iiii[$529 & 255]($532,$534,$n1)|0);
              $536 = ($535|0)!=(0);
              do {
               if ($536) {
                $537 = $n1;
                $538 = $537;
                $539 = HEAP32[$538>>2]|0;
                $540 = (($537) + 4)|0;
                $541 = $540;
                $542 = HEAP32[$541>>2]|0;
                $543 = $tif;
                $544 = (($543) + 616|0);
                HEAP32[$544>>2] = $539;
                $545 = $tif;
                $546 = (($545) + 616|0);
                $547 = HEAP32[$546>>2]|0;
                $548 = ($547|0)<(0);
                $549 = $548 << 31 >> 31;
                $550 = $n1;
                $551 = $550;
                $552 = HEAP32[$551>>2]|0;
                $553 = (($550) + 4)|0;
                $554 = $553;
                $555 = HEAP32[$554>>2]|0;
                $556 = ($547|0)==($552|0);
                $557 = ($549|0)==($555|0);
                $558 = $556 & $557;
                if ($558) {
                 break;
                } else {
                 ___assert_fail((17824|0),(17440|0),449,(17456|0));
                 // unreachable;
                }
               } else {
                $559 = $tif;
                $560 = (($559) + 12|0);
                $561 = HEAP32[$560>>2]|0;
                $562 = $561 & -2049;
                HEAP32[$560>>2] = $562;
               }
              } while(0);
             }
             $563 = $tif;
             $564 = (($563) + 12|0);
             $565 = HEAP32[$564>>2]|0;
             $566 = $565 & 65536;
             $567 = ($566|0)!=(0);
             if ($567) {
              $568 = $tif;
              $0 = $568;
              $586 = $0;
              STACKTOP = sp;return ($586|0);
             }
             $569 = $tif;
             $570 = (_TIFFReadDirectory($569)|0);
             $571 = ($570|0)!=(0);
             if (!($571)) {
              break;
             }
             $572 = $tif;
             $573 = (($572) + 608|0);
             HEAP32[$573>>2] = -1;
             $574 = $tif;
             $575 = (($574) + 12|0);
             $576 = HEAP32[$575>>2]|0;
             $577 = $576 | 16;
             HEAP32[$575>>2] = $577;
             $578 = $tif;
             $0 = $578;
             $586 = $0;
             STACKTOP = sp;return ($586|0);
            }
           } while(0);
          } else {
           label = 54;
          }
         }
        } while(0);
        do {
         if ((label|0) == 54) {
          $196 = $tif;
          $197 = (($196) + 8|0);
          $198 = HEAP32[$197>>2]|0;
          $199 = ($198|0)==(0);
          if ($199) {
           $200 = $tif;
           $201 = (($200) + 628|0);
           $202 = HEAP32[$201>>2]|0;
           $203 = $1;
           _TIFFErrorExt($202,$203,17560,$vararg_buffer3);
           break;
          }
          $204 = $tif;
          $205 = (($204) + 12|0);
          $206 = HEAP32[$205>>2]|0;
          $207 = $206 & 128;
          $208 = ($207|0)!=(0);
          $209 = $208 ? 19789 : 18761;
          $210 = $209&65535;
          $211 = $tif;
          $212 = (($211) + 424|0);
          HEAP16[$212>>1] = $210;
          $213 = $tif;
          $214 = (($213) + 12|0);
          $215 = HEAP32[$214>>2]|0;
          $216 = $215 & 524288;
          $217 = ($216|0)!=(0);
          if ($217) {
           $234 = $tif;
           $235 = (($234) + 424|0);
           $236 = (($235) + 2|0);
           HEAP16[$236>>1] = 43;
           $237 = $tif;
           $238 = (($237) + 424|0);
           $239 = (($238) + 4|0);
           HEAP16[$239>>1] = 8;
           $240 = $tif;
           $241 = (($240) + 424|0);
           $242 = (($241) + 6|0);
           HEAP16[$242>>1] = 0;
           $243 = $tif;
           $244 = (($243) + 424|0);
           $245 = (($244) + 8|0);
           $246 = $245;
           $247 = $246;
           HEAP32[$247>>2] = 0;
           $248 = (($246) + 4)|0;
           $249 = $248;
           HEAP32[$249>>2] = 0;
           $250 = $tif;
           $251 = (($250) + 12|0);
           $252 = HEAP32[$251>>2]|0;
           $253 = $252 & 128;
           $254 = ($253|0)!=(0);
           if ($254) {
            $255 = $tif;
            $256 = (($255) + 424|0);
            $257 = (($256) + 2|0);
            _TIFFSwabShort($257);
            $258 = $tif;
            $259 = (($258) + 424|0);
            $260 = (($259) + 4|0);
            _TIFFSwabShort($260);
           }
           $261 = $tif;
           $262 = (($261) + 440|0);
           HEAP16[$262>>1] = 16;
          } else {
           $218 = $tif;
           $219 = (($218) + 424|0);
           $220 = (($219) + 2|0);
           HEAP16[$220>>1] = 42;
           $221 = $tif;
           $222 = (($221) + 424|0);
           $223 = (($222) + 4|0);
           HEAP32[$223>>2] = 0;
           $224 = $tif;
           $225 = (($224) + 12|0);
           $226 = HEAP32[$225>>2]|0;
           $227 = $226 & 128;
           $228 = ($227|0)!=(0);
           if ($228) {
            $229 = $tif;
            $230 = (($229) + 424|0);
            $231 = (($230) + 2|0);
            _TIFFSwabShort($231);
           }
           $232 = $tif;
           $233 = (($232) + 440|0);
           HEAP16[$233>>1] = 8;
          }
          $263 = $tif;
          $264 = (($263) + 640|0);
          $265 = HEAP32[$264>>2]|0;
          $266 = $tif;
          $267 = (($266) + 628|0);
          $268 = HEAP32[$267>>2]|0;
          (FUNCTION_TABLE_iiiii[$265 & 255]($268,0,0,0)|0);
          $269 = tempRet0;
          $270 = $tif;
          $271 = (($270) + 636|0);
          $272 = HEAP32[$271>>2]|0;
          $273 = $tif;
          $274 = (($273) + 628|0);
          $275 = HEAP32[$274>>2]|0;
          $276 = $tif;
          $277 = (($276) + 424|0);
          $278 = $tif;
          $279 = (($278) + 440|0);
          $280 = HEAP16[$279>>1]|0;
          $281 = $280&65535;
          $282 = (FUNCTION_TABLE_iiii[$272 & 255]($275,$277,$281)|0);
          $283 = $tif;
          $284 = (($283) + 440|0);
          $285 = HEAP16[$284>>1]|0;
          $286 = $285&65535;
          $287 = ($282|0)==($286|0);
          if (!($287)) {
           $288 = $tif;
           $289 = (($288) + 628|0);
           $290 = HEAP32[$289>>2]|0;
           $291 = $1;
           _TIFFErrorExt($290,$291,17584,$vararg_buffer5);
           break;
          }
          $292 = $tif;
          $293 = (($292) + 424|0);
          $294 = HEAP16[$293>>1]|0;
          $295 = $294&65535;
          $296 = ($295|0)==(19789);
          if ($296) {
           $297 = $tif;
           $298 = (($297) + 12|0);
           $299 = HEAP32[$298>>2]|0;
           $300 = $299 | 128;
           HEAP32[$298>>2] = $300;
          } else {
          }
          $301 = $tif;
          $302 = (_TIFFDefaultDirectory($301)|0);
          $303 = ($302|0)!=(0);
          if (!($303)) {
           break;
          }
          $304 = $tif;
          $305 = (($304) + 16|0);
          $306 = $305;
          $307 = $306;
          HEAP32[$307>>2] = 0;
          $308 = (($306) + 4)|0;
          $309 = $308;
          HEAP32[$309>>2] = 0;
          $310 = $tif;
          $311 = (($310) + 32|0);
          HEAP32[$311>>2] = 0;
          $312 = $tif;
          $313 = (($312) + 36|0);
          HEAP16[$313>>1] = 0;
          $314 = $tif;
          $315 = (($314) + 38|0);
          HEAP16[$315>>1] = 0;
          $316 = $tif;
          $0 = $316;
          $586 = $0;
          STACKTOP = sp;return ($586|0);
         }
        } while(0);
        $583 = $tif;
        $584 = (($583) + 8|0);
        HEAP32[$584>>2] = 0;
        $585 = $tif;
        _TIFFCleanup($585);
        break;
       }
      }
     }
    }
   }
   $64 = $3;
   _TIFFErrorExt($64,17408,17512,$vararg_buffer1);
  }
 } while(0);
 $0 = 0;
 $586 = $0;
 STACKTOP = sp;return ($586|0);
}
function _TIFFFileName($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _TIFFIsTiled($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1024;
 $5 = ($4|0)!=(0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function __tiffDummyMapProc($fd,$pbase,$psize) {
 $fd = $fd|0;
 $pbase = $pbase|0;
 $psize = $psize|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fd;
 $1 = $pbase;
 $2 = $psize;
 STACKTOP = sp;return 0;
}
function __tiffDummyUnmapProc($fd,$base,$0,$1) {
 $fd = $fd|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $2 = $fd;
 $3 = $base;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 STACKTOP = sp;return;
}
function _TIFFReadEncodedStrip($tif,$strip,$buf,$size) {
 $tif = $tif|0;
 $strip = $strip|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $plane = 0, $rows = 0, $rowsperstrip = 0, $stripinplane = 0, $stripsize = 0, $stripsperplane = 0, $td = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $strip;
 $3 = $buf;
 $4 = $size;
 $5 = $1;
 $6 = (($5) + 40|0);
 $td = $6;
 $7 = $1;
 $8 = (_TIFFCheckRead($7,0)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $0 = -1;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 $10 = $2;
 $11 = $td;
 $12 = (($11) + 128|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10>>>0)>=($13>>>0);
 if ($14) {
  $15 = $1;
  $16 = (($15) + 628|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  $19 = $td;
  $20 = (($19) + 128|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $21;
  _TIFFErrorExt($17,17856,17880,$vararg_buffer);
  $0 = -1;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 $22 = $td;
 $23 = (($22) + 60|0);
 $24 = HEAP32[$23>>2]|0;
 $rowsperstrip = $24;
 $25 = $rowsperstrip;
 $26 = $td;
 $27 = (($26) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($25>>>0)>($28>>>0);
 if ($29) {
  $30 = $td;
  $31 = (($30) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $rowsperstrip = $32;
 }
 $33 = $td;
 $34 = (($33) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $rowsperstrip;
 $37 = (($35) + ($36))|0;
 $38 = (($37) - 1)|0;
 $39 = $rowsperstrip;
 $40 = (($38>>>0) / ($39>>>0))&-1;
 $stripsperplane = $40;
 $41 = $2;
 $42 = $stripsperplane;
 $43 = (($41>>>0) % ($42>>>0))&-1;
 $stripinplane = $43;
 $44 = $2;
 $45 = $stripsperplane;
 $46 = (($44>>>0) / ($45>>>0))&-1;
 $47 = $46&65535;
 $plane = $47;
 $48 = $td;
 $49 = (($48) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $stripinplane;
 $52 = $rowsperstrip;
 $53 = Math_imul($51, $52)|0;
 $54 = (($50) - ($53))|0;
 $rows = $54;
 $55 = $rows;
 $56 = $rowsperstrip;
 $57 = ($55>>>0)>($56>>>0);
 if ($57) {
  $58 = $rowsperstrip;
  $rows = $58;
 }
 $59 = $1;
 $60 = $rows;
 $61 = (_TIFFVStripSize($59,$60)|0);
 $stripsize = $61;
 $62 = $stripsize;
 $63 = ($62|0)==(0);
 if ($63) {
  $0 = -1;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 $64 = $4;
 $65 = ($64|0)!=(-1);
 if ($65) {
  $66 = $4;
  $67 = $stripsize;
  $68 = ($66|0)<($67|0);
  if ($68) {
   $69 = $4;
   $stripsize = $69;
  }
 }
 $70 = $1;
 $71 = $2;
 $72 = (_TIFFFillStrip($70,$71)|0);
 $73 = ($72|0)!=(0);
 if (!($73)) {
  $0 = -1;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 $74 = $1;
 $75 = (($74) + 540|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $1;
 $78 = $3;
 $79 = $stripsize;
 $80 = $plane;
 $81 = (FUNCTION_TABLE_iiiii[$76 & 255]($77,$78,$79,$80)|0);
 $82 = ($81|0)<=(0);
 if ($82) {
  $0 = -1;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 } else {
  $83 = $1;
  $84 = (($83) + 652|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $1;
  $87 = $3;
  $88 = $stripsize;
  FUNCTION_TABLE_viii[$85 & 255]($86,$87,$88);
  $89 = $stripsize;
  $0 = $89;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 return (0)|0;
}
function _TIFFFillStrip($tif,$strip) {
 $tif = $tif|0;
 $strip = $strip|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytecount = 0, $bytecountm = 0, $td = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 40|0;
 $vararg_buffer = sp + 8|0;
 $bytecount = sp + 32|0;
 $1 = $tif;
 $2 = $strip;
 $3 = $1;
 $4 = (($3) + 40|0);
 $td = $4;
 $5 = $1;
 $6 = (__TIFFFillStriles($5)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = (($8) + 40|0);
  $10 = (($9) + 136|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 131072;
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = $2;
    $19 = $td;
    $20 = (($19) + 136|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + ($18<<3)|0);
    $23 = $22;
    $24 = $23;
    $25 = HEAP32[$24>>2]|0;
    $26 = (($23) + 4)|0;
    $27 = $26;
    $28 = HEAP32[$27>>2]|0;
    $29 = $bytecount;
    $30 = $29;
    HEAP32[$30>>2] = $25;
    $31 = (($29) + 4)|0;
    $32 = $31;
    HEAP32[$32>>2] = $28;
    $33 = $bytecount;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = (($33) + 4)|0;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38>>>0)<(0);
    $40 = ($35>>>0)<=(0);
    $41 = ($38|0)==(0);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $44 = $1;
     $45 = (($44) + 628|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $bytecount;
     $48 = $47;
     $49 = HEAP32[$48>>2]|0;
     $50 = (($47) + 4)|0;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $53 = $2;
     $54 = $vararg_buffer;
     $55 = $54;
     HEAP32[$55>>2] = $49;
     $56 = (($54) + 4)|0;
     $57 = $56;
     HEAP32[$57>>2] = $52;
     $vararg_ptr1 = (($vararg_buffer) + 8|0);
     HEAP32[$vararg_ptr1>>2] = $53;
     _TIFFErrorExt($46,17944,17960,$vararg_buffer);
     $0 = 0;
     $306 = $0;
     STACKTOP = sp;return ($306|0);
    }
    $58 = $1;
    $59 = (($58) + 12|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $60 & 2048;
    $62 = ($61|0)!=(0);
    do {
     if ($62) {
      $63 = $1;
      $64 = (($63) + 12|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = $td;
      $67 = (($66) + 54|0);
      $68 = HEAP16[$67>>1]|0;
      $69 = $68&65535;
      $70 = $65 & $69;
      $71 = ($70|0)!=(0);
      if (!($71)) {
       $72 = $1;
       $73 = (($72) + 12|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = $74 & 256;
       $76 = ($75|0)!=(0);
       if (!($76)) {
        label = 17;
        break;
       }
      }
      $77 = $1;
      $78 = (($77) + 12|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = $79 & 512;
      $81 = ($80|0)!=(0);
      if ($81) {
       $82 = $1;
       $83 = (($82) + 588|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($84|0)!=(0|0);
       if ($85) {
        $86 = $1;
        $87 = (($86) + 588|0);
        $88 = HEAP32[$87>>2]|0;
        __TIFFfree($88);
        $89 = $1;
        $90 = (($89) + 588|0);
        HEAP32[$90>>2] = 0;
        $91 = $1;
        $92 = (($91) + 592|0);
        HEAP32[$92>>2] = 0;
       }
      }
      $93 = $1;
      $94 = (($93) + 12|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = $95 & -513;
      HEAP32[$94>>2] = $96;
      $97 = $bytecount;
      $98 = $97;
      $99 = HEAP32[$98>>2]|0;
      $100 = (($97) + 4)|0;
      $101 = $100;
      $102 = HEAP32[$101>>2]|0;
      $103 = $1;
      $104 = (($103) + 616|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ($105|0)<(0);
      $107 = $106 << 31 >> 31;
      $108 = ($102>>>0)>($107>>>0);
      $109 = ($99>>>0)>($105>>>0);
      $110 = ($102|0)==($107|0);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if (!($112)) {
       $113 = $2;
       $114 = $td;
       $115 = (($114) + 132|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = (($116) + ($113<<3)|0);
       $118 = $117;
       $119 = $118;
       $120 = HEAP32[$119>>2]|0;
       $121 = (($118) + 4)|0;
       $122 = $121;
       $123 = HEAP32[$122>>2]|0;
       $124 = $1;
       $125 = (($124) + 616|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = ($126|0)<(0);
       $128 = $127 << 31 >> 31;
       $129 = $bytecount;
       $130 = $129;
       $131 = HEAP32[$130>>2]|0;
       $132 = (($129) + 4)|0;
       $133 = $132;
       $134 = HEAP32[$133>>2]|0;
       $135 = (_i64Subtract(($126|0),($128|0),($131|0),($134|0))|0);
       $136 = tempRet0;
       $137 = ($123>>>0)>($136>>>0);
       $138 = ($120>>>0)>($135>>>0);
       $139 = ($123|0)==($136|0);
       $140 = $139 & $138;
       $141 = $137 | $140;
       if (!($141)) {
        $180 = $bytecount;
        $181 = $180;
        $182 = HEAP32[$181>>2]|0;
        $183 = (($180) + 4)|0;
        $184 = $183;
        $185 = HEAP32[$184>>2]|0;
        $186 = $1;
        $187 = (($186) + 592|0);
        HEAP32[$187>>2] = $182;
        $188 = $1;
        $189 = (($188) + 612|0);
        $190 = HEAP32[$189>>2]|0;
        $191 = $2;
        $192 = $td;
        $193 = (($192) + 132|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = (($194) + ($191<<3)|0);
        $196 = $195;
        $197 = $196;
        $198 = HEAP32[$197>>2]|0;
        $199 = (($196) + 4)|0;
        $200 = $199;
        $201 = HEAP32[$200>>2]|0;
        $202 = (($190) + ($198)|0);
        $203 = $1;
        $204 = (($203) + 588|0);
        HEAP32[$204>>2] = $202;
        $205 = $1;
        $206 = (($205) + 596|0);
        HEAP32[$206>>2] = 0;
        $207 = $bytecount;
        $208 = $207;
        $209 = HEAP32[$208>>2]|0;
        $210 = (($207) + 4)|0;
        $211 = $210;
        $212 = HEAP32[$211>>2]|0;
        $213 = $1;
        $214 = (($213) + 600|0);
        HEAP32[$214>>2] = $209;
        $215 = $1;
        $216 = (($215) + 12|0);
        $217 = HEAP32[$216>>2]|0;
        $218 = $217 | 8388608;
        HEAP32[$216>>2] = $218;
        break;
       }
      }
      $142 = $1;
      $143 = (($142) + 628|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = $2;
      $146 = $1;
      $147 = (($146) + 616|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)<(0);
      $150 = $149 << 31 >> 31;
      $151 = $2;
      $152 = $td;
      $153 = (($152) + 132|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = (($154) + ($151<<3)|0);
      $156 = $155;
      $157 = $156;
      $158 = HEAP32[$157>>2]|0;
      $159 = (($156) + 4)|0;
      $160 = $159;
      $161 = HEAP32[$160>>2]|0;
      $162 = (_i64Subtract(($148|0),($150|0),($158|0),($161|0))|0);
      $163 = tempRet0;
      $164 = $bytecount;
      $165 = $164;
      $166 = HEAP32[$165>>2]|0;
      $167 = (($164) + 4)|0;
      $168 = $167;
      $169 = HEAP32[$168>>2]|0;
      HEAP32[$vararg_buffer2>>2] = $145;
      $vararg_ptr5 = (($vararg_buffer2) + 4|0);
      $170 = $vararg_ptr5;
      $171 = $170;
      HEAP32[$171>>2] = $162;
      $172 = (($170) + 4)|0;
      $173 = $172;
      HEAP32[$173>>2] = $163;
      $vararg_ptr6 = (($vararg_buffer2) + 12|0);
      $174 = $vararg_ptr6;
      $175 = $174;
      HEAP32[$175>>2] = $166;
      $176 = (($174) + 4)|0;
      $177 = $176;
      HEAP32[$177>>2] = $169;
      _TIFFErrorExt($144,17944,18008,$vararg_buffer2);
      $178 = $1;
      $179 = (($178) + 452|0);
      HEAP32[$179>>2] = -1;
      $0 = 0;
      $306 = $0;
      STACKTOP = sp;return ($306|0);
     } else {
      label = 17;
     }
    } while(0);
    if ((label|0) == 17) {
     $219 = $bytecount;
     $220 = $219;
     $221 = HEAP32[$220>>2]|0;
     $222 = (($219) + 4)|0;
     $223 = $222;
     $224 = HEAP32[$223>>2]|0;
     $bytecountm = $221;
     $225 = $bytecountm;
     $226 = ($225|0)<(0);
     $227 = $226 << 31 >> 31;
     $228 = $bytecount;
     $229 = $228;
     $230 = HEAP32[$229>>2]|0;
     $231 = (($228) + 4)|0;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = ($225|0)!=($230|0);
     $235 = ($227|0)!=($233|0);
     $236 = $234 | $235;
     if ($236) {
      $237 = $1;
      $238 = (($237) + 628|0);
      $239 = HEAP32[$238>>2]|0;
      _TIFFErrorExt($239,17944,17920,$vararg_buffer7);
      $0 = 0;
      $306 = $0;
      STACKTOP = sp;return ($306|0);
     }
     $240 = $bytecountm;
     $241 = $1;
     $242 = (($241) + 592|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = ($240|0)>($243|0);
     do {
      if ($244) {
       $245 = $1;
       $246 = (($245) + 452|0);
       HEAP32[$246>>2] = -1;
       $247 = $1;
       $248 = (($247) + 12|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = $249 & 512;
       $251 = ($250|0)==(0);
       if ($251) {
        $252 = $1;
        $253 = (($252) + 628|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = $2;
        HEAP32[$vararg_buffer9>>2] = $255;
        _TIFFErrorExt($254,17944,18064,$vararg_buffer9);
        $0 = 0;
        $306 = $0;
        STACKTOP = sp;return ($306|0);
       }
       $256 = $1;
       $257 = $bytecountm;
       $258 = (_TIFFReadBufferSetup($256,0,$257)|0);
       $259 = ($258|0)!=(0);
       if ($259) {
        break;
       }
       $0 = 0;
       $306 = $0;
       STACKTOP = sp;return ($306|0);
      }
     } while(0);
     $260 = $1;
     $261 = (($260) + 12|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = $262 & 8388608;
     $264 = ($263|0)!=(0);
     do {
      if ($264) {
       $265 = $1;
       $266 = (($265) + 452|0);
       HEAP32[$266>>2] = -1;
       $267 = $1;
       $268 = $bytecountm;
       $269 = (_TIFFReadBufferSetup($267,0,$268)|0);
       $270 = ($269|0)!=(0);
       if ($270) {
        break;
       }
       $0 = 0;
       $306 = $0;
       STACKTOP = sp;return ($306|0);
      }
     } while(0);
     $271 = $1;
     $272 = $2;
     $273 = $1;
     $274 = (($273) + 588|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = $bytecountm;
     $277 = (_TIFFReadRawStrip1($271,$272,$275,$276,17944)|0);
     $278 = $bytecountm;
     $279 = ($277|0)!=($278|0);
     if ($279) {
      $0 = 0;
      $306 = $0;
      STACKTOP = sp;return ($306|0);
     }
     $280 = $1;
     $281 = (($280) + 596|0);
     HEAP32[$281>>2] = 0;
     $282 = $bytecountm;
     $283 = $1;
     $284 = (($283) + 600|0);
     HEAP32[$284>>2] = $282;
     $285 = $1;
     $286 = (($285) + 12|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = $td;
     $289 = (($288) + 54|0);
     $290 = HEAP16[$289>>1]|0;
     $291 = $290&65535;
     $292 = $287 & $291;
     $293 = ($292|0)!=(0);
     if (!($293)) {
      $294 = $1;
      $295 = (($294) + 12|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = $296 & 256;
      $298 = ($297|0)==(0);
      if ($298) {
       $299 = $1;
       $300 = (($299) + 588|0);
       $301 = HEAP32[$300>>2]|0;
       $302 = $bytecountm;
       _TIFFReverseBits($301,$302);
      }
     }
    }
   }
   $303 = $1;
   $304 = $2;
   $305 = (_TIFFStartStrip($303,$304)|0);
   $0 = $305;
   $306 = $0;
   STACKTOP = sp;return ($306|0);
  }
 }
 $0 = 0;
 $306 = $0;
 STACKTOP = sp;return ($306|0);
}
function _TIFFReadBufferSetup($tif,$bp,$size) {
 $tif = $tif|0;
 $bp = $bp|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $bp;
 $3 = $size;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 131072;
 $8 = ($7|0)==(0);
 if (!($8)) {
  ___assert_fail((18280|0),(18320|0),918,(18336|0));
  // unreachable;
 }
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & -8388609;
 HEAP32[$10>>2] = $12;
 $13 = $1;
 $14 = (($13) + 588|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $1;
  $18 = (($17) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 512;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $1;
   $23 = (($22) + 588|0);
   $24 = HEAP32[$23>>2]|0;
   __TIFFfree($24);
  }
  $25 = $1;
  $26 = (($25) + 588|0);
  HEAP32[$26>>2] = 0;
  $27 = $1;
  $28 = (($27) + 592|0);
  HEAP32[$28>>2] = 0;
 }
 $29 = $2;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $3;
  $32 = $1;
  $33 = (($32) + 592|0);
  HEAP32[$33>>2] = $31;
  $34 = $2;
  $35 = $1;
  $36 = (($35) + 588|0);
  HEAP32[$36>>2] = $34;
  $37 = $1;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $39 & -513;
  HEAP32[$38>>2] = $40;
 } else {
  $41 = $3;
  $42 = ($41|0)<(0);
  $43 = $42 << 31 >> 31;
  $44 = (_i64Add(($41|0),($43|0),1023,0)|0);
  $45 = tempRet0;
  $46 = (___udivdi3(($44|0),($45|0),1024,0)|0);
  $47 = tempRet0;
  $48 = (___muldi3(($46|0),($47|0),1024,0)|0);
  $49 = tempRet0;
  $50 = $1;
  $51 = (($50) + 592|0);
  HEAP32[$51>>2] = $48;
  $52 = $1;
  $53 = (($52) + 592|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0);
  if ($55) {
   $56 = $1;
   $57 = (($56) + 592|0);
   HEAP32[$57>>2] = -1;
  }
  $58 = $1;
  $59 = (($58) + 592|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (__TIFFmalloc($60)|0);
  $62 = $1;
  $63 = (($62) + 588|0);
  HEAP32[$63>>2] = $61;
  $64 = $1;
  $65 = (($64) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 | 512;
  HEAP32[$65>>2] = $67;
 }
 $68 = $1;
 $69 = (($68) + 588|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)==(0|0);
 if ($71) {
  $72 = $1;
  $73 = (($72) + 628|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $1;
  $76 = (($75) + 444|0);
  $77 = HEAP32[$76>>2]|0;
  HEAP32[$vararg_buffer>>2] = $77;
  _TIFFErrorExt($74,18256,18360,$vararg_buffer);
  $78 = $1;
  $79 = (($78) + 592|0);
  HEAP32[$79>>2] = 0;
  $0 = 0;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 } else {
  $0 = 1;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 return (0)|0;
}
function _TIFFReadTile($tif,$buf,$x,$y,$z,$s) {
 $tif = $tif|0;
 $buf = $buf|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $buf;
 $3 = $x;
 $4 = $y;
 $5 = $z;
 $6 = $s;
 $7 = $1;
 $8 = (_TIFFCheckRead($7,1)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $1;
  $11 = $3;
  $12 = $4;
  $13 = $5;
  $14 = $6;
  $15 = (_TIFFCheckTile($10,$11,$12,$13,$14)|0);
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $1;
   $18 = $1;
   $19 = $3;
   $20 = $4;
   $21 = $5;
   $22 = $6;
   $23 = (_TIFFComputeTile($18,$19,$20,$21,$22)|0);
   $24 = $2;
   $25 = (_TIFFReadEncodedTile($17,$23,$24,-1)|0);
   $0 = $25;
   $26 = $0;
   STACKTOP = sp;return ($26|0);
  }
 }
 $0 = -1;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _TIFFReadEncodedTile($tif,$tile,$buf,$size) {
 $tif = $tif|0;
 $tile = $tile|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $td = 0, $tilesize = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $tile;
 $3 = $buf;
 $4 = $size;
 $5 = $1;
 $6 = (($5) + 40|0);
 $td = $6;
 $7 = $1;
 $8 = (($7) + 496|0);
 $9 = HEAP32[$8>>2]|0;
 $tilesize = $9;
 $10 = $1;
 $11 = (_TIFFCheckRead($10,1)|0);
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $0 = -1;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $13 = $2;
 $14 = $td;
 $15 = (($14) + 128|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13>>>0)>=($16>>>0);
 if ($17) {
  $18 = $1;
  $19 = (($18) + 628|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = $td;
  $23 = (($22) + 128|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer>>2] = $21;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  _TIFFErrorExt($20,18104,18128,$vararg_buffer);
  $0 = -1;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $25 = $4;
 $26 = ($25|0)==(-1);
 if ($26) {
  $27 = $tilesize;
  $4 = $27;
 } else {
  $28 = $4;
  $29 = $tilesize;
  $30 = ($28|0)>($29|0);
  if ($30) {
   $31 = $tilesize;
   $4 = $31;
  }
 }
 $32 = $1;
 $33 = $2;
 $34 = (_TIFFFillTile($32,$33)|0);
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $1;
  $37 = (($36) + 548|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $1;
  $40 = $3;
  $41 = $4;
  $42 = $2;
  $43 = $td;
  $44 = (($43) + 124|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($42>>>0) / ($45>>>0))&-1;
  $47 = $46&65535;
  $48 = (FUNCTION_TABLE_iiiii[$38 & 255]($39,$40,$41,$47)|0);
  $49 = ($48|0)!=(0);
  if ($49) {
   $50 = $1;
   $51 = (($50) + 652|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $1;
   $54 = $3;
   $55 = $4;
   FUNCTION_TABLE_viii[$52 & 255]($53,$54,$55);
   $56 = $4;
   $0 = $56;
   $57 = $0;
   STACKTOP = sp;return ($57|0);
  }
 }
 $0 = -1;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function _TIFFFillTile($tif,$tile) {
 $tif = $tif|0;
 $tile = $tile|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytecount = 0, $bytecountm = 0, $td = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 24|0;
 $bytecount = sp + 16|0;
 $1 = $tif;
 $2 = $tile;
 $3 = $1;
 $4 = (($3) + 40|0);
 $td = $4;
 $5 = $1;
 $6 = (__TIFFFillStriles($5)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = (($8) + 40|0);
  $10 = (($9) + 136|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 131072;
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = $2;
    $19 = $td;
    $20 = (($19) + 136|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + ($18<<3)|0);
    $23 = $22;
    $24 = $23;
    $25 = HEAP32[$24>>2]|0;
    $26 = (($23) + 4)|0;
    $27 = $26;
    $28 = HEAP32[$27>>2]|0;
    $29 = $bytecount;
    $30 = $29;
    HEAP32[$30>>2] = $25;
    $31 = (($29) + 4)|0;
    $32 = $31;
    HEAP32[$32>>2] = $28;
    $33 = $bytecount;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = (($33) + 4)|0;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38>>>0)<(0);
    $40 = ($35>>>0)<=(0);
    $41 = ($38|0)==(0);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $44 = $1;
     $45 = (($44) + 628|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $bytecount;
     $48 = $47;
     $49 = HEAP32[$48>>2]|0;
     $50 = (($47) + 4)|0;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $53 = $2;
     $54 = $vararg_buffer;
     $55 = $54;
     HEAP32[$55>>2] = $49;
     $56 = (($54) + 4)|0;
     $57 = $56;
     HEAP32[$57>>2] = $52;
     $vararg_ptr1 = (($vararg_buffer) + 8|0);
     HEAP32[$vararg_ptr1>>2] = $53;
     _TIFFErrorExt($46,18160,18176,$vararg_buffer);
     $0 = 0;
     $272 = $0;
     STACKTOP = sp;return ($272|0);
    }
    $58 = $1;
    $59 = (($58) + 12|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $60 & 2048;
    $62 = ($61|0)!=(0);
    do {
     if ($62) {
      $63 = $1;
      $64 = (($63) + 12|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = $td;
      $67 = (($66) + 54|0);
      $68 = HEAP16[$67>>1]|0;
      $69 = $68&65535;
      $70 = $65 & $69;
      $71 = ($70|0)!=(0);
      if (!($71)) {
       $72 = $1;
       $73 = (($72) + 12|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = $74 & 256;
       $76 = ($75|0)!=(0);
       if (!($76)) {
        label = 17;
        break;
       }
      }
      $77 = $1;
      $78 = (($77) + 12|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = $79 & 512;
      $81 = ($80|0)!=(0);
      if ($81) {
       $82 = $1;
       $83 = (($82) + 588|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($84|0)!=(0|0);
       if ($85) {
        $86 = $1;
        $87 = (($86) + 588|0);
        $88 = HEAP32[$87>>2]|0;
        __TIFFfree($88);
        $89 = $1;
        $90 = (($89) + 588|0);
        HEAP32[$90>>2] = 0;
        $91 = $1;
        $92 = (($91) + 592|0);
        HEAP32[$92>>2] = 0;
       }
      }
      $93 = $1;
      $94 = (($93) + 12|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = $95 & -513;
      HEAP32[$94>>2] = $96;
      $97 = $bytecount;
      $98 = $97;
      $99 = HEAP32[$98>>2]|0;
      $100 = (($97) + 4)|0;
      $101 = $100;
      $102 = HEAP32[$101>>2]|0;
      $103 = $1;
      $104 = (($103) + 616|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ($105|0)<(0);
      $107 = $106 << 31 >> 31;
      $108 = ($102>>>0)>($107>>>0);
      $109 = ($99>>>0)>($105>>>0);
      $110 = ($102|0)==($107|0);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if (!($112)) {
       $113 = $2;
       $114 = $td;
       $115 = (($114) + 132|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = (($116) + ($113<<3)|0);
       $118 = $117;
       $119 = $118;
       $120 = HEAP32[$119>>2]|0;
       $121 = (($118) + 4)|0;
       $122 = $121;
       $123 = HEAP32[$122>>2]|0;
       $124 = $1;
       $125 = (($124) + 616|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = ($126|0)<(0);
       $128 = $127 << 31 >> 31;
       $129 = $bytecount;
       $130 = $129;
       $131 = HEAP32[$130>>2]|0;
       $132 = (($129) + 4)|0;
       $133 = $132;
       $134 = HEAP32[$133>>2]|0;
       $135 = (_i64Subtract(($126|0),($128|0),($131|0),($134|0))|0);
       $136 = tempRet0;
       $137 = ($123>>>0)>($136>>>0);
       $138 = ($120>>>0)>($135>>>0);
       $139 = ($123|0)==($136|0);
       $140 = $139 & $138;
       $141 = $137 | $140;
       if (!($141)) {
        $144 = $bytecount;
        $145 = $144;
        $146 = HEAP32[$145>>2]|0;
        $147 = (($144) + 4)|0;
        $148 = $147;
        $149 = HEAP32[$148>>2]|0;
        $150 = $1;
        $151 = (($150) + 592|0);
        HEAP32[$151>>2] = $146;
        $152 = $1;
        $153 = (($152) + 612|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = $2;
        $156 = $td;
        $157 = (($156) + 132|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = (($158) + ($155<<3)|0);
        $160 = $159;
        $161 = $160;
        $162 = HEAP32[$161>>2]|0;
        $163 = (($160) + 4)|0;
        $164 = $163;
        $165 = HEAP32[$164>>2]|0;
        $166 = (($154) + ($162)|0);
        $167 = $1;
        $168 = (($167) + 588|0);
        HEAP32[$168>>2] = $166;
        $169 = $1;
        $170 = (($169) + 596|0);
        HEAP32[$170>>2] = 0;
        $171 = $bytecount;
        $172 = $171;
        $173 = HEAP32[$172>>2]|0;
        $174 = (($171) + 4)|0;
        $175 = $174;
        $176 = HEAP32[$175>>2]|0;
        $177 = $1;
        $178 = (($177) + 600|0);
        HEAP32[$178>>2] = $173;
        $179 = $1;
        $180 = (($179) + 12|0);
        $181 = HEAP32[$180>>2]|0;
        $182 = $181 | 8388608;
        HEAP32[$180>>2] = $182;
        break;
       }
      }
      $142 = $1;
      $143 = (($142) + 492|0);
      HEAP32[$143>>2] = -1;
      $0 = 0;
      $272 = $0;
      STACKTOP = sp;return ($272|0);
     } else {
      label = 17;
     }
    } while(0);
    if ((label|0) == 17) {
     $183 = $bytecount;
     $184 = $183;
     $185 = HEAP32[$184>>2]|0;
     $186 = (($183) + 4)|0;
     $187 = $186;
     $188 = HEAP32[$187>>2]|0;
     $bytecountm = $185;
     $189 = $bytecountm;
     $190 = ($189|0)<(0);
     $191 = $190 << 31 >> 31;
     $192 = $bytecount;
     $193 = $192;
     $194 = HEAP32[$193>>2]|0;
     $195 = (($192) + 4)|0;
     $196 = $195;
     $197 = HEAP32[$196>>2]|0;
     $198 = ($189|0)!=($194|0);
     $199 = ($191|0)!=($197|0);
     $200 = $198 | $199;
     if ($200) {
      $201 = $1;
      $202 = (($201) + 628|0);
      $203 = HEAP32[$202>>2]|0;
      _TIFFErrorExt($203,18160,17920,$vararg_buffer2);
      $0 = 0;
      $272 = $0;
      STACKTOP = sp;return ($272|0);
     }
     $204 = $bytecountm;
     $205 = $1;
     $206 = (($205) + 592|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($204|0)>($207|0);
     do {
      if ($208) {
       $209 = $1;
       $210 = (($209) + 492|0);
       HEAP32[$210>>2] = -1;
       $211 = $1;
       $212 = (($211) + 12|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = $213 & 512;
       $215 = ($214|0)==(0);
       if ($215) {
        $216 = $1;
        $217 = (($216) + 628|0);
        $218 = HEAP32[$217>>2]|0;
        $219 = $2;
        HEAP32[$vararg_buffer4>>2] = $219;
        _TIFFErrorExt($218,18160,18216,$vararg_buffer4);
        $0 = 0;
        $272 = $0;
        STACKTOP = sp;return ($272|0);
       }
       $220 = $1;
       $221 = $bytecountm;
       $222 = (_TIFFReadBufferSetup($220,0,$221)|0);
       $223 = ($222|0)!=(0);
       if ($223) {
        break;
       }
       $0 = 0;
       $272 = $0;
       STACKTOP = sp;return ($272|0);
      }
     } while(0);
     $224 = $1;
     $225 = (($224) + 12|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = $226 & 8388608;
     $228 = ($227|0)!=(0);
     do {
      if ($228) {
       $229 = $1;
       $230 = (($229) + 492|0);
       HEAP32[$230>>2] = -1;
       $231 = $1;
       $232 = $bytecountm;
       $233 = (_TIFFReadBufferSetup($231,0,$232)|0);
       $234 = ($233|0)!=(0);
       if ($234) {
        break;
       }
       $0 = 0;
       $272 = $0;
       STACKTOP = sp;return ($272|0);
      }
     } while(0);
     $235 = $1;
     $236 = $2;
     $237 = $1;
     $238 = (($237) + 588|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = $bytecountm;
     $241 = (_TIFFReadRawTile1($235,$236,$239,$240,18160)|0);
     $242 = $bytecountm;
     $243 = ($241|0)!=($242|0);
     if ($243) {
      $0 = 0;
      $272 = $0;
      STACKTOP = sp;return ($272|0);
     }
     $244 = $1;
     $245 = (($244) + 596|0);
     HEAP32[$245>>2] = 0;
     $246 = $bytecountm;
     $247 = $1;
     $248 = (($247) + 600|0);
     HEAP32[$248>>2] = $246;
     $249 = $1;
     $250 = (($249) + 12|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = $td;
     $253 = (($252) + 54|0);
     $254 = HEAP16[$253>>1]|0;
     $255 = $254&65535;
     $256 = $251 & $255;
     $257 = ($256|0)!=(0);
     if (!($257)) {
      $258 = $1;
      $259 = (($258) + 12|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = $260 & 256;
      $262 = ($261|0)==(0);
      if ($262) {
       $263 = $1;
       $264 = (($263) + 588|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = $1;
       $267 = (($266) + 600|0);
       $268 = HEAP32[$267>>2]|0;
       _TIFFReverseBits($265,$268);
      }
     }
    }
   }
   $269 = $1;
   $270 = $2;
   $271 = (_TIFFStartTile($269,$270)|0);
   $0 = $271;
   $272 = $0;
   STACKTOP = sp;return ($272|0);
  }
 }
 $0 = 0;
 $272 = $0;
 STACKTOP = sp;return ($272|0);
}
function __TIFFNoPostDecode($tif,$buf,$cc) {
 $tif = $tif|0;
 $buf = $buf|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $buf;
 $2 = $cc;
 STACKTOP = sp;return;
}
function __TIFFSwab16BitData($tif,$buf,$cc) {
 $tif = $tif|0;
 $buf = $buf|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $buf;
 $2 = $cc;
 $3 = $2;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $1;
  $7 = $2;
  $8 = (($7|0) / 2)&-1;
  _TIFFSwabArrayOfShort($6,$8);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18408|0),(18320|0),1048,(18424|0));
  // unreachable;
 }
}
function __TIFFSwab24BitData($tif,$buf,$cc) {
 $tif = $tif|0;
 $buf = $buf|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $buf;
 $2 = $cc;
 $3 = $2;
 $4 = (($3|0) % 3)&-1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $1;
  $7 = $2;
  $8 = (($7|0) / 3)&-1;
  _TIFFSwabArrayOfTriples($6,$8);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18448|0),(18320|0),1056,(18464|0));
  // unreachable;
 }
}
function __TIFFSwab32BitData($tif,$buf,$cc) {
 $tif = $tif|0;
 $buf = $buf|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $buf;
 $2 = $cc;
 $3 = $2;
 $4 = $3 & 3;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $1;
  $7 = $2;
  $8 = (($7|0) / 4)&-1;
  _TIFFSwabArrayOfLong($6,$8);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18488|0),(18320|0),1064,(18504|0));
  // unreachable;
 }
}
function __TIFFSwab64BitData($tif,$buf,$cc) {
 $tif = $tif|0;
 $buf = $buf|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $buf;
 $2 = $cc;
 $3 = $2;
 $4 = $3 & 7;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $1;
  $7 = $2;
  $8 = (($7|0) / 8)&-1;
  _TIFFSwabArrayOfDouble($6,$8);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18528|0),(18320|0),1072,(18544|0));
  // unreachable;
 }
}
function _TIFFCheckRead($tif,$tiles) {
 $tif = $tif|0;
 $tiles = $tiles|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $tiles;
 $3 = $1;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 if ($6) {
  $7 = $1;
  $8 = (($7) + 628|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = HEAP32[$10>>2]|0;
  _TIFFErrorExt($9,$11,18568,$vararg_buffer);
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $12 = $2;
 $13 = $1;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 1024;
 $17 = ($16|0)!=(0);
 $18 = $17&1;
 $19 = $12 ^ $18;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $1;
  $22 = (($21) + 628|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  $27 = ($26|0)!=(0);
  $28 = $27 ? 18600 : 18648;
  _TIFFErrorExt($23,$25,$28,$vararg_buffer1);
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 } else {
  $0 = 1;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _TIFFReadRawStrip1($tif,$strip,$buf,$size,$module) {
 $tif = $tif|0;
 $strip = $strip|0;
 $buf = $buf|0;
 $size = $size|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cc = 0, $ma = 0, $mb = 0, $n = 0, $td = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer2 = sp;
 $vararg_buffer = sp + 24|0;
 $1 = $tif;
 $2 = $strip;
 $3 = $buf;
 $4 = $size;
 $5 = $module;
 $6 = $1;
 $7 = (($6) + 40|0);
 $td = $7;
 $8 = $1;
 $9 = (__TIFFFillStriles($8)|0);
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $0 = -1;
  $181 = $0;
  STACKTOP = sp;return ($181|0);
 }
 $11 = $1;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 131072;
 $15 = ($14|0)==(0);
 if (!($15)) {
  ___assert_fail((18280|0),(18320|0),372,(18904|0));
  // unreachable;
 }
 $16 = $1;
 $17 = (($16) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 2048;
 $20 = ($19|0)!=(0);
 do {
  if ($20) {
   $95 = $2;
   $96 = $td;
   $97 = (($96) + 132|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + ($95<<3)|0);
   $100 = $99;
   $101 = $100;
   $102 = HEAP32[$101>>2]|0;
   $103 = (($100) + 4)|0;
   $104 = $103;
   $105 = HEAP32[$104>>2]|0;
   $ma = $102;
   $106 = $ma;
   $107 = $4;
   $108 = (($106) + ($107))|0;
   $mb = $108;
   $109 = $ma;
   $110 = ($109|0)<(0);
   $111 = $110 << 31 >> 31;
   $112 = $2;
   $113 = $td;
   $114 = (($113) + 132|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (($115) + ($112<<3)|0);
   $117 = $116;
   $118 = $117;
   $119 = HEAP32[$118>>2]|0;
   $120 = (($117) + 4)|0;
   $121 = $120;
   $122 = HEAP32[$121>>2]|0;
   $123 = ($109|0)!=($119|0);
   $124 = ($111|0)!=($122|0);
   $125 = $123 | $124;
   if ($125) {
    label = 13;
   } else {
    $126 = $ma;
    $127 = $1;
    $128 = (($127) + 616|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($126|0)>($129|0);
    if ($130) {
     label = 13;
    } else {
     $131 = $mb;
     $132 = $ma;
     $133 = ($131|0)<($132|0);
     if ($133) {
      label = 17;
     } else {
      $134 = $mb;
      $135 = $4;
      $136 = ($134|0)<($135|0);
      if ($136) {
       label = 17;
      } else {
       $137 = $mb;
       $138 = $1;
       $139 = (($138) + 616|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ($137|0)>($140|0);
       if ($141) {
        label = 17;
       } else {
        $147 = $4;
        $n = $147;
       }
      }
     }
     if ((label|0) == 17) {
      $142 = $1;
      $143 = (($142) + 616|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = $ma;
      $146 = (($144) - ($145))|0;
      $n = $146;
     }
    }
   }
   if ((label|0) == 13) {
    $n = 0;
   }
   $148 = $n;
   $149 = $4;
   $150 = ($148|0)!=($149|0);
   if (!($150)) {
    $173 = $3;
    $174 = $1;
    $175 = (($174) + 612|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = $ma;
    $178 = (($176) + ($177)|0);
    $179 = $4;
    __TIFFmemcpy($173,$178,$179);
    break;
   }
   $151 = $1;
   $152 = (($151) + 628|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $5;
   $155 = $1;
   $156 = (($155) + 444|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $2;
   $159 = $n;
   $160 = ($159|0)<(0);
   $161 = $160 << 31 >> 31;
   $162 = $4;
   $163 = ($162|0)<(0);
   $164 = $163 << 31 >> 31;
   HEAP32[$vararg_buffer7>>2] = $157;
   $vararg_ptr10 = (($vararg_buffer7) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $158;
   $vararg_ptr11 = (($vararg_buffer7) + 8|0);
   $165 = $vararg_ptr11;
   $166 = $165;
   HEAP32[$166>>2] = $159;
   $167 = (($165) + 4)|0;
   $168 = $167;
   HEAP32[$168>>2] = $161;
   $vararg_ptr12 = (($vararg_buffer7) + 16|0);
   $169 = $vararg_ptr12;
   $170 = $169;
   HEAP32[$170>>2] = $162;
   $171 = (($169) + 4)|0;
   $172 = $171;
   HEAP32[$172>>2] = $164;
   _TIFFErrorExt($153,$154,19032,$vararg_buffer7);
   $0 = -1;
   $181 = $0;
   STACKTOP = sp;return ($181|0);
  } else {
   $21 = $1;
   $22 = (($21) + 640|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $1;
   $25 = (($24) + 628|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $2;
   $28 = $td;
   $29 = (($28) + 132|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($27<<3)|0);
   $32 = $31;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (($32) + 4)|0;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = (FUNCTION_TABLE_iiiii[$23 & 255]($26,$34,$37,0)|0);
   $39 = tempRet0;
   $40 = $2;
   $41 = $td;
   $42 = (($41) + 132|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($40<<3)|0);
   $45 = $44;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($45) + 4)|0;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = ($38|0)==($47|0);
   $52 = ($39|0)==($50|0);
   $53 = $51 & $52;
   if (!($53)) {
    $54 = $1;
    $55 = (($54) + 628|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $5;
    $58 = $1;
    $59 = (($58) + 444|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $2;
    HEAP32[$vararg_buffer>>2] = $60;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $61;
    _TIFFErrorExt($56,$57,18928,$vararg_buffer);
    $0 = -1;
    $181 = $0;
    STACKTOP = sp;return ($181|0);
   }
   $62 = $1;
   $63 = (($62) + 632|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $1;
   $66 = (($65) + 628|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $3;
   $69 = $4;
   $70 = (FUNCTION_TABLE_iiii[$64 & 255]($67,$68,$69)|0);
   $cc = $70;
   $71 = $cc;
   $72 = $4;
   $73 = ($71|0)!=($72|0);
   if (!($73)) {
    break;
   }
   $74 = $1;
   $75 = (($74) + 628|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = $1;
   $79 = (($78) + 444|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $cc;
   $82 = ($81|0)<(0);
   $83 = $82 << 31 >> 31;
   $84 = $4;
   $85 = ($84|0)<(0);
   $86 = $85 << 31 >> 31;
   HEAP32[$vararg_buffer2>>2] = $80;
   $vararg_ptr5 = (($vararg_buffer2) + 4|0);
   $87 = $vararg_ptr5;
   $88 = $87;
   HEAP32[$88>>2] = $81;
   $89 = (($87) + 4)|0;
   $90 = $89;
   HEAP32[$90>>2] = $83;
   $vararg_ptr6 = (($vararg_buffer2) + 12|0);
   $91 = $vararg_ptr6;
   $92 = $91;
   HEAP32[$92>>2] = $84;
   $93 = (($91) + 4)|0;
   $94 = $93;
   HEAP32[$94>>2] = $86;
   _TIFFErrorExt($76,$77,18968,$vararg_buffer2);
   $0 = -1;
   $181 = $0;
   STACKTOP = sp;return ($181|0);
  }
 } while(0);
 $180 = $4;
 $0 = $180;
 $181 = $0;
 STACKTOP = sp;return ($181|0);
}
function _TIFFStartStrip($tif,$strip) {
 $tif = $tif|0;
 $strip = $strip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $td = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $strip;
 $3 = $1;
 $4 = (($3) + 40|0);
 $td = $4;
 $5 = $1;
 $6 = (__TIFFFillStriles($5)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = (($8) + 40|0);
  $10 = (($9) + 136|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 32;
   $17 = ($16|0)==(0);
   do {
    if ($17) {
     $18 = $1;
     $19 = (($18) + 508|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = $1;
     $22 = (FUNCTION_TABLE_ii[$20 & 255]($21)|0);
     $23 = ($22|0)!=(0);
     if ($23) {
      $24 = $1;
      $25 = (($24) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $26 | 32;
      HEAP32[$25>>2] = $27;
      break;
     }
     $0 = 0;
     $84 = $0;
     STACKTOP = sp;return ($84|0);
    }
   } while(0);
   $28 = $2;
   $29 = $1;
   $30 = (($29) + 452|0);
   HEAP32[$30>>2] = $28;
   $31 = $2;
   $32 = $td;
   $33 = (($32) + 124|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($31>>>0) % ($34>>>0))&-1;
   $36 = $td;
   $37 = (($36) + 60|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = Math_imul($35, $38)|0;
   $40 = $1;
   $41 = (($40) + 444|0);
   HEAP32[$41>>2] = $39;
   $42 = $1;
   $43 = (($42) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 & -1048577;
   HEAP32[$43>>2] = $45;
   $46 = $1;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 & 131072;
   $50 = ($49|0)!=(0);
   if ($50) {
    $51 = $1;
    $52 = (($51) + 604|0);
    HEAP32[$52>>2] = 0;
    $53 = $1;
    $54 = (($53) + 608|0);
    HEAP32[$54>>2] = 0;
   } else {
    $55 = $1;
    $56 = (($55) + 588|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $1;
    $59 = (($58) + 604|0);
    HEAP32[$59>>2] = $57;
    $60 = $2;
    $61 = $td;
    $62 = (($61) + 136|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + ($60<<3)|0);
    $65 = $64;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = (($65) + 4)|0;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $71 = $1;
    $72 = (($71) + 608|0);
    HEAP32[$72>>2] = $67;
   }
   $73 = $1;
   $74 = (($73) + 512|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $1;
   $77 = $2;
   $78 = $td;
   $79 = (($78) + 124|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($77>>>0) / ($80>>>0))&-1;
   $82 = $81&65535;
   $83 = (FUNCTION_TABLE_iii[$75 & 255]($76,$82)|0);
   $0 = $83;
   $84 = $0;
   STACKTOP = sp;return ($84|0);
  }
 }
 $0 = 0;
 $84 = $0;
 STACKTOP = sp;return ($84|0);
}
function _TIFFReadRawTile1($tif,$tile,$buf,$size,$module) {
 $tif = $tif|0;
 $tile = $tile|0;
 $buf = $buf|0;
 $size = $size|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cc = 0, $ma = 0, $mb = 0, $n = 0, $td = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $tile;
 $3 = $buf;
 $4 = $size;
 $5 = $module;
 $6 = $1;
 $7 = (($6) + 40|0);
 $td = $7;
 $8 = $1;
 $9 = (__TIFFFillStriles($8)|0);
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $0 = -1;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 $11 = $1;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 131072;
 $15 = ($14|0)==(0);
 if (!($15)) {
  ___assert_fail((18280|0),(18320|0),684,(18696|0));
  // unreachable;
 }
 $16 = $1;
 $17 = (($16) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 2048;
 $20 = ($19|0)!=(0);
 do {
  if ($20) {
   $101 = $2;
   $102 = $td;
   $103 = (($102) + 132|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + ($101<<3)|0);
   $106 = $105;
   $107 = $106;
   $108 = HEAP32[$107>>2]|0;
   $109 = (($106) + 4)|0;
   $110 = $109;
   $111 = HEAP32[$110>>2]|0;
   $ma = $108;
   $112 = $ma;
   $113 = $4;
   $114 = (($112) + ($113))|0;
   $mb = $114;
   $115 = $ma;
   $116 = ($115|0)<(0);
   $117 = $116 << 31 >> 31;
   $118 = $2;
   $119 = $td;
   $120 = (($119) + 132|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + ($118<<3)|0);
   $123 = $122;
   $124 = $123;
   $125 = HEAP32[$124>>2]|0;
   $126 = (($123) + 4)|0;
   $127 = $126;
   $128 = HEAP32[$127>>2]|0;
   $129 = ($115|0)!=($125|0);
   $130 = ($117|0)!=($128|0);
   $131 = $129 | $130;
   if ($131) {
    label = 13;
   } else {
    $132 = $ma;
    $133 = $1;
    $134 = (($133) + 616|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($132|0)>($135|0);
    if ($136) {
     label = 13;
    } else {
     $137 = $mb;
     $138 = $ma;
     $139 = ($137|0)<($138|0);
     if ($139) {
      label = 17;
     } else {
      $140 = $mb;
      $141 = $4;
      $142 = ($140|0)<($141|0);
      if ($142) {
       label = 17;
      } else {
       $143 = $mb;
       $144 = $1;
       $145 = (($144) + 616|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = ($143|0)>($146|0);
       if ($147) {
        label = 17;
       } else {
        $153 = $4;
        $n = $153;
       }
      }
     }
     if ((label|0) == 17) {
      $148 = $1;
      $149 = (($148) + 616|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = $ma;
      $152 = (($150) - ($151))|0;
      $n = $152;
     }
    }
   }
   if ((label|0) == 13) {
    $n = 0;
   }
   $154 = $n;
   $155 = $4;
   $156 = ($154|0)!=($155|0);
   if (!($156)) {
    $182 = $3;
    $183 = $1;
    $184 = (($183) + 612|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = $ma;
    $187 = (($185) + ($186)|0);
    $188 = $4;
    __TIFFmemcpy($182,$187,$188);
    break;
   }
   $157 = $1;
   $158 = (($157) + 628|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $5;
   $161 = $1;
   $162 = (($161) + 444|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $1;
   $165 = (($164) + 488|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $2;
   $168 = $n;
   $169 = ($168|0)<(0);
   $170 = $169 << 31 >> 31;
   $171 = $4;
   $172 = ($171|0)<(0);
   $173 = $172 << 31 >> 31;
   HEAP32[$vararg_buffer9>>2] = $163;
   $vararg_ptr12 = (($vararg_buffer9) + 4|0);
   HEAP32[$vararg_ptr12>>2] = $166;
   $vararg_ptr13 = (($vararg_buffer9) + 8|0);
   HEAP32[$vararg_ptr13>>2] = $167;
   $vararg_ptr14 = (($vararg_buffer9) + 12|0);
   $174 = $vararg_ptr14;
   $175 = $174;
   HEAP32[$175>>2] = $168;
   $176 = (($174) + 4)|0;
   $177 = $176;
   HEAP32[$177>>2] = $170;
   $vararg_ptr15 = (($vararg_buffer9) + 20|0);
   $178 = $vararg_ptr15;
   $179 = $178;
   HEAP32[$179>>2] = $171;
   $180 = (($178) + 4)|0;
   $181 = $180;
   HEAP32[$181>>2] = $173;
   _TIFFErrorExt($159,$160,18832,$vararg_buffer9);
   $0 = -1;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
  } else {
   $21 = $1;
   $22 = (($21) + 640|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $1;
   $25 = (($24) + 628|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $2;
   $28 = $td;
   $29 = (($28) + 132|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($27<<3)|0);
   $32 = $31;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (($32) + 4)|0;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = (FUNCTION_TABLE_iiiii[$23 & 255]($26,$34,$37,0)|0);
   $39 = tempRet0;
   $40 = $2;
   $41 = $td;
   $42 = (($41) + 132|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($40<<3)|0);
   $45 = $44;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($45) + 4)|0;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = ($38|0)==($47|0);
   $52 = ($39|0)==($50|0);
   $53 = $51 & $52;
   if (!($53)) {
    $54 = $1;
    $55 = (($54) + 628|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $5;
    $58 = $1;
    $59 = (($58) + 444|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $1;
    $62 = (($61) + 488|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $2;
    HEAP32[$vararg_buffer>>2] = $60;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $63;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $64;
    _TIFFErrorExt($56,$57,18720,$vararg_buffer);
    $0 = -1;
    $190 = $0;
    STACKTOP = sp;return ($190|0);
   }
   $65 = $1;
   $66 = (($65) + 632|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $1;
   $69 = (($68) + 628|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $3;
   $72 = $4;
   $73 = (FUNCTION_TABLE_iiii[$67 & 255]($70,$71,$72)|0);
   $cc = $73;
   $74 = $cc;
   $75 = $4;
   $76 = ($74|0)!=($75|0);
   if (!($76)) {
    break;
   }
   $77 = $1;
   $78 = (($77) + 628|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $5;
   $81 = $1;
   $82 = (($81) + 444|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $1;
   $85 = (($84) + 488|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $cc;
   $88 = ($87|0)<(0);
   $89 = $88 << 31 >> 31;
   $90 = $4;
   $91 = ($90|0)<(0);
   $92 = $91 << 31 >> 31;
   HEAP32[$vararg_buffer3>>2] = $83;
   $vararg_ptr6 = (($vararg_buffer3) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $86;
   $vararg_ptr7 = (($vararg_buffer3) + 8|0);
   $93 = $vararg_ptr7;
   $94 = $93;
   HEAP32[$94>>2] = $87;
   $95 = (($93) + 4)|0;
   $96 = $95;
   HEAP32[$96>>2] = $89;
   $vararg_ptr8 = (($vararg_buffer3) + 16|0);
   $97 = $vararg_ptr8;
   $98 = $97;
   HEAP32[$98>>2] = $90;
   $99 = (($97) + 4)|0;
   $100 = $99;
   HEAP32[$100>>2] = $92;
   _TIFFErrorExt($79,$80,18768,$vararg_buffer3);
   $0 = -1;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
  }
 } while(0);
 $189 = $4;
 $0 = $189;
 $190 = $0;
 STACKTOP = sp;return ($190|0);
}
function _TIFFStartTile($tif,$tile) {
 $tif = $tif|0;
 $tile = $tile|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $td = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $tile;
 $3 = $1;
 $4 = (($3) + 40|0);
 $td = $4;
 $5 = $1;
 $6 = (__TIFFFillStriles($5)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = (($8) + 40|0);
  $10 = (($9) + 136|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $1;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 32;
   $17 = ($16|0)==(0);
   do {
    if ($17) {
     $18 = $1;
     $19 = (($18) + 508|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = $1;
     $22 = (FUNCTION_TABLE_ii[$20 & 255]($21)|0);
     $23 = ($22|0)!=(0);
     if ($23) {
      $24 = $1;
      $25 = (($24) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $26 | 32;
      HEAP32[$25>>2] = $27;
      break;
     }
     $0 = 0;
     $133 = $0;
     STACKTOP = sp;return ($133|0);
    }
   } while(0);
   $28 = $2;
   $29 = $1;
   $30 = (($29) + 492|0);
   HEAP32[$30>>2] = $28;
   $31 = $2;
   $32 = $td;
   $33 = (($32) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $td;
   $36 = (($35) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 1)|0;
   $39 = (-1 - ($38))|0;
   $40 = ($34>>>0)<($39>>>0);
   if ($40) {
    $41 = $td;
    $42 = (($41) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $td;
    $45 = (($44) + 28|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) - 1)|0;
    $48 = (($43) + ($47))|0;
    $49 = $td;
    $50 = (($49) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($48>>>0) / ($51>>>0))&-1;
    $54 = $52;
   } else {
    $54 = 0;
   }
   $53 = (($31>>>0) % ($54>>>0))&-1;
   $55 = $td;
   $56 = (($55) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = Math_imul($53, $57)|0;
   $59 = $1;
   $60 = (($59) + 444|0);
   HEAP32[$60>>2] = $58;
   $61 = $2;
   $62 = $td;
   $63 = (($62) + 20|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $td;
   $66 = (($65) + 32|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) - 1)|0;
   $69 = (-1 - ($68))|0;
   $70 = ($64>>>0)<($69>>>0);
   if ($70) {
    $71 = $td;
    $72 = (($71) + 20|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $td;
    $75 = (($74) + 32|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) - 1)|0;
    $78 = (($73) + ($77))|0;
    $79 = $td;
    $80 = (($79) + 32|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($78>>>0) / ($81>>>0))&-1;
    $84 = $82;
   } else {
    $84 = 0;
   }
   $83 = (($61>>>0) % ($84>>>0))&-1;
   $85 = $td;
   $86 = (($85) + 28|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = Math_imul($83, $87)|0;
   $89 = $1;
   $90 = (($89) + 488|0);
   HEAP32[$90>>2] = $88;
   $91 = $1;
   $92 = (($91) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $93 & -1048577;
   HEAP32[$92>>2] = $94;
   $95 = $1;
   $96 = (($95) + 12|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $97 & 131072;
   $99 = ($98|0)!=(0);
   if ($99) {
    $100 = $1;
    $101 = (($100) + 604|0);
    HEAP32[$101>>2] = 0;
    $102 = $1;
    $103 = (($102) + 608|0);
    HEAP32[$103>>2] = 0;
   } else {
    $104 = $1;
    $105 = (($104) + 588|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $1;
    $108 = (($107) + 604|0);
    HEAP32[$108>>2] = $106;
    $109 = $2;
    $110 = $td;
    $111 = (($110) + 136|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) + ($109<<3)|0);
    $114 = $113;
    $115 = $114;
    $116 = HEAP32[$115>>2]|0;
    $117 = (($114) + 4)|0;
    $118 = $117;
    $119 = HEAP32[$118>>2]|0;
    $120 = $1;
    $121 = (($120) + 608|0);
    HEAP32[$121>>2] = $116;
   }
   $122 = $1;
   $123 = (($122) + 512|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $1;
   $126 = $2;
   $127 = $td;
   $128 = (($127) + 124|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($126>>>0) / ($129>>>0))&-1;
   $131 = $130&65535;
   $132 = (FUNCTION_TABLE_iii[$124 & 255]($125,$131)|0);
   $0 = $132;
   $133 = $0;
   STACKTOP = sp;return ($133|0);
  }
 }
 $0 = 0;
 $133 = $0;
 STACKTOP = sp;return ($133|0);
}
function _TIFFComputeStrip($tif,$row,$sample) {
 $tif = $tif|0;
 $row = $row|0;
 $sample = $sample|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $strip = 0, $td = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $row;
 $3 = $sample;
 $4 = $1;
 $5 = (($4) + 40|0);
 $td = $5;
 $6 = $2;
 $7 = $td;
 $8 = (($7) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6>>>0) / ($9>>>0))&-1;
 $strip = $10;
 $11 = $td;
 $12 = (($11) + 86|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ($14|0)==(2);
 do {
  if ($15) {
   $16 = $3;
   $17 = $16&65535;
   $18 = $td;
   $19 = (($18) + 58|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20&65535;
   $22 = ($17|0)>=($21|0);
   if (!($22)) {
    $32 = $3;
    $33 = $32&65535;
    $34 = $td;
    $35 = (($34) + 124|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = Math_imul($33, $36)|0;
    $38 = $strip;
    $39 = (($38) + ($37))|0;
    $strip = $39;
    break;
   }
   $23 = $1;
   $24 = (($23) + 628|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $3;
   $27 = $26&65535;
   $28 = $td;
   $29 = (($28) + 58|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = $30&65535;
   HEAP32[$vararg_buffer>>2] = $27;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $31;
   _TIFFErrorExt($25,19104,19128,$vararg_buffer);
   $0 = 0;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 } while(0);
 $40 = $strip;
 $0 = $40;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _TIFFNumberOfStrips($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $nstrips = 0, $td = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 40|0);
 $td = $2;
 $3 = $td;
 $4 = (($3) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  $28 = 1;
 } else {
  $7 = $td;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $td;
  $11 = (($10) + 60|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) - 1)|0;
  $14 = (-1 - ($13))|0;
  $15 = ($9>>>0)<($14>>>0);
  if ($15) {
   $16 = $td;
   $17 = (($16) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $td;
   $20 = (($19) + 60|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) - 1)|0;
   $23 = (($18) + ($22))|0;
   $24 = $td;
   $25 = (($24) + 60|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($23>>>0) / ($26>>>0))&-1;
   $42 = $27;
  } else {
   $42 = 0;
  }
  $28 = $42;
 }
 $nstrips = $28;
 $29 = $td;
 $30 = (($29) + 86|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ($32|0)==(2);
 if (!($33)) {
  $41 = $nstrips;
  STACKTOP = sp;return ($41|0);
 }
 $34 = $0;
 $35 = $nstrips;
 $36 = $td;
 $37 = (($36) + 58|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38&65535;
 $40 = (__TIFFMultiply32($34,$35,$39,19168)|0);
 $nstrips = $40;
 $41 = $nstrips;
 STACKTOP = sp;return ($41|0);
}
function _TIFFVStripSize64($tif,$nrows) {
 $tif = $tif|0;
 $nrows = $nrows|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $samplingblock_samples = 0, $samplingblocks_hor = 0, $samplingblocks_ver = 0, $samplingrow_samples = 0, $samplingrow_size = 0, $td = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $ycbcrsubsampling = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 40|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $0 = sp + 8|0;
 $ycbcrsubsampling = sp + 68|0;
 $samplingrow_samples = sp + 32|0;
 $samplingrow_size = sp;
 $1 = $tif;
 $2 = $nrows;
 $3 = $1;
 $4 = (($3) + 40|0);
 $td = $4;
 $5 = $2;
 $6 = ($5|0)==(-1);
 if ($6) {
  $7 = $td;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $2 = $9;
 }
 $10 = $td;
 $11 = (($10) + 86|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ($13|0)==(1);
 if ($14) {
  $15 = $td;
  $16 = (($15) + 50|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($18|0)==(6);
  if ($19) {
   $20 = $1;
   $21 = (($20) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 & 16384;
   $24 = ($23|0)!=(0);
   if (!($24)) {
    $25 = $td;
    $26 = (($25) + 58|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27&65535;
    $29 = ($28|0)!=(3);
    if ($29) {
     $30 = $1;
     $31 = (($30) + 628|0);
     $32 = HEAP32[$31>>2]|0;
     _TIFFErrorExt($32,19192,19216,$vararg_buffer);
     $33 = $0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     $35 = (($33) + 4)|0;
     $36 = $35;
     HEAP32[$36>>2] = 0;
     $207 = $0;
     $208 = $207;
     $209 = HEAP32[$208>>2]|0;
     $210 = (($207) + 4)|0;
     $211 = $210;
     $212 = HEAP32[$211>>2]|0;
     tempRet0 = $212;
     STACKTOP = sp;return ($209|0);
    }
    $37 = $1;
    $38 = (($ycbcrsubsampling) + 2|0);
    HEAP32[$vararg_buffer1>>2] = $ycbcrsubsampling;
    $vararg_ptr3 = (($vararg_buffer1) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $38;
    (_TIFFGetFieldDefaulted($37,530,$vararg_buffer1)|0);
    $39 = HEAP16[$ycbcrsubsampling>>1]|0;
    $40 = $39&65535;
    $41 = ($40|0)!=(1);
    if ($41) {
     $42 = HEAP16[$ycbcrsubsampling>>1]|0;
     $43 = $42&65535;
     $44 = ($43|0)!=(2);
     if ($44) {
      $45 = HEAP16[$ycbcrsubsampling>>1]|0;
      $46 = $45&65535;
      $47 = ($46|0)!=(4);
      if (!($47)) {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
    do {
     if ((label|0) == 11) {
      $48 = (($ycbcrsubsampling) + 2|0);
      $49 = HEAP16[$48>>1]|0;
      $50 = $49&65535;
      $51 = ($50|0)!=(1);
      if ($51) {
       $52 = (($ycbcrsubsampling) + 2|0);
       $53 = HEAP16[$52>>1]|0;
       $54 = $53&65535;
       $55 = ($54|0)!=(2);
       if ($55) {
        $56 = (($ycbcrsubsampling) + 2|0);
        $57 = HEAP16[$56>>1]|0;
        $58 = $57&65535;
        $59 = ($58|0)!=(4);
        if ($59) {
         break;
        }
       }
      }
      $72 = HEAP16[$ycbcrsubsampling>>1]|0;
      $73 = $72&65535;
      $74 = (($ycbcrsubsampling) + 2|0);
      $75 = HEAP16[$74>>1]|0;
      $76 = $75&65535;
      $77 = Math_imul($73, $76)|0;
      $78 = (($77) + 2)|0;
      $79 = $78&65535;
      $samplingblock_samples = $79;
      $80 = $td;
      $81 = (($80) + 16|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = HEAP16[$ycbcrsubsampling>>1]|0;
      $84 = $83&65535;
      $85 = (($84) - 1)|0;
      $86 = (-1 - ($85))|0;
      $87 = ($82>>>0)<($86>>>0);
      if ($87) {
       $88 = $td;
       $89 = (($88) + 16|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = HEAP16[$ycbcrsubsampling>>1]|0;
       $92 = $91&65535;
       $93 = (($92) - 1)|0;
       $94 = (($90) + ($93))|0;
       $95 = HEAP16[$ycbcrsubsampling>>1]|0;
       $96 = $95&65535;
       $97 = (($94>>>0) / ($96>>>0))&-1;
       $98 = $97;
      } else {
       $98 = 0;
      }
      $samplingblocks_hor = $98;
      $99 = $2;
      $100 = (($ycbcrsubsampling) + 2|0);
      $101 = HEAP16[$100>>1]|0;
      $102 = $101&65535;
      $103 = (($102) - 1)|0;
      $104 = (-1 - ($103))|0;
      $105 = ($99>>>0)<($104>>>0);
      if ($105) {
       $106 = $2;
       $107 = (($ycbcrsubsampling) + 2|0);
       $108 = HEAP16[$107>>1]|0;
       $109 = $108&65535;
       $110 = (($109) - 1)|0;
       $111 = (($106) + ($110))|0;
       $112 = (($ycbcrsubsampling) + 2|0);
       $113 = HEAP16[$112>>1]|0;
       $114 = $113&65535;
       $115 = (($111>>>0) / ($114>>>0))&-1;
       $116 = $115;
      } else {
       $116 = 0;
      }
      $samplingblocks_ver = $116;
      $117 = $1;
      $118 = $samplingblocks_hor;
      $119 = $samplingblock_samples;
      $120 = $119&65535;
      $121 = (__TIFFMultiply64($117,$118,0,$120,0,19192)|0);
      $122 = tempRet0;
      $123 = $samplingrow_samples;
      $124 = $123;
      HEAP32[$124>>2] = $121;
      $125 = (($123) + 4)|0;
      $126 = $125;
      HEAP32[$126>>2] = $122;
      $127 = $1;
      $128 = $samplingrow_samples;
      $129 = $128;
      $130 = HEAP32[$129>>2]|0;
      $131 = (($128) + 4)|0;
      $132 = $131;
      $133 = HEAP32[$132>>2]|0;
      $134 = $td;
      $135 = (($134) + 44|0);
      $136 = HEAP16[$135>>1]|0;
      $137 = $136&65535;
      $138 = (__TIFFMultiply64($127,$130,$133,$137,0,19192)|0);
      $139 = tempRet0;
      $140 = $138 & 7;
      $141 = ($140|0)!=(0);
      $142 = (0)!=(0);
      $143 = $141 | $142;
      if ($143) {
       $144 = $1;
       $145 = $samplingrow_samples;
       $146 = $145;
       $147 = HEAP32[$146>>2]|0;
       $148 = (($145) + 4)|0;
       $149 = $148;
       $150 = HEAP32[$149>>2]|0;
       $151 = $td;
       $152 = (($151) + 44|0);
       $153 = HEAP16[$152>>1]|0;
       $154 = $153&65535;
       $155 = (__TIFFMultiply64($144,$147,$150,$154,0,19192)|0);
       $156 = tempRet0;
       $157 = (_bitshift64Lshr(($155|0),($156|0),3)|0);
       $158 = tempRet0;
       $159 = (_i64Add(($157|0),($158|0),1,0)|0);
       $160 = tempRet0;
       $178 = $159;$181 = $160;
      } else {
       $161 = $1;
       $162 = $samplingrow_samples;
       $163 = $162;
       $164 = HEAP32[$163>>2]|0;
       $165 = (($162) + 4)|0;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = $td;
       $169 = (($168) + 44|0);
       $170 = HEAP16[$169>>1]|0;
       $171 = $170&65535;
       $172 = (__TIFFMultiply64($161,$164,$167,$171,0,19192)|0);
       $173 = tempRet0;
       $174 = (_bitshift64Lshr(($172|0),($173|0),3)|0);
       $175 = tempRet0;
       $178 = $174;$181 = $175;
      }
      $176 = $samplingrow_size;
      $177 = $176;
      HEAP32[$177>>2] = $178;
      $179 = (($176) + 4)|0;
      $180 = $179;
      HEAP32[$180>>2] = $181;
      $182 = $1;
      $183 = $samplingrow_size;
      $184 = $183;
      $185 = HEAP32[$184>>2]|0;
      $186 = (($183) + 4)|0;
      $187 = $186;
      $188 = HEAP32[$187>>2]|0;
      $189 = $samplingblocks_ver;
      $190 = (__TIFFMultiply64($182,$185,$188,$189,0,19192)|0);
      $191 = tempRet0;
      $192 = $0;
      $193 = $192;
      HEAP32[$193>>2] = $190;
      $194 = (($192) + 4)|0;
      $195 = $194;
      HEAP32[$195>>2] = $191;
      $207 = $0;
      $208 = $207;
      $209 = HEAP32[$208>>2]|0;
      $210 = (($207) + 4)|0;
      $211 = $210;
      $212 = HEAP32[$211>>2]|0;
      tempRet0 = $212;
      STACKTOP = sp;return ($209|0);
     }
    } while(0);
    $60 = $1;
    $61 = (($60) + 628|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = HEAP16[$ycbcrsubsampling>>1]|0;
    $64 = $63&65535;
    $65 = (($ycbcrsubsampling) + 2|0);
    $66 = HEAP16[$65>>1]|0;
    $67 = $66&65535;
    HEAP32[$vararg_buffer4>>2] = $64;
    $vararg_ptr7 = (($vararg_buffer4) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $67;
    _TIFFErrorExt($62,19192,19256,$vararg_buffer4);
    $68 = $0;
    $69 = $68;
    HEAP32[$69>>2] = 0;
    $70 = (($68) + 4)|0;
    $71 = $70;
    HEAP32[$71>>2] = 0;
    $207 = $0;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    tempRet0 = $212;
    STACKTOP = sp;return ($209|0);
   }
  }
 }
 $196 = $1;
 $197 = $2;
 $198 = $1;
 $199 = (_TIFFScanlineSize64($198)|0);
 $200 = tempRet0;
 $201 = (__TIFFMultiply64($196,$197,0,$199,$200,19192)|0);
 $202 = tempRet0;
 $203 = $0;
 $204 = $203;
 HEAP32[$204>>2] = $201;
 $205 = (($203) + 4)|0;
 $206 = $205;
 HEAP32[$206>>2] = $202;
 $207 = $0;
 $208 = $207;
 $209 = HEAP32[$208>>2]|0;
 $210 = (($207) + 4)|0;
 $211 = $210;
 $212 = HEAP32[$211>>2]|0;
 tempRet0 = $212;
 STACKTOP = sp;return ($209|0);
}
function _TIFFScanlineSize64($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $samplingblock_samples = 0, $samplingblocks_hor = 0, $samplingrow_samples = 0, $samplingrow_size = 0, $scanline_samples = 0, $scanline_size = 0, $td = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, $ycbcrsubsampling = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 40|0;
 $0 = sp + 48|0;
 $scanline_size = sp + 56|0;
 $ycbcrsubsampling = sp + 76|0;
 $samplingrow_samples = sp + 16|0;
 $samplingrow_size = sp;
 $scanline_samples = sp + 8|0;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 40|0);
 $td = $3;
 $4 = $td;
 $5 = (($4) + 86|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ($7|0)==(1);
 if ($8) {
  $9 = $td;
  $10 = (($9) + 50|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = ($12|0)==(6);
  L4: do {
   if ($13) {
    $14 = $td;
    $15 = (($14) + 58|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = $16&65535;
    $18 = ($17|0)==(3);
    if ($18) {
     $19 = $1;
     $20 = (($19) + 12|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = $21 & 16384;
     $23 = ($22|0)!=(0);
     if ($23) {
      label = 18;
     } else {
      $24 = $td;
      $25 = (($24) + 58|0);
      $26 = HEAP16[$25>>1]|0;
      $27 = $26&65535;
      $28 = ($27|0)!=(3);
      if ($28) {
       $29 = $1;
       $30 = (($29) + 628|0);
       $31 = HEAP32[$30>>2]|0;
       _TIFFErrorExt($31,19352,19216,$vararg_buffer);
       $32 = $0;
       $33 = $32;
       HEAP32[$33>>2] = 0;
       $34 = (($32) + 4)|0;
       $35 = $34;
       HEAP32[$35>>2] = 0;
       $202 = $0;
       $203 = $202;
       $204 = HEAP32[$203>>2]|0;
       $205 = (($202) + 4)|0;
       $206 = $205;
       $207 = HEAP32[$206>>2]|0;
       tempRet0 = $207;
       STACKTOP = sp;return ($204|0);
      }
      $36 = $1;
      $37 = (($ycbcrsubsampling) + 2|0);
      HEAP32[$vararg_buffer1>>2] = $ycbcrsubsampling;
      $vararg_ptr3 = (($vararg_buffer1) + 4|0);
      HEAP32[$vararg_ptr3>>2] = $37;
      (_TIFFGetFieldDefaulted($36,530,$vararg_buffer1)|0);
      $38 = HEAP16[$ycbcrsubsampling>>1]|0;
      $39 = $38&65535;
      $40 = ($39|0)!=(1);
      if ($40) {
       $41 = HEAP16[$ycbcrsubsampling>>1]|0;
       $42 = $41&65535;
       $43 = ($42|0)!=(2);
       if ($43) {
        $44 = HEAP16[$ycbcrsubsampling>>1]|0;
        $45 = $44&65535;
        $46 = ($45|0)!=(4);
        if (!($46)) {
         label = 10;
        }
       } else {
        label = 10;
       }
      } else {
       label = 10;
      }
      do {
       if ((label|0) == 10) {
        $47 = (($ycbcrsubsampling) + 2|0);
        $48 = HEAP16[$47>>1]|0;
        $49 = $48&65535;
        $50 = ($49|0)!=(1);
        if ($50) {
         $51 = (($ycbcrsubsampling) + 2|0);
         $52 = HEAP16[$51>>1]|0;
         $53 = $52&65535;
         $54 = ($53|0)!=(2);
         if ($54) {
          $55 = (($ycbcrsubsampling) + 2|0);
          $56 = HEAP16[$55>>1]|0;
          $57 = $56&65535;
          $58 = ($57|0)!=(4);
          if ($58) {
           break;
          }
         }
        }
        $66 = HEAP16[$ycbcrsubsampling>>1]|0;
        $67 = $66&65535;
        $68 = (($ycbcrsubsampling) + 2|0);
        $69 = HEAP16[$68>>1]|0;
        $70 = $69&65535;
        $71 = Math_imul($67, $70)|0;
        $72 = (($71) + 2)|0;
        $73 = $72&65535;
        $samplingblock_samples = $73;
        $74 = $td;
        $75 = (($74) + 16|0);
        $76 = HEAP32[$75>>2]|0;
        $77 = HEAP16[$ycbcrsubsampling>>1]|0;
        $78 = $77&65535;
        $79 = (($78) - 1)|0;
        $80 = (-1 - ($79))|0;
        $81 = ($76>>>0)<($80>>>0);
        if ($81) {
         $82 = $td;
         $83 = (($82) + 16|0);
         $84 = HEAP32[$83>>2]|0;
         $85 = HEAP16[$ycbcrsubsampling>>1]|0;
         $86 = $85&65535;
         $87 = (($86) - 1)|0;
         $88 = (($84) + ($87))|0;
         $89 = HEAP16[$ycbcrsubsampling>>1]|0;
         $90 = $89&65535;
         $91 = (($88>>>0) / ($90>>>0))&-1;
         $92 = $91;
        } else {
         $92 = 0;
        }
        $samplingblocks_hor = $92;
        $93 = $1;
        $94 = $samplingblocks_hor;
        $95 = $samplingblock_samples;
        $96 = $95&65535;
        $97 = (__TIFFMultiply64($93,$94,0,$96,0,19352)|0);
        $98 = tempRet0;
        $99 = $samplingrow_samples;
        $100 = $99;
        HEAP32[$100>>2] = $97;
        $101 = (($99) + 4)|0;
        $102 = $101;
        HEAP32[$102>>2] = $98;
        $103 = $1;
        $104 = $samplingrow_samples;
        $105 = $104;
        $106 = HEAP32[$105>>2]|0;
        $107 = (($104) + 4)|0;
        $108 = $107;
        $109 = HEAP32[$108>>2]|0;
        $110 = $td;
        $111 = (($110) + 44|0);
        $112 = HEAP16[$111>>1]|0;
        $113 = $112&65535;
        $114 = (__TIFFMultiply64($103,$106,$109,$113,0,19352)|0);
        $115 = tempRet0;
        $116 = (_i64Add(($114|0),($115|0),7,0)|0);
        $117 = tempRet0;
        $118 = (___udivdi3(($116|0),($117|0),8,0)|0);
        $119 = tempRet0;
        $120 = $samplingrow_size;
        $121 = $120;
        HEAP32[$121>>2] = $118;
        $122 = (($120) + 4)|0;
        $123 = $122;
        HEAP32[$123>>2] = $119;
        $124 = $samplingrow_size;
        $125 = $124;
        $126 = HEAP32[$125>>2]|0;
        $127 = (($124) + 4)|0;
        $128 = $127;
        $129 = HEAP32[$128>>2]|0;
        $130 = (($ycbcrsubsampling) + 2|0);
        $131 = HEAP16[$130>>1]|0;
        $132 = $131&65535;
        $133 = (___udivdi3(($126|0),($129|0),($132|0),0)|0);
        $134 = tempRet0;
        $135 = $scanline_size;
        $136 = $135;
        HEAP32[$136>>2] = $133;
        $137 = (($135) + 4)|0;
        $138 = $137;
        HEAP32[$138>>2] = $134;
        break L4;
       }
      } while(0);
      $59 = $1;
      $60 = (($59) + 628|0);
      $61 = HEAP32[$60>>2]|0;
      _TIFFErrorExt($61,19352,19376,$vararg_buffer4);
      $62 = $0;
      $63 = $62;
      HEAP32[$63>>2] = 0;
      $64 = (($62) + 4)|0;
      $65 = $64;
      HEAP32[$65>>2] = 0;
      $202 = $0;
      $203 = $202;
      $204 = HEAP32[$203>>2]|0;
      $205 = (($202) + 4)|0;
      $206 = $205;
      $207 = HEAP32[$206>>2]|0;
      tempRet0 = $207;
      STACKTOP = sp;return ($204|0);
     }
    } else {
     label = 18;
    }
   } else {
    label = 18;
   }
  } while(0);
  if ((label|0) == 18) {
   $139 = $1;
   $140 = $td;
   $141 = (($140) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $td;
   $144 = (($143) + 58|0);
   $145 = HEAP16[$144>>1]|0;
   $146 = $145&65535;
   $147 = (__TIFFMultiply64($139,$142,0,$146,0,19352)|0);
   $148 = tempRet0;
   $149 = $scanline_samples;
   $150 = $149;
   HEAP32[$150>>2] = $147;
   $151 = (($149) + 4)|0;
   $152 = $151;
   HEAP32[$152>>2] = $148;
   $153 = $1;
   $154 = $scanline_samples;
   $155 = $154;
   $156 = HEAP32[$155>>2]|0;
   $157 = (($154) + 4)|0;
   $158 = $157;
   $159 = HEAP32[$158>>2]|0;
   $160 = $td;
   $161 = (($160) + 44|0);
   $162 = HEAP16[$161>>1]|0;
   $163 = $162&65535;
   $164 = (__TIFFMultiply64($153,$156,$159,$163,0,19352)|0);
   $165 = tempRet0;
   $166 = (_i64Add(($164|0),($165|0),7,0)|0);
   $167 = tempRet0;
   $168 = (___udivdi3(($166|0),($167|0),8,0)|0);
   $169 = tempRet0;
   $170 = $scanline_size;
   $171 = $170;
   HEAP32[$171>>2] = $168;
   $172 = (($170) + 4)|0;
   $173 = $172;
   HEAP32[$173>>2] = $169;
  }
 } else {
  $174 = $1;
  $175 = $td;
  $176 = (($175) + 16|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $td;
  $179 = (($178) + 44|0);
  $180 = HEAP16[$179>>1]|0;
  $181 = $180&65535;
  $182 = (__TIFFMultiply64($174,$177,0,$181,0,19352)|0);
  $183 = tempRet0;
  $184 = (_i64Add(($182|0),($183|0),7,0)|0);
  $185 = tempRet0;
  $186 = (___udivdi3(($184|0),($185|0),8,0)|0);
  $187 = tempRet0;
  $188 = $scanline_size;
  $189 = $188;
  HEAP32[$189>>2] = $186;
  $190 = (($188) + 4)|0;
  $191 = $190;
  HEAP32[$191>>2] = $187;
 }
 $192 = $scanline_size;
 $193 = $192;
 $194 = HEAP32[$193>>2]|0;
 $195 = (($192) + 4)|0;
 $196 = $195;
 $197 = HEAP32[$196>>2]|0;
 $198 = $0;
 $199 = $198;
 HEAP32[$199>>2] = $194;
 $200 = (($198) + 4)|0;
 $201 = $200;
 HEAP32[$201>>2] = $197;
 $202 = $0;
 $203 = $202;
 $204 = HEAP32[$203>>2]|0;
 $205 = (($202) + 4)|0;
 $206 = $205;
 $207 = HEAP32[$206>>2]|0;
 tempRet0 = $207;
 STACKTOP = sp;return ($204|0);
}
function _TIFFVStripSize($tif,$nrows) {
 $tif = $tif|0;
 $nrows = $nrows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $m = sp;
 $0 = $tif;
 $1 = $nrows;
 $2 = $0;
 $3 = $1;
 $4 = (_TIFFVStripSize64($2,$3)|0);
 $5 = tempRet0;
 $6 = $m;
 $7 = $6;
 HEAP32[$7>>2] = $4;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = $m;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $n = $12;
 $16 = $n;
 $17 = ($16|0)<(0);
 $18 = $17 << 31 >> 31;
 $19 = $m;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($16|0)!=($21|0);
 $26 = ($18|0)!=($24|0);
 $27 = $25 | $26;
 if (!($27)) {
  $31 = $n;
  STACKTOP = sp;return ($31|0);
 }
 $28 = $0;
 $29 = (($28) + 628|0);
 $30 = HEAP32[$29>>2]|0;
 _TIFFErrorExt($30,19296,19312,$vararg_buffer);
 $n = 0;
 $31 = $n;
 STACKTOP = sp;return ($31|0);
}
function _TIFFStripSize64($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rps = 0, $td = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 40|0);
 $td = $2;
 $3 = $td;
 $4 = (($3) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $rps = $5;
 $6 = $rps;
 $7 = $td;
 $8 = (($7) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6>>>0)>($9>>>0);
 if ($10) {
  $11 = $td;
  $12 = (($11) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $rps = $13;
 }
 $14 = $0;
 $15 = $rps;
 $16 = (_TIFFVStripSize64($14,$15)|0);
 $17 = tempRet0;
 tempRet0 = $17;
 STACKTOP = sp;return ($16|0);
}
function _TIFFStripSize($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $m = sp;
 $0 = $tif;
 $1 = $0;
 $2 = (_TIFFStripSize64($1)|0);
 $3 = tempRet0;
 $4 = $m;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $8 = $m;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $n = $10;
 $14 = $n;
 $15 = ($14|0)<(0);
 $16 = $15 << 31 >> 31;
 $17 = $m;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($14|0)!=($19|0);
 $24 = ($16|0)!=($22|0);
 $25 = $23 | $24;
 if (!($25)) {
  $29 = $n;
  STACKTOP = sp;return ($29|0);
 }
 $26 = $0;
 $27 = (($26) + 628|0);
 $28 = HEAP32[$27>>2]|0;
 _TIFFErrorExt($28,19336,19312,$vararg_buffer);
 $n = 0;
 $29 = $n;
 STACKTOP = sp;return ($29|0);
}
function __TIFFDefaultStripSize($tif,$s) {
 $tif = $tif|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $rows = 0, $scanlinesize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $scanlinesize = sp + 8|0;
 $rows = sp;
 $0 = $tif;
 $1 = $s;
 $2 = $1;
 $3 = ($2|0)<(1);
 if (!($3)) {
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 $4 = $0;
 $5 = (_TIFFScanlineSize64($4)|0);
 $6 = tempRet0;
 $7 = $scanlinesize;
 $8 = $7;
 HEAP32[$8>>2] = $5;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = $scanlinesize;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==(0);
 $18 = ($16|0)==(0);
 $19 = $17 & $18;
 if ($19) {
  $20 = $scanlinesize;
  $21 = $20;
  HEAP32[$21>>2] = 1;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = 0;
 }
 $24 = $scanlinesize;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (___udivdi3(8192,0,($26|0),($29|0))|0);
 $31 = tempRet0;
 $32 = $rows;
 $33 = $32;
 HEAP32[$33>>2] = $30;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $31;
 $36 = $rows;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = ($38|0)==(0);
 $43 = ($41|0)==(0);
 $44 = $42 & $43;
 if ($44) {
  $45 = $rows;
  $46 = $45;
  HEAP32[$46>>2] = 1;
  $47 = (($45) + 4)|0;
  $48 = $47;
  HEAP32[$48>>2] = 0;
 } else {
  $49 = $rows;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54>>>0)>(0);
  $56 = ($51>>>0)>(4294967295);
  $57 = ($54|0)==(0);
  $58 = $57 & $56;
  $59 = $55 | $58;
  if ($59) {
   $60 = $rows;
   $61 = $60;
   HEAP32[$61>>2] = -1;
   $62 = (($60) + 4)|0;
   $63 = $62;
   HEAP32[$63>>2] = 0;
  }
 }
 $64 = $rows;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $1 = $66;
 $70 = $1;
 STACKTOP = sp;return ($70|0);
}
function _TIFFScanlineSize($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $m = sp;
 $0 = $tif;
 $1 = $0;
 $2 = (_TIFFScanlineSize64($1)|0);
 $3 = tempRet0;
 $4 = $m;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $8 = $m;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $n = $10;
 $14 = $n;
 $15 = ($14|0)<(0);
 $16 = $15 << 31 >> 31;
 $17 = $m;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($14|0)!=($19|0);
 $24 = ($16|0)!=($22|0);
 $25 = $23 | $24;
 if (!($25)) {
  $29 = $n;
  STACKTOP = sp;return ($29|0);
 }
 $26 = $0;
 $27 = (($26) + 628|0);
 $28 = HEAP32[$27>>2]|0;
 _TIFFErrorExt($28,19408,19432,$vararg_buffer);
 $n = 0;
 $29 = $n;
 STACKTOP = sp;return ($29|0);
}
function _TIFFSwabShort($wp) {
 $wp = $wp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wp;
 $1 = $0;
 $cp = $1;
 $2 = $cp;
 $3 = (($2) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $t = $4;
 $5 = $cp;
 $6 = HEAP8[$5>>0]|0;
 $7 = $cp;
 $8 = (($7) + 1|0);
 HEAP8[$8>>0] = $6;
 $9 = $t;
 $10 = $cp;
 HEAP8[$10>>0] = $9;
 STACKTOP = sp;return;
}
function _TIFFSwabLong($lp) {
 $lp = $lp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cp = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lp;
 $1 = $0;
 $cp = $1;
 $2 = $cp;
 $3 = (($2) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $t = $4;
 $5 = $cp;
 $6 = HEAP8[$5>>0]|0;
 $7 = $cp;
 $8 = (($7) + 3|0);
 HEAP8[$8>>0] = $6;
 $9 = $t;
 $10 = $cp;
 HEAP8[$10>>0] = $9;
 $11 = $cp;
 $12 = (($11) + 2|0);
 $13 = HEAP8[$12>>0]|0;
 $t = $13;
 $14 = $cp;
 $15 = (($14) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $cp;
 $18 = (($17) + 2|0);
 HEAP8[$18>>0] = $16;
 $19 = $t;
 $20 = $cp;
 $21 = (($20) + 1|0);
 HEAP8[$21>>0] = $19;
 STACKTOP = sp;return;
}
function _TIFFSwabLong8($lp) {
 $lp = $lp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lp;
 $1 = $0;
 $cp = $1;
 $2 = $cp;
 $3 = (($2) + 7|0);
 $4 = HEAP8[$3>>0]|0;
 $t = $4;
 $5 = $cp;
 $6 = HEAP8[$5>>0]|0;
 $7 = $cp;
 $8 = (($7) + 7|0);
 HEAP8[$8>>0] = $6;
 $9 = $t;
 $10 = $cp;
 HEAP8[$10>>0] = $9;
 $11 = $cp;
 $12 = (($11) + 6|0);
 $13 = HEAP8[$12>>0]|0;
 $t = $13;
 $14 = $cp;
 $15 = (($14) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $cp;
 $18 = (($17) + 6|0);
 HEAP8[$18>>0] = $16;
 $19 = $t;
 $20 = $cp;
 $21 = (($20) + 1|0);
 HEAP8[$21>>0] = $19;
 $22 = $cp;
 $23 = (($22) + 5|0);
 $24 = HEAP8[$23>>0]|0;
 $t = $24;
 $25 = $cp;
 $26 = (($25) + 2|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $cp;
 $29 = (($28) + 5|0);
 HEAP8[$29>>0] = $27;
 $30 = $t;
 $31 = $cp;
 $32 = (($31) + 2|0);
 HEAP8[$32>>0] = $30;
 $33 = $cp;
 $34 = (($33) + 4|0);
 $35 = HEAP8[$34>>0]|0;
 $t = $35;
 $36 = $cp;
 $37 = (($36) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $cp;
 $40 = (($39) + 4|0);
 HEAP8[$40>>0] = $38;
 $41 = $t;
 $42 = $cp;
 $43 = (($42) + 3|0);
 HEAP8[$43>>0] = $41;
 STACKTOP = sp;return;
}
function _TIFFSwabArrayOfShort($wp,$n) {
 $wp = $wp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $t = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wp;
 $1 = $n;
 while(1) {
  $2 = $1;
  $3 = (($2) + -1)|0;
  $1 = $3;
  $4 = ($2|0)>(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $cp = $5;
  $6 = $cp;
  $7 = (($6) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $t = $8;
  $9 = $cp;
  $10 = HEAP8[$9>>0]|0;
  $11 = $cp;
  $12 = (($11) + 1|0);
  HEAP8[$12>>0] = $10;
  $13 = $t;
  $14 = $cp;
  HEAP8[$14>>0] = $13;
  $15 = $0;
  $16 = (($15) + 2|0);
  $0 = $16;
 }
 STACKTOP = sp;return;
}
function _TIFFSwabArrayOfTriples($tp,$n) {
 $tp = $tp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $t = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tp;
 $1 = $n;
 while(1) {
  $2 = $1;
  $3 = (($2) + -1)|0;
  $1 = $3;
  $4 = ($2|0)>(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $cp = $5;
  $6 = $cp;
  $7 = (($6) + 2|0);
  $8 = HEAP8[$7>>0]|0;
  $t = $8;
  $9 = $cp;
  $10 = HEAP8[$9>>0]|0;
  $11 = $cp;
  $12 = (($11) + 2|0);
  HEAP8[$12>>0] = $10;
  $13 = $t;
  $14 = $cp;
  HEAP8[$14>>0] = $13;
  $15 = $0;
  $16 = (($15) + 3|0);
  $0 = $16;
 }
 STACKTOP = sp;return;
}
function _TIFFSwabArrayOfLong($lp,$n) {
 $lp = $lp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lp;
 $1 = $n;
 while(1) {
  $2 = $1;
  $3 = (($2) + -1)|0;
  $1 = $3;
  $4 = ($2|0)>(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $cp = $5;
  $6 = $cp;
  $7 = (($6) + 3|0);
  $8 = HEAP8[$7>>0]|0;
  $t = $8;
  $9 = $cp;
  $10 = HEAP8[$9>>0]|0;
  $11 = $cp;
  $12 = (($11) + 3|0);
  HEAP8[$12>>0] = $10;
  $13 = $t;
  $14 = $cp;
  HEAP8[$14>>0] = $13;
  $15 = $cp;
  $16 = (($15) + 2|0);
  $17 = HEAP8[$16>>0]|0;
  $t = $17;
  $18 = $cp;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $cp;
  $22 = (($21) + 2|0);
  HEAP8[$22>>0] = $20;
  $23 = $t;
  $24 = $cp;
  $25 = (($24) + 1|0);
  HEAP8[$25>>0] = $23;
  $26 = $0;
  $27 = (($26) + 4|0);
  $0 = $27;
 }
 STACKTOP = sp;return;
}
function _TIFFSwabArrayOfLong8($lp,$n) {
 $lp = $lp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lp;
 $1 = $n;
 while(1) {
  $2 = $1;
  $3 = (($2) + -1)|0;
  $1 = $3;
  $4 = ($2|0)>(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $cp = $5;
  $6 = $cp;
  $7 = (($6) + 7|0);
  $8 = HEAP8[$7>>0]|0;
  $t = $8;
  $9 = $cp;
  $10 = HEAP8[$9>>0]|0;
  $11 = $cp;
  $12 = (($11) + 7|0);
  HEAP8[$12>>0] = $10;
  $13 = $t;
  $14 = $cp;
  HEAP8[$14>>0] = $13;
  $15 = $cp;
  $16 = (($15) + 6|0);
  $17 = HEAP8[$16>>0]|0;
  $t = $17;
  $18 = $cp;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $cp;
  $22 = (($21) + 6|0);
  HEAP8[$22>>0] = $20;
  $23 = $t;
  $24 = $cp;
  $25 = (($24) + 1|0);
  HEAP8[$25>>0] = $23;
  $26 = $cp;
  $27 = (($26) + 5|0);
  $28 = HEAP8[$27>>0]|0;
  $t = $28;
  $29 = $cp;
  $30 = (($29) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $cp;
  $33 = (($32) + 5|0);
  HEAP8[$33>>0] = $31;
  $34 = $t;
  $35 = $cp;
  $36 = (($35) + 2|0);
  HEAP8[$36>>0] = $34;
  $37 = $cp;
  $38 = (($37) + 4|0);
  $39 = HEAP8[$38>>0]|0;
  $t = $39;
  $40 = $cp;
  $41 = (($40) + 3|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $cp;
  $44 = (($43) + 4|0);
  HEAP8[$44>>0] = $42;
  $45 = $t;
  $46 = $cp;
  $47 = (($46) + 3|0);
  HEAP8[$47>>0] = $45;
  $48 = $0;
  $49 = (($48) + 8|0);
  $0 = $49;
 }
 STACKTOP = sp;return;
}
function _TIFFSwabArrayOfFloat($fp,$n) {
 $fp = $fp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fp;
 $1 = $n;
 while(1) {
  $2 = $1;
  $3 = (($2) + -1)|0;
  $1 = $3;
  $4 = ($2|0)>(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $cp = $5;
  $6 = $cp;
  $7 = (($6) + 3|0);
  $8 = HEAP8[$7>>0]|0;
  $t = $8;
  $9 = $cp;
  $10 = HEAP8[$9>>0]|0;
  $11 = $cp;
  $12 = (($11) + 3|0);
  HEAP8[$12>>0] = $10;
  $13 = $t;
  $14 = $cp;
  HEAP8[$14>>0] = $13;
  $15 = $cp;
  $16 = (($15) + 2|0);
  $17 = HEAP8[$16>>0]|0;
  $t = $17;
  $18 = $cp;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $cp;
  $22 = (($21) + 2|0);
  HEAP8[$22>>0] = $20;
  $23 = $t;
  $24 = $cp;
  $25 = (($24) + 1|0);
  HEAP8[$25>>0] = $23;
  $26 = $0;
  $27 = (($26) + 4|0);
  $0 = $27;
 }
 STACKTOP = sp;return;
}
function _TIFFSwabArrayOfDouble($dp,$n) {
 $dp = $dp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dp;
 $1 = $n;
 while(1) {
  $2 = $1;
  $3 = (($2) + -1)|0;
  $1 = $3;
  $4 = ($2|0)>(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $cp = $5;
  $6 = $cp;
  $7 = (($6) + 7|0);
  $8 = HEAP8[$7>>0]|0;
  $t = $8;
  $9 = $cp;
  $10 = HEAP8[$9>>0]|0;
  $11 = $cp;
  $12 = (($11) + 7|0);
  HEAP8[$12>>0] = $10;
  $13 = $t;
  $14 = $cp;
  HEAP8[$14>>0] = $13;
  $15 = $cp;
  $16 = (($15) + 6|0);
  $17 = HEAP8[$16>>0]|0;
  $t = $17;
  $18 = $cp;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $cp;
  $22 = (($21) + 6|0);
  HEAP8[$22>>0] = $20;
  $23 = $t;
  $24 = $cp;
  $25 = (($24) + 1|0);
  HEAP8[$25>>0] = $23;
  $26 = $cp;
  $27 = (($26) + 5|0);
  $28 = HEAP8[$27>>0]|0;
  $t = $28;
  $29 = $cp;
  $30 = (($29) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $cp;
  $33 = (($32) + 5|0);
  HEAP8[$33>>0] = $31;
  $34 = $t;
  $35 = $cp;
  $36 = (($35) + 2|0);
  HEAP8[$36>>0] = $34;
  $37 = $cp;
  $38 = (($37) + 4|0);
  $39 = HEAP8[$38>>0]|0;
  $t = $39;
  $40 = $cp;
  $41 = (($40) + 3|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $cp;
  $44 = (($43) + 4|0);
  HEAP8[$44>>0] = $42;
  $45 = $t;
  $46 = $cp;
  $47 = (($46) + 3|0);
  HEAP8[$47>>0] = $45;
  $48 = $0;
  $49 = (($48) + 8|0);
  $0 = $49;
 }
 STACKTOP = sp;return;
}
function _TIFFGetBitRevTable($reversed) {
 $reversed = $reversed|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $reversed;
 $1 = $0;
 $2 = ($1|0)!=(0);
 $3 = $2 ? 19464 : 19720;
 STACKTOP = sp;return ($3|0);
}
function _TIFFReverseBits($cp,$n) {
 $cp = $cp|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $n;
 while(1) {
  $2 = $1;
  $3 = ($2|0)>(8);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = (19464 + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $0;
  HEAP8[$9>>0] = $8;
  $10 = $0;
  $11 = (($10) + 1|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = (19464 + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $0;
  $17 = (($16) + 1|0);
  HEAP8[$17>>0] = $15;
  $18 = $0;
  $19 = (($18) + 2|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (19464 + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $0;
  $25 = (($24) + 2|0);
  HEAP8[$25>>0] = $23;
  $26 = $0;
  $27 = (($26) + 3|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = (19464 + ($29)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $0;
  $33 = (($32) + 3|0);
  HEAP8[$33>>0] = $31;
  $34 = $0;
  $35 = (($34) + 4|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (19464 + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $0;
  $41 = (($40) + 4|0);
  HEAP8[$41>>0] = $39;
  $42 = $0;
  $43 = (($42) + 5|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = (19464 + ($45)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $0;
  $49 = (($48) + 5|0);
  HEAP8[$49>>0] = $47;
  $50 = $0;
  $51 = (($50) + 6|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = (19464 + ($53)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $0;
  $57 = (($56) + 6|0);
  HEAP8[$57>>0] = $55;
  $58 = $0;
  $59 = (($58) + 7|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (19464 + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $0;
  $65 = (($64) + 7|0);
  HEAP8[$65>>0] = $63;
  $66 = $0;
  $67 = (($66) + 8|0);
  $0 = $67;
  $68 = $1;
  $69 = (($68) - 8)|0;
  $1 = $69;
 }
 while(1) {
  $70 = $1;
  $71 = (($70) + -1)|0;
  $1 = $71;
  $72 = ($70|0)>(0);
  if (!($72)) {
   break;
  }
  $73 = $0;
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = (19464 + ($75)|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $0;
  HEAP8[$78>>0] = $77;
  $79 = $0;
  $80 = (($79) + 1|0);
  $0 = $80;
 }
 STACKTOP = sp;return;
}
function _TIFFComputeTile($tif,$x,$y,$z,$s) {
 $tif = $tif|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dx = 0, $dy = 0;
 var $dz = 0, $td = 0, $tile = 0, $xpt = 0, $ypt = 0, $zpt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $s;
 $5 = $0;
 $6 = (($5) + 40|0);
 $td = $6;
 $7 = $td;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $dx = $9;
 $10 = $td;
 $11 = (($10) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $dy = $12;
 $13 = $td;
 $14 = (($13) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $dz = $15;
 $tile = 1;
 $16 = $td;
 $17 = (($16) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(1);
 if ($19) {
  $3 = 0;
 }
 $20 = $dx;
 $21 = ($20|0)==(-1);
 if ($21) {
  $22 = $td;
  $23 = (($22) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $dx = $24;
 }
 $25 = $dy;
 $26 = ($25|0)==(-1);
 if ($26) {
  $27 = $td;
  $28 = (($27) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $dy = $29;
 }
 $30 = $dz;
 $31 = ($30|0)==(-1);
 if ($31) {
  $32 = $td;
  $33 = (($32) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  $dz = $34;
 }
 $35 = $dx;
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $137 = $tile;
  STACKTOP = sp;return ($137|0);
 }
 $37 = $dy;
 $38 = ($37|0)!=(0);
 if (!($38)) {
  $137 = $tile;
  STACKTOP = sp;return ($137|0);
 }
 $39 = $dz;
 $40 = ($39|0)!=(0);
 if (!($40)) {
  $137 = $tile;
  STACKTOP = sp;return ($137|0);
 }
 $41 = $td;
 $42 = (($41) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $dx;
 $45 = (($44) - 1)|0;
 $46 = (-1 - ($45))|0;
 $47 = ($43>>>0)<($46>>>0);
 if ($47) {
  $48 = $td;
  $49 = (($48) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $dx;
  $52 = (($51) - 1)|0;
  $53 = (($50) + ($52))|0;
  $54 = $dx;
  $55 = (($53>>>0) / ($54>>>0))&-1;
  $56 = $55;
 } else {
  $56 = 0;
 }
 $xpt = $56;
 $57 = $td;
 $58 = (($57) + 20|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $dy;
 $61 = (($60) - 1)|0;
 $62 = (-1 - ($61))|0;
 $63 = ($59>>>0)<($62>>>0);
 if ($63) {
  $64 = $td;
  $65 = (($64) + 20|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $dy;
  $68 = (($67) - 1)|0;
  $69 = (($66) + ($68))|0;
  $70 = $dy;
  $71 = (($69>>>0) / ($70>>>0))&-1;
  $72 = $71;
 } else {
  $72 = 0;
 }
 $ypt = $72;
 $73 = $td;
 $74 = (($73) + 24|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $dz;
 $77 = (($76) - 1)|0;
 $78 = (-1 - ($77))|0;
 $79 = ($75>>>0)<($78>>>0);
 if ($79) {
  $80 = $td;
  $81 = (($80) + 24|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $dz;
  $84 = (($83) - 1)|0;
  $85 = (($82) + ($84))|0;
  $86 = $dz;
  $87 = (($85>>>0) / ($86>>>0))&-1;
  $88 = $87;
 } else {
  $88 = 0;
 }
 $zpt = $88;
 $89 = $td;
 $90 = (($89) + 86|0);
 $91 = HEAP16[$90>>1]|0;
 $92 = $91&65535;
 $93 = ($92|0)==(2);
 if ($93) {
  $94 = $xpt;
  $95 = $ypt;
  $96 = Math_imul($94, $95)|0;
  $97 = $zpt;
  $98 = Math_imul($96, $97)|0;
  $99 = $4;
  $100 = $99&65535;
  $101 = Math_imul($98, $100)|0;
  $102 = $xpt;
  $103 = $ypt;
  $104 = Math_imul($102, $103)|0;
  $105 = $3;
  $106 = $dz;
  $107 = (($105>>>0) / ($106>>>0))&-1;
  $108 = Math_imul($104, $107)|0;
  $109 = (($101) + ($108))|0;
  $110 = $xpt;
  $111 = $2;
  $112 = $dy;
  $113 = (($111>>>0) / ($112>>>0))&-1;
  $114 = Math_imul($110, $113)|0;
  $115 = (($109) + ($114))|0;
  $116 = $1;
  $117 = $dx;
  $118 = (($116>>>0) / ($117>>>0))&-1;
  $119 = (($115) + ($118))|0;
  $tile = $119;
 } else {
  $120 = $xpt;
  $121 = $ypt;
  $122 = Math_imul($120, $121)|0;
  $123 = $3;
  $124 = $dz;
  $125 = (($123>>>0) / ($124>>>0))&-1;
  $126 = Math_imul($122, $125)|0;
  $127 = $xpt;
  $128 = $2;
  $129 = $dy;
  $130 = (($128>>>0) / ($129>>>0))&-1;
  $131 = Math_imul($127, $130)|0;
  $132 = (($126) + ($131))|0;
  $133 = $1;
  $134 = $dx;
  $135 = (($133>>>0) / ($134>>>0))&-1;
  $136 = (($132) + ($135))|0;
  $tile = $136;
 }
 $137 = $tile;
 STACKTOP = sp;return ($137|0);
}
function _TIFFCheckTile($tif,$x,$y,$z,$s) {
 $tif = $tif|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $td = 0, $vararg_buffer = 0;
 var $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $x;
 $3 = $y;
 $4 = $z;
 $5 = $s;
 $6 = $1;
 $7 = (($6) + 40|0);
 $td = $7;
 $8 = $2;
 $9 = $td;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)>=($11>>>0);
 if ($12) {
  $13 = $1;
  $14 = (($13) + 628|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  $19 = $td;
  $20 = (($19) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) - 1)|0;
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $22;
  _TIFFErrorExt($15,$17,19976,$vararg_buffer);
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $23 = $3;
 $24 = $td;
 $25 = (($24) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($23>>>0)>=($26>>>0);
 if ($27) {
  $28 = $1;
  $29 = (($28) + 628|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $1;
  $32 = HEAP32[$31>>2]|0;
  $33 = $3;
  $34 = $td;
  $35 = (($34) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) - 1)|0;
  HEAP32[$vararg_buffer2>>2] = $33;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $37;
  _TIFFErrorExt($30,$32,20008,$vararg_buffer2);
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $38 = $4;
 $39 = $td;
 $40 = (($39) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($38>>>0)>=($41>>>0);
 if ($42) {
  $43 = $1;
  $44 = (($43) + 628|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $1;
  $47 = HEAP32[$46>>2]|0;
  $48 = $4;
  $49 = $td;
  $50 = (($49) + 24|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) - 1)|0;
  HEAP32[$vararg_buffer6>>2] = $48;
  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $52;
  _TIFFErrorExt($45,$47,20040,$vararg_buffer6);
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $53 = $td;
 $54 = (($53) + 86|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = $55&65535;
 $57 = ($56|0)==(2);
 if ($57) {
  $58 = $5;
  $59 = $58&65535;
  $60 = $td;
  $61 = (($60) + 58|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62&65535;
  $64 = ($59|0)>=($63|0);
  if ($64) {
   $65 = $1;
   $66 = (($65) + 628|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $1;
   $69 = HEAP32[$68>>2]|0;
   $70 = $5;
   $71 = $70&65535;
   $72 = $td;
   $73 = (($72) + 58|0);
   $74 = HEAP16[$73>>1]|0;
   $75 = $74&65535;
   $76 = (($75) - 1)|0;
   HEAP32[$vararg_buffer10>>2] = $71;
   $vararg_ptr13 = (($vararg_buffer10) + 4|0);
   HEAP32[$vararg_ptr13>>2] = $76;
   _TIFFErrorExt($67,$69,20080,$vararg_buffer10);
   $0 = 0;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  }
 }
 $0 = 1;
 $77 = $0;
 STACKTOP = sp;return ($77|0);
}
function _TIFFNumberOfTiles($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $dx = 0;
 var $dy = 0, $dz = 0, $ntiles = 0, $td = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 40|0);
 $td = $2;
 $3 = $td;
 $4 = (($3) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $dx = $5;
 $6 = $td;
 $7 = (($6) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $dy = $8;
 $9 = $td;
 $10 = (($9) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $dz = $11;
 $12 = $dx;
 $13 = ($12|0)==(-1);
 if ($13) {
  $14 = $td;
  $15 = (($14) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $dx = $16;
 }
 $17 = $dy;
 $18 = ($17|0)==(-1);
 if ($18) {
  $19 = $td;
  $20 = (($19) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $dy = $21;
 }
 $22 = $dz;
 $23 = ($22|0)==(-1);
 if ($23) {
  $24 = $td;
  $25 = (($24) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $dz = $26;
 }
 $27 = $dx;
 $28 = ($27|0)==(0);
 if ($28) {
  label = 10;
 } else {
  $29 = $dy;
  $30 = ($29|0)==(0);
  if ($30) {
   label = 10;
  } else {
   $31 = $dz;
   $32 = ($31|0)==(0);
   if ($32) {
    label = 10;
   } else {
    $33 = $0;
    $34 = $0;
    $35 = $td;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $dx;
    $39 = (($38) - 1)|0;
    $40 = (-1 - ($39))|0;
    $41 = ($37>>>0)<($40>>>0);
    if ($41) {
     $42 = $td;
     $43 = (($42) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $dx;
     $46 = (($45) - 1)|0;
     $47 = (($44) + ($46))|0;
     $48 = $dx;
     $49 = (($47>>>0) / ($48>>>0))&-1;
     $65 = $49;
    } else {
     $65 = 0;
    }
    $50 = $td;
    $51 = (($50) + 20|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $dy;
    $54 = (($53) - 1)|0;
    $55 = (-1 - ($54))|0;
    $56 = ($52>>>0)<($55>>>0);
    if ($56) {
     $57 = $td;
     $58 = (($57) + 20|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = $dy;
     $61 = (($60) - 1)|0;
     $62 = (($59) + ($61))|0;
     $63 = $dy;
     $64 = (($62>>>0) / ($63>>>0))&-1;
     $66 = $64;
    } else {
     $66 = 0;
    }
    $67 = (__TIFFMultiply32($34,$65,$66,20120)|0);
    $68 = $td;
    $69 = (($68) + 24|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $dz;
    $72 = (($71) - 1)|0;
    $73 = (-1 - ($72))|0;
    $74 = ($70>>>0)<($73>>>0);
    if ($74) {
     $75 = $td;
     $76 = (($75) + 24|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $dz;
     $79 = (($78) - 1)|0;
     $80 = (($77) + ($79))|0;
     $81 = $dz;
     $82 = (($80>>>0) / ($81>>>0))&-1;
     $83 = $82;
    } else {
     $83 = 0;
    }
    $84 = (__TIFFMultiply32($33,$67,$83,20120)|0);
    $85 = $84;
   }
  }
 }
 if ((label|0) == 10) {
  $85 = 0;
 }
 $ntiles = $85;
 $86 = $td;
 $87 = (($86) + 86|0);
 $88 = HEAP16[$87>>1]|0;
 $89 = $88&65535;
 $90 = ($89|0)==(2);
 if (!($90)) {
  $98 = $ntiles;
  STACKTOP = sp;return ($98|0);
 }
 $91 = $0;
 $92 = $ntiles;
 $93 = $td;
 $94 = (($93) + 58|0);
 $95 = HEAP16[$94>>1]|0;
 $96 = $95&65535;
 $97 = (__TIFFMultiply32($91,$92,$96,20120)|0);
 $ntiles = $97;
 $98 = $ntiles;
 STACKTOP = sp;return ($98|0);
}
function _TIFFTileRowSize64($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $rowsize = 0, $td = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $rowsize = sp;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 40|0);
 $td = $3;
 $4 = $td;
 $5 = (($4) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = $td;
  $9 = (($8) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $16 = $1;
   $17 = $td;
   $18 = (($17) + 44|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   $21 = $td;
   $22 = (($21) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (__TIFFMultiply64($16,$20,0,$23,0,20144)|0);
   $25 = tempRet0;
   $26 = $rowsize;
   $27 = $26;
   HEAP32[$27>>2] = $24;
   $28 = (($26) + 4)|0;
   $29 = $28;
   HEAP32[$29>>2] = $25;
   $30 = $td;
   $31 = (($30) + 86|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32&65535;
   $34 = ($33|0)==(1);
   if ($34) {
    $35 = $1;
    $36 = $rowsize;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = (($36) + 4)|0;
    $40 = $39;
    $41 = HEAP32[$40>>2]|0;
    $42 = $td;
    $43 = (($42) + 58|0);
    $44 = HEAP16[$43>>1]|0;
    $45 = $44&65535;
    $46 = (__TIFFMultiply64($35,$38,$41,$45,0,20144)|0);
    $47 = tempRet0;
    $48 = $rowsize;
    $49 = $48;
    HEAP32[$49>>2] = $46;
    $50 = (($48) + 4)|0;
    $51 = $50;
    HEAP32[$51>>2] = $47;
   }
   $52 = $rowsize;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = (($52) + 4)|0;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = $54 & 7;
   $59 = ($58|0)!=(0);
   $60 = (0)!=(0);
   $61 = $59 | $60;
   if ($61) {
    $62 = $rowsize;
    $63 = $62;
    $64 = HEAP32[$63>>2]|0;
    $65 = (($62) + 4)|0;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = (_bitshift64Lshr(($64|0),($67|0),3)|0);
    $69 = tempRet0;
    $70 = (_i64Add(($68|0),($69|0),1,0)|0);
    $71 = tempRet0;
    $82 = $70;$85 = $71;
   } else {
    $72 = $rowsize;
    $73 = $72;
    $74 = HEAP32[$73>>2]|0;
    $75 = (($72) + 4)|0;
    $76 = $75;
    $77 = HEAP32[$76>>2]|0;
    $78 = (_bitshift64Lshr(($74|0),($77|0),3)|0);
    $79 = tempRet0;
    $82 = $78;$85 = $79;
   }
   $80 = $0;
   $81 = $80;
   HEAP32[$81>>2] = $82;
   $83 = (($80) + 4)|0;
   $84 = $83;
   HEAP32[$84>>2] = $85;
   $86 = $0;
   $87 = $86;
   $88 = HEAP32[$87>>2]|0;
   $89 = (($86) + 4)|0;
   $90 = $89;
   $91 = HEAP32[$90>>2]|0;
   tempRet0 = $91;
   STACKTOP = sp;return ($88|0);
  }
 }
 $12 = $0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $86 = $0;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) + 4)|0;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 tempRet0 = $91;
 STACKTOP = sp;return ($88|0);
}
function _TIFFTileRowSize($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $m = sp;
 $0 = $tif;
 $1 = $0;
 $2 = (_TIFFTileRowSize64($1)|0);
 $3 = tempRet0;
 $4 = $m;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $8 = $m;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $n = $10;
 $14 = $n;
 $15 = ($14|0)<(0);
 $16 = $15 << 31 >> 31;
 $17 = $m;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($14|0)!=($19|0);
 $24 = ($16|0)!=($22|0);
 $25 = $23 | $24;
 if (!($25)) {
  $29 = $n;
  STACKTOP = sp;return ($29|0);
 }
 $26 = $0;
 $27 = (($26) + 628|0);
 $28 = HEAP32[$27>>2]|0;
 _TIFFErrorExt($28,20160,20176,$vararg_buffer);
 $n = 0;
 $29 = $n;
 STACKTOP = sp;return ($29|0);
}
function _TIFFVTileSize64($tif,$nrows) {
 $tif = $tif|0;
 $nrows = $nrows|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $samplingblock_samples = 0, $samplingblocks_hor = 0, $samplingblocks_ver = 0;
 var $samplingrow_samples = 0, $samplingrow_size = 0, $td = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $ycbcrsubsampling = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $0 = sp + 8|0;
 $ycbcrsubsampling = sp + 60|0;
 $samplingrow_samples = sp + 24|0;
 $samplingrow_size = sp;
 $1 = $tif;
 $2 = $nrows;
 $3 = $1;
 $4 = (($3) + 40|0);
 $td = $4;
 $5 = $td;
 $6 = (($5) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = $td;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = $td;
   $14 = (($13) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $21 = $td;
    $22 = (($21) + 86|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = $23&65535;
    $25 = ($24|0)==(1);
    if ($25) {
     $26 = $td;
     $27 = (($26) + 50|0);
     $28 = HEAP16[$27>>1]|0;
     $29 = $28&65535;
     $30 = ($29|0)==(6);
     if ($30) {
      $31 = $td;
      $32 = (($31) + 58|0);
      $33 = HEAP16[$32>>1]|0;
      $34 = $33&65535;
      $35 = ($34|0)==(3);
      if ($35) {
       $36 = $1;
       $37 = (($36) + 12|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = $38 & 16384;
       $40 = ($39|0)!=(0);
       if (!($40)) {
        $41 = $1;
        $42 = (($ycbcrsubsampling) + 2|0);
        HEAP32[$vararg_buffer>>2] = $ycbcrsubsampling;
        $vararg_ptr1 = (($vararg_buffer) + 4|0);
        HEAP32[$vararg_ptr1>>2] = $42;
        (_TIFFGetFieldDefaulted($41,530,$vararg_buffer)|0);
        $43 = HEAP16[$ycbcrsubsampling>>1]|0;
        $44 = $43&65535;
        $45 = ($44|0)!=(1);
        if ($45) {
         $46 = HEAP16[$ycbcrsubsampling>>1]|0;
         $47 = $46&65535;
         $48 = ($47|0)!=(2);
         if ($48) {
          $49 = HEAP16[$ycbcrsubsampling>>1]|0;
          $50 = $49&65535;
          $51 = ($50|0)!=(4);
          if (!($51)) {
           label = 12;
          }
         } else {
          label = 12;
         }
        } else {
         label = 12;
        }
        do {
         if ((label|0) == 12) {
          $52 = (($ycbcrsubsampling) + 2|0);
          $53 = HEAP16[$52>>1]|0;
          $54 = $53&65535;
          $55 = ($54|0)!=(1);
          if ($55) {
           $56 = (($ycbcrsubsampling) + 2|0);
           $57 = HEAP16[$56>>1]|0;
           $58 = $57&65535;
           $59 = ($58|0)!=(2);
           if ($59) {
            $60 = (($ycbcrsubsampling) + 2|0);
            $61 = HEAP16[$60>>1]|0;
            $62 = $61&65535;
            $63 = ($62|0)!=(4);
            if ($63) {
             break;
            }
           }
          }
          $76 = HEAP16[$ycbcrsubsampling>>1]|0;
          $77 = $76&65535;
          $78 = (($ycbcrsubsampling) + 2|0);
          $79 = HEAP16[$78>>1]|0;
          $80 = $79&65535;
          $81 = Math_imul($77, $80)|0;
          $82 = (($81) + 2)|0;
          $83 = $82&65535;
          $samplingblock_samples = $83;
          $84 = $td;
          $85 = (($84) + 28|0);
          $86 = HEAP32[$85>>2]|0;
          $87 = HEAP16[$ycbcrsubsampling>>1]|0;
          $88 = $87&65535;
          $89 = (($88) - 1)|0;
          $90 = (-1 - ($89))|0;
          $91 = ($86>>>0)<($90>>>0);
          if ($91) {
           $92 = $td;
           $93 = (($92) + 28|0);
           $94 = HEAP32[$93>>2]|0;
           $95 = HEAP16[$ycbcrsubsampling>>1]|0;
           $96 = $95&65535;
           $97 = (($96) - 1)|0;
           $98 = (($94) + ($97))|0;
           $99 = HEAP16[$ycbcrsubsampling>>1]|0;
           $100 = $99&65535;
           $101 = (($98>>>0) / ($100>>>0))&-1;
           $102 = $101;
          } else {
           $102 = 0;
          }
          $samplingblocks_hor = $102;
          $103 = $2;
          $104 = (($ycbcrsubsampling) + 2|0);
          $105 = HEAP16[$104>>1]|0;
          $106 = $105&65535;
          $107 = (($106) - 1)|0;
          $108 = (-1 - ($107))|0;
          $109 = ($103>>>0)<($108>>>0);
          if ($109) {
           $110 = $2;
           $111 = (($ycbcrsubsampling) + 2|0);
           $112 = HEAP16[$111>>1]|0;
           $113 = $112&65535;
           $114 = (($113) - 1)|0;
           $115 = (($110) + ($114))|0;
           $116 = (($ycbcrsubsampling) + 2|0);
           $117 = HEAP16[$116>>1]|0;
           $118 = $117&65535;
           $119 = (($115>>>0) / ($118>>>0))&-1;
           $120 = $119;
          } else {
           $120 = 0;
          }
          $samplingblocks_ver = $120;
          $121 = $1;
          $122 = $samplingblocks_hor;
          $123 = $samplingblock_samples;
          $124 = $123&65535;
          $125 = (__TIFFMultiply64($121,$122,0,$124,0,20200)|0);
          $126 = tempRet0;
          $127 = $samplingrow_samples;
          $128 = $127;
          HEAP32[$128>>2] = $125;
          $129 = (($127) + 4)|0;
          $130 = $129;
          HEAP32[$130>>2] = $126;
          $131 = $1;
          $132 = $samplingrow_samples;
          $133 = $132;
          $134 = HEAP32[$133>>2]|0;
          $135 = (($132) + 4)|0;
          $136 = $135;
          $137 = HEAP32[$136>>2]|0;
          $138 = $td;
          $139 = (($138) + 44|0);
          $140 = HEAP16[$139>>1]|0;
          $141 = $140&65535;
          $142 = (__TIFFMultiply64($131,$134,$137,$141,0,20200)|0);
          $143 = tempRet0;
          $144 = $142 & 7;
          $145 = ($144|0)!=(0);
          $146 = (0)!=(0);
          $147 = $145 | $146;
          if ($147) {
           $148 = $1;
           $149 = $samplingrow_samples;
           $150 = $149;
           $151 = HEAP32[$150>>2]|0;
           $152 = (($149) + 4)|0;
           $153 = $152;
           $154 = HEAP32[$153>>2]|0;
           $155 = $td;
           $156 = (($155) + 44|0);
           $157 = HEAP16[$156>>1]|0;
           $158 = $157&65535;
           $159 = (__TIFFMultiply64($148,$151,$154,$158,0,20200)|0);
           $160 = tempRet0;
           $161 = (_bitshift64Lshr(($159|0),($160|0),3)|0);
           $162 = tempRet0;
           $163 = (_i64Add(($161|0),($162|0),1,0)|0);
           $164 = tempRet0;
           $182 = $163;$185 = $164;
          } else {
           $165 = $1;
           $166 = $samplingrow_samples;
           $167 = $166;
           $168 = HEAP32[$167>>2]|0;
           $169 = (($166) + 4)|0;
           $170 = $169;
           $171 = HEAP32[$170>>2]|0;
           $172 = $td;
           $173 = (($172) + 44|0);
           $174 = HEAP16[$173>>1]|0;
           $175 = $174&65535;
           $176 = (__TIFFMultiply64($165,$168,$171,$175,0,20200)|0);
           $177 = tempRet0;
           $178 = (_bitshift64Lshr(($176|0),($177|0),3)|0);
           $179 = tempRet0;
           $182 = $178;$185 = $179;
          }
          $180 = $samplingrow_size;
          $181 = $180;
          HEAP32[$181>>2] = $182;
          $183 = (($180) + 4)|0;
          $184 = $183;
          HEAP32[$184>>2] = $185;
          $186 = $1;
          $187 = $samplingrow_size;
          $188 = $187;
          $189 = HEAP32[$188>>2]|0;
          $190 = (($187) + 4)|0;
          $191 = $190;
          $192 = HEAP32[$191>>2]|0;
          $193 = $samplingblocks_ver;
          $194 = (__TIFFMultiply64($186,$189,$192,$193,0,20200)|0);
          $195 = tempRet0;
          $196 = $0;
          $197 = $196;
          HEAP32[$197>>2] = $194;
          $198 = (($196) + 4)|0;
          $199 = $198;
          HEAP32[$199>>2] = $195;
          $211 = $0;
          $212 = $211;
          $213 = HEAP32[$212>>2]|0;
          $214 = (($211) + 4)|0;
          $215 = $214;
          $216 = HEAP32[$215>>2]|0;
          tempRet0 = $216;
          STACKTOP = sp;return ($213|0);
         }
        } while(0);
        $64 = $1;
        $65 = (($64) + 628|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = HEAP16[$ycbcrsubsampling>>1]|0;
        $68 = $67&65535;
        $69 = (($ycbcrsubsampling) + 2|0);
        $70 = HEAP16[$69>>1]|0;
        $71 = $70&65535;
        HEAP32[$vararg_buffer2>>2] = $68;
        $vararg_ptr5 = (($vararg_buffer2) + 4|0);
        HEAP32[$vararg_ptr5>>2] = $71;
        _TIFFErrorExt($66,20200,20216,$vararg_buffer2);
        $72 = $0;
        $73 = $72;
        HEAP32[$73>>2] = 0;
        $74 = (($72) + 4)|0;
        $75 = $74;
        HEAP32[$75>>2] = 0;
        $211 = $0;
        $212 = $211;
        $213 = HEAP32[$212>>2]|0;
        $214 = (($211) + 4)|0;
        $215 = $214;
        $216 = HEAP32[$215>>2]|0;
        tempRet0 = $216;
        STACKTOP = sp;return ($213|0);
       }
      }
     }
    }
    $200 = $1;
    $201 = $2;
    $202 = $1;
    $203 = (_TIFFTileRowSize64($202)|0);
    $204 = tempRet0;
    $205 = (__TIFFMultiply64($200,$201,0,$203,$204,20200)|0);
    $206 = tempRet0;
    $207 = $0;
    $208 = $207;
    HEAP32[$208>>2] = $205;
    $209 = (($207) + 4)|0;
    $210 = $209;
    HEAP32[$210>>2] = $206;
    $211 = $0;
    $212 = $211;
    $213 = HEAP32[$212>>2]|0;
    $214 = (($211) + 4)|0;
    $215 = $214;
    $216 = HEAP32[$215>>2]|0;
    tempRet0 = $216;
    STACKTOP = sp;return ($213|0);
   }
  }
 }
 $17 = $0;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $211 = $0;
 $212 = $211;
 $213 = HEAP32[$212>>2]|0;
 $214 = (($211) + 4)|0;
 $215 = $214;
 $216 = HEAP32[$215>>2]|0;
 tempRet0 = $216;
 STACKTOP = sp;return ($213|0);
}
function _TIFFTileSize64($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 40|0);
 $4 = (($3) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_TIFFVTileSize64($1,$5)|0);
 $7 = tempRet0;
 tempRet0 = $7;
 STACKTOP = sp;return ($6|0);
}
function _TIFFTileSize($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $m = sp;
 $0 = $tif;
 $1 = $0;
 $2 = (_TIFFTileSize64($1)|0);
 $3 = tempRet0;
 $4 = $m;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $8 = $m;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $n = $10;
 $14 = $n;
 $15 = ($14|0)<(0);
 $16 = $15 << 31 >> 31;
 $17 = $m;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($14|0)!=($19|0);
 $24 = ($16|0)!=($22|0);
 $25 = $23 | $24;
 if (!($25)) {
  $29 = $n;
  STACKTOP = sp;return ($29|0);
 }
 $26 = $0;
 $27 = (($26) + 628|0);
 $28 = HEAP32[$27>>2]|0;
 _TIFFErrorExt($28,20256,20176,$vararg_buffer);
 $n = 0;
 $29 = $n;
 STACKTOP = sp;return ($29|0);
}
function __TIFFDefaultTileSize($tif,$tw,$th) {
 $tif = $tif|0;
 $tw = $tw|0;
 $th = $th|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $tw;
 $2 = $th;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  $6 = $1;
  HEAP32[$6>>2] = 256;
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(1);
 if ($9) {
  $10 = $2;
  HEAP32[$10>>2] = 256;
 }
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 15;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16>>>0)<(4294967280);
  if ($17) {
   $18 = $1;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 15)|0;
   $21 = (($20>>>0) / 16)&-1;
   $23 = $21;
  } else {
   $23 = 0;
  }
  $22 = $23<<4;
  $24 = $1;
  HEAP32[$24>>2] = $22;
 }
 $25 = $2;
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 15;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $2;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30>>>0)<(4294967280);
 if ($31) {
  $32 = $2;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 15)|0;
  $35 = (($34>>>0) / 16)&-1;
  $37 = $35;
 } else {
  $37 = 0;
 }
 $36 = $37<<4;
 $38 = $2;
 HEAP32[$38>>2] = $36;
 STACKTOP = sp;return;
}
function _TIFFWarningExt($fd,$module,$fmt,$varargs) {
 $fd = $fd|0;
 $module = $module|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 $0 = $fd;
 $1 = $module;
 $2 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $3 = HEAP32[20504>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[20504>>2]|0;
  $6 = $1;
  $7 = $2;
  FUNCTION_TABLE_viii[$5 & 255]($6,$7,$ap);
 }
 $8 = HEAP32[20272>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[20272>>2]|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 FUNCTION_TABLE_viiii[$10 & 127]($11,$12,$13,$ap);
 STACKTOP = sp;return;
}
function _TIFFFlushData1($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 608|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 do {
  if ($5) {
   $6 = $1;
   $7 = (($6) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 & 1048576;
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = $1;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $1;
    $15 = (($14) + 40|0);
    $16 = (($15) + 54|0);
    $17 = HEAP16[$16>>1]|0;
    $18 = $17&65535;
    $19 = $13 & $18;
    $20 = ($19|0)!=(0);
    if (!($20)) {
     $21 = $1;
     $22 = (($21) + 12|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $23 & 256;
     $25 = ($24|0)==(0);
     if ($25) {
      $26 = $1;
      $27 = (($26) + 588|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $1;
      $30 = (($29) + 608|0);
      $31 = HEAP32[$30>>2]|0;
      _TIFFReverseBits($28,$31);
     }
    }
    $32 = $1;
    $33 = $1;
    $34 = (($33) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 & 1024;
    $37 = ($36|0)!=(0);
    if ($37) {
     $38 = $1;
     $39 = (($38) + 492|0);
     $40 = HEAP32[$39>>2]|0;
     $50 = $40;
    } else {
     $41 = $1;
     $42 = (($41) + 452|0);
     $43 = HEAP32[$42>>2]|0;
     $50 = $43;
    }
    $44 = $1;
    $45 = (($44) + 588|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $1;
    $48 = (($47) + 608|0);
    $49 = HEAP32[$48>>2]|0;
    $51 = (_TIFFAppendToStrip($32,$50,$46,$49)|0);
    $52 = ($51|0)!=(0);
    if ($52) {
     $53 = $1;
     $54 = (($53) + 608|0);
     HEAP32[$54>>2] = 0;
     $55 = $1;
     $56 = (($55) + 588|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $1;
     $59 = (($58) + 604|0);
     HEAP32[$59>>2] = $57;
     break;
    }
    $0 = 0;
    $60 = $0;
    STACKTOP = sp;return ($60|0);
   }
  }
 } while(0);
 $0 = 1;
 $60 = $0;
 STACKTOP = sp;return ($60|0);
}
function _TIFFAppendToStrip($tif,$strip,$data,$cc) {
 $tif = $tif|0;
 $strip = $strip|0;
 $data = $data|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $m = 0, $old_byte_count = 0, $td = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $m = sp + 24|0;
 $old_byte_count = sp;
 $1 = $tif;
 $2 = $strip;
 $3 = $data;
 $4 = $cc;
 $5 = $1;
 $6 = (($5) + 40|0);
 $td = $6;
 $7 = $old_byte_count;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = $2;
 $12 = $td;
 $13 = (($12) + 132|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($11<<3)|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($18|0)==(0);
 $23 = ($21|0)==(0);
 $24 = $22 & $23;
 if ($24) {
  label = 3;
 } else {
  $25 = $1;
  $26 = (($25) + 456|0);
  $27 = $26;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)==(0);
  $34 = ($32|0)==(0);
  $35 = $33 & $34;
  if ($35) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $36 = $td;
  $37 = (($36) + 128|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38>>>0)>(0);
  if (!($39)) {
   ___assert_fail((20304|0),(20328|0),668,(20344|0));
   // unreachable;
  }
  $40 = $2;
  $41 = $td;
  $42 = (($41) + 136|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($40<<3)|0);
  $45 = $44;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($45) + 4)|0;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47|0)!=(0);
  $52 = ($50|0)!=(0);
  $53 = $51 | $52;
  do {
   if ($53) {
    $54 = $2;
    $55 = $td;
    $56 = (($55) + 132|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) + ($54<<3)|0);
    $59 = $58;
    $60 = $59;
    $61 = HEAP32[$60>>2]|0;
    $62 = (($59) + 4)|0;
    $63 = $62;
    $64 = HEAP32[$63>>2]|0;
    $65 = ($61|0)!=(0);
    $66 = ($64|0)!=(0);
    $67 = $65 | $66;
    if ($67) {
     $68 = $2;
     $69 = $td;
     $70 = (($69) + 136|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($71) + ($68<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = $4;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = ($78>>>0)>($81>>>0);
     $83 = ($75>>>0)>=($79>>>0);
     $84 = ($78|0)==($81|0);
     $85 = $84 & $83;
     $86 = $82 | $85;
     if ($86) {
      $87 = $1;
      $88 = (($87) + 640|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = $1;
      $91 = (($90) + 628|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = $2;
      $94 = $td;
      $95 = (($94) + 132|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (($96) + ($93<<3)|0);
      $98 = $97;
      $99 = $98;
      $100 = HEAP32[$99>>2]|0;
      $101 = (($98) + 4)|0;
      $102 = $101;
      $103 = HEAP32[$102>>2]|0;
      $104 = (FUNCTION_TABLE_iiiii[$89 & 255]($92,$100,$103,0)|0);
      $105 = tempRet0;
      $106 = $2;
      $107 = $td;
      $108 = (($107) + 132|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (($109) + ($106<<3)|0);
      $111 = $110;
      $112 = $111;
      $113 = HEAP32[$112>>2]|0;
      $114 = (($111) + 4)|0;
      $115 = $114;
      $116 = HEAP32[$115>>2]|0;
      $117 = ($104|0)==($113|0);
      $118 = ($105|0)==($116|0);
      $119 = $117 & $118;
      if ($119) {
       break;
      }
      $120 = $1;
      $121 = (($120) + 628|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = $1;
      $124 = (($123) + 444|0);
      $125 = HEAP32[$124>>2]|0;
      HEAP32[$vararg_buffer>>2] = $125;
      _TIFFErrorExt($122,20280,20368,$vararg_buffer);
      $0 = 0;
      $329 = $0;
      STACKTOP = sp;return ($329|0);
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } while(0);
  if ((label|0) == 11) {
   $126 = $1;
   $127 = (($126) + 640|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $1;
   $130 = (($129) + 628|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (FUNCTION_TABLE_iiiii[$128 & 255]($131,0,0,2)|0);
   $133 = tempRet0;
   $134 = $2;
   $135 = $td;
   $136 = (($135) + 132|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (($137) + ($134<<3)|0);
   $139 = $138;
   $140 = $139;
   HEAP32[$140>>2] = $132;
   $141 = (($139) + 4)|0;
   $142 = $141;
   HEAP32[$142>>2] = $133;
   $143 = $1;
   $144 = (($143) + 12|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $145 | 2097152;
   HEAP32[$144>>2] = $146;
  }
  $147 = $2;
  $148 = $td;
  $149 = (($148) + 132|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($150) + ($147<<3)|0);
  $152 = $151;
  $153 = $152;
  $154 = HEAP32[$153>>2]|0;
  $155 = (($152) + 4)|0;
  $156 = $155;
  $157 = HEAP32[$156>>2]|0;
  $158 = $1;
  $159 = (($158) + 456|0);
  $160 = $159;
  $161 = $160;
  HEAP32[$161>>2] = $154;
  $162 = (($160) + 4)|0;
  $163 = $162;
  HEAP32[$163>>2] = $157;
  $164 = $2;
  $165 = $td;
  $166 = (($165) + 136|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + ($164<<3)|0);
  $169 = $168;
  $170 = $169;
  $171 = HEAP32[$170>>2]|0;
  $172 = (($169) + 4)|0;
  $173 = $172;
  $174 = HEAP32[$173>>2]|0;
  $175 = $old_byte_count;
  $176 = $175;
  HEAP32[$176>>2] = $171;
  $177 = (($175) + 4)|0;
  $178 = $177;
  HEAP32[$178>>2] = $174;
  $179 = $2;
  $180 = $td;
  $181 = (($180) + 136|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = (($182) + ($179<<3)|0);
  $184 = $183;
  $185 = $184;
  HEAP32[$185>>2] = 0;
  $186 = (($184) + 4)|0;
  $187 = $186;
  HEAP32[$187>>2] = 0;
 }
 $188 = $1;
 $189 = (($188) + 456|0);
 $190 = $189;
 $191 = $190;
 $192 = HEAP32[$191>>2]|0;
 $193 = (($190) + 4)|0;
 $194 = $193;
 $195 = HEAP32[$194>>2]|0;
 $196 = $4;
 $197 = ($196|0)<(0);
 $198 = $197 << 31 >> 31;
 $199 = (_i64Add(($192|0),($195|0),($196|0),($198|0))|0);
 $200 = tempRet0;
 $201 = $m;
 $202 = $201;
 HEAP32[$202>>2] = $199;
 $203 = (($201) + 4)|0;
 $204 = $203;
 HEAP32[$204>>2] = $200;
 $205 = $1;
 $206 = (($205) + 12|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = $207 & 524288;
 $209 = ($208|0)!=(0);
 if (!($209)) {
  $210 = $m;
  $211 = $210;
  $212 = HEAP32[$211>>2]|0;
  $213 = (($210) + 4)|0;
  $214 = $213;
  $215 = HEAP32[$214>>2]|0;
  $216 = $m;
  $217 = $216;
  HEAP32[$217>>2] = $212;
  $218 = (($216) + 4)|0;
  $219 = $218;
  HEAP32[$219>>2] = 0;
 }
 $220 = $m;
 $221 = $220;
 $222 = HEAP32[$221>>2]|0;
 $223 = (($220) + 4)|0;
 $224 = $223;
 $225 = HEAP32[$224>>2]|0;
 $226 = $1;
 $227 = (($226) + 456|0);
 $228 = $227;
 $229 = $228;
 $230 = HEAP32[$229>>2]|0;
 $231 = (($228) + 4)|0;
 $232 = $231;
 $233 = HEAP32[$232>>2]|0;
 $234 = ($225>>>0)<($233>>>0);
 $235 = ($222>>>0)<($230>>>0);
 $236 = ($225|0)==($233|0);
 $237 = $236 & $235;
 $238 = $234 | $237;
 if (!($238)) {
  $239 = $m;
  $240 = $239;
  $241 = HEAP32[$240>>2]|0;
  $242 = (($239) + 4)|0;
  $243 = $242;
  $244 = HEAP32[$243>>2]|0;
  $245 = $4;
  $246 = ($245|0)<(0);
  $247 = $246 << 31 >> 31;
  $248 = ($244>>>0)<($247>>>0);
  $249 = ($241>>>0)<($245>>>0);
  $250 = ($244|0)==($247|0);
  $251 = $250 & $249;
  $252 = $248 | $251;
  if (!($252)) {
   $256 = $1;
   $257 = (($256) + 636|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = $1;
   $260 = (($259) + 628|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = $3;
   $263 = $4;
   $264 = (FUNCTION_TABLE_iiii[$258 & 255]($261,$262,$263)|0);
   $265 = $4;
   $266 = ($264|0)==($265|0);
   if (!($266)) {
    $267 = $1;
    $268 = (($267) + 628|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = $1;
    $271 = (($270) + 444|0);
    $272 = HEAP32[$271>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $272;
    _TIFFErrorExt($269,20280,20432,$vararg_buffer3);
    $0 = 0;
    $329 = $0;
    STACKTOP = sp;return ($329|0);
   }
   $273 = $m;
   $274 = $273;
   $275 = HEAP32[$274>>2]|0;
   $276 = (($273) + 4)|0;
   $277 = $276;
   $278 = HEAP32[$277>>2]|0;
   $279 = $1;
   $280 = (($279) + 456|0);
   $281 = $280;
   $282 = $281;
   HEAP32[$282>>2] = $275;
   $283 = (($281) + 4)|0;
   $284 = $283;
   HEAP32[$284>>2] = $278;
   $285 = $4;
   $286 = ($285|0)<(0);
   $287 = $286 << 31 >> 31;
   $288 = $2;
   $289 = $td;
   $290 = (($289) + 136|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = (($291) + ($288<<3)|0);
   $293 = $292;
   $294 = $293;
   $295 = HEAP32[$294>>2]|0;
   $296 = (($293) + 4)|0;
   $297 = $296;
   $298 = HEAP32[$297>>2]|0;
   $299 = (_i64Add(($295|0),($298|0),($285|0),($287|0))|0);
   $300 = tempRet0;
   $301 = $292;
   $302 = $301;
   HEAP32[$302>>2] = $299;
   $303 = (($301) + 4)|0;
   $304 = $303;
   HEAP32[$304>>2] = $300;
   $305 = $2;
   $306 = $td;
   $307 = (($306) + 136|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = (($308) + ($305<<3)|0);
   $310 = $309;
   $311 = $310;
   $312 = HEAP32[$311>>2]|0;
   $313 = (($310) + 4)|0;
   $314 = $313;
   $315 = HEAP32[$314>>2]|0;
   $316 = $old_byte_count;
   $317 = $316;
   $318 = HEAP32[$317>>2]|0;
   $319 = (($316) + 4)|0;
   $320 = $319;
   $321 = HEAP32[$320>>2]|0;
   $322 = ($312|0)!=($318|0);
   $323 = ($315|0)!=($321|0);
   $324 = $322 | $323;
   if ($324) {
    $325 = $1;
    $326 = (($325) + 12|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = $327 | 2097152;
    HEAP32[$326>>2] = $328;
   }
   $0 = 1;
   $329 = $0;
   STACKTOP = sp;return ($329|0);
  }
 }
 $253 = $1;
 $254 = (($253) + 628|0);
 $255 = HEAP32[$254>>2]|0;
 _TIFFErrorExt($255,20280,20400,$vararg_buffer1);
 $0 = 0;
 $329 = $0;
 STACKTOP = sp;return ($329|0);
}
function _TIFFFdOpen($fd,$name,$mode) {
 $fd = $fd|0;
 $name = $name|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tif = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fd;
 $1 = $name;
 $2 = $mode;
 $3 = $1;
 $4 = $2;
 $5 = $0;
 $6 = $5;
 $7 = (_TIFFClientOpen($3,$4,$6,63,64,65,66,67,68,69)|0);
 $tif = $7;
 $8 = $tif;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $13 = $tif;
  STACKTOP = sp;return ($13|0);
 }
 $10 = $0;
 $11 = $tif;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = $tif;
 STACKTOP = sp;return ($13|0);
}
function _TIFFOpen($name,$mode) {
 $name = $name|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fd = 0, $m = 0, $tif = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $1 = $name;
 $2 = $mode;
 $3 = $2;
 $4 = (__TIFFgetMode($3,20464)|0);
 $m = $4;
 $5 = $m;
 $6 = ($5|0)==(-1);
 if ($6) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $7 = $1;
 $8 = $m;
 HEAP32[$vararg_buffer>>2] = 438;
 $9 = (_open(($7|0),($8|0),($vararg_buffer|0))|0);
 $fd = $9;
 $10 = $fd;
 $11 = ($10|0)<(0);
 if (!($11)) {
  $24 = $fd;
  $25 = $1;
  $26 = $2;
  $27 = (_TIFFFdOpen($24,$25,$26)|0);
  $tif = $27;
  $28 = $tif;
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   $30 = $fd;
   (_close(($30|0))|0);
  }
  $31 = $tif;
  $0 = $31;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $12 = (___errno_location()|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 if ($14) {
  $15 = (___errno_location()|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_strerror(($16|0))|0);
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $1;
   $20 = (___errno_location()|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (_strerror(($21|0))|0);
   HEAP32[$vararg_buffer1>>2] = $19;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $22;
   _TIFFErrorExt(0,20464,20480,$vararg_buffer1);
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $23 = $1;
  HEAP32[$vararg_buffer5>>2] = $23;
  _TIFFErrorExt(0,20464,20488,$vararg_buffer5);
 }
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function __TIFFmalloc($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (_malloc($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __TIFFfree($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return;
}
function __TIFFrealloc($p,$s) {
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 $4 = (_realloc($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __TIFFmemset($p,$v,$c) {
 $p = $p|0;
 $v = $v|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $v;
 $2 = $c;
 $3 = $0;
 $4 = $1;
 $5 = $4&255;
 $6 = $2;
 _memset(($3|0),($5|0),($6|0))|0;
 STACKTOP = sp;return;
}
function __TIFFmemcpy($d,$s,$c) {
 $d = $d|0;
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $d;
 $1 = $s;
 $2 = $c;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _memcpy(($3|0),($4|0),($5|0))|0;
 STACKTOP = sp;return;
}
function __TIFFmemcmp($p1,$p2,$c) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $p2;
 $2 = $c;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_memcmp($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _unixWarningHandler($module,$fmt,$ap) {
 $module = $module|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $module;
 $1 = $fmt;
 $2 = $ap;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[_stderr>>2]|0;
  $6 = $0;
  HEAP32[$vararg_buffer>>2] = $6;
  (_fprintf(($5|0),(20520|0),($vararg_buffer|0))|0);
 }
 $7 = HEAP32[_stderr>>2]|0;
 (_fprintf(($7|0),(20536|0),($vararg_buffer1|0))|0);
 $8 = HEAP32[_stderr>>2]|0;
 $9 = $1;
 $10 = $2;
 (_vfprintf(($8|0),($9|0),($10|0))|0);
 $11 = HEAP32[_stderr>>2]|0;
 (_fprintf(($11|0),(20528|0),($vararg_buffer3|0))|0);
 STACKTOP = sp;return;
}
function _unixErrorHandler($module,$fmt,$ap) {
 $module = $module|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $module;
 $1 = $fmt;
 $2 = $ap;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[_stderr>>2]|0;
  $6 = $0;
  HEAP32[$vararg_buffer>>2] = $6;
  (_fprintf(($5|0),(20520|0),($vararg_buffer|0))|0);
 }
 $7 = HEAP32[_stderr>>2]|0;
 $8 = $1;
 $9 = $2;
 (_vfprintf(($7|0),($8|0),($9|0))|0);
 $10 = HEAP32[_stderr>>2]|0;
 (_fprintf(($10|0),(20528|0),($vararg_buffer1|0))|0);
 STACKTOP = sp;return;
}
function __tiffReadProc($fd,$buf,$size) {
 $fd = $fd|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size_io = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fd;
 $2 = $buf;
 $3 = $size;
 $4 = $3;
 $size_io = $4;
 $5 = $size_io;
 $6 = $3;
 $7 = ($5|0)!=($6|0);
 if ($7) {
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 22;
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $1;
  $10 = $9;
  $11 = $2;
  $12 = $size_io;
  $13 = (_read(($10|0),($11|0),($12|0))|0);
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __tiffWriteProc($fd,$buf,$size) {
 $fd = $fd|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size_io = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fd;
 $2 = $buf;
 $3 = $size;
 $4 = $3;
 $size_io = $4;
 $5 = $size_io;
 $6 = $3;
 $7 = ($5|0)!=($6|0);
 if ($7) {
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 22;
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $1;
  $10 = $9;
  $11 = $2;
  $12 = $size_io;
  $13 = (_write(($10|0),($11|0),($12|0))|0);
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __tiffSeekProc($fd,$0,$1,$whence) {
 $fd = $fd|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $off_io = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp;
 $3 = $fd;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $5 = $whence;
 $10 = $4;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $off_io = $12;
 $16 = $off_io;
 $17 = ($16|0)<(0);
 $18 = $17 << 31 >> 31;
 $19 = $4;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($16|0)!=($21|0);
 $26 = ($18|0)!=($24|0);
 $27 = $25 | $26;
 if ($27) {
  $28 = (___errno_location()|0);
  HEAP32[$28>>2] = 22;
  $29 = $2;
  $30 = $29;
  HEAP32[$30>>2] = -1;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = -1;
  $44 = $2;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  tempRet0 = $49;
  STACKTOP = sp;return ($46|0);
 } else {
  $33 = $3;
  $34 = $33;
  $35 = $off_io;
  $36 = $5;
  $37 = (_lseek(($34|0),($35|0),($36|0))|0);
  $38 = ($37|0)<(0);
  $39 = $38 << 31 >> 31;
  $40 = $2;
  $41 = $40;
  HEAP32[$41>>2] = $37;
  $42 = (($40) + 4)|0;
  $43 = $42;
  HEAP32[$43>>2] = $39;
  $44 = $2;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  tempRet0 = $49;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function __tiffCloseProc($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fd;
 $1 = $0;
 $2 = $1;
 $3 = (_close(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __tiffSizeProc($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $sb = sp + 8|0;
 $1 = $fd;
 $2 = $1;
 $3 = $2;
 $4 = (_fstat(($3|0),($sb|0))|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = $0;
  $7 = $6;
  HEAP32[$7>>2] = 0;
  $8 = (($6) + 4)|0;
  $9 = $8;
  HEAP32[$9>>2] = 0;
 } else {
  $10 = (($sb) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)<(0);
  $13 = $12 << 31 >> 31;
  $14 = $0;
  $15 = $14;
  HEAP32[$15>>2] = $11;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
 }
 $18 = $0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 tempRet0 = $23;
 STACKTOP = sp;return ($20|0);
}
function __tiffMapProc($fd,$pbase,$psize) {
 $fd = $fd|0;
 $pbase = $pbase|0;
 $psize = $psize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size64 = 0, $sizem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size64 = sp;
 $1 = $fd;
 $2 = $pbase;
 $3 = $psize;
 $4 = $1;
 $5 = (__tiffSizeProc($4)|0);
 $6 = tempRet0;
 $7 = $size64;
 $8 = $7;
 HEAP32[$8>>2] = $5;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = $size64;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $sizem = $13;
 $17 = $sizem;
 $18 = ($17|0)<(0);
 $19 = $18 << 31 >> 31;
 $20 = $size64;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($17|0)==($22|0);
 $27 = ($19|0)==($25|0);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $sizem;
   $30 = $1;
   $31 = $30;
   $32 = (_mmap((0|0),($29|0),1,1,($31|0),0)|0);
   $33 = $2;
   HEAP32[$33>>2] = $32;
   $34 = $2;
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)!=((-1)|0);
   if (!($36)) {
    break;
   }
   $37 = $sizem;
   $38 = ($37|0)<(0);
   $39 = $38 << 31 >> 31;
   $40 = $3;
   $41 = $40;
   $42 = $41;
   HEAP32[$42>>2] = $37;
   $43 = (($41) + 4)|0;
   $44 = $43;
   HEAP32[$44>>2] = $39;
   $0 = 1;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 } while(0);
 $0 = 0;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function __tiffUnmapProc($fd,$base,$0,$1) {
 $fd = $fd|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $2 = $fd;
 $3 = $base;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $3;
 $10 = $4;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 (_munmap(($9|0),($12|0))|0);
 STACKTOP = sp;return;
}
function __TIFFMultiply32($tif,$first,$second,$where) {
 $tif = $tif|0;
 $first = $first|0;
 $second = $second|0;
 $where = $where|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $bytes = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $first;
 $2 = $second;
 $3 = $where;
 $4 = $1;
 $5 = $2;
 $6 = Math_imul($4, $5)|0;
 $bytes = $6;
 $7 = $2;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $19 = $bytes;
  STACKTOP = sp;return ($19|0);
 }
 $9 = $bytes;
 $10 = $2;
 $11 = (($9>>>0) / ($10>>>0))&-1;
 $12 = $1;
 $13 = ($11|0)!=($12|0);
 if (!($13)) {
  $19 = $bytes;
  STACKTOP = sp;return ($19|0);
 }
 $14 = $0;
 $15 = (($14) + 628|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 $18 = $3;
 HEAP32[$vararg_buffer>>2] = $18;
 _TIFFErrorExt($16,$17,20552,$vararg_buffer);
 $bytes = 0;
 $19 = $bytes;
 STACKTOP = sp;return ($19|0);
}
function __TIFFMultiply64($tif,$0,$1,$2,$3,$where) {
 $tif = $tif|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $where = $where|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $bytes = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $bytes = sp;
 $4 = $tif;
 $8 = $5;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $12 = $6;
 $13 = $12;
 HEAP32[$13>>2] = $2;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $3;
 $7 = $where;
 $16 = $5;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $6;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (___muldi3(($18|0),($21|0),($24|0),($27|0))|0);
 $29 = tempRet0;
 $30 = $bytes;
 $31 = $30;
 HEAP32[$31>>2] = $28;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $29;
 $34 = $6;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($36|0)!=(0);
 $41 = ($39|0)!=(0);
 $42 = $40 | $41;
 if (!($42)) {
  $75 = $bytes;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + 4)|0;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  tempRet0 = $80;
  STACKTOP = sp;return ($77|0);
 }
 $43 = $bytes;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43) + 4)|0;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = $6;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (___udivdi3(($45|0),($48|0),($51|0),($54|0))|0);
 $56 = tempRet0;
 $57 = $5;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($57) + 4)|0;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = ($55|0)!=($59|0);
 $64 = ($56|0)!=($62|0);
 $65 = $63 | $64;
 if (!($65)) {
  $75 = $bytes;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + 4)|0;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  tempRet0 = $80;
  STACKTOP = sp;return ($77|0);
 }
 $66 = $4;
 $67 = (($66) + 628|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $7;
 $70 = $7;
 HEAP32[$vararg_buffer>>2] = $70;
 _TIFFErrorExt($68,$69,20552,$vararg_buffer);
 $71 = $bytes;
 $72 = $71;
 HEAP32[$72>>2] = 0;
 $73 = (($71) + 4)|0;
 $74 = $73;
 HEAP32[$74>>2] = 0;
 $75 = $bytes;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $78 = (($75) + 4)|0;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 tempRet0 = $80;
 STACKTOP = sp;return ($77|0);
}
function __TIFFCheckRealloc($tif,$buffer,$nmemb,$elem_size,$what) {
 $tif = $tif|0;
 $buffer = $buffer|0;
 $nmemb = $nmemb|0;
 $elem_size = $elem_size|0;
 $what = $what|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $cp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $buffer;
 $2 = $nmemb;
 $3 = $elem_size;
 $4 = $what;
 $cp = 0;
 $5 = $2;
 $6 = $3;
 $7 = Math_imul($5, $6)|0;
 $bytes = $7;
 $8 = $2;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $3;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $bytes;
   $13 = $3;
   $14 = (($12|0) / ($13|0))&-1;
   $15 = $2;
   $16 = ($14|0)==($15|0);
   if ($16) {
    $17 = $1;
    $18 = $bytes;
    $19 = (__TIFFrealloc($17,$18)|0);
    $cp = $19;
   }
  }
 }
 $20 = $cp;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  $30 = $cp;
  STACKTOP = sp;return ($30|0);
 }
 $22 = $0;
 $23 = (($22) + 628|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $0;
 $26 = HEAP32[$25>>2]|0;
 $27 = $4;
 $28 = $2;
 $29 = $3;
 HEAP32[$vararg_buffer>>2] = $27;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $28;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $29;
 _TIFFErrorExt($24,$26,20576,$vararg_buffer);
 $30 = $cp;
 STACKTOP = sp;return ($30|0);
}
function __TIFFCheckMalloc($tif,$nmemb,$elem_size,$what) {
 $tif = $tif|0;
 $nmemb = $nmemb|0;
 $elem_size = $elem_size|0;
 $what = $what|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $nmemb;
 $2 = $elem_size;
 $3 = $what;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (__TIFFCheckRealloc($4,0,$5,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _TIFFVGetFieldDefaulted($tif,$tag,$ap) {
 $tif = $tif|0;
 $tag = $tag|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0;
 var $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current65 = 0, $arglist_current68 = 0, $arglist_current71 = 0, $arglist_current74 = 0, $arglist_current77 = 0, $arglist_current8 = 0, $arglist_current80 = 0, $arglist_current83 = 0;
 var $arglist_current86 = 0, $arglist_current89 = 0, $arglist_current92 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0;
 var $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next66 = 0, $arglist_next69 = 0, $arglist_next72 = 0, $arglist_next75 = 0, $arglist_next78 = 0, $arglist_next81 = 0, $arglist_next84 = 0, $arglist_next87 = 0, $arglist_next9 = 0, $arglist_next90 = 0, $arglist_next93 = 0, $sp = 0, $td = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $tag;
 $3 = $ap;
 $4 = $1;
 $5 = (($4) + 40|0);
 $td = $5;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = (_TIFFVGetField($6,$7,$8)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 1;
  $210 = $0;
  STACKTOP = sp;return ($210|0);
 }
 $11 = $2;
 do {
  if ((($11|0) == 274)) {
   $32 = $td;
   $33 = (($32) + 56|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = $3;
   $arglist_current11 = HEAP32[$35>>2]|0;
   $36 = HEAP32[$arglist_current11>>2]|0;
   $arglist_next12 = (($arglist_current11) + 4|0);
   HEAP32[$35>>2] = $arglist_next12;
   HEAP16[$36>>1] = $34;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 254)) {
   $12 = $td;
   $13 = (($12) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $3;
   $arglist_current = HEAP32[$15>>2]|0;
   $16 = HEAP32[$arglist_current>>2]|0;
   $arglist_next = (($arglist_current) + 4|0);
   HEAP32[$15>>2] = $arglist_next;
   HEAP32[$16>>2] = $14;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 529)) {
   $139 = $3;
   $arglist_current68 = HEAP32[$139>>2]|0;
   $140 = HEAP32[$arglist_current68>>2]|0;
   $arglist_next69 = (($arglist_current68) + 4|0);
   HEAP32[$139>>2] = $arglist_next69;
   HEAP32[$140>>2] = 20648;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 332)) {
   $86 = $3;
   $arglist_current41 = HEAP32[$86>>2]|0;
   $87 = HEAP32[$arglist_current41>>2]|0;
   $arglist_next42 = (($arglist_current41) + 4|0);
   HEAP32[$86>>2] = $arglist_next42;
   HEAP16[$87>>1] = 1;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 338)) {
   $90 = $td;
   $91 = (($90) + 116|0);
   $92 = HEAP16[$91>>1]|0;
   $93 = $3;
   $arglist_current47 = HEAP32[$93>>2]|0;
   $94 = HEAP32[$arglist_current47>>2]|0;
   $arglist_next48 = (($arglist_current47) + 4|0);
   HEAP32[$93>>2] = $arglist_next48;
   HEAP16[$94>>1] = $92;
   $95 = $td;
   $96 = (($95) + 120|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $3;
   $arglist_current50 = HEAP32[$98>>2]|0;
   $99 = HEAP32[$arglist_current50>>2]|0;
   $arglist_next51 = (($arglist_current50) + 4|0);
   HEAP32[$98>>2] = $arglist_next51;
   HEAP32[$99>>2] = $97;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 32996)) {
   $121 = $td;
   $122 = (($121) + 46|0);
   $123 = HEAP16[$122>>1]|0;
   $124 = $123&65535;
   $125 = (($124) - 1)|0;
   $126 = $125&65535;
   $127 = $3;
   $arglist_current59 = HEAP32[$127>>2]|0;
   $128 = HEAP32[$arglist_current59>>2]|0;
   $arglist_next60 = (($arglist_current59) + 4|0);
   HEAP32[$127>>2] = $arglist_next60;
   HEAP16[$128>>1] = $126;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 531)) {
   $152 = $td;
   $153 = (($152) + 156|0);
   $154 = HEAP16[$153>>1]|0;
   $155 = $3;
   $arglist_current77 = HEAP32[$155>>2]|0;
   $156 = HEAP32[$arglist_current77>>2]|0;
   $arglist_next78 = (($arglist_current77) + 4|0);
   HEAP32[$155>>2] = $arglist_next78;
   HEAP16[$156>>1] = $154;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 32997)) {
   $134 = $td;
   $135 = (($134) + 24|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $3;
   $arglist_current65 = HEAP32[$137>>2]|0;
   $138 = HEAP32[$arglist_current65>>2]|0;
   $arglist_next66 = (($arglist_current65) + 4|0);
   HEAP32[$137>>2] = $arglist_next66;
   HEAP32[$138>>2] = $136;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 532)) {
   $198 = $td;
   $199 = (($198) + 172|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ($200|0)!=(0|0);
   if (!($201)) {
    $202 = $td;
    $203 = (_TIFFDefaultRefBlackWhite($202)|0);
    $204 = ($203|0)!=(0);
    if (!($204)) {
     $0 = 0;
     $210 = $0;
     STACKTOP = sp;return ($210|0);
    }
   }
   $205 = $td;
   $206 = (($205) + 172|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = $3;
   $arglist_current92 = HEAP32[$208>>2]|0;
   $209 = HEAP32[$arglist_current92>>2]|0;
   $arglist_next93 = (($arglist_current92) + 4|0);
   HEAP32[$208>>2] = $arglist_next93;
   HEAP32[$209>>2] = $207;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 277)) {
   $37 = $td;
   $38 = (($37) + 58|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $3;
   $arglist_current14 = HEAP32[$40>>2]|0;
   $41 = HEAP32[$arglist_current14>>2]|0;
   $arglist_next15 = (($arglist_current14) + 4|0);
   HEAP32[$40>>2] = $arglist_next15;
   HEAP16[$41>>1] = $39;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 339)) {
   $129 = $td;
   $130 = (($129) + 46|0);
   $131 = HEAP16[$130>>1]|0;
   $132 = $3;
   $arglist_current62 = HEAP32[$132>>2]|0;
   $133 = HEAP32[$arglist_current62>>2]|0;
   $arglist_next63 = (($arglist_current62) + 4|0);
   HEAP32[$132>>2] = $arglist_next63;
   HEAP16[$133>>1] = $131;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 32995)) {
   $100 = $td;
   $101 = (($100) + 116|0);
   $102 = HEAP16[$101>>1]|0;
   $103 = $102&65535;
   $104 = ($103|0)==(1);
   if ($104) {
    $105 = $td;
    $106 = (($105) + 120|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = HEAP16[$107>>1]|0;
    $109 = $108&65535;
    $110 = ($109|0)==(1);
    $112 = $110;
   } else {
    $112 = 0;
   }
   $111 = $112&1;
   $113 = $111&65535;
   $114 = $3;
   $arglist_current53 = HEAP32[$114>>2]|0;
   $115 = HEAP32[$arglist_current53>>2]|0;
   $arglist_next54 = (($arglist_current53) + 4|0);
   HEAP32[$114>>2] = $arglist_next54;
   HEAP16[$115>>1] = $113;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 296)) {
   $62 = $td;
   $63 = (($62) + 84|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $3;
   $arglist_current29 = HEAP32[$65>>2]|0;
   $66 = HEAP32[$arglist_current29>>2]|0;
   $arglist_next30 = (($arglist_current29) + 4|0);
   HEAP32[$65>>2] = $arglist_next30;
   HEAP16[$66>>1] = $64;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 301)) {
   $159 = $td;
   $160 = (($159) + 160|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = ($161|0)!=(0|0);
   if (!($162)) {
    $163 = $td;
    $164 = (_TIFFDefaultTransferFunction($163)|0);
    $165 = ($164|0)!=(0);
    if (!($165)) {
     $166 = $1;
     $167 = (($166) + 628|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = $1;
     $170 = HEAP32[$169>>2]|0;
     _TIFFErrorExt($168,$170,20672,$vararg_buffer);
     $0 = 0;
     $210 = $0;
     STACKTOP = sp;return ($210|0);
    }
   }
   $171 = $td;
   $172 = (($171) + 160|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $3;
   $arglist_current83 = HEAP32[$174>>2]|0;
   $175 = HEAP32[$arglist_current83>>2]|0;
   $arglist_next84 = (($arglist_current83) + 4|0);
   HEAP32[$174>>2] = $arglist_next84;
   HEAP32[$175>>2] = $173;
   $176 = $td;
   $177 = (($176) + 58|0);
   $178 = HEAP16[$177>>1]|0;
   $179 = $178&65535;
   $180 = $td;
   $181 = (($180) + 116|0);
   $182 = HEAP16[$181>>1]|0;
   $183 = $182&65535;
   $184 = (($179) - ($183))|0;
   $185 = ($184|0)>(1);
   if ($185) {
    $186 = $td;
    $187 = (($186) + 160|0);
    $188 = (($187) + 4|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = $3;
    $arglist_current86 = HEAP32[$190>>2]|0;
    $191 = HEAP32[$arglist_current86>>2]|0;
    $arglist_next87 = (($arglist_current86) + 4|0);
    HEAP32[$190>>2] = $arglist_next87;
    HEAP32[$191>>2] = $189;
    $192 = $td;
    $193 = (($192) + 160|0);
    $194 = (($193) + 8|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = $3;
    $arglist_current89 = HEAP32[$196>>2]|0;
    $197 = HEAP32[$arglist_current89>>2]|0;
    $arglist_next90 = (($arglist_current89) + 4|0);
    HEAP32[$196>>2] = $arglist_next90;
    HEAP32[$197>>2] = $195;
   }
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 263)) {
   $22 = $td;
   $23 = (($22) + 52|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $3;
   $arglist_current5 = HEAP32[$25>>2]|0;
   $26 = HEAP32[$arglist_current5>>2]|0;
   $arglist_next6 = (($arglist_current5) + 4|0);
   HEAP32[$25>>2] = $arglist_next6;
   HEAP16[$26>>1] = $24;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 258)) {
   $17 = $td;
   $18 = (($17) + 44|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $3;
   $arglist_current2 = HEAP32[$20>>2]|0;
   $21 = HEAP32[$arglist_current2>>2]|0;
   $arglist_next3 = (($arglist_current2) + 4|0);
   HEAP32[$20>>2] = $arglist_next3;
   HEAP16[$21>>1] = $19;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 266)) {
   $27 = $td;
   $28 = (($27) + 54|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $3;
   $arglist_current8 = HEAP32[$30>>2]|0;
   $31 = HEAP32[$arglist_current8>>2]|0;
   $arglist_next9 = (($arglist_current8) + 4|0);
   HEAP32[$30>>2] = $arglist_next9;
   HEAP16[$31>>1] = $29;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 280)) {
   $47 = $td;
   $48 = (($47) + 64|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = $3;
   $arglist_current20 = HEAP32[$50>>2]|0;
   $51 = HEAP32[$arglist_current20>>2]|0;
   $arglist_next21 = (($arglist_current20) + 4|0);
   HEAP32[$50>>2] = $arglist_next21;
   HEAP16[$51>>1] = $49;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 334)) {
   $88 = $3;
   $arglist_current44 = HEAP32[$88>>2]|0;
   $89 = HEAP32[$arglist_current44>>2]|0;
   $arglist_next45 = (($arglist_current44) + 4|0);
   HEAP32[$88>>2] = $arglist_next45;
   HEAP16[$89>>1] = 4;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 530)) {
   $141 = $td;
   $142 = (($141) + 152|0);
   $143 = HEAP16[$142>>1]|0;
   $144 = $3;
   $arglist_current71 = HEAP32[$144>>2]|0;
   $145 = HEAP32[$arglist_current71>>2]|0;
   $arglist_next72 = (($arglist_current71) + 4|0);
   HEAP32[$144>>2] = $arglist_next72;
   HEAP16[$145>>1] = $143;
   $146 = $td;
   $147 = (($146) + 152|0);
   $148 = (($147) + 2|0);
   $149 = HEAP16[$148>>1]|0;
   $150 = $3;
   $arglist_current74 = HEAP32[$150>>2]|0;
   $151 = HEAP32[$arglist_current74>>2]|0;
   $arglist_next75 = (($arglist_current74) + 4|0);
   HEAP32[$150>>2] = $arglist_next75;
   HEAP16[$151>>1] = $149;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 281)) {
   $52 = $td;
   $53 = (($52) + 66|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = $3;
   $arglist_current23 = HEAP32[$55>>2]|0;
   $56 = HEAP32[$arglist_current23>>2]|0;
   $arglist_next24 = (($arglist_current23) + 4|0);
   HEAP32[$55>>2] = $arglist_next24;
   HEAP16[$56>>1] = $54;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 278)) {
   $42 = $td;
   $43 = (($42) + 60|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $3;
   $arglist_current17 = HEAP32[$45>>2]|0;
   $46 = HEAP32[$arglist_current17>>2]|0;
   $arglist_next18 = (($arglist_current17) + 4|0);
   HEAP32[$45>>2] = $arglist_next18;
   HEAP32[$46>>2] = $44;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 336)) {
   $75 = $3;
   $arglist_current35 = HEAP32[$75>>2]|0;
   $76 = HEAP32[$arglist_current35>>2]|0;
   $arglist_next36 = (($arglist_current35) + 4|0);
   HEAP32[$75>>2] = $arglist_next36;
   HEAP16[$76>>1] = 0;
   $77 = $td;
   $78 = (($77) + 44|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79&65535;
   $81 = 1 << $80;
   $82 = (($81) - 1)|0;
   $83 = $82&65535;
   $84 = $3;
   $arglist_current38 = HEAP32[$84>>2]|0;
   $85 = HEAP32[$arglist_current38>>2]|0;
   $arglist_next39 = (($arglist_current38) + 4|0);
   HEAP32[$84>>2] = $arglist_next39;
   HEAP16[$85>>1] = $83;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 318)) {
   HEAPF32[20664>>2] = 0.34574192762374878;
   HEAPF32[((20664 + 4|0))>>2] = 0.35856044292449951;
   $157 = $3;
   $arglist_current80 = HEAP32[$157>>2]|0;
   $158 = HEAP32[$arglist_current80>>2]|0;
   $arglist_next81 = (($arglist_current80) + 4|0);
   HEAP32[$157>>2] = $arglist_next81;
   HEAP32[$158>>2] = 20664;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 32998)) {
   $116 = $td;
   $117 = (($116) + 36|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $3;
   $arglist_current56 = HEAP32[$119>>2]|0;
   $120 = HEAP32[$arglist_current56>>2]|0;
   $arglist_next57 = (($arglist_current56) + 4|0);
   HEAP32[$119>>2] = $arglist_next57;
   HEAP32[$120>>2] = $118;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 317)) {
   $67 = $1;
   $68 = (($67) + 576|0);
   $69 = HEAP32[$68>>2]|0;
   $sp = $69;
   $70 = $sp;
   $71 = HEAP32[$70>>2]|0;
   $72 = $71&65535;
   $73 = $3;
   $arglist_current32 = HEAP32[$73>>2]|0;
   $74 = HEAP32[$arglist_current32>>2]|0;
   $arglist_next33 = (($arglist_current32) + 4|0);
   HEAP32[$73>>2] = $arglist_next33;
   HEAP16[$74>>1] = $72;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else if ((($11|0) == 284)) {
   $57 = $td;
   $58 = (($57) + 86|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $3;
   $arglist_current26 = HEAP32[$60>>2]|0;
   $61 = HEAP32[$arglist_current26>>2]|0;
   $arglist_next27 = (($arglist_current26) + 4|0);
   HEAP32[$60>>2] = $arglist_next27;
   HEAP16[$61>>1] = $59;
   $0 = 1;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  } else {
   $0 = 0;
   $210 = $0;
   STACKTOP = sp;return ($210|0);
  }
 } while(0);
 return (0)|0;
}
function _TIFFGetFieldDefaulted($tif,$tag,$varargs) {
 $tif = $tif|0;
 $tag = $tag|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ap = 0, $ok = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 $0 = $tif;
 $1 = $tag;
 HEAP32[$ap>>2] = $varargs;
 $2 = $0;
 $3 = $1;
 $4 = (_TIFFVGetFieldDefaulted($2,$3,$ap)|0);
 $ok = $4;
 $5 = $ok;
 STACKTOP = sp;return ($5|0);
}
function _TIFFDefaultTransferFunction($td) {
 $td = $td|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $n = 0, $nbytes = 0, $t = 0.0, $tf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $td;
 $2 = $1;
 $3 = (($2) + 160|0);
 $tf = $3;
 $4 = $tf;
 $5 = (($4) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = $tf;
 $7 = (($6) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = $tf;
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = (($9) + 44|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ($12>>>0)>=(30);
 if ($13) {
  $0 = 0;
  $104 = $0;
  STACKTOP = sp;return ($104|0);
 }
 $14 = $1;
 $15 = (($14) + 44|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = 1 << $17;
 $n = $18;
 $19 = $n;
 $20 = $19<<1;
 $nbytes = $20;
 $21 = $nbytes;
 $22 = (__TIFFmalloc($21)|0);
 $23 = $tf;
 HEAP32[$23>>2] = $22;
 $24 = ($22|0)!=(0|0);
 if (!($24)) {
  $0 = 0;
  $104 = $0;
  STACKTOP = sp;return ($104|0);
 }
 $25 = $tf;
 $26 = HEAP32[$25>>2]|0;
 HEAP16[$26>>1] = 0;
 $i = 1;
 while(1) {
  $27 = $i;
  $28 = $n;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $i;
  $31 = (+($30|0));
  $32 = $n;
  $33 = (+($32|0));
  $34 = $33 - 1.0;
  $35 = $31 / $34;
  $t = $35;
  $36 = $t;
  $37 = (+Math_pow((+$36),2.2000000000000002));
  $38 = 65535.0 * $37;
  $39 = $38 + 0.5;
  $40 = (+Math_floor((+$39)));
  $41 = (~~(($40))&65535);
  $42 = $i;
  $43 = $tf;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($42<<1)|0);
  HEAP16[$45>>1] = $41;
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 $48 = $1;
 $49 = (($48) + 58|0);
 $50 = HEAP16[$49>>1]|0;
 $51 = $50&65535;
 $52 = $1;
 $53 = (($52) + 116|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = $54&65535;
 $56 = (($51) - ($55))|0;
 $57 = ($56|0)>(1);
 L14: do {
  if ($57) {
   $58 = $nbytes;
   $59 = (__TIFFmalloc($58)|0);
   $60 = $tf;
   $61 = (($60) + 4|0);
   HEAP32[$61>>2] = $59;
   $62 = ($59|0)!=(0|0);
   do {
    if ($62) {
     $63 = $tf;
     $64 = (($63) + 4|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $tf;
     $67 = HEAP32[$66>>2]|0;
     $68 = $nbytes;
     __TIFFmemcpy($65,$67,$68);
     $69 = $nbytes;
     $70 = (__TIFFmalloc($69)|0);
     $71 = $tf;
     $72 = (($71) + 8|0);
     HEAP32[$72>>2] = $70;
     $73 = ($70|0)!=(0|0);
     if ($73) {
      $74 = $tf;
      $75 = (($74) + 8|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = $tf;
      $78 = HEAP32[$77>>2]|0;
      $79 = $nbytes;
      __TIFFmemcpy($76,$78,$79);
      break L14;
     } else {
      break;
     }
    } else {
    }
   } while(0);
   $80 = $tf;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)!=(0|0);
   if ($82) {
    $83 = $tf;
    $84 = HEAP32[$83>>2]|0;
    __TIFFfree($84);
   }
   $85 = $tf;
   $86 = (($85) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)!=(0|0);
   if ($88) {
    $89 = $tf;
    $90 = (($89) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    __TIFFfree($91);
   }
   $92 = $tf;
   $93 = (($92) + 8|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($94|0)!=(0|0);
   if ($95) {
    $96 = $tf;
    $97 = (($96) + 8|0);
    $98 = HEAP32[$97>>2]|0;
    __TIFFfree($98);
   }
   $99 = $tf;
   $100 = (($99) + 8|0);
   HEAP32[$100>>2] = 0;
   $101 = $tf;
   $102 = (($101) + 4|0);
   HEAP32[$102>>2] = 0;
   $103 = $tf;
   HEAP32[$103>>2] = 0;
   $0 = 0;
   $104 = $0;
   STACKTOP = sp;return ($104|0);
  }
 } while(0);
 $0 = 1;
 $104 = $0;
 STACKTOP = sp;return ($104|0);
}
function _TIFFDefaultRefBlackWhite($td) {
 $td = $td|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $td;
 $2 = (__TIFFmalloc(24)|0);
 $3 = $1;
 $4 = (($3) + 172|0);
 HEAP32[$4>>2] = $2;
 $5 = ($2|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $6 = $1;
 $7 = (($6) + 50|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ($9|0)==(6);
 if ($10) {
  $11 = $1;
  $12 = (($11) + 172|0);
  $13 = HEAP32[$12>>2]|0;
  HEAPF32[$13>>2] = 0.0;
  $14 = $1;
  $15 = (($14) + 172|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 20|0);
  HEAPF32[$17>>2] = 255.0;
  $18 = $1;
  $19 = (($18) + 172|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 12|0);
  HEAPF32[$21>>2] = 255.0;
  $22 = $1;
  $23 = (($22) + 172|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 4|0);
  HEAPF32[$25>>2] = 255.0;
  $26 = $1;
  $27 = (($26) + 172|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 16|0);
  HEAPF32[$29>>2] = 128.0;
  $30 = $1;
  $31 = (($30) + 172|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 8|0);
  HEAPF32[$33>>2] = 128.0;
 } else {
  $i = 0;
  while(1) {
   $34 = $i;
   $35 = ($34|0)<(3);
   if (!($35)) {
    break;
   }
   $36 = $i;
   $37 = $36<<1;
   $38 = (($37) + 0)|0;
   $39 = $1;
   $40 = (($39) + 172|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($38<<2)|0);
   HEAPF32[$42>>2] = 0.0;
   $43 = $1;
   $44 = (($43) + 44|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = $45&65535;
   $47 = 1 << $46;
   $48 = (($47) - 1)|0;
   $49 = (+($48|0));
   $50 = $i;
   $51 = $50<<1;
   $52 = (($51) + 1)|0;
   $53 = $1;
   $54 = (($53) + 172|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + ($52<<2)|0);
   HEAPF32[$56>>2] = $49;
   $57 = $i;
   $58 = (($57) + 1)|0;
   $i = $58;
  }
 }
 $0 = 1;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _TIFFCIELabToXYZ($cielab,$l,$a,$b,$X,$Y,$Z) {
 $cielab = $cielab|0;
 $l = $l|0;
 $a = $a|0;
 $b = $b|0;
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $L = 0.0, $cby = 0.0, $tmp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cielab;
 $1 = $l;
 $2 = $a;
 $3 = $b;
 $4 = $X;
 $5 = $Y;
 $6 = $Z;
 $7 = $1;
 $8 = (+($7>>>0));
 $9 = $8 * 100.0;
 $10 = $9 / 255.0;
 $L = $10;
 $11 = $L;
 $12 = $11 < 8.8559999465942383;
 if ($12) {
  $13 = $L;
  $14 = $0;
  $15 = (($14) + 20|0);
  $16 = +HEAPF32[$15>>2];
  $17 = $13 * $16;
  $18 = $17 / 903.2919921875;
  $19 = $5;
  HEAPF32[$19>>2] = $18;
  $20 = $5;
  $21 = +HEAPF32[$20>>2];
  $22 = $0;
  $23 = (($22) + 20|0);
  $24 = +HEAPF32[$23>>2];
  $25 = $21 / $24;
  $26 = 7.7870001792907715 * $25;
  $27 = $26 + 0.13793103396892548;
  $cby = $27;
 } else {
  $28 = $L;
  $29 = $28 + 16.0;
  $30 = $29 / 116.0;
  $cby = $30;
  $31 = $0;
  $32 = (($31) + 20|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $cby;
  $35 = $33 * $34;
  $36 = $cby;
  $37 = $35 * $36;
  $38 = $cby;
  $39 = $37 * $38;
  $40 = $5;
  HEAPF32[$40>>2] = $39;
 }
 $41 = $2;
 $42 = (+($41|0));
 $43 = $42 / 500.0;
 $44 = $cby;
 $45 = $43 + $44;
 $tmp = $45;
 $46 = $tmp;
 $47 = $46 < 0.20690000057220459;
 if ($47) {
  $48 = $0;
  $49 = (($48) + 16|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $tmp;
  $52 = $51 - 0.1379300057888031;
  $53 = $50 * $52;
  $54 = $53 / 7.7870001792907715;
  $55 = $4;
  HEAPF32[$55>>2] = $54;
 } else {
  $56 = $0;
  $57 = (($56) + 16|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $tmp;
  $60 = $58 * $59;
  $61 = $tmp;
  $62 = $60 * $61;
  $63 = $tmp;
  $64 = $62 * $63;
  $65 = $4;
  HEAPF32[$65>>2] = $64;
 }
 $66 = $cby;
 $67 = $3;
 $68 = (+($67|0));
 $69 = $68 / 200.0;
 $70 = $66 - $69;
 $tmp = $70;
 $71 = $tmp;
 $72 = $71 < 0.20690000057220459;
 if ($72) {
  $73 = $0;
  $74 = (($73) + 24|0);
  $75 = +HEAPF32[$74>>2];
  $76 = $tmp;
  $77 = $76 - 0.1379300057888031;
  $78 = $75 * $77;
  $79 = $78 / 7.7870001792907715;
  $80 = $6;
  HEAPF32[$80>>2] = $79;
  STACKTOP = sp;return;
 } else {
  $81 = $0;
  $82 = (($81) + 24|0);
  $83 = +HEAPF32[$82>>2];
  $84 = $tmp;
  $85 = $83 * $84;
  $86 = $tmp;
  $87 = $85 * $86;
  $88 = $tmp;
  $89 = $87 * $88;
  $90 = $6;
  HEAPF32[$90>>2] = $89;
  STACKTOP = sp;return;
 }
}
function _TIFFXYZToRGB($cielab,$X,$Y,$Z,$r,$g,$b) {
 $cielab = $cielab|0;
 $X = +$X;
 $Y = +$Y;
 $Z = +$Z;
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0.0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0.0, $Yb = 0.0, $Yg = 0.0, $Yr = 0.0, $i = 0, $matrix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cielab;
 $1 = $X;
 $2 = $Y;
 $3 = $Z;
 $4 = $r;
 $5 = $g;
 $6 = $b;
 $7 = $0;
 $8 = (($7) + 28|0);
 $matrix = $8;
 $9 = $matrix;
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = $10 * $11;
 $13 = $matrix;
 $14 = (($13) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $2;
 $17 = $15 * $16;
 $18 = $12 + $17;
 $19 = $matrix;
 $20 = (($19) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $3;
 $23 = $21 * $22;
 $24 = $18 + $23;
 $Yr = $24;
 $25 = $matrix;
 $26 = (($25) + 12|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $1;
 $29 = $27 * $28;
 $30 = $matrix;
 $31 = (($30) + 16|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $2;
 $34 = $32 * $33;
 $35 = $29 + $34;
 $36 = $matrix;
 $37 = (($36) + 20|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $3;
 $40 = $38 * $39;
 $41 = $35 + $40;
 $Yg = $41;
 $42 = $matrix;
 $43 = (($42) + 24|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $1;
 $46 = $44 * $45;
 $47 = $matrix;
 $48 = (($47) + 28|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $2;
 $51 = $49 * $50;
 $52 = $46 + $51;
 $53 = $matrix;
 $54 = (($53) + 32|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $3;
 $57 = $55 * $56;
 $58 = $52 + $57;
 $Yb = $58;
 $59 = $Yr;
 $60 = $0;
 $61 = (($60) + 28|0);
 $62 = (($61) + 60|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $59 > $63;
 if ($64) {
  $65 = $Yr;
  $70 = $65;
 } else {
  $66 = $0;
  $67 = (($66) + 28|0);
  $68 = (($67) + 60|0);
  $69 = +HEAPF32[$68>>2];
  $70 = $69;
 }
 $Yr = $70;
 $71 = $Yg;
 $72 = $0;
 $73 = (($72) + 28|0);
 $74 = (($73) + 64|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $71 > $75;
 if ($76) {
  $77 = $Yg;
  $82 = $77;
 } else {
  $78 = $0;
  $79 = (($78) + 28|0);
  $80 = (($79) + 64|0);
  $81 = +HEAPF32[$80>>2];
  $82 = $81;
 }
 $Yg = $82;
 $83 = $Yb;
 $84 = $0;
 $85 = (($84) + 28|0);
 $86 = (($85) + 68|0);
 $87 = +HEAPF32[$86>>2];
 $88 = $83 > $87;
 if ($88) {
  $89 = $Yb;
  $94 = $89;
 } else {
  $90 = $0;
  $91 = (($90) + 28|0);
  $92 = (($91) + 68|0);
  $93 = +HEAPF32[$92>>2];
  $94 = $93;
 }
 $Yb = $94;
 $95 = $Yr;
 $96 = $0;
 $97 = (($96) + 28|0);
 $98 = (($97) + 36|0);
 $99 = +HEAPF32[$98>>2];
 $100 = $95 < $99;
 if ($100) {
  $101 = $Yr;
  $106 = $101;
 } else {
  $102 = $0;
  $103 = (($102) + 28|0);
  $104 = (($103) + 36|0);
  $105 = +HEAPF32[$104>>2];
  $106 = $105;
 }
 $Yr = $106;
 $107 = $Yg;
 $108 = $0;
 $109 = (($108) + 28|0);
 $110 = (($109) + 40|0);
 $111 = +HEAPF32[$110>>2];
 $112 = $107 < $111;
 if ($112) {
  $113 = $Yg;
  $118 = $113;
 } else {
  $114 = $0;
  $115 = (($114) + 28|0);
  $116 = (($115) + 40|0);
  $117 = +HEAPF32[$116>>2];
  $118 = $117;
 }
 $Yg = $118;
 $119 = $Yb;
 $120 = $0;
 $121 = (($120) + 28|0);
 $122 = (($121) + 44|0);
 $123 = +HEAPF32[$122>>2];
 $124 = $119 < $123;
 if ($124) {
  $125 = $Yb;
  $130 = $125;
 } else {
  $126 = $0;
  $127 = (($126) + 28|0);
  $128 = (($127) + 44|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $129;
 }
 $Yb = $130;
 $131 = $Yr;
 $132 = $0;
 $133 = (($132) + 28|0);
 $134 = (($133) + 60|0);
 $135 = +HEAPF32[$134>>2];
 $136 = $131 - $135;
 $137 = $0;
 $138 = (($137) + 4|0);
 $139 = +HEAPF32[$138>>2];
 $140 = $136 / $139;
 $141 = (~~(($140)));
 $i = $141;
 $142 = $0;
 $143 = HEAP32[$142>>2]|0;
 $144 = $i;
 $145 = ($143|0)<($144|0);
 if ($145) {
  $146 = $0;
  $147 = HEAP32[$146>>2]|0;
  $149 = $147;
 } else {
  $148 = $i;
  $149 = $148;
 }
 $i = $149;
 $150 = $i;
 $151 = $0;
 $152 = (($151) + 112|0);
 $153 = (($152) + ($150<<2)|0);
 $154 = +HEAPF32[$153>>2];
 $155 = $154 > 0.0;
 if ($155) {
  $156 = $i;
  $157 = $0;
  $158 = (($157) + 112|0);
  $159 = (($158) + ($156<<2)|0);
  $160 = +HEAPF32[$159>>2];
  $161 = $160;
  $162 = $161 + 0.5;
  $171 = $162;
 } else {
  $163 = $i;
  $164 = $0;
  $165 = (($164) + 112|0);
  $166 = (($165) + ($163<<2)|0);
  $167 = +HEAPF32[$166>>2];
  $168 = $167;
  $169 = $168 - 0.5;
  $171 = $169;
 }
 $170 = (~~(($171))>>>0);
 $172 = $4;
 HEAP32[$172>>2] = $170;
 $173 = $Yg;
 $174 = $0;
 $175 = (($174) + 28|0);
 $176 = (($175) + 64|0);
 $177 = +HEAPF32[$176>>2];
 $178 = $173 - $177;
 $179 = $0;
 $180 = (($179) + 8|0);
 $181 = +HEAPF32[$180>>2];
 $182 = $178 / $181;
 $183 = (~~(($182)));
 $i = $183;
 $184 = $0;
 $185 = HEAP32[$184>>2]|0;
 $186 = $i;
 $187 = ($185|0)<($186|0);
 if ($187) {
  $188 = $0;
  $189 = HEAP32[$188>>2]|0;
  $191 = $189;
 } else {
  $190 = $i;
  $191 = $190;
 }
 $i = $191;
 $192 = $i;
 $193 = $0;
 $194 = (($193) + 6116|0);
 $195 = (($194) + ($192<<2)|0);
 $196 = +HEAPF32[$195>>2];
 $197 = $196 > 0.0;
 if ($197) {
  $198 = $i;
  $199 = $0;
  $200 = (($199) + 6116|0);
  $201 = (($200) + ($198<<2)|0);
  $202 = +HEAPF32[$201>>2];
  $203 = $202;
  $204 = $203 + 0.5;
  $213 = $204;
 } else {
  $205 = $i;
  $206 = $0;
  $207 = (($206) + 6116|0);
  $208 = (($207) + ($205<<2)|0);
  $209 = +HEAPF32[$208>>2];
  $210 = $209;
  $211 = $210 - 0.5;
  $213 = $211;
 }
 $212 = (~~(($213))>>>0);
 $214 = $5;
 HEAP32[$214>>2] = $212;
 $215 = $Yb;
 $216 = $0;
 $217 = (($216) + 28|0);
 $218 = (($217) + 68|0);
 $219 = +HEAPF32[$218>>2];
 $220 = $215 - $219;
 $221 = $0;
 $222 = (($221) + 12|0);
 $223 = +HEAPF32[$222>>2];
 $224 = $220 / $223;
 $225 = (~~(($224)));
 $i = $225;
 $226 = $0;
 $227 = HEAP32[$226>>2]|0;
 $228 = $i;
 $229 = ($227|0)<($228|0);
 if ($229) {
  $230 = $0;
  $231 = HEAP32[$230>>2]|0;
  $233 = $231;
 } else {
  $232 = $i;
  $233 = $232;
 }
 $i = $233;
 $234 = $i;
 $235 = $0;
 $236 = (($235) + 12120|0);
 $237 = (($236) + ($234<<2)|0);
 $238 = +HEAPF32[$237>>2];
 $239 = $238 > 0.0;
 if ($239) {
  $240 = $i;
  $241 = $0;
  $242 = (($241) + 12120|0);
  $243 = (($242) + ($240<<2)|0);
  $244 = +HEAPF32[$243>>2];
  $245 = $244;
  $246 = $245 + 0.5;
  $255 = $246;
 } else {
  $247 = $i;
  $248 = $0;
  $249 = (($248) + 12120|0);
  $250 = (($249) + ($247<<2)|0);
  $251 = +HEAPF32[$250>>2];
  $252 = $251;
  $253 = $252 - 0.5;
  $255 = $253;
 }
 $254 = (~~(($255))>>>0);
 $256 = $6;
 HEAP32[$256>>2] = $254;
 $257 = $4;
 $258 = HEAP32[$257>>2]|0;
 $259 = $0;
 $260 = (($259) + 28|0);
 $261 = (($260) + 48|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = ($258>>>0)<($262>>>0);
 if ($263) {
  $264 = $4;
  $265 = HEAP32[$264>>2]|0;
  $271 = $265;
 } else {
  $266 = $0;
  $267 = (($266) + 28|0);
  $268 = (($267) + 48|0);
  $269 = HEAP32[$268>>2]|0;
  $271 = $269;
 }
 $270 = $4;
 HEAP32[$270>>2] = $271;
 $272 = $5;
 $273 = HEAP32[$272>>2]|0;
 $274 = $0;
 $275 = (($274) + 28|0);
 $276 = (($275) + 52|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = ($273>>>0)<($277>>>0);
 if ($278) {
  $279 = $5;
  $280 = HEAP32[$279>>2]|0;
  $286 = $280;
 } else {
  $281 = $0;
  $282 = (($281) + 28|0);
  $283 = (($282) + 52|0);
  $284 = HEAP32[$283>>2]|0;
  $286 = $284;
 }
 $285 = $5;
 HEAP32[$285>>2] = $286;
 $287 = $6;
 $288 = HEAP32[$287>>2]|0;
 $289 = $0;
 $290 = (($289) + 28|0);
 $291 = (($290) + 56|0);
 $292 = HEAP32[$291>>2]|0;
 $293 = ($288>>>0)<($292>>>0);
 if ($293) {
  $294 = $6;
  $295 = HEAP32[$294>>2]|0;
  $301 = $295;
  $300 = $6;
  HEAP32[$300>>2] = $301;
  STACKTOP = sp;return;
 } else {
  $296 = $0;
  $297 = (($296) + 28|0);
  $298 = (($297) + 56|0);
  $299 = HEAP32[$298>>2]|0;
  $301 = $299;
  $300 = $6;
  HEAP32[$300>>2] = $301;
  STACKTOP = sp;return;
 }
}
function _TIFFCIELabToRGBInit($cielab,$display,$refWhite) {
 $cielab = $cielab|0;
 $display = $display|0;
 $refWhite = $refWhite|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gamma = 0.0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cielab;
 $1 = $display;
 $2 = $refWhite;
 $3 = $0;
 HEAP32[$3>>2] = 1500;
 $4 = $0;
 $5 = (($4) + 28|0);
 $6 = $1;
 __TIFFmemcpy($5,$6,84);
 $7 = $0;
 $8 = (($7) + 28|0);
 $9 = (($8) + 72|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10;
 $12 = 1.0 / $11;
 $gamma = $12;
 $13 = $0;
 $14 = (($13) + 28|0);
 $15 = (($14) + 36|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $0;
 $18 = (($17) + 28|0);
 $19 = (($18) + 60|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $16 - $20;
 $22 = $0;
 $23 = HEAP32[$22>>2]|0;
 $24 = (+($23|0));
 $25 = $21 / $24;
 $26 = $0;
 $27 = (($26) + 4|0);
 HEAPF32[$27>>2] = $25;
 $i = 0;
 while(1) {
  $28 = $i;
  $29 = $0;
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)<=($30|0);
  if (!($31)) {
   break;
  }
  $32 = $0;
  $33 = (($32) + 28|0);
  $34 = (($33) + 48|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (+($35>>>0));
  $37 = $i;
  $38 = (+($37|0));
  $39 = $0;
  $40 = HEAP32[$39>>2]|0;
  $41 = (+($40|0));
  $42 = $38 / $41;
  $43 = $gamma;
  $44 = (+Math_pow((+$42),(+$43)));
  $45 = $44;
  $46 = $36 * $45;
  $47 = $i;
  $48 = $0;
  $49 = (($48) + 112|0);
  $50 = (($49) + ($47<<2)|0);
  HEAPF32[$50>>2] = $46;
  $51 = $i;
  $52 = (($51) + 1)|0;
  $i = $52;
 }
 $53 = $0;
 $54 = (($53) + 28|0);
 $55 = (($54) + 76|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $56;
 $58 = 1.0 / $57;
 $gamma = $58;
 $59 = $0;
 $60 = (($59) + 28|0);
 $61 = (($60) + 36|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $0;
 $64 = (($63) + 28|0);
 $65 = (($64) + 60|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $62 - $66;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = (+($69|0));
 $71 = $67 / $70;
 $72 = $0;
 $73 = (($72) + 8|0);
 HEAPF32[$73>>2] = $71;
 $i = 0;
 while(1) {
  $74 = $i;
  $75 = $0;
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)<=($76|0);
  if (!($77)) {
   break;
  }
  $78 = $0;
  $79 = (($78) + 28|0);
  $80 = (($79) + 52|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (+($81>>>0));
  $83 = $i;
  $84 = (+($83|0));
  $85 = $0;
  $86 = HEAP32[$85>>2]|0;
  $87 = (+($86|0));
  $88 = $84 / $87;
  $89 = $gamma;
  $90 = (+Math_pow((+$88),(+$89)));
  $91 = $90;
  $92 = $82 * $91;
  $93 = $i;
  $94 = $0;
  $95 = (($94) + 6116|0);
  $96 = (($95) + ($93<<2)|0);
  HEAPF32[$96>>2] = $92;
  $97 = $i;
  $98 = (($97) + 1)|0;
  $i = $98;
 }
 $99 = $0;
 $100 = (($99) + 28|0);
 $101 = (($100) + 80|0);
 $102 = +HEAPF32[$101>>2];
 $103 = $102;
 $104 = 1.0 / $103;
 $gamma = $104;
 $105 = $0;
 $106 = (($105) + 28|0);
 $107 = (($106) + 36|0);
 $108 = +HEAPF32[$107>>2];
 $109 = $0;
 $110 = (($109) + 28|0);
 $111 = (($110) + 60|0);
 $112 = +HEAPF32[$111>>2];
 $113 = $108 - $112;
 $114 = $0;
 $115 = HEAP32[$114>>2]|0;
 $116 = (+($115|0));
 $117 = $113 / $116;
 $118 = $0;
 $119 = (($118) + 12|0);
 HEAPF32[$119>>2] = $117;
 $i = 0;
 while(1) {
  $120 = $i;
  $121 = $0;
  $122 = HEAP32[$121>>2]|0;
  $123 = ($120|0)<=($122|0);
  if (!($123)) {
   break;
  }
  $124 = $0;
  $125 = (($124) + 28|0);
  $126 = (($125) + 56|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (+($127>>>0));
  $129 = $i;
  $130 = (+($129|0));
  $131 = $0;
  $132 = HEAP32[$131>>2]|0;
  $133 = (+($132|0));
  $134 = $130 / $133;
  $135 = $gamma;
  $136 = (+Math_pow((+$134),(+$135)));
  $137 = $136;
  $138 = $128 * $137;
  $139 = $i;
  $140 = $0;
  $141 = (($140) + 12120|0);
  $142 = (($141) + ($139<<2)|0);
  HEAPF32[$142>>2] = $138;
  $143 = $i;
  $144 = (($143) + 1)|0;
  $i = $144;
 }
 $145 = $2;
 $146 = +HEAPF32[$145>>2];
 $147 = $0;
 $148 = (($147) + 16|0);
 HEAPF32[$148>>2] = $146;
 $149 = $2;
 $150 = (($149) + 4|0);
 $151 = +HEAPF32[$150>>2];
 $152 = $0;
 $153 = (($152) + 20|0);
 HEAPF32[$153>>2] = $151;
 $154 = $2;
 $155 = (($154) + 8|0);
 $156 = +HEAPF32[$155>>2];
 $157 = $0;
 $158 = (($157) + 24|0);
 HEAPF32[$158>>2] = $156;
 STACKTOP = sp;return 0;
}
function _TIFFYCbCrtoRGB($ycbcr,$Y,$Cb,$Cr,$r,$g,$b) {
 $ycbcr = $ycbcr|0;
 $Y = $Y|0;
 $Cb = $Cb|0;
 $Cr = $Cr|0;
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ycbcr;
 $1 = $Y;
 $2 = $Cb;
 $3 = $Cr;
 $4 = $r;
 $5 = $g;
 $6 = $b;
 $7 = $1;
 $8 = ($7>>>0)>(255);
 if ($8) {
  $10 = 255;
 } else {
  $9 = $1;
  $10 = $9;
 }
 $1 = $10;
 $11 = $2;
 $12 = ($11|0)<(0);
 if ($12) {
  $16 = 0;
 } else {
  $13 = $2;
  $14 = ($13|0)>(255);
  if ($14) {
   $91 = 255;
  } else {
   $15 = $2;
   $91 = $15;
  }
  $16 = $91;
 }
 $2 = $16;
 $17 = $3;
 $18 = ($17|0)<(0);
 if ($18) {
  $22 = 0;
 } else {
  $19 = $3;
  $20 = ($19|0)>(255);
  if ($20) {
   $92 = 255;
  } else {
   $21 = $3;
   $92 = $21;
  }
  $22 = $92;
 }
 $3 = $22;
 $23 = $1;
 $24 = $0;
 $25 = (($24) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $3;
 $30 = $0;
 $31 = (($30) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($29<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($28) + ($34))|0;
 $i = $35;
 $36 = $i;
 $37 = ($36|0)<(0);
 if ($37) {
  $42 = 0;
 } else {
  $38 = $i;
  $39 = ($38|0)>(255);
  if ($39) {
   $93 = 255;
  } else {
   $40 = $i;
   $93 = $40;
  }
  $42 = $93;
 }
 $41 = $4;
 HEAP32[$41>>2] = $42;
 $43 = $1;
 $44 = $0;
 $45 = (($44) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($43<<2)|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $2;
 $50 = $0;
 $51 = (($50) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + ($49<<2)|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $3;
 $56 = $0;
 $57 = (($56) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + ($55<<2)|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($54) + ($60))|0;
 $62 = $61 >> 16;
 $63 = (($48) + ($62))|0;
 $i = $63;
 $64 = $i;
 $65 = ($64|0)<(0);
 if ($65) {
  $70 = 0;
 } else {
  $66 = $i;
  $67 = ($66|0)>(255);
  if ($67) {
   $94 = 255;
  } else {
   $68 = $i;
   $94 = $68;
  }
  $70 = $94;
 }
 $69 = $5;
 HEAP32[$69>>2] = $70;
 $71 = $1;
 $72 = $0;
 $73 = (($72) + 20|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($71<<2)|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $2;
 $78 = $0;
 $79 = (($78) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) + ($77<<2)|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($76) + ($82))|0;
 $i = $83;
 $84 = $i;
 $85 = ($84|0)<(0);
 if ($85) {
  $90 = 0;
  $89 = $6;
  HEAP32[$89>>2] = $90;
  STACKTOP = sp;return;
 }
 $86 = $i;
 $87 = ($86|0)>(255);
 if ($87) {
  $95 = 255;
 } else {
  $88 = $i;
  $95 = $88;
 }
 $90 = $95;
 $89 = $6;
 HEAP32[$89>>2] = $90;
 STACKTOP = sp;return;
}
function _TIFFYCbCrToRGBInit($ycbcr,$luma,$refBlackWhite) {
 $ycbcr = $ycbcr|0;
 $luma = $luma|0;
 $refBlackWhite = $refBlackWhite|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Cb = 0, $Cr = 0, $D1 = 0, $D2 = 0, $D3 = 0, $D4 = 0, $clamptab = 0, $f1 = 0.0, $f2 = 0.0, $f3 = 0.0;
 var $f4 = 0.0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ycbcr;
 $1 = $luma;
 $2 = $refBlackWhite;
 $3 = $0;
 $4 = (($3) + 24|0);
 $clamptab = $4;
 $5 = $clamptab;
 __TIFFmemset($5,0,256);
 $6 = $clamptab;
 $7 = (($6) + 256|0);
 $clamptab = $7;
 $8 = $0;
 HEAP32[$8>>2] = $7;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ($9|0)<(256);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = $11&255;
  $13 = $i;
  $14 = $clamptab;
  $15 = (($14) + ($13)|0);
  HEAP8[$15>>0] = $12;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 $18 = $clamptab;
 $19 = (($18) + 256|0);
 __TIFFmemset($19,255,512);
 $20 = $clamptab;
 $21 = (($20) + 768|0);
 $22 = $0;
 $23 = (($22) + 4|0);
 HEAP32[$23>>2] = $21;
 $24 = $0;
 $25 = (($24) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 1024|0);
 $28 = $0;
 $29 = (($28) + 8|0);
 HEAP32[$29>>2] = $27;
 $30 = $0;
 $31 = (($30) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1024|0);
 $34 = $0;
 $35 = (($34) + 12|0);
 HEAP32[$35>>2] = $33;
 $36 = $0;
 $37 = (($36) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 1024|0);
 $40 = $0;
 $41 = (($40) + 16|0);
 HEAP32[$41>>2] = $39;
 $42 = $0;
 $43 = (($42) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1024|0);
 $46 = $0;
 $47 = (($46) + 20|0);
 HEAP32[$47>>2] = $45;
 $48 = $1;
 $49 = +HEAPF32[$48>>2];
 $50 = 2.0 * $49;
 $51 = 2.0 - $50;
 $f1 = $51;
 $52 = $f1;
 $53 = $52 * 65536.0;
 $54 = $53;
 $55 = $54 + 0.5;
 $56 = (~~(($55)));
 $D1 = $56;
 $57 = $1;
 $58 = +HEAPF32[$57>>2];
 $59 = $f1;
 $60 = $58 * $59;
 $61 = $1;
 $62 = (($61) + 4|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $60 / $63;
 $f2 = $64;
 $65 = $f2;
 $66 = $65 * 65536.0;
 $67 = $66;
 $68 = $67 + 0.5;
 $69 = (~~(($68)));
 $70 = (0 - ($69))|0;
 $D2 = $70;
 $71 = $1;
 $72 = (($71) + 8|0);
 $73 = +HEAPF32[$72>>2];
 $74 = 2.0 * $73;
 $75 = 2.0 - $74;
 $f3 = $75;
 $76 = $f3;
 $77 = $76 * 65536.0;
 $78 = $77;
 $79 = $78 + 0.5;
 $80 = (~~(($79)));
 $D3 = $80;
 $81 = $1;
 $82 = (($81) + 8|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $f3;
 $85 = $83 * $84;
 $86 = $1;
 $87 = (($86) + 4|0);
 $88 = +HEAPF32[$87>>2];
 $89 = $85 / $88;
 $f4 = $89;
 $90 = $f4;
 $91 = $90 * 65536.0;
 $92 = $91;
 $93 = $92 + 0.5;
 $94 = (~~(($93)));
 $95 = (0 - ($94))|0;
 $D4 = $95;
 $i = 0;
 $x = -128;
 while(1) {
  $96 = $i;
  $97 = ($96|0)<(256);
  if (!($97)) {
   break;
  }
  $98 = $x;
  $99 = $2;
  $100 = (($99) + 16|0);
  $101 = +HEAPF32[$100>>2];
  $102 = $101 - 128.0;
  $103 = (~~(($102)));
  $104 = (($98) - ($103))|0;
  $105 = (+($104|0));
  $106 = $105 * 127.0;
  $107 = $2;
  $108 = (($107) + 20|0);
  $109 = +HEAPF32[$108>>2];
  $110 = $109 - 128.0;
  $111 = $2;
  $112 = (($111) + 16|0);
  $113 = +HEAPF32[$112>>2];
  $114 = $113 - 128.0;
  $115 = $110 - $114;
  $116 = $115 != 0.0;
  if ($116) {
   $117 = $2;
   $118 = (($117) + 20|0);
   $119 = +HEAPF32[$118>>2];
   $120 = $119 - 128.0;
   $121 = $2;
   $122 = (($121) + 16|0);
   $123 = +HEAPF32[$122>>2];
   $124 = $123 - 128.0;
   $125 = $120 - $124;
   $127 = $125;
  } else {
   $127 = 1.0;
  }
  $126 = $106 / $127;
  $128 = (~~(($126)));
  $Cr = $128;
  $129 = $x;
  $130 = $2;
  $131 = (($130) + 8|0);
  $132 = +HEAPF32[$131>>2];
  $133 = $132 - 128.0;
  $134 = (~~(($133)));
  $135 = (($129) - ($134))|0;
  $136 = (+($135|0));
  $137 = $136 * 127.0;
  $138 = $2;
  $139 = (($138) + 12|0);
  $140 = +HEAPF32[$139>>2];
  $141 = $140 - 128.0;
  $142 = $2;
  $143 = (($142) + 8|0);
  $144 = +HEAPF32[$143>>2];
  $145 = $144 - 128.0;
  $146 = $141 - $145;
  $147 = $146 != 0.0;
  if ($147) {
   $148 = $2;
   $149 = (($148) + 12|0);
   $150 = +HEAPF32[$149>>2];
   $151 = $150 - 128.0;
   $152 = $2;
   $153 = (($152) + 8|0);
   $154 = +HEAPF32[$153>>2];
   $155 = $154 - 128.0;
   $156 = $151 - $155;
   $158 = $156;
  } else {
   $158 = 1.0;
  }
  $157 = $137 / $158;
  $159 = (~~(($157)));
  $Cb = $159;
  $160 = $D1;
  $161 = $Cr;
  $162 = Math_imul($160, $161)|0;
  $163 = (($162) + 32768)|0;
  $164 = $163 >> 16;
  $165 = $i;
  $166 = $0;
  $167 = (($166) + 4|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = (($168) + ($165<<2)|0);
  HEAP32[$169>>2] = $164;
  $170 = $D3;
  $171 = $Cb;
  $172 = Math_imul($170, $171)|0;
  $173 = (($172) + 32768)|0;
  $174 = $173 >> 16;
  $175 = $i;
  $176 = $0;
  $177 = (($176) + 8|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (($178) + ($175<<2)|0);
  HEAP32[$179>>2] = $174;
  $180 = $D2;
  $181 = $Cr;
  $182 = Math_imul($180, $181)|0;
  $183 = $i;
  $184 = $0;
  $185 = (($184) + 12|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = (($186) + ($183<<2)|0);
  HEAP32[$187>>2] = $182;
  $188 = $D4;
  $189 = $Cb;
  $190 = Math_imul($188, $189)|0;
  $191 = (($190) + 32768)|0;
  $192 = $i;
  $193 = $0;
  $194 = (($193) + 16|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($195) + ($192<<2)|0);
  HEAP32[$196>>2] = $191;
  $197 = $x;
  $198 = (($197) + 128)|0;
  $199 = $2;
  $200 = +HEAPF32[$199>>2];
  $201 = (~~(($200)));
  $202 = (($198) - ($201))|0;
  $203 = (+($202|0));
  $204 = $203 * 255.0;
  $205 = $2;
  $206 = (($205) + 4|0);
  $207 = +HEAPF32[$206>>2];
  $208 = $2;
  $209 = +HEAPF32[$208>>2];
  $210 = $207 - $209;
  $211 = $210 != 0.0;
  if ($211) {
   $212 = $2;
   $213 = (($212) + 4|0);
   $214 = +HEAPF32[$213>>2];
   $215 = $2;
   $216 = +HEAPF32[$215>>2];
   $217 = $214 - $216;
   $219 = $217;
  } else {
   $219 = 1.0;
  }
  $218 = $204 / $219;
  $220 = (~~(($218)));
  $221 = $i;
  $222 = $0;
  $223 = (($222) + 20|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($224) + ($221<<2)|0);
  HEAP32[$225>>2] = $220;
  $226 = $i;
  $227 = (($226) + 1)|0;
  $i = $227;
  $228 = $x;
  $229 = (($228) + 1)|0;
  $x = $229;
 }
 STACKTOP = sp;return 0;
}
function __TIFFNoRowEncode($tif,$pp,$cc,$s) {
 $tif = $tif|0;
 $pp = $pp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $pp;
 $2 = $cc;
 $3 = $s;
 $4 = $0;
 $5 = (_TIFFNoEncode($4,20712)|0);
 STACKTOP = sp;return ($5|0);
}
function __TIFFNoStripEncode($tif,$pp,$cc,$s) {
 $tif = $tif|0;
 $pp = $pp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $pp;
 $2 = $cc;
 $3 = $s;
 $4 = $0;
 $5 = (_TIFFNoEncode($4,20728)|0);
 STACKTOP = sp;return ($5|0);
}
function __TIFFNoTileEncode($tif,$pp,$cc,$s) {
 $tif = $tif|0;
 $pp = $pp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $pp;
 $2 = $cc;
 $3 = $s;
 $4 = $0;
 $5 = (_TIFFNoEncode($4,20736)|0);
 STACKTOP = sp;return ($5|0);
}
function __TIFFNoFixupTags($tif) {
 $tif = $tif|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 STACKTOP = sp;return 1;
}
function __TIFFNoRowDecode($tif,$pp,$cc,$s) {
 $tif = $tif|0;
 $pp = $pp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $pp;
 $2 = $cc;
 $3 = $s;
 $4 = $0;
 $5 = (_TIFFNoDecode($4,20712)|0);
 STACKTOP = sp;return ($5|0);
}
function __TIFFNoStripDecode($tif,$pp,$cc,$s) {
 $tif = $tif|0;
 $pp = $pp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $pp;
 $2 = $cc;
 $3 = $s;
 $4 = $0;
 $5 = (_TIFFNoDecode($4,20728)|0);
 STACKTOP = sp;return ($5|0);
}
function __TIFFNoTileDecode($tif,$pp,$cc,$s) {
 $tif = $tif|0;
 $pp = $pp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $pp;
 $2 = $cc;
 $3 = $s;
 $4 = $0;
 $5 = (_TIFFNoDecode($4,20736)|0);
 STACKTOP = sp;return ($5|0);
}
function __TIFFNoSeek($tif,$off) {
 $tif = $tif|0;
 $off = $off|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $off;
 $2 = $0;
 $3 = (($2) + 628|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 _TIFFErrorExt($4,$6,20744,$vararg_buffer);
 STACKTOP = sp;return 0;
}
function __TIFFNoPreCode($tif,$s) {
 $tif = $tif|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $s;
 STACKTOP = sp;return 1;
}
function __TIFFSetDefaultCompressionState($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 504|0);
 HEAP32[$2>>2] = 70;
 $3 = $0;
 $4 = (($3) + 500|0);
 HEAP32[$4>>2] = 1;
 $5 = $0;
 $6 = (($5) + 508|0);
 HEAP32[$6>>2] = 71;
 $7 = $0;
 $8 = (($7) + 512|0);
 HEAP32[$8>>2] = 72;
 $9 = $0;
 $10 = (($9) + 532|0);
 HEAP32[$10>>2] = 73;
 $11 = $0;
 $12 = (($11) + 540|0);
 HEAP32[$12>>2] = 74;
 $13 = $0;
 $14 = (($13) + 548|0);
 HEAP32[$14>>2] = 75;
 $15 = $0;
 $16 = (($15) + 520|0);
 HEAP32[$16>>2] = 1;
 $17 = $0;
 $18 = (($17) + 516|0);
 HEAP32[$18>>2] = 71;
 $19 = $0;
 $20 = (($19) + 524|0);
 HEAP32[$20>>2] = 72;
 $21 = $0;
 $22 = (($21) + 528|0);
 HEAP32[$22>>2] = 71;
 $23 = $0;
 $24 = (($23) + 536|0);
 HEAP32[$24>>2] = 76;
 $25 = $0;
 $26 = (($25) + 544|0);
 HEAP32[$26>>2] = 77;
 $27 = $0;
 $28 = (($27) + 552|0);
 HEAP32[$28>>2] = 78;
 $29 = $0;
 $30 = (($29) + 556|0);
 HEAP32[$30>>2] = 79;
 $31 = $0;
 $32 = (($31) + 560|0);
 HEAP32[$32>>2] = 80;
 $33 = $0;
 $34 = (($33) + 564|0);
 HEAP32[$34>>2] = 79;
 $35 = $0;
 $36 = (($35) + 568|0);
 HEAP32[$36>>2] = 81;
 $37 = $0;
 $38 = (($37) + 572|0);
 HEAP32[$38>>2] = 82;
 $39 = $0;
 $40 = (($39) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & -131329;
 HEAP32[$40>>2] = $42;
 STACKTOP = sp;return;
}
function _TIFFSetCompressionScheme($tif,$scheme) {
 $tif = $tif|0;
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $scheme;
 $2 = $1;
 $3 = $2&65535;
 $4 = (_TIFFFindCODEC($3)|0);
 $c = $4;
 $5 = $0;
 __TIFFSetDefaultCompressionState($5);
 $6 = $c;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $c;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  $12 = $1;
  $13 = (FUNCTION_TABLE_iii[$10 & 255]($11,$12)|0);
  $14 = $13;
  STACKTOP = sp;return ($14|0);
 } else {
  $14 = 1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _TIFFFindCODEC($scheme) {
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $cd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $scheme;
 $2 = HEAP32[20800>>2]|0;
 $cd = $2;
 while(1) {
  $3 = $cd;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $cd;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 4|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = $1;
  $12 = $11&65535;
  $13 = ($10|0)==($12|0);
  if ($13) {
   label = 4;
   break;
  }
  $17 = $cd;
  $18 = HEAP32[$17>>2]|0;
  $cd = $18;
 }
 if ((label|0) == 4) {
  $14 = $cd;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $0 = $16;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $c = 23680;
 while(1) {
  $19 = $c;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0|0);
  if (!($21)) {
   label = 13;
   break;
  }
  $22 = $c;
  $23 = (($22) + 4|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = $1;
  $27 = $26&65535;
  $28 = ($25|0)==($27|0);
  if ($28) {
   label = 10;
   break;
  }
  $30 = $c;
  $31 = (($30) + 12|0);
  $c = $31;
 }
 if ((label|0) == 10) {
  $29 = $c;
  $0 = $29;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _TIFFNoEncode($tif,$method) {
 $tif = $tif|0;
 $method = $method|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $method;
 $2 = $0;
 $3 = (($2) + 40|0);
 $4 = (($3) + 48|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (_TIFFFindCODEC($5)|0);
 $c = $6;
 $7 = $c;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $0;
  $10 = (($9) + 628|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = $c;
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  _TIFFErrorExt($11,$13,20904,$vararg_buffer);
  STACKTOP = sp;return -1;
 } else {
  $17 = $0;
  $18 = (($17) + 628|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  $21 = HEAP32[$20>>2]|0;
  $22 = $0;
  $23 = (($22) + 40|0);
  $24 = (($23) + 48|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = $1;
  HEAP32[$vararg_buffer2>>2] = $26;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $27;
  _TIFFErrorExt($19,$21,20944,$vararg_buffer2);
  STACKTOP = sp;return -1;
 }
 return (0)|0;
}
function _TIFFNoDecode($tif,$method) {
 $tif = $tif|0;
 $method = $method|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $method;
 $2 = $0;
 $3 = (($2) + 40|0);
 $4 = (($3) + 48|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (_TIFFFindCODEC($5)|0);
 $c = $6;
 $7 = $c;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $0;
  $10 = (($9) + 628|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = $c;
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  _TIFFErrorExt($11,$13,20808,$vararg_buffer);
  STACKTOP = sp;return -1;
 } else {
  $17 = $0;
  $18 = (($17) + 628|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  $21 = HEAP32[$20>>2]|0;
  $22 = $0;
  $23 = (($22) + 40|0);
  $24 = (($23) + 48|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = $1;
  HEAP32[$vararg_buffer2>>2] = $26;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $27;
  _TIFFErrorExt($19,$21,20848,$vararg_buffer2);
  STACKTOP = sp;return -1;
 }
 return (0)|0;
}
function __TIFFtrue($tif) {
 $tif = $tif|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 STACKTOP = sp;return 1;
}
function __TIFFvoid($tif) {
 $tif = $tif|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 STACKTOP = sp;return;
}
function _TIFFWriteDirectory($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (_TIFFWriteDirectorySec($1,1,1,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _TIFFRewriteDirectory($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dircount = 0, $dircount2 = 0, $dircount64 = 0, $m = 0, $m4 = 0, $nextdir = 0, $nextdir1 = 0, $nextnextdir = 0;
 var $nextnextdir3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 96|0;
 $vararg_buffer13 = sp;
 $vararg_buffer11 = sp + 72|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp + 64|0;
 $vararg_buffer5 = sp + 80|0;
 $vararg_buffer3 = sp + 88|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 40|0;
 $dircount = sp + 120|0;
 $nextnextdir = sp + 100|0;
 $m = sp + 108|0;
 $nextdir1 = sp + 24|0;
 $dircount64 = sp + 56|0;
 $nextnextdir3 = sp + 8|0;
 $m4 = sp + 16|0;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 16|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)==(0);
 $11 = ($9|0)==(0);
 $12 = $10 & $11;
 if ($12) {
  $13 = $1;
  $14 = (_TIFFWriteDirectory($13)|0);
  $0 = $14;
  $411 = $0;
  STACKTOP = sp;return ($411|0);
 }
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 524288;
 $19 = ($18|0)!=(0);
 if ($19) {
  $172 = $1;
  $173 = (($172) + 424|0);
  $174 = (($173) + 8|0);
  $175 = $174;
  $176 = $175;
  $177 = HEAP32[$176>>2]|0;
  $178 = (($175) + 4)|0;
  $179 = $178;
  $180 = HEAP32[$179>>2]|0;
  $181 = $1;
  $182 = (($181) + 16|0);
  $183 = $182;
  $184 = $183;
  $185 = HEAP32[$184>>2]|0;
  $186 = (($183) + 4)|0;
  $187 = $186;
  $188 = HEAP32[$187>>2]|0;
  $189 = ($177|0)==($185|0);
  $190 = ($180|0)==($188|0);
  $191 = $189 & $190;
  do {
   if ($191) {
    $192 = $1;
    $193 = (($192) + 424|0);
    $194 = (($193) + 8|0);
    $195 = $194;
    $196 = $195;
    HEAP32[$196>>2] = 0;
    $197 = (($195) + 4)|0;
    $198 = $197;
    HEAP32[$198>>2] = 0;
    $199 = $1;
    $200 = (($199) + 16|0);
    $201 = $200;
    $202 = $201;
    HEAP32[$202>>2] = 0;
    $203 = (($201) + 4)|0;
    $204 = $203;
    HEAP32[$204>>2] = 0;
    $205 = $1;
    $206 = (($205) + 640|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $1;
    $209 = (($208) + 628|0);
    $210 = HEAP32[$209>>2]|0;
    (FUNCTION_TABLE_iiiii[$207 & 255]($210,8,0,0)|0);
    $211 = tempRet0;
    $212 = $1;
    $213 = (($212) + 636|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = $1;
    $216 = (($215) + 628|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $1;
    $219 = (($218) + 424|0);
    $220 = (($219) + 8|0);
    $221 = (FUNCTION_TABLE_iiii[$214 & 255]($217,$220,8)|0);
    $222 = ($221|0)==(8);
    if ($222) {
     break;
    }
    $223 = $1;
    $224 = (($223) + 628|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = $1;
    $227 = HEAP32[$226>>2]|0;
    _TIFFErrorExt($225,$227,21024,$vararg_buffer7);
    $0 = 0;
    $411 = $0;
    STACKTOP = sp;return ($411|0);
   } else {
    $228 = $1;
    $229 = (($228) + 424|0);
    $230 = (($229) + 8|0);
    $231 = $230;
    $232 = $231;
    $233 = HEAP32[$232>>2]|0;
    $234 = (($231) + 4)|0;
    $235 = $234;
    $236 = HEAP32[$235>>2]|0;
    $237 = $nextdir1;
    $238 = $237;
    HEAP32[$238>>2] = $233;
    $239 = (($237) + 4)|0;
    $240 = $239;
    HEAP32[$240>>2] = $236;
    while(1) {
     $241 = $1;
     $242 = (($241) + 640|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = $1;
     $245 = (($244) + 628|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = $nextdir1;
     $248 = $247;
     $249 = HEAP32[$248>>2]|0;
     $250 = (($247) + 4)|0;
     $251 = $250;
     $252 = HEAP32[$251>>2]|0;
     $253 = (FUNCTION_TABLE_iiiii[$243 & 255]($246,$249,$252,0)|0);
     $254 = tempRet0;
     $255 = $nextdir1;
     $256 = $255;
     $257 = HEAP32[$256>>2]|0;
     $258 = (($255) + 4)|0;
     $259 = $258;
     $260 = HEAP32[$259>>2]|0;
     $261 = ($253|0)==($257|0);
     $262 = ($254|0)==($260|0);
     $263 = $261 & $262;
     if (!($263)) {
      label = 32;
      break;
     }
     $264 = $1;
     $265 = (($264) + 632|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = $1;
     $268 = (($267) + 628|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = (FUNCTION_TABLE_iiii[$266 & 255]($269,$dircount64,8)|0);
     $271 = ($270|0)==(8);
     if (!($271)) {
      label = 32;
      break;
     }
     $275 = $1;
     $276 = (($275) + 12|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = $277 & 128;
     $279 = ($278|0)!=(0);
     if ($279) {
      _TIFFSwabLong8($dircount64);
     }
     $280 = $dircount64;
     $281 = $280;
     $282 = HEAP32[$281>>2]|0;
     $283 = (($280) + 4)|0;
     $284 = $283;
     $285 = HEAP32[$284>>2]|0;
     $286 = ($285>>>0)>(0);
     $287 = ($282>>>0)>(65535);
     $288 = ($285|0)==(0);
     $289 = $288 & $287;
     $290 = $286 | $289;
     if ($290) {
      label = 36;
      break;
     }
     $294 = $dircount64;
     $295 = $294;
     $296 = HEAP32[$295>>2]|0;
     $297 = (($294) + 4)|0;
     $298 = $297;
     $299 = HEAP32[$298>>2]|0;
     $300 = $296&65535;
     $dircount2 = $300;
     $301 = $1;
     $302 = (($301) + 640|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = $1;
     $305 = (($304) + 628|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = $nextdir1;
     $308 = $307;
     $309 = HEAP32[$308>>2]|0;
     $310 = (($307) + 4)|0;
     $311 = $310;
     $312 = HEAP32[$311>>2]|0;
     $313 = (_i64Add(($309|0),($312|0),8,0)|0);
     $314 = tempRet0;
     $315 = $dircount2;
     $316 = $315&65535;
     $317 = ($316*20)|0;
     $318 = ($317|0)<(0);
     $319 = $318 << 31 >> 31;
     $320 = (_i64Add(($313|0),($314|0),($317|0),($319|0))|0);
     $321 = tempRet0;
     (FUNCTION_TABLE_iiiii[$303 & 255]($306,$320,$321,0)|0);
     $322 = tempRet0;
     $323 = $1;
     $324 = (($323) + 632|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = $1;
     $327 = (($326) + 628|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = (FUNCTION_TABLE_iiii[$325 & 255]($328,$nextnextdir3,8)|0);
     $330 = ($329|0)==(8);
     if (!($330)) {
      label = 38;
      break;
     }
     $334 = $1;
     $335 = (($334) + 12|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = $336 & 128;
     $338 = ($337|0)!=(0);
     if ($338) {
      _TIFFSwabLong8($nextnextdir3);
     }
     $339 = $nextnextdir3;
     $340 = $339;
     $341 = HEAP32[$340>>2]|0;
     $342 = (($339) + 4)|0;
     $343 = $342;
     $344 = HEAP32[$343>>2]|0;
     $345 = $1;
     $346 = (($345) + 16|0);
     $347 = $346;
     $348 = $347;
     $349 = HEAP32[$348>>2]|0;
     $350 = (($347) + 4)|0;
     $351 = $350;
     $352 = HEAP32[$351>>2]|0;
     $353 = ($341|0)==($349|0);
     $354 = ($344|0)==($352|0);
     $355 = $353 & $354;
     if ($355) {
      label = 42;
      break;
     }
     $399 = $nextnextdir3;
     $400 = $399;
     $401 = HEAP32[$400>>2]|0;
     $402 = (($399) + 4)|0;
     $403 = $402;
     $404 = HEAP32[$403>>2]|0;
     $405 = $nextdir1;
     $406 = $405;
     HEAP32[$406>>2] = $401;
     $407 = (($405) + 4)|0;
     $408 = $407;
     HEAP32[$408>>2] = $404;
    }
    if ((label|0) == 32) {
     $272 = $1;
     $273 = (($272) + 628|0);
     $274 = HEAP32[$273>>2]|0;
     _TIFFErrorExt($274,21000,21056,$vararg_buffer9);
     $0 = 0;
     $411 = $0;
     STACKTOP = sp;return ($411|0);
    }
    else if ((label|0) == 36) {
     $291 = $1;
     $292 = (($291) + 628|0);
     $293 = HEAP32[$292>>2]|0;
     _TIFFErrorExt($293,21000,21152,$vararg_buffer11);
     $0 = 0;
     $411 = $0;
     STACKTOP = sp;return ($411|0);
    }
    else if ((label|0) == 38) {
     $331 = $1;
     $332 = (($331) + 628|0);
     $333 = HEAP32[$332>>2]|0;
     _TIFFErrorExt($333,21000,21088,$vararg_buffer13);
     $0 = 0;
     $411 = $0;
     STACKTOP = sp;return ($411|0);
    }
    else if ((label|0) == 42) {
     $356 = $m4;
     $357 = $356;
     HEAP32[$357>>2] = 0;
     $358 = (($356) + 4)|0;
     $359 = $358;
     HEAP32[$359>>2] = 0;
     $360 = $1;
     $361 = (($360) + 640|0);
     $362 = HEAP32[$361>>2]|0;
     $363 = $1;
     $364 = (($363) + 628|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = $nextdir1;
     $367 = $366;
     $368 = HEAP32[$367>>2]|0;
     $369 = (($366) + 4)|0;
     $370 = $369;
     $371 = HEAP32[$370>>2]|0;
     $372 = (_i64Add(($368|0),($371|0),8,0)|0);
     $373 = tempRet0;
     $374 = $dircount2;
     $375 = $374&65535;
     $376 = ($375*20)|0;
     $377 = ($376|0)<(0);
     $378 = $377 << 31 >> 31;
     $379 = (_i64Add(($372|0),($373|0),($376|0),($378|0))|0);
     $380 = tempRet0;
     (FUNCTION_TABLE_iiiii[$362 & 255]($365,$379,$380,0)|0);
     $381 = tempRet0;
     $382 = $1;
     $383 = (($382) + 636|0);
     $384 = HEAP32[$383>>2]|0;
     $385 = $1;
     $386 = (($385) + 628|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = (FUNCTION_TABLE_iiii[$384 & 255]($387,$m4,8)|0);
     $389 = ($388|0)==(8);
     if ($389) {
      $393 = $1;
      $394 = (($393) + 16|0);
      $395 = $394;
      $396 = $395;
      HEAP32[$396>>2] = 0;
      $397 = (($395) + 4)|0;
      $398 = $397;
      HEAP32[$398>>2] = 0;
      break;
     } else {
      $390 = $1;
      $391 = (($390) + 628|0);
      $392 = HEAP32[$391>>2]|0;
      _TIFFErrorExt($392,21000,21120,$vararg_buffer15);
      $0 = 0;
      $411 = $0;
      STACKTOP = sp;return ($411|0);
     }
    }
   }
  } while(0);
 } else {
  $20 = $1;
  $21 = (($20) + 424|0);
  $22 = (($21) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = (($24) + 16|0);
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = ($23|0)==($28|0);
  $33 = (0)==($31|0);
  $34 = $32 & $33;
  do {
   if ($34) {
    $35 = $1;
    $36 = (($35) + 424|0);
    $37 = (($36) + 4|0);
    HEAP32[$37>>2] = 0;
    $38 = $1;
    $39 = (($38) + 16|0);
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = 0;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = 0;
    $44 = $1;
    $45 = (($44) + 640|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $1;
    $48 = (($47) + 628|0);
    $49 = HEAP32[$48>>2]|0;
    (FUNCTION_TABLE_iiiii[$46 & 255]($49,4,0,0)|0);
    $50 = tempRet0;
    $51 = $1;
    $52 = (($51) + 636|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $1;
    $55 = (($54) + 628|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $1;
    $58 = (($57) + 424|0);
    $59 = (($58) + 4|0);
    $60 = (FUNCTION_TABLE_iiii[$53 & 255]($56,$59,4)|0);
    $61 = ($60|0)==(4);
    if ($61) {
     break;
    }
    $62 = $1;
    $63 = (($62) + 628|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $1;
    $66 = HEAP32[$65>>2]|0;
    _TIFFErrorExt($64,$66,21024,$vararg_buffer);
    $0 = 0;
    $411 = $0;
    STACKTOP = sp;return ($411|0);
   } else {
    $67 = $1;
    $68 = (($67) + 424|0);
    $69 = (($68) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $nextdir = $70;
    while(1) {
     $71 = $1;
     $72 = (($71) + 640|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $1;
     $75 = (($74) + 628|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $nextdir;
     $78 = (FUNCTION_TABLE_iiiii[$73 & 255]($76,$77,0,0)|0);
     $79 = tempRet0;
     $80 = $nextdir;
     $81 = ($78|0)==($80|0);
     $82 = ($79|0)==(0);
     $83 = $81 & $82;
     if (!($83)) {
      label = 11;
      break;
     }
     $84 = $1;
     $85 = (($84) + 632|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $1;
     $88 = (($87) + 628|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = (FUNCTION_TABLE_iiii[$86 & 255]($89,$dircount,2)|0);
     $91 = ($90|0)==(2);
     if (!($91)) {
      label = 11;
      break;
     }
     $95 = $1;
     $96 = (($95) + 12|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $97 & 128;
     $99 = ($98|0)!=(0);
     if ($99) {
      _TIFFSwabShort($dircount);
     }
     $100 = $1;
     $101 = (($100) + 640|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $1;
     $104 = (($103) + 628|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $nextdir;
     $107 = (($106) + 2)|0;
     $108 = HEAP16[$dircount>>1]|0;
     $109 = $108&65535;
     $110 = ($109*12)|0;
     $111 = (($107) + ($110))|0;
     (FUNCTION_TABLE_iiiii[$102 & 255]($105,$111,0,0)|0);
     $112 = tempRet0;
     $113 = $1;
     $114 = (($113) + 632|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = $1;
     $117 = (($116) + 628|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = (FUNCTION_TABLE_iiii[$115 & 255]($118,$nextnextdir,4)|0);
     $120 = ($119|0)==(4);
     if (!($120)) {
      label = 15;
      break;
     }
     $124 = $1;
     $125 = (($124) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & 128;
     $128 = ($127|0)!=(0);
     if ($128) {
      _TIFFSwabLong($nextnextdir);
     }
     $129 = HEAP32[$nextnextdir>>2]|0;
     $130 = $1;
     $131 = (($130) + 16|0);
     $132 = $131;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $135 = (($132) + 4)|0;
     $136 = $135;
     $137 = HEAP32[$136>>2]|0;
     $138 = ($129|0)==($134|0);
     $139 = (0)==($137|0);
     $140 = $138 & $139;
     if ($140) {
      label = 19;
      break;
     }
     $171 = HEAP32[$nextnextdir>>2]|0;
     $nextdir = $171;
    }
    if ((label|0) == 11) {
     $92 = $1;
     $93 = (($92) + 628|0);
     $94 = HEAP32[$93>>2]|0;
     _TIFFErrorExt($94,21000,21056,$vararg_buffer1);
     $0 = 0;
     $411 = $0;
     STACKTOP = sp;return ($411|0);
    }
    else if ((label|0) == 15) {
     $121 = $1;
     $122 = (($121) + 628|0);
     $123 = HEAP32[$122>>2]|0;
     _TIFFErrorExt($123,21000,21088,$vararg_buffer3);
     $0 = 0;
     $411 = $0;
     STACKTOP = sp;return ($411|0);
    }
    else if ((label|0) == 19) {
     HEAP32[$m>>2] = 0;
     $141 = $1;
     $142 = (($141) + 640|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $1;
     $145 = (($144) + 628|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = $nextdir;
     $148 = (($147) + 2)|0;
     $149 = HEAP16[$dircount>>1]|0;
     $150 = $149&65535;
     $151 = ($150*12)|0;
     $152 = (($148) + ($151))|0;
     (FUNCTION_TABLE_iiiii[$143 & 255]($146,$152,0,0)|0);
     $153 = tempRet0;
     $154 = $1;
     $155 = (($154) + 636|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = $1;
     $158 = (($157) + 628|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = (FUNCTION_TABLE_iiii[$156 & 255]($159,$m,4)|0);
     $161 = ($160|0)==(4);
     if ($161) {
      $165 = $1;
      $166 = (($165) + 16|0);
      $167 = $166;
      $168 = $167;
      HEAP32[$168>>2] = 0;
      $169 = (($167) + 4)|0;
      $170 = $169;
      HEAP32[$170>>2] = 0;
      break;
     } else {
      $162 = $1;
      $163 = (($162) + 628|0);
      $164 = HEAP32[$163>>2]|0;
      _TIFFErrorExt($164,21000,21120,$vararg_buffer5);
      $0 = 0;
      $411 = $0;
      STACKTOP = sp;return ($411|0);
     }
    }
   }
  } while(0);
 }
 $409 = $1;
 $410 = (_TIFFWriteDirectory($409)|0);
 $0 = $410;
 $411 = $0;
 STACKTOP = sp;return ($411|0);
}
function __TIFFRewriteField($tif,$tag,$in_datatype,$count,$data) {
 $tif = $tif|0;
 $tag = $tag|0;
 $in_datatype = $in_datatype|0;
 $count = $count|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf_to_write = 0, $datatype = 0, $dircount = 0, $dircount64 = 0, $direntry_raw = 0, $dirsize = 0, $entry_count = 0, $entry_offset = 0, $entry_tag = 0, $entry_type = 0, $i = 0, $i1 = 0, $read_offset = 0, $value = 0, $value2 = 0;
 var $value_in_entry = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer32 = sp + 104|0;
 $vararg_buffer29 = sp + 32|0;
 $vararg_buffer27 = sp + 48|0;
 $vararg_buffer25 = sp + 136|0;
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 96|0;
 $vararg_buffer14 = sp + 112|0;
 $vararg_buffer11 = sp + 128|0;
 $vararg_buffer8 = sp + 40|0;
 $vararg_buffer5 = sp + 56|0;
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 64|0;
 $vararg_buffer = sp + 72|0;
 $dircount = sp + 194|0;
 $direntry_raw = sp + 200|0;
 $entry_tag = sp + 196|0;
 $entry_type = sp + 198|0;
 $entry_count = sp + 24|0;
 $entry_offset = sp + 16|0;
 $read_offset = sp + 8|0;
 $dircount64 = sp + 120|0;
 $value = sp + 180|0;
 $value2 = sp + 188|0;
 $1 = $tif;
 $2 = $tag;
 $3 = $in_datatype;
 $4 = $count;
 $5 = $data;
 HEAP16[$entry_tag>>1] = 0;
 HEAP16[$entry_type>>1] = 0;
 $6 = $entry_count;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $entry_offset;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $value_in_entry = 0;
 $buf_to_write = 0;
 $14 = $1;
 $15 = $2;
 $16 = $15&65535;
 (_TIFFFindField($14,$16,0)|0);
 $17 = $1;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 2048;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $1;
  $23 = (($22) + 628|0);
  $24 = HEAP32[$23>>2]|0;
  _TIFFErrorExt($24,21208,21224,$vararg_buffer);
  $0 = 0;
  $644 = $0;
  STACKTOP = sp;return ($644|0);
 }
 $25 = $1;
 $26 = (($25) + 16|0);
 $27 = $26;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = ($29|0)==(0);
 $34 = ($32|0)==(0);
 $35 = $33 & $34;
 if ($35) {
  $36 = $1;
  $37 = (($36) + 628|0);
  $38 = HEAP32[$37>>2]|0;
  _TIFFErrorExt($38,21208,21288,$vararg_buffer1);
  $0 = 0;
  $644 = $0;
  STACKTOP = sp;return ($644|0);
 }
 $39 = $1;
 $40 = (($39) + 640|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = (($42) + 628|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $1;
 $46 = (($45) + 16|0);
 $47 = $46;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($47) + 4)|0;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (FUNCTION_TABLE_iiiii[$41 & 255]($44,$49,$52,0)|0);
 $54 = tempRet0;
 $55 = $1;
 $56 = (($55) + 16|0);
 $57 = $56;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($57) + 4)|0;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = ($53|0)==($59|0);
 $64 = ($54|0)==($62|0);
 $65 = $63 & $64;
 if (!($65)) {
  $66 = $1;
  $67 = (($66) + 628|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $1;
  $70 = HEAP32[$69>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $70;
  _TIFFErrorExt($68,21208,21352,$vararg_buffer3);
  $0 = 0;
  $644 = $0;
  STACKTOP = sp;return ($644|0);
 }
 $71 = $1;
 $72 = (($71) + 16|0);
 $73 = $72;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($73) + 4)|0;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = $read_offset;
 $80 = $79;
 HEAP32[$80>>2] = $75;
 $81 = (($79) + 4)|0;
 $82 = $81;
 HEAP32[$82>>2] = $78;
 $83 = $1;
 $84 = (($83) + 12|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $85 & 524288;
 $87 = ($86|0)!=(0);
 if ($87) {
  $118 = $1;
  $119 = (($118) + 632|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $1;
  $122 = (($121) + 628|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (FUNCTION_TABLE_iiii[$120 & 255]($123,$dircount64,8)|0);
  $125 = ($124|0)==(8);
  if (!($125)) {
   $126 = $1;
   $127 = (($126) + 628|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $1;
   $130 = HEAP32[$129>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $130;
   _TIFFErrorExt($128,21208,21392,$vararg_buffer8);
   $0 = 0;
   $644 = $0;
   STACKTOP = sp;return ($644|0);
  }
  $131 = $1;
  $132 = (($131) + 12|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = $133 & 128;
  $135 = ($134|0)!=(0);
  if ($135) {
   _TIFFSwabLong8($dircount64);
  }
  $136 = $dircount64;
  $137 = $136;
  $138 = HEAP32[$137>>2]|0;
  $139 = (($136) + 4)|0;
  $140 = $139;
  $141 = HEAP32[$140>>2]|0;
  $142 = $138&65535;
  HEAP16[$dircount>>1] = $142;
  $dirsize = 20;
  $143 = $read_offset;
  $144 = $143;
  $145 = HEAP32[$144>>2]|0;
  $146 = (($143) + 4)|0;
  $147 = $146;
  $148 = HEAP32[$147>>2]|0;
  $149 = (_i64Add(($145|0),($148|0),8,0)|0);
  $150 = tempRet0;
  $151 = $read_offset;
  $152 = $151;
  HEAP32[$152>>2] = $149;
  $153 = (($151) + 4)|0;
  $154 = $153;
  HEAP32[$154>>2] = $150;
 } else {
  $88 = $1;
  $89 = (($88) + 632|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $1;
  $92 = (($91) + 628|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (FUNCTION_TABLE_iiii[$90 & 255]($93,$dircount,2)|0);
  $95 = ($94|0)==(2);
  if (!($95)) {
   $96 = $1;
   $97 = (($96) + 628|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $1;
   $100 = HEAP32[$99>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $100;
   _TIFFErrorExt($98,21208,21392,$vararg_buffer5);
   $0 = 0;
   $644 = $0;
   STACKTOP = sp;return ($644|0);
  }
  $101 = $1;
  $102 = (($101) + 12|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $103 & 128;
  $105 = ($104|0)!=(0);
  if ($105) {
   _TIFFSwabShort($dircount);
  }
  $dirsize = 12;
  $106 = $read_offset;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = (($106) + 4)|0;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (_i64Add(($108|0),($111|0),2,0)|0);
  $113 = tempRet0;
  $114 = $read_offset;
  $115 = $114;
  HEAP32[$115>>2] = $112;
  $116 = (($114) + 4)|0;
  $117 = $116;
  HEAP32[$117>>2] = $113;
 }
 while(1) {
  $155 = HEAP16[$dircount>>1]|0;
  $156 = $155&65535;
  $157 = ($156|0)>(0);
  if (!($157)) {
   break;
  }
  $158 = $1;
  $159 = (($158) + 632|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $1;
  $162 = (($161) + 628|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $dirsize;
  $165 = (FUNCTION_TABLE_iiii[$160 & 255]($163,$direntry_raw,$164)|0);
  $166 = $dirsize;
  $167 = ($165|0)==($166|0);
  if (!($167)) {
   label = 21;
   break;
  }
  ;HEAP8[$entry_tag+0>>0]=HEAP8[$direntry_raw+0>>0]|0;HEAP8[$entry_tag+1>>0]=HEAP8[$direntry_raw+1>>0]|0;
  $173 = $1;
  $174 = (($173) + 12|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $175 & 128;
  $177 = ($176|0)!=(0);
  if ($177) {
   _TIFFSwabShort($entry_tag);
  }
  $178 = HEAP16[$entry_tag>>1]|0;
  $179 = $178&65535;
  $180 = $2;
  $181 = $180&65535;
  $182 = ($179|0)==($181|0);
  if ($182) {
   label = 25;
   break;
  }
  $183 = $dirsize;
  $184 = ($183|0)<(0);
  $185 = $184 << 31 >> 31;
  $186 = $read_offset;
  $187 = $186;
  $188 = HEAP32[$187>>2]|0;
  $189 = (($186) + 4)|0;
  $190 = $189;
  $191 = HEAP32[$190>>2]|0;
  $192 = (_i64Add(($188|0),($191|0),($183|0),($185|0))|0);
  $193 = tempRet0;
  $194 = $read_offset;
  $195 = $194;
  HEAP32[$195>>2] = $192;
  $196 = (($194) + 4)|0;
  $197 = $196;
  HEAP32[$197>>2] = $193;
 }
 if ((label|0) == 21) {
  $168 = $1;
  $169 = (($168) + 628|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $1;
  $172 = HEAP32[$171>>2]|0;
  HEAP32[$vararg_buffer11>>2] = $172;
  _TIFFErrorExt($170,21208,21432,$vararg_buffer11);
  $0 = 0;
  $644 = $0;
  STACKTOP = sp;return ($644|0);
 }
 else if ((label|0) == 25) {
 }
 $198 = HEAP16[$entry_tag>>1]|0;
 $199 = $198&65535;
 $200 = $2;
 $201 = $200&65535;
 $202 = ($199|0)!=($201|0);
 if ($202) {
  $203 = $1;
  $204 = (($203) + 628|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $1;
  $207 = HEAP32[$206>>2]|0;
  $208 = $2;
  $209 = $208&65535;
  HEAP32[$vararg_buffer14>>2] = $207;
  $vararg_ptr17 = (($vararg_buffer14) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $209;
  _TIFFErrorExt($205,21208,21472,$vararg_buffer14);
  $0 = 0;
  $644 = $0;
  STACKTOP = sp;return ($644|0);
 }
 $210 = (($direntry_raw) + 2|0);
 ;HEAP8[$entry_type+0>>0]=HEAP8[$210+0>>0]|0;HEAP8[$entry_type+1>>0]=HEAP8[$210+1>>0]|0;
 $211 = $1;
 $212 = (($211) + 12|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = $213 & 128;
 $215 = ($214|0)!=(0);
 if ($215) {
  _TIFFSwabShort($entry_type);
 }
 $216 = $1;
 $217 = (($216) + 12|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = $218 & 524288;
 $220 = ($219|0)!=(0);
 if ($220) {
  $243 = (($direntry_raw) + 4|0);
  ;HEAP8[$entry_count+0>>0]=HEAP8[$243+0>>0]|0;HEAP8[$entry_count+1>>0]=HEAP8[$243+1>>0]|0;HEAP8[$entry_count+2>>0]=HEAP8[$243+2>>0]|0;HEAP8[$entry_count+3>>0]=HEAP8[$243+3>>0]|0;HEAP8[$entry_count+4>>0]=HEAP8[$243+4>>0]|0;HEAP8[$entry_count+5>>0]=HEAP8[$243+5>>0]|0;HEAP8[$entry_count+6>>0]=HEAP8[$243+6>>0]|0;HEAP8[$entry_count+7>>0]=HEAP8[$243+7>>0]|0;
  $244 = $1;
  $245 = (($244) + 12|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $246 & 128;
  $248 = ($247|0)!=(0);
  if ($248) {
   _TIFFSwabLong8($entry_count);
  }
  $249 = (($direntry_raw) + 12|0);
  ;HEAP8[$entry_offset+0>>0]=HEAP8[$249+0>>0]|0;HEAP8[$entry_offset+1>>0]=HEAP8[$249+1>>0]|0;HEAP8[$entry_offset+2>>0]=HEAP8[$249+2>>0]|0;HEAP8[$entry_offset+3>>0]=HEAP8[$249+3>>0]|0;HEAP8[$entry_offset+4>>0]=HEAP8[$249+4>>0]|0;HEAP8[$entry_offset+5>>0]=HEAP8[$249+5>>0]|0;HEAP8[$entry_offset+6>>0]=HEAP8[$249+6>>0]|0;HEAP8[$entry_offset+7>>0]=HEAP8[$249+7>>0]|0;
  $250 = $1;
  $251 = (($250) + 12|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $252 & 128;
  $254 = ($253|0)!=(0);
  if ($254) {
   _TIFFSwabLong8($entry_offset);
  }
 } else {
  $221 = (($direntry_raw) + 4|0);
  ;HEAP8[$value+0>>0]=HEAP8[$221+0>>0]|0;HEAP8[$value+1>>0]=HEAP8[$221+1>>0]|0;HEAP8[$value+2>>0]=HEAP8[$221+2>>0]|0;HEAP8[$value+3>>0]=HEAP8[$221+3>>0]|0;
  $222 = $1;
  $223 = (($222) + 12|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = $224 & 128;
  $226 = ($225|0)!=(0);
  if ($226) {
   _TIFFSwabLong($value);
  }
  $227 = HEAP32[$value>>2]|0;
  $228 = $entry_count;
  $229 = $228;
  HEAP32[$229>>2] = $227;
  $230 = (($228) + 4)|0;
  $231 = $230;
  HEAP32[$231>>2] = 0;
  $232 = (($direntry_raw) + 8|0);
  ;HEAP8[$value+0>>0]=HEAP8[$232+0>>0]|0;HEAP8[$value+1>>0]=HEAP8[$232+1>>0]|0;HEAP8[$value+2>>0]=HEAP8[$232+2>>0]|0;HEAP8[$value+3>>0]=HEAP8[$232+3>>0]|0;
  $233 = $1;
  $234 = (($233) + 12|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $235 & 128;
  $237 = ($236|0)!=(0);
  if ($237) {
   _TIFFSwabLong($value);
  }
  $238 = HEAP32[$value>>2]|0;
  $239 = $entry_offset;
  $240 = $239;
  HEAP32[$240>>2] = $238;
  $241 = (($239) + 4)|0;
  $242 = $241;
  HEAP32[$242>>2] = 0;
 }
 $255 = $3;
 $256 = (_TIFFDataWidth($255)|0);
 $257 = ($256|0)==(8);
 if ($257) {
  $258 = $1;
  $259 = (($258) + 12|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $260 & 524288;
  $262 = ($261|0)!=(0);
  if ($262) {
   label = 54;
  } else {
   $263 = $3;
   $264 = ($263|0)==(16);
   if ($264) {
    $datatype = 4;
   } else {
    $265 = $3;
    $266 = ($265|0)==(17);
    if ($266) {
     $datatype = 9;
    } else {
     $267 = $3;
     $268 = ($267|0)==(18);
     if ($268) {
      $datatype = 13;
     } else {
      $269 = $3;
      $datatype = $269;
     }
    }
   }
  }
 } else {
  label = 54;
 }
 if ((label|0) == 54) {
  $270 = $3;
  $datatype = $270;
 }
 $271 = $1;
 $272 = $4;
 $273 = $datatype;
 $274 = (_TIFFDataWidth($273)|0);
 $275 = (__TIFFCheckMalloc($271,$272,$274,21504)|0);
 $buf_to_write = $275;
 $276 = $buf_to_write;
 $277 = ($276|0)!=(0|0);
 if (!($277)) {
  $0 = 0;
  $644 = $0;
  STACKTOP = sp;return ($644|0);
 }
 $278 = $datatype;
 $279 = $3;
 $280 = ($278|0)==($279|0);
 if ($280) {
  $281 = $buf_to_write;
  $282 = $5;
  $283 = $4;
  $284 = $datatype;
  $285 = (_TIFFDataWidth($284)|0);
  $286 = Math_imul($283, $285)|0;
  _memcpy(($281|0),($282|0),($286|0))|0;
 } else {
  $287 = $datatype;
  $288 = ($287|0)==(9);
  do {
   if ($288) {
    $289 = $3;
    $290 = ($289|0)==(17);
    if ($290) {
     $i = 0;
     while(1) {
      $291 = $i;
      $292 = $4;
      $293 = ($291|0)<($292|0);
      if (!($293)) {
       label = 67;
       break;
      }
      $294 = $i;
      $295 = $5;
      $296 = (($295) + ($294<<3)|0);
      $297 = $296;
      $298 = $297;
      $299 = HEAP32[$298>>2]|0;
      $300 = (($297) + 4)|0;
      $301 = $300;
      $302 = HEAP32[$301>>2]|0;
      $303 = $i;
      $304 = $buf_to_write;
      $305 = (($304) + ($303<<2)|0);
      HEAP32[$305>>2] = $299;
      $306 = $i;
      $307 = $buf_to_write;
      $308 = (($307) + ($306<<2)|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = ($309|0)<(0);
      $311 = $310 << 31 >> 31;
      $312 = $i;
      $313 = $5;
      $314 = (($313) + ($312<<3)|0);
      $315 = $314;
      $316 = $315;
      $317 = HEAP32[$316>>2]|0;
      $318 = (($315) + 4)|0;
      $319 = $318;
      $320 = HEAP32[$319>>2]|0;
      $321 = ($309|0)!=($317|0);
      $322 = ($311|0)!=($320|0);
      $323 = $321 | $322;
      if ($323) {
       break;
      }
      $328 = $i;
      $329 = (($328) + 1)|0;
      $i = $329;
     }
     if ((label|0) == 67) {
      break;
     }
     $324 = $buf_to_write;
     __TIFFfree($324);
     $325 = $1;
     $326 = (($325) + 628|0);
     $327 = HEAP32[$326>>2]|0;
     _TIFFErrorExt($327,21208,21528,$vararg_buffer18);
     $0 = 0;
     $644 = $0;
     STACKTOP = sp;return ($644|0);
    } else {
     label = 68;
    }
   } else {
    label = 68;
   }
  } while(0);
  if ((label|0) == 68) {
   $330 = $datatype;
   $331 = ($330|0)==(4);
   if ($331) {
    $332 = $3;
    $333 = ($332|0)==(16);
    if ($333) {
     label = 72;
    } else {
     label = 70;
    }
   } else {
    label = 70;
   }
   if ((label|0) == 70) {
    $334 = $datatype;
    $335 = ($334|0)==(13);
    if ($335) {
     $336 = $3;
     $337 = ($336|0)==(18);
     if ($337) {
      label = 72;
     }
    }
   }
   do {
    if ((label|0) == 72) {
     $i1 = 0;
     while(1) {
      $338 = $i1;
      $339 = $4;
      $340 = ($338|0)<($339|0);
      if (!($340)) {
       label = 78;
       break;
      }
      $341 = $i1;
      $342 = $5;
      $343 = (($342) + ($341<<3)|0);
      $344 = $343;
      $345 = $344;
      $346 = HEAP32[$345>>2]|0;
      $347 = (($344) + 4)|0;
      $348 = $347;
      $349 = HEAP32[$348>>2]|0;
      $350 = $i1;
      $351 = $buf_to_write;
      $352 = (($351) + ($350<<2)|0);
      HEAP32[$352>>2] = $346;
      $353 = $i1;
      $354 = $buf_to_write;
      $355 = (($354) + ($353<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = $i1;
      $358 = $5;
      $359 = (($358) + ($357<<3)|0);
      $360 = $359;
      $361 = $360;
      $362 = HEAP32[$361>>2]|0;
      $363 = (($360) + 4)|0;
      $364 = $363;
      $365 = HEAP32[$364>>2]|0;
      $366 = ($356|0)!=($362|0);
      $367 = (0)!=($365|0);
      $368 = $366 | $367;
      if ($368) {
       break;
      }
      $373 = $i1;
      $374 = (($373) + 1)|0;
      $i1 = $374;
     }
     if ((label|0) == 78) {
      break;
     }
     $369 = $buf_to_write;
     __TIFFfree($369);
     $370 = $1;
     $371 = (($370) + 628|0);
     $372 = HEAP32[$371>>2]|0;
     _TIFFErrorExt($372,21208,21528,$vararg_buffer20);
     $0 = 0;
     $644 = $0;
     STACKTOP = sp;return ($644|0);
    }
   } while(0);
  }
 }
 $375 = $datatype;
 $376 = (_TIFFDataWidth($375)|0);
 $377 = ($376|0)>(1);
 if ($377) {
  $378 = $1;
  $379 = (($378) + 12|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = $380 & 128;
  $382 = ($381|0)!=(0);
  if ($382) {
   $383 = $datatype;
   $384 = (_TIFFDataWidth($383)|0);
   $385 = ($384|0)==(2);
   if ($385) {
    $386 = $buf_to_write;
    $387 = $4;
    _TIFFSwabArrayOfShort($386,$387);
   } else {
    $388 = $datatype;
    $389 = (_TIFFDataWidth($388)|0);
    $390 = ($389|0)==(4);
    if ($390) {
     $391 = $buf_to_write;
     $392 = $4;
     _TIFFSwabArrayOfLong($391,$392);
    } else {
     $393 = $datatype;
     $394 = (_TIFFDataWidth($393)|0);
     $395 = ($394|0)==(8);
     if ($395) {
      $396 = $buf_to_write;
      $397 = $4;
      _TIFFSwabArrayOfLong8($396,$397);
     }
    }
   }
  }
 }
 $398 = $1;
 $399 = (($398) + 12|0);
 $400 = HEAP32[$399>>2]|0;
 $401 = $400 & 524288;
 $402 = ($401|0)!=(0);
 if ($402) {
  $420 = $datatype;
  $421 = (_TIFFDataWidth($420)|0);
  $422 = $4;
  $423 = Math_imul($421, $422)|0;
  $424 = ($423|0)<=(8);
  if ($424) {
   $425 = $read_offset;
   $426 = $425;
   $427 = HEAP32[$426>>2]|0;
   $428 = (($425) + 4)|0;
   $429 = $428;
   $430 = HEAP32[$429>>2]|0;
   $431 = (_i64Add(($427|0),($430|0),12,0)|0);
   $432 = tempRet0;
   $433 = $entry_offset;
   $434 = $433;
   HEAP32[$434>>2] = $431;
   $435 = (($433) + 4)|0;
   $436 = $435;
   HEAP32[$436>>2] = $432;
   $value_in_entry = 1;
  }
 } else {
  $403 = $datatype;
  $404 = (_TIFFDataWidth($403)|0);
  $405 = $4;
  $406 = Math_imul($404, $405)|0;
  $407 = ($406|0)<=(4);
  if ($407) {
   $408 = $read_offset;
   $409 = $408;
   $410 = HEAP32[$409>>2]|0;
   $411 = (($408) + 4)|0;
   $412 = $411;
   $413 = HEAP32[$412>>2]|0;
   $414 = (_i64Add(($410|0),($413|0),8,0)|0);
   $415 = tempRet0;
   $416 = $entry_offset;
   $417 = $416;
   HEAP32[$417>>2] = $414;
   $418 = (($416) + 4)|0;
   $419 = $418;
   HEAP32[$419>>2] = $415;
   $value_in_entry = 1;
  }
 }
 $437 = $entry_count;
 $438 = $437;
 $439 = HEAP32[$438>>2]|0;
 $440 = (($437) + 4)|0;
 $441 = $440;
 $442 = HEAP32[$441>>2]|0;
 $443 = $4;
 $444 = ($443|0)<(0);
 $445 = $444 << 31 >> 31;
 $446 = ($439|0)==($443|0);
 $447 = ($442|0)==($445|0);
 $448 = $446 & $447;
 if ($448) {
  $449 = HEAP16[$entry_type>>1]|0;
  $450 = $449&65535;
  $451 = $datatype;
  $452 = $451&65535;
  $453 = $452&65535;
  $454 = ($450|0)==($453|0);
  if ($454) {
   $455 = $1;
   $456 = (($455) + 640|0);
   $457 = HEAP32[$456>>2]|0;
   $458 = $1;
   $459 = (($458) + 628|0);
   $460 = HEAP32[$459>>2]|0;
   $461 = $entry_offset;
   $462 = $461;
   $463 = HEAP32[$462>>2]|0;
   $464 = (($461) + 4)|0;
   $465 = $464;
   $466 = HEAP32[$465>>2]|0;
   $467 = (FUNCTION_TABLE_iiiii[$457 & 255]($460,$463,$466,0)|0);
   $468 = tempRet0;
   $469 = $entry_offset;
   $470 = $469;
   $471 = HEAP32[$470>>2]|0;
   $472 = (($469) + 4)|0;
   $473 = $472;
   $474 = HEAP32[$473>>2]|0;
   $475 = ($467|0)==($471|0);
   $476 = ($468|0)==($474|0);
   $477 = $475 & $476;
   if (!($477)) {
    $478 = $buf_to_write;
    __TIFFfree($478);
    $479 = $1;
    $480 = (($479) + 628|0);
    $481 = HEAP32[$480>>2]|0;
    $482 = $1;
    $483 = HEAP32[$482>>2]|0;
    HEAP32[$vararg_buffer22>>2] = $483;
    _TIFFErrorExt($481,21208,21352,$vararg_buffer22);
    $0 = 0;
    $644 = $0;
    STACKTOP = sp;return ($644|0);
   }
   $484 = $1;
   $485 = (($484) + 636|0);
   $486 = HEAP32[$485>>2]|0;
   $487 = $1;
   $488 = (($487) + 628|0);
   $489 = HEAP32[$488>>2]|0;
   $490 = $buf_to_write;
   $491 = $4;
   $492 = $datatype;
   $493 = (_TIFFDataWidth($492)|0);
   $494 = Math_imul($491, $493)|0;
   $495 = (FUNCTION_TABLE_iiii[$486 & 255]($489,$490,$494)|0);
   $496 = $4;
   $497 = $datatype;
   $498 = (_TIFFDataWidth($497)|0);
   $499 = Math_imul($496, $498)|0;
   $500 = ($495|0)==($499|0);
   if ($500) {
    $505 = $buf_to_write;
    __TIFFfree($505);
    $0 = 1;
    $644 = $0;
    STACKTOP = sp;return ($644|0);
   } else {
    $501 = $buf_to_write;
    __TIFFfree($501);
    $502 = $1;
    $503 = (($502) + 628|0);
    $504 = HEAP32[$503>>2]|0;
    _TIFFErrorExt($504,21208,21120,$vararg_buffer25);
    $0 = 0;
    $644 = $0;
    STACKTOP = sp;return ($644|0);
   }
  }
 }
 $506 = $value_in_entry;
 $507 = ($506|0)!=(0);
 do {
  if ($507) {
   $542 = $buf_to_write;
   $543 = $4;
   $544 = $datatype;
   $545 = (_TIFFDataWidth($544)|0);
   $546 = Math_imul($543, $545)|0;
   _memcpy(($entry_offset|0),($542|0),($546|0))|0;
  } else {
   $508 = $1;
   $509 = (($508) + 640|0);
   $510 = HEAP32[$509>>2]|0;
   $511 = $1;
   $512 = (($511) + 628|0);
   $513 = HEAP32[$512>>2]|0;
   $514 = (FUNCTION_TABLE_iiiii[$510 & 255]($513,0,0,2)|0);
   $515 = tempRet0;
   $516 = $entry_offset;
   $517 = $516;
   HEAP32[$517>>2] = $514;
   $518 = (($516) + 4)|0;
   $519 = $518;
   HEAP32[$519>>2] = $515;
   $520 = $1;
   $521 = (($520) + 636|0);
   $522 = HEAP32[$521>>2]|0;
   $523 = $1;
   $524 = (($523) + 628|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $buf_to_write;
   $527 = $4;
   $528 = $datatype;
   $529 = (_TIFFDataWidth($528)|0);
   $530 = Math_imul($527, $529)|0;
   $531 = (FUNCTION_TABLE_iiii[$522 & 255]($525,$526,$530)|0);
   $532 = $4;
   $533 = $datatype;
   $534 = (_TIFFDataWidth($533)|0);
   $535 = Math_imul($532, $534)|0;
   $536 = ($531|0)==($535|0);
   if ($536) {
    $541 = $buf_to_write;
    __TIFFfree($541);
    break;
   }
   $537 = $buf_to_write;
   __TIFFfree($537);
   $538 = $1;
   $539 = (($538) + 628|0);
   $540 = HEAP32[$539>>2]|0;
   _TIFFErrorExt($540,21208,21120,$vararg_buffer27);
   $0 = 0;
   $644 = $0;
   STACKTOP = sp;return ($644|0);
  }
 } while(0);
 $547 = $datatype;
 $548 = $547&65535;
 HEAP16[$entry_type>>1] = $548;
 $549 = (($direntry_raw) + 2|0);
 ;HEAP8[$549+0>>0]=HEAP8[$entry_type+0>>0]|0;HEAP8[$549+1>>0]=HEAP8[$entry_type+1>>0]|0;
 $550 = $1;
 $551 = (($550) + 12|0);
 $552 = HEAP32[$551>>2]|0;
 $553 = $552 & 128;
 $554 = ($553|0)!=(0);
 if ($554) {
  $555 = (($direntry_raw) + 2|0);
  _TIFFSwabShort($555);
 }
 $556 = $1;
 $557 = (($556) + 12|0);
 $558 = HEAP32[$557>>2]|0;
 $559 = $558 & 524288;
 $560 = ($559|0)!=(0);
 if ($560) {
  $587 = (($direntry_raw) + 4|0);
  ;HEAP8[$587+0>>0]=HEAP8[$entry_count+0>>0]|0;HEAP8[$587+1>>0]=HEAP8[$entry_count+1>>0]|0;HEAP8[$587+2>>0]=HEAP8[$entry_count+2>>0]|0;HEAP8[$587+3>>0]=HEAP8[$entry_count+3>>0]|0;HEAP8[$587+4>>0]=HEAP8[$entry_count+4>>0]|0;HEAP8[$587+5>>0]=HEAP8[$entry_count+5>>0]|0;HEAP8[$587+6>>0]=HEAP8[$entry_count+6>>0]|0;HEAP8[$587+7>>0]=HEAP8[$entry_count+7>>0]|0;
  $588 = $1;
  $589 = (($588) + 12|0);
  $590 = HEAP32[$589>>2]|0;
  $591 = $590 & 128;
  $592 = ($591|0)!=(0);
  if ($592) {
   $593 = (($direntry_raw) + 4|0);
   _TIFFSwabLong8($593);
  }
  $594 = (($direntry_raw) + 12|0);
  ;HEAP8[$594+0>>0]=HEAP8[$entry_offset+0>>0]|0;HEAP8[$594+1>>0]=HEAP8[$entry_offset+1>>0]|0;HEAP8[$594+2>>0]=HEAP8[$entry_offset+2>>0]|0;HEAP8[$594+3>>0]=HEAP8[$entry_offset+3>>0]|0;HEAP8[$594+4>>0]=HEAP8[$entry_offset+4>>0]|0;HEAP8[$594+5>>0]=HEAP8[$entry_offset+5>>0]|0;HEAP8[$594+6>>0]=HEAP8[$entry_offset+6>>0]|0;HEAP8[$594+7>>0]=HEAP8[$entry_offset+7>>0]|0;
  $595 = $1;
  $596 = (($595) + 12|0);
  $597 = HEAP32[$596>>2]|0;
  $598 = $597 & 128;
  $599 = ($598|0)!=(0);
  if ($599) {
   $600 = (($direntry_raw) + 12|0);
   _TIFFSwabLong8($600);
  }
 } else {
  $561 = $entry_count;
  $562 = $561;
  $563 = HEAP32[$562>>2]|0;
  $564 = (($561) + 4)|0;
  $565 = $564;
  $566 = HEAP32[$565>>2]|0;
  HEAP32[$value2>>2] = $563;
  $567 = (($direntry_raw) + 4|0);
  ;HEAP8[$567+0>>0]=HEAP8[$value2+0>>0]|0;HEAP8[$567+1>>0]=HEAP8[$value2+1>>0]|0;HEAP8[$567+2>>0]=HEAP8[$value2+2>>0]|0;HEAP8[$567+3>>0]=HEAP8[$value2+3>>0]|0;
  $568 = $1;
  $569 = (($568) + 12|0);
  $570 = HEAP32[$569>>2]|0;
  $571 = $570 & 128;
  $572 = ($571|0)!=(0);
  if ($572) {
   $573 = (($direntry_raw) + 4|0);
   _TIFFSwabLong($573);
  }
  $574 = $entry_offset;
  $575 = $574;
  $576 = HEAP32[$575>>2]|0;
  $577 = (($574) + 4)|0;
  $578 = $577;
  $579 = HEAP32[$578>>2]|0;
  HEAP32[$value2>>2] = $576;
  $580 = (($direntry_raw) + 8|0);
  ;HEAP8[$580+0>>0]=HEAP8[$value2+0>>0]|0;HEAP8[$580+1>>0]=HEAP8[$value2+1>>0]|0;HEAP8[$580+2>>0]=HEAP8[$value2+2>>0]|0;HEAP8[$580+3>>0]=HEAP8[$value2+3>>0]|0;
  $581 = $1;
  $582 = (($581) + 12|0);
  $583 = HEAP32[$582>>2]|0;
  $584 = $583 & 128;
  $585 = ($584|0)!=(0);
  if ($585) {
   $586 = (($direntry_raw) + 8|0);
   _TIFFSwabLong($586);
  }
 }
 $601 = $1;
 $602 = (($601) + 640|0);
 $603 = HEAP32[$602>>2]|0;
 $604 = $1;
 $605 = (($604) + 628|0);
 $606 = HEAP32[$605>>2]|0;
 $607 = $read_offset;
 $608 = $607;
 $609 = HEAP32[$608>>2]|0;
 $610 = (($607) + 4)|0;
 $611 = $610;
 $612 = HEAP32[$611>>2]|0;
 $613 = (FUNCTION_TABLE_iiiii[$603 & 255]($606,$609,$612,0)|0);
 $614 = tempRet0;
 $615 = $read_offset;
 $616 = $615;
 $617 = HEAP32[$616>>2]|0;
 $618 = (($615) + 4)|0;
 $619 = $618;
 $620 = HEAP32[$619>>2]|0;
 $621 = ($613|0)==($617|0);
 $622 = ($614|0)==($620|0);
 $623 = $621 & $622;
 if (!($623)) {
  $624 = $1;
  $625 = (($624) + 628|0);
  $626 = HEAP32[$625>>2]|0;
  $627 = $1;
  $628 = HEAP32[$627>>2]|0;
  HEAP32[$vararg_buffer29>>2] = $628;
  _TIFFErrorExt($626,21208,21352,$vararg_buffer29);
  $0 = 0;
  $644 = $0;
  STACKTOP = sp;return ($644|0);
 }
 $629 = $1;
 $630 = (($629) + 636|0);
 $631 = HEAP32[$630>>2]|0;
 $632 = $1;
 $633 = (($632) + 628|0);
 $634 = HEAP32[$633>>2]|0;
 $635 = $dirsize;
 $636 = (FUNCTION_TABLE_iiii[$631 & 255]($634,$direntry_raw,$635)|0);
 $637 = $dirsize;
 $638 = ($636|0)==($637|0);
 if ($638) {
  $0 = 1;
  $644 = $0;
  STACKTOP = sp;return ($644|0);
 } else {
  $639 = $1;
  $640 = (($639) + 628|0);
  $641 = HEAP32[$640>>2]|0;
  $642 = $1;
  $643 = HEAP32[$642>>2]|0;
  HEAP32[$vararg_buffer32>>2] = $643;
  _TIFFErrorExt($641,21208,21576,$vararg_buffer32);
  $0 = 0;
  $644 = $0;
  STACKTOP = sp;return ($644|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectorySec($tif,$isimage,$imagedone,$pdiroff) {
 $tif = $tif|0;
 $isimage = $isimage|0;
 $imagedone = $imagedone|0;
 $pdiroff = $pdiroff|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0.0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0.0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0.0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0.0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0.0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0.0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0.0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0.0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $dir = 0, $dirmem = 0, $dirsize = 0, $m = 0, $n = 0, $n6 = 0, $n8 = 0, $nTmp = 0, $na = 0, $na4 = 0, $nb = 0, $nb5 = 0, $ndir = 0, $o = 0, $o7 = 0, $o9 = 0;
 var $p = 0, $p1 = 0, $pa = 0, $pa2 = 0, $pb = 0, $pb3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr18 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer27 = sp + 40|0;
 $vararg_buffer25 = sp + 16|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 24|0;
 $vararg_buffer9 = sp + 80|0;
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 72|0;
 $ndir = sp + 140|0;
 $na = sp + 192|0;
 $nb = sp + 108|0;
 $pb = sp + 152|0;
 $p = sp + 194|0;
 $p1 = sp + 160|0;
 $pa2 = sp + 164|0;
 $pb3 = sp + 168|0;
 $nTmp = sp + 112|0;
 $1 = $tif;
 $2 = $isimage;
 $3 = $imagedone;
 $4 = $pdiroff;
 $5 = $1;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $0 = 1;
  $1723 = $0;
  STACKTOP = sp;return ($1723|0);
 }
 $9 = $1;
 (__TIFFFillStriles($9)|0);
 $10 = $3;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $1;
  $13 = (($12) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 4096;
  $16 = ($15|0)!=(0);
  do {
   if ($16) {
    $17 = $1;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 & -4097;
    HEAP32[$18>>2] = $20;
    $21 = $1;
    $22 = (($21) + 528|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $1;
    $25 = (FUNCTION_TABLE_ii[$23 & 255]($24)|0);
    $26 = ($25|0)!=(0);
    if ($26) {
     break;
    }
    $27 = $1;
    $28 = (($27) + 628|0);
    $29 = HEAP32[$28>>2]|0;
    _TIFFErrorExt($29,21616,21640,$vararg_buffer);
    $0 = 0;
    $1723 = $0;
    STACKTOP = sp;return ($1723|0);
   }
  } while(0);
  $30 = $1;
  $31 = (($30) + 556|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  FUNCTION_TABLE_vi[$32 & 255]($33);
  $34 = $1;
  $35 = (($34) + 608|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)>(0);
  do {
   if ($37) {
    $38 = $1;
    $39 = (($38) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $40 & 64;
    $42 = ($41|0)!=(0);
    if ($42) {
     $43 = $1;
     $44 = (_TIFFFlushData1($43)|0);
     $45 = ($44|0)!=(0);
     if ($45) {
      break;
     }
     $46 = $1;
     $47 = (($46) + 628|0);
     $48 = HEAP32[$47>>2]|0;
     _TIFFErrorExt($48,21616,21688,$vararg_buffer1);
     $0 = 0;
     $1723 = $0;
     STACKTOP = sp;return ($1723|0);
    }
   }
  } while(0);
  $49 = $1;
  $50 = (($49) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 & 512;
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = $1;
   $55 = (($54) + 588|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)!=(0|0);
   if ($57) {
    $58 = $1;
    $59 = (($58) + 588|0);
    $60 = HEAP32[$59>>2]|0;
    __TIFFfree($60);
    $61 = $1;
    $62 = (($61) + 588|0);
    HEAP32[$62>>2] = 0;
    $63 = $1;
    $64 = (($63) + 608|0);
    HEAP32[$64>>2] = 0;
    $65 = $1;
    $66 = (($65) + 592|0);
    HEAP32[$66>>2] = 0;
    $67 = $1;
    $68 = (($67) + 596|0);
    HEAP32[$68>>2] = 0;
    $69 = $1;
    $70 = (($69) + 600|0);
    HEAP32[$70>>2] = 0;
   }
  }
  $71 = $1;
  $72 = (($71) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $73 & -81;
  HEAP32[$72>>2] = $74;
 }
 $dir = 0;
 $dirmem = 0;
 $dirsize = 0;
 L27: while(1) {
  HEAP32[$ndir>>2] = 0;
  $75 = $2;
  $76 = ($75|0)!=(0);
  if ($76) {
   $77 = $1;
   $78 = (($77) + 40|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $79 & 2;
   $81 = ($80|0)!=(0);
   if ($81) {
    $82 = $1;
    $83 = $dir;
    $84 = $1;
    $85 = (($84) + 40|0);
    $86 = (($85) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (_TIFFWriteDirectoryTagShortLong($82,$ndir,$83,256,$87)|0);
    $89 = ($88|0)!=(0);
    if (!($89)) {
     label = 21;
     break;
    }
    $90 = $1;
    $91 = $dir;
    $92 = $1;
    $93 = (($92) + 40|0);
    $94 = (($93) + 20|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (_TIFFWriteDirectoryTagShortLong($90,$ndir,$91,257,$95)|0);
    $97 = ($96|0)!=(0);
    if (!($97)) {
     label = 23;
     break;
    }
   }
   $98 = $1;
   $99 = (($98) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $100 & 4;
   $102 = ($101|0)!=(0);
   if ($102) {
    $103 = $1;
    $104 = $dir;
    $105 = $1;
    $106 = (($105) + 40|0);
    $107 = (($106) + 28|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (_TIFFWriteDirectoryTagShortLong($103,$ndir,$104,322,$108)|0);
    $110 = ($109|0)!=(0);
    if (!($110)) {
     label = 27;
     break;
    }
    $111 = $1;
    $112 = $dir;
    $113 = $1;
    $114 = (($113) + 40|0);
    $115 = (($114) + 32|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (_TIFFWriteDirectoryTagShortLong($111,$ndir,$112,323,$116)|0);
    $118 = ($117|0)!=(0);
    if (!($118)) {
     label = 29;
     break;
    }
   }
   $119 = $1;
   $120 = (($119) + 40|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $121 & 8;
   $123 = ($122|0)!=(0);
   if ($123) {
    $124 = $1;
    $125 = $dir;
    $126 = $1;
    $127 = (($126) + 40|0);
    $128 = (($127) + 76|0);
    $129 = +HEAPF32[$128>>2];
    $130 = $129;
    $131 = (_TIFFWriteDirectoryTagRational($124,$ndir,$125,282,$130)|0);
    $132 = ($131|0)!=(0);
    if (!($132)) {
     label = 33;
     break;
    }
    $133 = $1;
    $134 = $dir;
    $135 = $1;
    $136 = (($135) + 40|0);
    $137 = (($136) + 80|0);
    $138 = +HEAPF32[$137>>2];
    $139 = $138;
    $140 = (_TIFFWriteDirectoryTagRational($133,$ndir,$134,283,$139)|0);
    $141 = ($140|0)!=(0);
    if (!($141)) {
     label = 35;
     break;
    }
   }
   $142 = $1;
   $143 = (($142) + 40|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $144 & 16;
   $146 = ($145|0)!=(0);
   if ($146) {
    $147 = $1;
    $148 = $dir;
    $149 = $1;
    $150 = (($149) + 40|0);
    $151 = (($150) + 88|0);
    $152 = +HEAPF32[$151>>2];
    $153 = $152;
    $154 = (_TIFFWriteDirectoryTagRational($147,$ndir,$148,286,$153)|0);
    $155 = ($154|0)!=(0);
    if (!($155)) {
     label = 39;
     break;
    }
    $156 = $1;
    $157 = $dir;
    $158 = $1;
    $159 = (($158) + 40|0);
    $160 = (($159) + 92|0);
    $161 = +HEAPF32[$160>>2];
    $162 = $161;
    $163 = (_TIFFWriteDirectoryTagRational($156,$ndir,$157,287,$162)|0);
    $164 = ($163|0)!=(0);
    if (!($164)) {
     label = 41;
     break;
    }
   }
   $165 = $1;
   $166 = (($165) + 40|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = $167 & 32;
   $169 = ($168|0)!=(0);
   if ($169) {
    $170 = $1;
    $171 = $dir;
    $172 = $1;
    $173 = (($172) + 40|0);
    $174 = (($173) + 40|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (_TIFFWriteDirectoryTagLong($170,$ndir,$171,254,$175)|0);
    $177 = ($176|0)!=(0);
    if (!($177)) {
     label = 45;
     break;
    }
   }
   $178 = $1;
   $179 = (($178) + 40|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & 64;
   $182 = ($181|0)!=(0);
   if ($182) {
    $183 = $1;
    $184 = $dir;
    $185 = $1;
    $186 = (($185) + 40|0);
    $187 = (($186) + 44|0);
    $188 = HEAP16[$187>>1]|0;
    $189 = (_TIFFWriteDirectoryTagShortPerSample($183,$ndir,$184,258,$188)|0);
    $190 = ($189|0)!=(0);
    if (!($190)) {
     label = 49;
     break;
    }
   }
   $191 = $1;
   $192 = (($191) + 40|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $193 & 128;
   $195 = ($194|0)!=(0);
   if ($195) {
    $196 = $1;
    $197 = $dir;
    $198 = $1;
    $199 = (($198) + 40|0);
    $200 = (($199) + 48|0);
    $201 = HEAP16[$200>>1]|0;
    $202 = (_TIFFWriteDirectoryTagShort($196,$ndir,$197,259,$201)|0);
    $203 = ($202|0)!=(0);
    if (!($203)) {
     label = 53;
     break;
    }
   }
   $204 = $1;
   $205 = (($204) + 40|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = $206 & 256;
   $208 = ($207|0)!=(0);
   if ($208) {
    $209 = $1;
    $210 = $dir;
    $211 = $1;
    $212 = (($211) + 40|0);
    $213 = (($212) + 50|0);
    $214 = HEAP16[$213>>1]|0;
    $215 = (_TIFFWriteDirectoryTagShort($209,$ndir,$210,262,$214)|0);
    $216 = ($215|0)!=(0);
    if (!($216)) {
     label = 57;
     break;
    }
   }
   $217 = $1;
   $218 = (($217) + 40|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $219 & 512;
   $221 = ($220|0)!=(0);
   if ($221) {
    $222 = $1;
    $223 = $dir;
    $224 = $1;
    $225 = (($224) + 40|0);
    $226 = (($225) + 52|0);
    $227 = HEAP16[$226>>1]|0;
    $228 = (_TIFFWriteDirectoryTagShort($222,$ndir,$223,263,$227)|0);
    $229 = ($228|0)!=(0);
    if (!($229)) {
     label = 61;
     break;
    }
   }
   $230 = $1;
   $231 = (($230) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $232 & 1024;
   $234 = ($233|0)!=(0);
   if ($234) {
    $235 = $1;
    $236 = $dir;
    $237 = $1;
    $238 = (($237) + 40|0);
    $239 = (($238) + 54|0);
    $240 = HEAP16[$239>>1]|0;
    $241 = (_TIFFWriteDirectoryTagShort($235,$ndir,$236,266,$240)|0);
    $242 = ($241|0)!=(0);
    if (!($242)) {
     label = 65;
     break;
    }
   }
   $243 = $1;
   $244 = (($243) + 40|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = $245 & 32768;
   $247 = ($246|0)!=(0);
   if ($247) {
    $248 = $1;
    $249 = $dir;
    $250 = $1;
    $251 = (($250) + 40|0);
    $252 = (($251) + 56|0);
    $253 = HEAP16[$252>>1]|0;
    $254 = (_TIFFWriteDirectoryTagShort($248,$ndir,$249,274,$253)|0);
    $255 = ($254|0)!=(0);
    if (!($255)) {
     label = 69;
     break;
    }
   }
   $256 = $1;
   $257 = (($256) + 40|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = $258 & 65536;
   $260 = ($259|0)!=(0);
   if ($260) {
    $261 = $1;
    $262 = $dir;
    $263 = $1;
    $264 = (($263) + 40|0);
    $265 = (($264) + 58|0);
    $266 = HEAP16[$265>>1]|0;
    $267 = (_TIFFWriteDirectoryTagShort($261,$ndir,$262,277,$266)|0);
    $268 = ($267|0)!=(0);
    if (!($268)) {
     label = 73;
     break;
    }
   }
   $269 = $1;
   $270 = (($269) + 40|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = $271 & 131072;
   $273 = ($272|0)!=(0);
   if ($273) {
    $274 = $1;
    $275 = $dir;
    $276 = $1;
    $277 = (($276) + 40|0);
    $278 = (($277) + 60|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = (_TIFFWriteDirectoryTagShortLong($274,$ndir,$275,278,$279)|0);
    $281 = ($280|0)!=(0);
    if (!($281)) {
     label = 77;
     break;
    }
   }
   $282 = $1;
   $283 = (($282) + 40|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = $284 & 262144;
   $286 = ($285|0)!=(0);
   if ($286) {
    $287 = $1;
    $288 = $dir;
    $289 = $1;
    $290 = (($289) + 40|0);
    $291 = (($290) + 64|0);
    $292 = HEAP16[$291>>1]|0;
    $293 = (_TIFFWriteDirectoryTagShortPerSample($287,$ndir,$288,280,$292)|0);
    $294 = ($293|0)!=(0);
    if (!($294)) {
     label = 81;
     break;
    }
   }
   $295 = $1;
   $296 = (($295) + 40|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = $297 & 524288;
   $299 = ($298|0)!=(0);
   if ($299) {
    $300 = $1;
    $301 = $dir;
    $302 = $1;
    $303 = (($302) + 40|0);
    $304 = (($303) + 66|0);
    $305 = HEAP16[$304>>1]|0;
    $306 = (_TIFFWriteDirectoryTagShortPerSample($300,$ndir,$301,281,$305)|0);
    $307 = ($306|0)!=(0);
    if (!($307)) {
     label = 85;
     break;
    }
   }
   $308 = $1;
   $309 = (($308) + 40|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = $310 & 1048576;
   $312 = ($311|0)!=(0);
   if ($312) {
    $313 = $1;
    $314 = $dir;
    $315 = $1;
    $316 = (($315) + 40|0);
    $317 = (($316) + 86|0);
    $318 = HEAP16[$317>>1]|0;
    $319 = (_TIFFWriteDirectoryTagShort($313,$ndir,$314,284,$318)|0);
    $320 = ($319|0)!=(0);
    if (!($320)) {
     label = 89;
     break;
    }
   }
   $321 = $1;
   $322 = (($321) + 40|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $323 & 4194304;
   $325 = ($324|0)!=(0);
   if ($325) {
    $326 = $1;
    $327 = $dir;
    $328 = $1;
    $329 = (($328) + 40|0);
    $330 = (($329) + 84|0);
    $331 = HEAP16[$330>>1]|0;
    $332 = (_TIFFWriteDirectoryTagShort($326,$ndir,$327,296,$331)|0);
    $333 = ($332|0)!=(0);
    if (!($333)) {
     label = 93;
     break;
    }
   }
   $334 = $1;
   $335 = (($334) + 40|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = $336 & 8388608;
   $338 = ($337|0)!=(0);
   if ($338) {
    $339 = $1;
    $340 = $dir;
    $341 = $1;
    $342 = (($341) + 40|0);
    $343 = (($342) + 96|0);
    $344 = (_TIFFWriteDirectoryTagShortArray($339,$ndir,$340,297,2,$343)|0);
    $345 = ($344|0)!=(0);
    if (!($345)) {
     label = 97;
     break;
    }
   }
   $346 = $1;
   $347 = (($346) + 40|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = $348 & 16777216;
   $350 = ($349|0)!=(0);
   if ($350) {
    $351 = $1;
    $352 = (($351) + 12|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = $353 & 1024;
    $355 = ($354|0)!=(0);
    if ($355) {
     $368 = $1;
     $369 = $dir;
     $370 = $1;
     $371 = (($370) + 40|0);
     $372 = (($371) + 128|0);
     $373 = HEAP32[$372>>2]|0;
     $374 = $1;
     $375 = (($374) + 40|0);
     $376 = (($375) + 136|0);
     $377 = HEAP32[$376>>2]|0;
     $378 = (_TIFFWriteDirectoryTagLongLong8Array($368,$ndir,$369,325,$373,$377)|0);
     $379 = ($378|0)!=(0);
     if (!($379)) {
      label = 105;
      break;
     }
    } else {
     $356 = $1;
     $357 = $dir;
     $358 = $1;
     $359 = (($358) + 40|0);
     $360 = (($359) + 128|0);
     $361 = HEAP32[$360>>2]|0;
     $362 = $1;
     $363 = (($362) + 40|0);
     $364 = (($363) + 136|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = (_TIFFWriteDirectoryTagLongLong8Array($356,$ndir,$357,279,$361,$365)|0);
     $367 = ($366|0)!=(0);
     if (!($367)) {
      label = 102;
      break;
     }
    }
   }
   $380 = $1;
   $381 = (($380) + 40|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = $382 & 33554432;
   $384 = ($383|0)!=(0);
   if ($384) {
    $385 = $1;
    $386 = (($385) + 12|0);
    $387 = HEAP32[$386>>2]|0;
    $388 = $387 & 1024;
    $389 = ($388|0)!=(0);
    if ($389) {
     $402 = $1;
     $403 = $dir;
     $404 = $1;
     $405 = (($404) + 40|0);
     $406 = (($405) + 128|0);
     $407 = HEAP32[$406>>2]|0;
     $408 = $1;
     $409 = (($408) + 40|0);
     $410 = (($409) + 132|0);
     $411 = HEAP32[$410>>2]|0;
     $412 = (_TIFFWriteDirectoryTagLongLong8Array($402,$ndir,$403,324,$407,$411)|0);
     $413 = ($412|0)!=(0);
     if (!($413)) {
      label = 114;
      break;
     }
    } else {
     $390 = $1;
     $391 = $dir;
     $392 = $1;
     $393 = (($392) + 40|0);
     $394 = (($393) + 128|0);
     $395 = HEAP32[$394>>2]|0;
     $396 = $1;
     $397 = (($396) + 40|0);
     $398 = (($397) + 132|0);
     $399 = HEAP32[$398>>2]|0;
     $400 = (_TIFFWriteDirectoryTagLongLong8Array($390,$ndir,$391,273,$395,$399)|0);
     $401 = ($400|0)!=(0);
     if (!($401)) {
      label = 111;
      break;
     }
    }
   }
   $414 = $1;
   $415 = (($414) + 40|0);
   $416 = HEAP32[$415>>2]|0;
   $417 = $416 & 67108864;
   $418 = ($417|0)!=(0);
   if ($418) {
    $419 = $1;
    $420 = $dir;
    $421 = (_TIFFWriteDirectoryTagColormap($419,$ndir,$420)|0);
    $422 = ($421|0)!=(0);
    if (!($422)) {
     label = 119;
     break;
    }
   }
   $423 = $1;
   $424 = (($423) + 40|0);
   $425 = HEAP32[$424>>2]|0;
   $426 = $425 & -2147483648;
   $427 = ($426|0)!=(0);
   if ($427) {
    $428 = $1;
    $429 = (($428) + 40|0);
    $430 = (($429) + 116|0);
    $431 = HEAP16[$430>>1]|0;
    $432 = ($431<<16>>16)!=(0);
    if ($432) {
     $433 = $1;
     HEAP32[$vararg_buffer3>>2] = $na;
     $vararg_ptr5 = (($vararg_buffer3) + 4|0);
     HEAP32[$vararg_ptr5>>2] = $nb;
     (_TIFFGetFieldDefaulted($433,338,$vararg_buffer3)|0);
     $434 = $1;
     $435 = $dir;
     $436 = HEAP16[$na>>1]|0;
     $437 = $436&65535;
     $438 = HEAP32[$nb>>2]|0;
     $439 = (_TIFFWriteDirectoryTagShortArray($434,$ndir,$435,338,$437,$438)|0);
     $440 = ($439|0)!=(0);
     if (!($440)) {
      label = 124;
      break;
     }
    }
   }
   $441 = $1;
   $442 = (($441) + 40|0);
   $443 = (($442) + 4|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = $444 & 1;
   $446 = ($445|0)!=(0);
   if ($446) {
    $447 = $1;
    $448 = $dir;
    $449 = $1;
    $450 = (($449) + 40|0);
    $451 = (($450) + 46|0);
    $452 = HEAP16[$451>>1]|0;
    $453 = (_TIFFWriteDirectoryTagShortPerSample($447,$ndir,$448,339,$452)|0);
    $454 = ($453|0)!=(0);
    if (!($454)) {
     label = 129;
     break;
    }
   }
   $455 = $1;
   $456 = (($455) + 40|0);
   $457 = (($456) + 4|0);
   $458 = HEAP32[$457>>2]|0;
   $459 = $458 & 2;
   $460 = ($459|0)!=(0);
   if ($460) {
    $461 = $1;
    $462 = $dir;
    $463 = $1;
    $464 = (($463) + 40|0);
    $465 = (($464) + 58|0);
    $466 = HEAP16[$465>>1]|0;
    $467 = $466&65535;
    $468 = $1;
    $469 = (($468) + 40|0);
    $470 = (($469) + 68|0);
    $471 = HEAP32[$470>>2]|0;
    $472 = (_TIFFWriteDirectoryTagSampleformatArray($461,$ndir,$462,340,$467,$471)|0);
    $473 = ($472|0)!=(0);
    if (!($473)) {
     label = 133;
     break;
    }
   }
   $474 = $1;
   $475 = (($474) + 40|0);
   $476 = (($475) + 4|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $477 & 4;
   $479 = ($478|0)!=(0);
   if ($479) {
    $480 = $1;
    $481 = $dir;
    $482 = $1;
    $483 = (($482) + 40|0);
    $484 = (($483) + 58|0);
    $485 = HEAP16[$484>>1]|0;
    $486 = $485&65535;
    $487 = $1;
    $488 = (($487) + 40|0);
    $489 = (($488) + 72|0);
    $490 = HEAP32[$489>>2]|0;
    $491 = (_TIFFWriteDirectoryTagSampleformatArray($480,$ndir,$481,341,$486,$490)|0);
    $492 = ($491|0)!=(0);
    if (!($492)) {
     label = 137;
     break;
    }
   }
   $493 = $1;
   $494 = (($493) + 40|0);
   $495 = (($494) + 4|0);
   $496 = HEAP32[$495>>2]|0;
   $497 = $496 & 8;
   $498 = ($497|0)!=(0);
   if ($498) {
    $499 = $1;
    $500 = $dir;
    $501 = $1;
    $502 = (($501) + 40|0);
    $503 = (($502) + 24|0);
    $504 = HEAP32[$503>>2]|0;
    $505 = (_TIFFWriteDirectoryTagLong($499,$ndir,$500,-32539,$504)|0);
    $506 = ($505|0)!=(0);
    if (!($506)) {
     label = 141;
     break;
    }
   }
   $507 = $1;
   $508 = (($507) + 40|0);
   $509 = (($508) + 4|0);
   $510 = HEAP32[$509>>2]|0;
   $511 = $510 & 16;
   $512 = ($511|0)!=(0);
   if ($512) {
    $513 = $1;
    $514 = $dir;
    $515 = $1;
    $516 = (($515) + 40|0);
    $517 = (($516) + 36|0);
    $518 = HEAP32[$517>>2]|0;
    $519 = (_TIFFWriteDirectoryTagLong($513,$ndir,$514,-32538,$518)|0);
    $520 = ($519|0)!=(0);
    if (!($520)) {
     label = 145;
     break;
    }
   }
   $521 = $1;
   $522 = (($521) + 40|0);
   $523 = (($522) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 & 32;
   $526 = ($525|0)!=(0);
   if ($526) {
    $527 = $1;
    $528 = $dir;
    $529 = $1;
    $530 = (($529) + 40|0);
    $531 = (($530) + 112|0);
    $532 = (_TIFFWriteDirectoryTagShortArray($527,$ndir,$528,321,2,$531)|0);
    $533 = ($532|0)!=(0);
    if (!($533)) {
     label = 149;
     break;
    }
   }
   $534 = $1;
   $535 = (($534) + 40|0);
   $536 = (($535) + 4|0);
   $537 = HEAP32[$536>>2]|0;
   $538 = $537 & 128;
   $539 = ($538|0)!=(0);
   if ($539) {
    $540 = $1;
    $541 = $dir;
    $542 = $1;
    $543 = (($542) + 40|0);
    $544 = (($543) + 152|0);
    $545 = (_TIFFWriteDirectoryTagShortArray($540,$ndir,$541,530,2,$544)|0);
    $546 = ($545|0)!=(0);
    if (!($546)) {
     label = 153;
     break;
    }
   }
   $547 = $1;
   $548 = (($547) + 40|0);
   $549 = (($548) + 4|0);
   $550 = HEAP32[$549>>2]|0;
   $551 = $550 & 256;
   $552 = ($551|0)!=(0);
   if ($552) {
    $553 = $1;
    $554 = $dir;
    $555 = $1;
    $556 = (($555) + 40|0);
    $557 = (($556) + 156|0);
    $558 = HEAP16[$557>>1]|0;
    $559 = (_TIFFWriteDirectoryTagShort($553,$ndir,$554,531,$558)|0);
    $560 = ($559|0)!=(0);
    if (!($560)) {
     label = 157;
     break;
    }
   }
   $561 = $1;
   $562 = (($561) + 40|0);
   $563 = (($562) + 4|0);
   $564 = HEAP32[$563>>2]|0;
   $565 = $564 & 512;
   $566 = ($565|0)!=(0);
   if ($566) {
    $567 = $1;
    $568 = $dir;
    $569 = $1;
    $570 = (($569) + 40|0);
    $571 = (($570) + 172|0);
    $572 = HEAP32[$571>>2]|0;
    $573 = (_TIFFWriteDirectoryTagRationalArray($567,$ndir,$568,532,6,$572)|0);
    $574 = ($573|0)!=(0);
    if (!($574)) {
     label = 161;
     break;
    }
   }
   $575 = $1;
   $576 = (($575) + 40|0);
   $577 = (($576) + 4|0);
   $578 = HEAP32[$577>>2]|0;
   $579 = $578 & 4096;
   $580 = ($579|0)!=(0);
   if ($580) {
    $581 = $1;
    $582 = $dir;
    $583 = (_TIFFWriteDirectoryTagTransferfunction($581,$ndir,$582)|0);
    $584 = ($583|0)!=(0);
    if (!($584)) {
     label = 165;
     break;
    }
   }
   $585 = $1;
   $586 = (($585) + 40|0);
   $587 = (($586) + 4|0);
   $588 = HEAP32[$587>>2]|0;
   $589 = $588 & 16384;
   $590 = ($589|0)!=(0);
   if ($590) {
    $591 = $1;
    $592 = $dir;
    $593 = $1;
    $594 = (($593) + 40|0);
    $595 = (($594) + 176|0);
    $596 = HEAP32[$595>>2]|0;
    $597 = $1;
    $598 = (($597) + 40|0);
    $599 = (($598) + 180|0);
    $600 = HEAP32[$599>>2]|0;
    $601 = (_TIFFWriteDirectoryTagAscii($591,$ndir,$592,333,$596,$600)|0);
    $602 = ($601|0)!=(0);
    if (!($602)) {
     label = 169;
     break;
    }
   }
   $603 = $1;
   $604 = (($603) + 40|0);
   $605 = (($604) + 4|0);
   $606 = HEAP32[$605>>2]|0;
   $607 = $606 & 131072;
   $608 = ($607|0)!=(0);
   if ($608) {
    $609 = $1;
    $610 = $dir;
    $611 = (_TIFFWriteDirectoryTagSubifd($609,$ndir,$610)|0);
    $612 = ($611|0)!=(0);
    if (!($612)) {
     label = 173;
     break;
    }
   }
   $n = 0;
   while(1) {
    $613 = $n;
    $614 = $1;
    $615 = (($614) + 660|0);
    $616 = HEAP32[$615>>2]|0;
    $617 = ($613>>>0)<($616>>>0);
    if (!($617)) {
     break;
    }
    $618 = $n;
    $619 = $1;
    $620 = (($619) + 656|0);
    $621 = HEAP32[$620>>2]|0;
    $622 = (($621) + ($618<<2)|0);
    $623 = HEAP32[$622>>2]|0;
    $o = $623;
    $624 = $o;
    $625 = (($624) + 24|0);
    $626 = HEAP16[$625>>1]|0;
    $627 = $626&65535;
    $628 = ($627|0)>=(66);
    do {
     if ($628) {
      $629 = $o;
      $630 = (($629) + 24|0);
      $631 = HEAP16[$630>>1]|0;
      $632 = $631&65535;
      $633 = (($632|0) / 32)&-1;
      $634 = $1;
      $635 = (($634) + 40|0);
      $636 = (($635) + ($633<<2)|0);
      $637 = HEAP32[$636>>2]|0;
      $638 = $o;
      $639 = (($638) + 24|0);
      $640 = HEAP16[$639>>1]|0;
      $641 = $640&65535;
      $642 = $641 & 31;
      $643 = 1 << $642;
      $644 = $637 & $643;
      $645 = ($644|0)!=(0);
      if (!($645)) {
       break;
      }
      $646 = $o;
      $647 = (($646) + 20|0);
      $648 = HEAP32[$647>>2]|0;
      if ((($648|0) == 4)) {
       $677 = $o;
       $678 = (($677) + 8|0);
       $679 = HEAP32[$678>>2]|0;
       $680 = ($679|0)==(3);
       if (!($680)) {
        label = 190;
        break L27;
       }
       $681 = $o;
       $682 = (($681) + 4|0);
       $683 = HEAP16[$682>>1]|0;
       $684 = $683 << 16 >> 16;
       $685 = ($684|0)==(1);
       if (!($685)) {
        label = 192;
        break L27;
       }
       $686 = $o;
       $687 = (($686) + 27|0);
       $688 = HEAP8[$687>>0]|0;
       $689 = $688&255;
       $690 = ($689|0)==(0);
       if (!($690)) {
        label = 194;
        break L27;
       }
       $691 = $1;
       $692 = $o;
       $693 = HEAP32[$692>>2]|0;
       HEAP32[$vararg_buffer9>>2] = $p;
       (_TIFFGetField($691,$693,$vararg_buffer9)|0);
       $694 = $1;
       $695 = $dir;
       $696 = $o;
       $697 = HEAP32[$696>>2]|0;
       $698 = $697&65535;
       $699 = HEAP16[$p>>1]|0;
       $700 = (_TIFFWriteDirectoryTagShort($694,$ndir,$695,$698,$699)|0);
       $701 = ($700|0)!=(0);
       if (!($701)) {
        label = 196;
        break L27;
       }
      } else if ((($648|0) == 40)) {
       $727 = $o;
       $728 = (($727) + 8|0);
       $729 = HEAP32[$728>>2]|0;
       $730 = ($729|0)==(7);
       if (!($730)) {
        label = 208;
        break L27;
       }
       $731 = $o;
       $732 = (($731) + 4|0);
       $733 = HEAP16[$732>>1]|0;
       $734 = $733 << 16 >> 16;
       $735 = ($734|0)==(-3);
       if (!($735)) {
        label = 210;
        break L27;
       }
       $736 = $o;
       $737 = (($736) + 27|0);
       $738 = HEAP8[$737>>0]|0;
       $739 = $738&255;
       $740 = ($739|0)==(1);
       if (!($740)) {
        label = 212;
        break L27;
       }
       $741 = $1;
       $742 = $o;
       $743 = HEAP32[$742>>2]|0;
       HEAP32[$vararg_buffer15>>2] = $pa2;
       $vararg_ptr18 = (($vararg_buffer15) + 4|0);
       HEAP32[$vararg_ptr18>>2] = $pb3;
       (_TIFFGetField($741,$743,$vararg_buffer15)|0);
       $744 = $1;
       $745 = $dir;
       $746 = $o;
       $747 = HEAP32[$746>>2]|0;
       $748 = $747&65535;
       $749 = HEAP32[$pa2>>2]|0;
       $750 = HEAP32[$pb3>>2]|0;
       $751 = (_TIFFWriteDirectoryTagUndefinedArray($744,$ndir,$745,$748,$749,$750)|0);
       $752 = ($751|0)!=(0);
       if (!($752)) {
        label = 214;
        break L27;
       }
      } else if ((($648|0) == 6)) {
       $702 = $o;
       $703 = (($702) + 8|0);
       $704 = HEAP32[$703>>2]|0;
       $705 = ($704|0)==(4);
       if (!($705)) {
        label = 199;
        break L27;
       }
       $706 = $o;
       $707 = (($706) + 4|0);
       $708 = HEAP16[$707>>1]|0;
       $709 = $708 << 16 >> 16;
       $710 = ($709|0)==(1);
       if (!($710)) {
        label = 201;
        break L27;
       }
       $711 = $o;
       $712 = (($711) + 27|0);
       $713 = HEAP8[$712>>0]|0;
       $714 = $713&255;
       $715 = ($714|0)==(0);
       if (!($715)) {
        label = 203;
        break L27;
       }
       $716 = $1;
       $717 = $o;
       $718 = HEAP32[$717>>2]|0;
       HEAP32[$vararg_buffer12>>2] = $p1;
       (_TIFFGetField($716,$718,$vararg_buffer12)|0);
       $719 = $1;
       $720 = $dir;
       $721 = $o;
       $722 = HEAP32[$721>>2]|0;
       $723 = $722&65535;
       $724 = HEAP32[$p1>>2]|0;
       $725 = (_TIFFWriteDirectoryTagLong($719,$ndir,$720,$723,$724)|0);
       $726 = ($725|0)!=(0);
       if (!($726)) {
        label = 205;
        break L27;
       }
      } else if ((($648|0) == 1)) {
       $649 = $o;
       $650 = (($649) + 8|0);
       $651 = HEAP32[$650>>2]|0;
       $652 = ($651|0)==(2);
       if (!($652)) {
        label = 181;
        break L27;
       }
       $653 = $o;
       $654 = (($653) + 4|0);
       $655 = HEAP16[$654>>1]|0;
       $656 = $655 << 16 >> 16;
       $657 = ($656|0)==(-1);
       if (!($657)) {
        label = 183;
        break L27;
       }
       $658 = $o;
       $659 = (($658) + 27|0);
       $660 = HEAP8[$659>>0]|0;
       $661 = $660&255;
       $662 = ($661|0)==(0);
       if (!($662)) {
        label = 185;
        break L27;
       }
       $663 = $1;
       $664 = $o;
       $665 = HEAP32[$664>>2]|0;
       HEAP32[$vararg_buffer6>>2] = $pb;
       (_TIFFGetField($663,$665,$vararg_buffer6)|0);
       $666 = HEAP32[$pb>>2]|0;
       $667 = (_strlen(($666|0))|0);
       $pa = $667;
       $668 = $1;
       $669 = $dir;
       $670 = $o;
       $671 = HEAP32[$670>>2]|0;
       $672 = $671&65535;
       $673 = $pa;
       $674 = HEAP32[$pb>>2]|0;
       $675 = (_TIFFWriteDirectoryTagAscii($668,$ndir,$669,$672,$673,$674)|0);
       $676 = ($675|0)!=(0);
       if (!($676)) {
        label = 187;
        break L27;
       }
      } else {
       label = 216;
       break L27;
      }
     }
    } while(0);
    $753 = $n;
    $754 = (($753) + 1)|0;
    $n = $754;
   }
  }
  $m = 0;
  while(1) {
   $755 = $m;
   $756 = $1;
   $757 = (($756) + 40|0);
   $758 = (($757) + 184|0);
   $759 = HEAP32[$758>>2]|0;
   $760 = ($755>>>0)<($759>>>0);
   if (!($760)) {
    break;
   }
   $761 = $m;
   $762 = $1;
   $763 = (($762) + 40|0);
   $764 = (($763) + 188|0);
   $765 = HEAP32[$764>>2]|0;
   $766 = (($765) + (($761*12)|0)|0);
   $767 = HEAP32[$766>>2]|0;
   $768 = (($767) + 8|0);
   $769 = HEAP32[$768>>2]|0;
   do {
    switch ($769|0) {
    case 6:  {
     $857 = $1;
     $858 = $dir;
     $859 = $m;
     $860 = $1;
     $861 = (($860) + 40|0);
     $862 = (($861) + 188|0);
     $863 = HEAP32[$862>>2]|0;
     $864 = (($863) + (($859*12)|0)|0);
     $865 = HEAP32[$864>>2]|0;
     $866 = HEAP32[$865>>2]|0;
     $867 = $866&65535;
     $868 = $m;
     $869 = $1;
     $870 = (($869) + 40|0);
     $871 = (($870) + 188|0);
     $872 = HEAP32[$871>>2]|0;
     $873 = (($872) + (($868*12)|0)|0);
     $874 = (($873) + 4|0);
     $875 = HEAP32[$874>>2]|0;
     $876 = $m;
     $877 = $1;
     $878 = (($877) + 40|0);
     $879 = (($878) + 188|0);
     $880 = HEAP32[$879>>2]|0;
     $881 = (($880) + (($876*12)|0)|0);
     $882 = (($881) + 8|0);
     $883 = HEAP32[$882>>2]|0;
     $884 = (_TIFFWriteDirectoryTagSbyteArray($857,$ndir,$858,$867,$875,$883)|0);
     $885 = ($884|0)!=(0);
     if (!($885)) {
      label = 234;
      break L27;
     }
     break;
    }
    case 3:  {
     $886 = $1;
     $887 = $dir;
     $888 = $m;
     $889 = $1;
     $890 = (($889) + 40|0);
     $891 = (($890) + 188|0);
     $892 = HEAP32[$891>>2]|0;
     $893 = (($892) + (($888*12)|0)|0);
     $894 = HEAP32[$893>>2]|0;
     $895 = HEAP32[$894>>2]|0;
     $896 = $895&65535;
     $897 = $m;
     $898 = $1;
     $899 = (($898) + 40|0);
     $900 = (($899) + 188|0);
     $901 = HEAP32[$900>>2]|0;
     $902 = (($901) + (($897*12)|0)|0);
     $903 = (($902) + 4|0);
     $904 = HEAP32[$903>>2]|0;
     $905 = $m;
     $906 = $1;
     $907 = (($906) + 40|0);
     $908 = (($907) + 188|0);
     $909 = HEAP32[$908>>2]|0;
     $910 = (($909) + (($905*12)|0)|0);
     $911 = (($910) + 8|0);
     $912 = HEAP32[$911>>2]|0;
     $913 = (_TIFFWriteDirectoryTagShortArray($886,$ndir,$887,$896,$904,$912)|0);
     $914 = ($913|0)!=(0);
     if (!($914)) {
      label = 237;
      break L27;
     }
     break;
    }
    case 8:  {
     $915 = $1;
     $916 = $dir;
     $917 = $m;
     $918 = $1;
     $919 = (($918) + 40|0);
     $920 = (($919) + 188|0);
     $921 = HEAP32[$920>>2]|0;
     $922 = (($921) + (($917*12)|0)|0);
     $923 = HEAP32[$922>>2]|0;
     $924 = HEAP32[$923>>2]|0;
     $925 = $924&65535;
     $926 = $m;
     $927 = $1;
     $928 = (($927) + 40|0);
     $929 = (($928) + 188|0);
     $930 = HEAP32[$929>>2]|0;
     $931 = (($930) + (($926*12)|0)|0);
     $932 = (($931) + 4|0);
     $933 = HEAP32[$932>>2]|0;
     $934 = $m;
     $935 = $1;
     $936 = (($935) + 40|0);
     $937 = (($936) + 188|0);
     $938 = HEAP32[$937>>2]|0;
     $939 = (($938) + (($934*12)|0)|0);
     $940 = (($939) + 8|0);
     $941 = HEAP32[$940>>2]|0;
     $942 = (_TIFFWriteDirectoryTagSshortArray($915,$ndir,$916,$925,$933,$941)|0);
     $943 = ($942|0)!=(0);
     if (!($943)) {
      label = 240;
      break L27;
     }
     break;
    }
    case 4:  {
     $944 = $1;
     $945 = $dir;
     $946 = $m;
     $947 = $1;
     $948 = (($947) + 40|0);
     $949 = (($948) + 188|0);
     $950 = HEAP32[$949>>2]|0;
     $951 = (($950) + (($946*12)|0)|0);
     $952 = HEAP32[$951>>2]|0;
     $953 = HEAP32[$952>>2]|0;
     $954 = $953&65535;
     $955 = $m;
     $956 = $1;
     $957 = (($956) + 40|0);
     $958 = (($957) + 188|0);
     $959 = HEAP32[$958>>2]|0;
     $960 = (($959) + (($955*12)|0)|0);
     $961 = (($960) + 4|0);
     $962 = HEAP32[$961>>2]|0;
     $963 = $m;
     $964 = $1;
     $965 = (($964) + 40|0);
     $966 = (($965) + 188|0);
     $967 = HEAP32[$966>>2]|0;
     $968 = (($967) + (($963*12)|0)|0);
     $969 = (($968) + 8|0);
     $970 = HEAP32[$969>>2]|0;
     $971 = (_TIFFWriteDirectoryTagLongArray($944,$ndir,$945,$954,$962,$970)|0);
     $972 = ($971|0)!=(0);
     if (!($972)) {
      label = 243;
      break L27;
     }
     break;
    }
    case 2:  {
     $770 = $1;
     $771 = $dir;
     $772 = $m;
     $773 = $1;
     $774 = (($773) + 40|0);
     $775 = (($774) + 188|0);
     $776 = HEAP32[$775>>2]|0;
     $777 = (($776) + (($772*12)|0)|0);
     $778 = HEAP32[$777>>2]|0;
     $779 = HEAP32[$778>>2]|0;
     $780 = $779&65535;
     $781 = $m;
     $782 = $1;
     $783 = (($782) + 40|0);
     $784 = (($783) + 188|0);
     $785 = HEAP32[$784>>2]|0;
     $786 = (($785) + (($781*12)|0)|0);
     $787 = (($786) + 4|0);
     $788 = HEAP32[$787>>2]|0;
     $789 = $m;
     $790 = $1;
     $791 = (($790) + 40|0);
     $792 = (($791) + 188|0);
     $793 = HEAP32[$792>>2]|0;
     $794 = (($793) + (($789*12)|0)|0);
     $795 = (($794) + 8|0);
     $796 = HEAP32[$795>>2]|0;
     $797 = (_TIFFWriteDirectoryTagAscii($770,$ndir,$771,$780,$788,$796)|0);
     $798 = ($797|0)!=(0);
     if (!($798)) {
      label = 225;
      break L27;
     }
     break;
    }
    case 7:  {
     $799 = $1;
     $800 = $dir;
     $801 = $m;
     $802 = $1;
     $803 = (($802) + 40|0);
     $804 = (($803) + 188|0);
     $805 = HEAP32[$804>>2]|0;
     $806 = (($805) + (($801*12)|0)|0);
     $807 = HEAP32[$806>>2]|0;
     $808 = HEAP32[$807>>2]|0;
     $809 = $808&65535;
     $810 = $m;
     $811 = $1;
     $812 = (($811) + 40|0);
     $813 = (($812) + 188|0);
     $814 = HEAP32[$813>>2]|0;
     $815 = (($814) + (($810*12)|0)|0);
     $816 = (($815) + 4|0);
     $817 = HEAP32[$816>>2]|0;
     $818 = $m;
     $819 = $1;
     $820 = (($819) + 40|0);
     $821 = (($820) + 188|0);
     $822 = HEAP32[$821>>2]|0;
     $823 = (($822) + (($818*12)|0)|0);
     $824 = (($823) + 8|0);
     $825 = HEAP32[$824>>2]|0;
     $826 = (_TIFFWriteDirectoryTagUndefinedArray($799,$ndir,$800,$809,$817,$825)|0);
     $827 = ($826|0)!=(0);
     if (!($827)) {
      label = 228;
      break L27;
     }
     break;
    }
    case 1:  {
     $828 = $1;
     $829 = $dir;
     $830 = $m;
     $831 = $1;
     $832 = (($831) + 40|0);
     $833 = (($832) + 188|0);
     $834 = HEAP32[$833>>2]|0;
     $835 = (($834) + (($830*12)|0)|0);
     $836 = HEAP32[$835>>2]|0;
     $837 = HEAP32[$836>>2]|0;
     $838 = $837&65535;
     $839 = $m;
     $840 = $1;
     $841 = (($840) + 40|0);
     $842 = (($841) + 188|0);
     $843 = HEAP32[$842>>2]|0;
     $844 = (($843) + (($839*12)|0)|0);
     $845 = (($844) + 4|0);
     $846 = HEAP32[$845>>2]|0;
     $847 = $m;
     $848 = $1;
     $849 = (($848) + 40|0);
     $850 = (($849) + 188|0);
     $851 = HEAP32[$850>>2]|0;
     $852 = (($851) + (($847*12)|0)|0);
     $853 = (($852) + 8|0);
     $854 = HEAP32[$853>>2]|0;
     $855 = (_TIFFWriteDirectoryTagByteArray($828,$ndir,$829,$838,$846,$854)|0);
     $856 = ($855|0)!=(0);
     if (!($856)) {
      label = 231;
      break L27;
     }
     break;
    }
    case 9:  {
     $973 = $1;
     $974 = $dir;
     $975 = $m;
     $976 = $1;
     $977 = (($976) + 40|0);
     $978 = (($977) + 188|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = (($979) + (($975*12)|0)|0);
     $981 = HEAP32[$980>>2]|0;
     $982 = HEAP32[$981>>2]|0;
     $983 = $982&65535;
     $984 = $m;
     $985 = $1;
     $986 = (($985) + 40|0);
     $987 = (($986) + 188|0);
     $988 = HEAP32[$987>>2]|0;
     $989 = (($988) + (($984*12)|0)|0);
     $990 = (($989) + 4|0);
     $991 = HEAP32[$990>>2]|0;
     $992 = $m;
     $993 = $1;
     $994 = (($993) + 40|0);
     $995 = (($994) + 188|0);
     $996 = HEAP32[$995>>2]|0;
     $997 = (($996) + (($992*12)|0)|0);
     $998 = (($997) + 8|0);
     $999 = HEAP32[$998>>2]|0;
     $1000 = (_TIFFWriteDirectoryTagSlongArray($973,$ndir,$974,$983,$991,$999)|0);
     $1001 = ($1000|0)!=(0);
     if (!($1001)) {
      label = 246;
      break L27;
     }
     break;
    }
    case 16:  {
     $1002 = $1;
     $1003 = $dir;
     $1004 = $m;
     $1005 = $1;
     $1006 = (($1005) + 40|0);
     $1007 = (($1006) + 188|0);
     $1008 = HEAP32[$1007>>2]|0;
     $1009 = (($1008) + (($1004*12)|0)|0);
     $1010 = HEAP32[$1009>>2]|0;
     $1011 = HEAP32[$1010>>2]|0;
     $1012 = $1011&65535;
     $1013 = $m;
     $1014 = $1;
     $1015 = (($1014) + 40|0);
     $1016 = (($1015) + 188|0);
     $1017 = HEAP32[$1016>>2]|0;
     $1018 = (($1017) + (($1013*12)|0)|0);
     $1019 = (($1018) + 4|0);
     $1020 = HEAP32[$1019>>2]|0;
     $1021 = $m;
     $1022 = $1;
     $1023 = (($1022) + 40|0);
     $1024 = (($1023) + 188|0);
     $1025 = HEAP32[$1024>>2]|0;
     $1026 = (($1025) + (($1021*12)|0)|0);
     $1027 = (($1026) + 8|0);
     $1028 = HEAP32[$1027>>2]|0;
     $1029 = (_TIFFWriteDirectoryTagLong8Array($1002,$ndir,$1003,$1012,$1020,$1028)|0);
     $1030 = ($1029|0)!=(0);
     if (!($1030)) {
      label = 249;
      break L27;
     }
     break;
    }
    case 17:  {
     $1031 = $1;
     $1032 = $dir;
     $1033 = $m;
     $1034 = $1;
     $1035 = (($1034) + 40|0);
     $1036 = (($1035) + 188|0);
     $1037 = HEAP32[$1036>>2]|0;
     $1038 = (($1037) + (($1033*12)|0)|0);
     $1039 = HEAP32[$1038>>2]|0;
     $1040 = HEAP32[$1039>>2]|0;
     $1041 = $1040&65535;
     $1042 = $m;
     $1043 = $1;
     $1044 = (($1043) + 40|0);
     $1045 = (($1044) + 188|0);
     $1046 = HEAP32[$1045>>2]|0;
     $1047 = (($1046) + (($1042*12)|0)|0);
     $1048 = (($1047) + 4|0);
     $1049 = HEAP32[$1048>>2]|0;
     $1050 = $m;
     $1051 = $1;
     $1052 = (($1051) + 40|0);
     $1053 = (($1052) + 188|0);
     $1054 = HEAP32[$1053>>2]|0;
     $1055 = (($1054) + (($1050*12)|0)|0);
     $1056 = (($1055) + 8|0);
     $1057 = HEAP32[$1056>>2]|0;
     $1058 = (_TIFFWriteDirectoryTagSlong8Array($1031,$ndir,$1032,$1041,$1049,$1057)|0);
     $1059 = ($1058|0)!=(0);
     if (!($1059)) {
      label = 252;
      break L27;
     }
     break;
    }
    case 5:  {
     $1060 = $1;
     $1061 = $dir;
     $1062 = $m;
     $1063 = $1;
     $1064 = (($1063) + 40|0);
     $1065 = (($1064) + 188|0);
     $1066 = HEAP32[$1065>>2]|0;
     $1067 = (($1066) + (($1062*12)|0)|0);
     $1068 = HEAP32[$1067>>2]|0;
     $1069 = HEAP32[$1068>>2]|0;
     $1070 = $1069&65535;
     $1071 = $m;
     $1072 = $1;
     $1073 = (($1072) + 40|0);
     $1074 = (($1073) + 188|0);
     $1075 = HEAP32[$1074>>2]|0;
     $1076 = (($1075) + (($1071*12)|0)|0);
     $1077 = (($1076) + 4|0);
     $1078 = HEAP32[$1077>>2]|0;
     $1079 = $m;
     $1080 = $1;
     $1081 = (($1080) + 40|0);
     $1082 = (($1081) + 188|0);
     $1083 = HEAP32[$1082>>2]|0;
     $1084 = (($1083) + (($1079*12)|0)|0);
     $1085 = (($1084) + 8|0);
     $1086 = HEAP32[$1085>>2]|0;
     $1087 = (_TIFFWriteDirectoryTagRationalArray($1060,$ndir,$1061,$1070,$1078,$1086)|0);
     $1088 = ($1087|0)!=(0);
     if (!($1088)) {
      label = 255;
      break L27;
     }
     break;
    }
    case 10:  {
     $1089 = $1;
     $1090 = $dir;
     $1091 = $m;
     $1092 = $1;
     $1093 = (($1092) + 40|0);
     $1094 = (($1093) + 188|0);
     $1095 = HEAP32[$1094>>2]|0;
     $1096 = (($1095) + (($1091*12)|0)|0);
     $1097 = HEAP32[$1096>>2]|0;
     $1098 = HEAP32[$1097>>2]|0;
     $1099 = $1098&65535;
     $1100 = $m;
     $1101 = $1;
     $1102 = (($1101) + 40|0);
     $1103 = (($1102) + 188|0);
     $1104 = HEAP32[$1103>>2]|0;
     $1105 = (($1104) + (($1100*12)|0)|0);
     $1106 = (($1105) + 4|0);
     $1107 = HEAP32[$1106>>2]|0;
     $1108 = $m;
     $1109 = $1;
     $1110 = (($1109) + 40|0);
     $1111 = (($1110) + 188|0);
     $1112 = HEAP32[$1111>>2]|0;
     $1113 = (($1112) + (($1108*12)|0)|0);
     $1114 = (($1113) + 8|0);
     $1115 = HEAP32[$1114>>2]|0;
     $1116 = (_TIFFWriteDirectoryTagSrationalArray($1089,$ndir,$1090,$1099,$1107,$1115)|0);
     $1117 = ($1116|0)!=(0);
     if (!($1117)) {
      label = 258;
      break L27;
     }
     break;
    }
    case 11:  {
     $1118 = $1;
     $1119 = $dir;
     $1120 = $m;
     $1121 = $1;
     $1122 = (($1121) + 40|0);
     $1123 = (($1122) + 188|0);
     $1124 = HEAP32[$1123>>2]|0;
     $1125 = (($1124) + (($1120*12)|0)|0);
     $1126 = HEAP32[$1125>>2]|0;
     $1127 = HEAP32[$1126>>2]|0;
     $1128 = $1127&65535;
     $1129 = $m;
     $1130 = $1;
     $1131 = (($1130) + 40|0);
     $1132 = (($1131) + 188|0);
     $1133 = HEAP32[$1132>>2]|0;
     $1134 = (($1133) + (($1129*12)|0)|0);
     $1135 = (($1134) + 4|0);
     $1136 = HEAP32[$1135>>2]|0;
     $1137 = $m;
     $1138 = $1;
     $1139 = (($1138) + 40|0);
     $1140 = (($1139) + 188|0);
     $1141 = HEAP32[$1140>>2]|0;
     $1142 = (($1141) + (($1137*12)|0)|0);
     $1143 = (($1142) + 8|0);
     $1144 = HEAP32[$1143>>2]|0;
     $1145 = (_TIFFWriteDirectoryTagFloatArray($1118,$ndir,$1119,$1128,$1136,$1144)|0);
     $1146 = ($1145|0)!=(0);
     if (!($1146)) {
      label = 261;
      break L27;
     }
     break;
    }
    case 12:  {
     $1147 = $1;
     $1148 = $dir;
     $1149 = $m;
     $1150 = $1;
     $1151 = (($1150) + 40|0);
     $1152 = (($1151) + 188|0);
     $1153 = HEAP32[$1152>>2]|0;
     $1154 = (($1153) + (($1149*12)|0)|0);
     $1155 = HEAP32[$1154>>2]|0;
     $1156 = HEAP32[$1155>>2]|0;
     $1157 = $1156&65535;
     $1158 = $m;
     $1159 = $1;
     $1160 = (($1159) + 40|0);
     $1161 = (($1160) + 188|0);
     $1162 = HEAP32[$1161>>2]|0;
     $1163 = (($1162) + (($1158*12)|0)|0);
     $1164 = (($1163) + 4|0);
     $1165 = HEAP32[$1164>>2]|0;
     $1166 = $m;
     $1167 = $1;
     $1168 = (($1167) + 40|0);
     $1169 = (($1168) + 188|0);
     $1170 = HEAP32[$1169>>2]|0;
     $1171 = (($1170) + (($1166*12)|0)|0);
     $1172 = (($1171) + 8|0);
     $1173 = HEAP32[$1172>>2]|0;
     $1174 = (_TIFFWriteDirectoryTagDoubleArray($1147,$ndir,$1148,$1157,$1165,$1173)|0);
     $1175 = ($1174|0)!=(0);
     if (!($1175)) {
      label = 264;
      break L27;
     }
     break;
    }
    case 13:  {
     $1176 = $1;
     $1177 = $dir;
     $1178 = $m;
     $1179 = $1;
     $1180 = (($1179) + 40|0);
     $1181 = (($1180) + 188|0);
     $1182 = HEAP32[$1181>>2]|0;
     $1183 = (($1182) + (($1178*12)|0)|0);
     $1184 = HEAP32[$1183>>2]|0;
     $1185 = HEAP32[$1184>>2]|0;
     $1186 = $1185&65535;
     $1187 = $m;
     $1188 = $1;
     $1189 = (($1188) + 40|0);
     $1190 = (($1189) + 188|0);
     $1191 = HEAP32[$1190>>2]|0;
     $1192 = (($1191) + (($1187*12)|0)|0);
     $1193 = (($1192) + 4|0);
     $1194 = HEAP32[$1193>>2]|0;
     $1195 = $m;
     $1196 = $1;
     $1197 = (($1196) + 40|0);
     $1198 = (($1197) + 188|0);
     $1199 = HEAP32[$1198>>2]|0;
     $1200 = (($1199) + (($1195*12)|0)|0);
     $1201 = (($1200) + 8|0);
     $1202 = HEAP32[$1201>>2]|0;
     $1203 = (_TIFFWriteDirectoryTagIfdArray($1176,$ndir,$1177,$1186,$1194,$1202)|0);
     $1204 = ($1203|0)!=(0);
     if (!($1204)) {
      label = 267;
      break L27;
     }
     break;
    }
    case 18:  {
     $1205 = $1;
     $1206 = $dir;
     $1207 = $m;
     $1208 = $1;
     $1209 = (($1208) + 40|0);
     $1210 = (($1209) + 188|0);
     $1211 = HEAP32[$1210>>2]|0;
     $1212 = (($1211) + (($1207*12)|0)|0);
     $1213 = HEAP32[$1212>>2]|0;
     $1214 = HEAP32[$1213>>2]|0;
     $1215 = $1214&65535;
     $1216 = $m;
     $1217 = $1;
     $1218 = (($1217) + 40|0);
     $1219 = (($1218) + 188|0);
     $1220 = HEAP32[$1219>>2]|0;
     $1221 = (($1220) + (($1216*12)|0)|0);
     $1222 = (($1221) + 4|0);
     $1223 = HEAP32[$1222>>2]|0;
     $1224 = $m;
     $1225 = $1;
     $1226 = (($1225) + 40|0);
     $1227 = (($1226) + 188|0);
     $1228 = HEAP32[$1227>>2]|0;
     $1229 = (($1228) + (($1224*12)|0)|0);
     $1230 = (($1229) + 8|0);
     $1231 = HEAP32[$1230>>2]|0;
     $1232 = (_TIFFWriteDirectoryTagIfdIfd8Array($1205,$ndir,$1206,$1215,$1223,$1231)|0);
     $1233 = ($1232|0)!=(0);
     if (!($1233)) {
      label = 270;
      break L27;
     }
     break;
    }
    default: {
     label = 272;
     break L27;
    }
    }
   } while(0);
   $1234 = $m;
   $1235 = (($1234) + 1)|0;
   $m = $1235;
  }
  $1236 = $dir;
  $1237 = ($1236|0)!=(0|0);
  if ($1237) {
   label = 276;
   break;
  }
  $1238 = HEAP32[$ndir>>2]|0;
  $1239 = ($1238*24)|0;
  $1240 = (__TIFFmalloc($1239)|0);
  $dir = $1240;
  $1241 = $dir;
  $1242 = ($1241|0)==(0|0);
  if ($1242) {
   label = 278;
   break;
  }
  $1246 = $2;
  $1247 = ($1246|0)!=(0);
  if ($1247) {
   $1248 = $1;
   $1249 = (($1248) + 16|0);
   $1250 = $1249;
   $1251 = $1250;
   $1252 = HEAP32[$1251>>2]|0;
   $1253 = (($1250) + 4)|0;
   $1254 = $1253;
   $1255 = HEAP32[$1254>>2]|0;
   $1256 = ($1252|0)==(0);
   $1257 = ($1255|0)==(0);
   $1258 = $1256 & $1257;
   if ($1258) {
    $1259 = $1;
    $1260 = (_TIFFLinkDirectory($1259)|0);
    $1261 = ($1260|0)!=(0);
    if (!($1261)) {
     label = 282;
     break;
    }
   }
  } else {
   $1262 = $1;
   $1263 = (($1262) + 640|0);
   $1264 = HEAP32[$1263>>2]|0;
   $1265 = $1;
   $1266 = (($1265) + 628|0);
   $1267 = HEAP32[$1266>>2]|0;
   $1268 = (FUNCTION_TABLE_iiiii[$1264 & 255]($1267,0,0,2)|0);
   $1269 = tempRet0;
   $1270 = (_i64Add(($1268|0),($1269|0),1,0)|0);
   $1271 = tempRet0;
   $1272 = $1270 & -2;
   $1273 = $1;
   $1274 = (($1273) + 16|0);
   $1275 = $1274;
   $1276 = $1275;
   HEAP32[$1276>>2] = $1272;
   $1277 = (($1275) + 4)|0;
   $1278 = $1277;
   HEAP32[$1278>>2] = $1271;
  }
  $1279 = $4;
  $1280 = ($1279|0)!=(0|0);
  if ($1280) {
   $1281 = $1;
   $1282 = (($1281) + 16|0);
   $1283 = $1282;
   $1284 = $1283;
   $1285 = HEAP32[$1284>>2]|0;
   $1286 = (($1283) + 4)|0;
   $1287 = $1286;
   $1288 = HEAP32[$1287>>2]|0;
   $1289 = $4;
   $1290 = $1289;
   $1291 = $1290;
   HEAP32[$1291>>2] = $1285;
   $1292 = (($1290) + 4)|0;
   $1293 = $1292;
   HEAP32[$1293>>2] = $1288;
  }
  $1294 = $1;
  $1295 = (($1294) + 12|0);
  $1296 = HEAP32[$1295>>2]|0;
  $1297 = $1296 & 524288;
  $1298 = ($1297|0)!=(0);
  if ($1298) {
   $1303 = HEAP32[$ndir>>2]|0;
   $1304 = ($1303*20)|0;
   $1305 = (8 + ($1304))|0;
   $1306 = (($1305) + 8)|0;
   $dirsize = $1306;
  } else {
   $1299 = HEAP32[$ndir>>2]|0;
   $1300 = ($1299*12)|0;
   $1301 = (2 + ($1300))|0;
   $1302 = (($1301) + 4)|0;
   $dirsize = $1302;
  }
  $1307 = $1;
  $1308 = (($1307) + 16|0);
  $1309 = $1308;
  $1310 = $1309;
  $1311 = HEAP32[$1310>>2]|0;
  $1312 = (($1309) + 4)|0;
  $1313 = $1312;
  $1314 = HEAP32[$1313>>2]|0;
  $1315 = $dirsize;
  $1316 = (_i64Add(($1311|0),($1314|0),($1315|0),0)|0);
  $1317 = tempRet0;
  $1318 = $1;
  $1319 = (($1318) + 464|0);
  $1320 = $1319;
  $1321 = $1320;
  HEAP32[$1321>>2] = $1316;
  $1322 = (($1320) + 4)|0;
  $1323 = $1322;
  HEAP32[$1323>>2] = $1317;
  $1324 = $1;
  $1325 = (($1324) + 12|0);
  $1326 = HEAP32[$1325>>2]|0;
  $1327 = $1326 & 524288;
  $1328 = ($1327|0)!=(0);
  if (!($1328)) {
   $1329 = $1;
   $1330 = (($1329) + 464|0);
   $1331 = $1330;
   $1332 = $1331;
   $1333 = HEAP32[$1332>>2]|0;
   $1334 = (($1331) + 4)|0;
   $1335 = $1334;
   $1336 = HEAP32[$1335>>2]|0;
   $1337 = $1;
   $1338 = (($1337) + 464|0);
   $1339 = $1338;
   $1340 = $1339;
   HEAP32[$1340>>2] = $1333;
   $1341 = (($1339) + 4)|0;
   $1342 = $1341;
   HEAP32[$1342>>2] = 0;
  }
  $1343 = $1;
  $1344 = (($1343) + 464|0);
  $1345 = $1344;
  $1346 = $1345;
  $1347 = HEAP32[$1346>>2]|0;
  $1348 = (($1345) + 4)|0;
  $1349 = $1348;
  $1350 = HEAP32[$1349>>2]|0;
  $1351 = $1;
  $1352 = (($1351) + 16|0);
  $1353 = $1352;
  $1354 = $1353;
  $1355 = HEAP32[$1354>>2]|0;
  $1356 = (($1353) + 4)|0;
  $1357 = $1356;
  $1358 = HEAP32[$1357>>2]|0;
  $1359 = ($1350>>>0)<($1358>>>0);
  $1360 = ($1347>>>0)<($1355>>>0);
  $1361 = ($1350|0)==($1358|0);
  $1362 = $1361 & $1360;
  $1363 = $1359 | $1362;
  if ($1363) {
   label = 294;
   break;
  }
  $1364 = $1;
  $1365 = (($1364) + 464|0);
  $1366 = $1365;
  $1367 = $1366;
  $1368 = HEAP32[$1367>>2]|0;
  $1369 = (($1366) + 4)|0;
  $1370 = $1369;
  $1371 = HEAP32[$1370>>2]|0;
  $1372 = $dirsize;
  $1373 = ($1371>>>0)<(0);
  $1374 = ($1368>>>0)<($1372>>>0);
  $1375 = ($1371|0)==(0);
  $1376 = $1375 & $1374;
  $1377 = $1373 | $1376;
  if ($1377) {
   label = 294;
   break;
  }
  $1381 = $1;
  $1382 = (($1381) + 464|0);
  $1383 = $1382;
  $1384 = $1383;
  $1385 = HEAP32[$1384>>2]|0;
  $1386 = (($1383) + 4)|0;
  $1387 = $1386;
  $1388 = HEAP32[$1387>>2]|0;
  $1389 = $1385 & 1;
  $1390 = ($1389|0)!=(0);
  $1391 = (0)!=(0);
  $1392 = $1390 | $1391;
  if ($1392) {
   $1393 = $1;
   $1394 = (($1393) + 464|0);
   $1395 = $1394;
   $1396 = $1395;
   $1397 = HEAP32[$1396>>2]|0;
   $1398 = (($1395) + 4)|0;
   $1399 = $1398;
   $1400 = HEAP32[$1399>>2]|0;
   $1401 = (_i64Add(($1397|0),($1400|0),1,0)|0);
   $1402 = tempRet0;
   $1403 = $1394;
   $1404 = $1403;
   HEAP32[$1404>>2] = $1401;
   $1405 = (($1403) + 4)|0;
   $1406 = $1405;
   HEAP32[$1406>>2] = $1402;
  }
  $1407 = $2;
  $1408 = ($1407|0)!=(0);
  if ($1408) {
   $1409 = $1;
   $1410 = (($1409) + 448|0);
   $1411 = HEAP16[$1410>>1]|0;
   $1412 = (($1411) + 1)<<16>>16;
   HEAP16[$1410>>1] = $1412;
  }
 }
 switch (label|0) {
  case 21: {
   break;
  }
  case 23: {
   break;
  }
  case 27: {
   break;
  }
  case 29: {
   break;
  }
  case 33: {
   break;
  }
  case 35: {
   break;
  }
  case 39: {
   break;
  }
  case 41: {
   break;
  }
  case 45: {
   break;
  }
  case 49: {
   break;
  }
  case 53: {
   break;
  }
  case 57: {
   break;
  }
  case 61: {
   break;
  }
  case 65: {
   break;
  }
  case 69: {
   break;
  }
  case 73: {
   break;
  }
  case 77: {
   break;
  }
  case 81: {
   break;
  }
  case 85: {
   break;
  }
  case 89: {
   break;
  }
  case 93: {
   break;
  }
  case 97: {
   break;
  }
  case 102: {
   break;
  }
  case 105: {
   break;
  }
  case 111: {
   break;
  }
  case 114: {
   break;
  }
  case 119: {
   break;
  }
  case 124: {
   break;
  }
  case 129: {
   break;
  }
  case 133: {
   break;
  }
  case 137: {
   break;
  }
  case 141: {
   break;
  }
  case 145: {
   break;
  }
  case 149: {
   break;
  }
  case 153: {
   break;
  }
  case 157: {
   break;
  }
  case 161: {
   break;
  }
  case 165: {
   break;
  }
  case 169: {
   break;
  }
  case 173: {
   break;
  }
  case 181: {
   ___assert_fail((21736|0),(21768|0),643,(21784|0));
   // unreachable;
   break;
  }
  case 183: {
   ___assert_fail((21808|0),(21768|0),644,(21784|0));
   // unreachable;
   break;
  }
  case 185: {
   ___assert_fail((21848|0),(21768|0),645,(21784|0));
   // unreachable;
   break;
  }
  case 187: {
   break;
  }
  case 190: {
   ___assert_fail((21872|0),(21768|0),655,(21784|0));
   // unreachable;
   break;
  }
  case 192: {
   ___assert_fail((21904|0),(21768|0),656,(21784|0));
   // unreachable;
   break;
  }
  case 194: {
   ___assert_fail((21848|0),(21768|0),657,(21784|0));
   // unreachable;
   break;
  }
  case 196: {
   break;
  }
  case 199: {
   ___assert_fail((21928|0),(21768|0),666,(21784|0));
   // unreachable;
   break;
  }
  case 201: {
   ___assert_fail((21904|0),(21768|0),667,(21784|0));
   // unreachable;
   break;
  }
  case 203: {
   ___assert_fail((21848|0),(21768|0),668,(21784|0));
   // unreachable;
   break;
  }
  case 205: {
   break;
  }
  case 208: {
   ___assert_fail((21960|0),(21768|0),678,(21784|0));
   // unreachable;
   break;
  }
  case 210: {
   ___assert_fail((21992|0),(21768|0),679,(21784|0));
   // unreachable;
   break;
  }
  case 212: {
   ___assert_fail((22032|0),(21768|0),680,(21784|0));
   // unreachable;
   break;
  }
  case 214: {
   break;
  }
  case 216: {
   ___assert_fail((22056|0),(21768|0),687,(21784|0));
   // unreachable;
   break;
  }
  case 225: {
   break;
  }
  case 228: {
   break;
  }
  case 231: {
   break;
  }
  case 234: {
   break;
  }
  case 237: {
   break;
  }
  case 240: {
   break;
  }
  case 243: {
   break;
  }
  case 246: {
   break;
  }
  case 249: {
   break;
  }
  case 252: {
   break;
  }
  case 255: {
   break;
  }
  case 258: {
   break;
  }
  case 261: {
   break;
  }
  case 264: {
   break;
  }
  case 267: {
   break;
  }
  case 270: {
   break;
  }
  case 272: {
   ___assert_fail((22056|0),(21768|0),763,(21784|0));
   // unreachable;
   break;
  }
  case 276: {
   $1413 = $2;
   $1414 = ($1413|0)!=(0);
   if ($1414) {
    $1415 = $1;
    $1416 = (($1415) + 40|0);
    $1417 = (($1416) + 4|0);
    $1418 = HEAP32[$1417>>2]|0;
    $1419 = $1418 & 131072;
    $1420 = ($1419|0)!=(0);
    if ($1420) {
     $1421 = $1;
     $1422 = (($1421) + 480|0);
     $1423 = $1422;
     $1424 = $1423;
     $1425 = HEAP32[$1424>>2]|0;
     $1426 = (($1423) + 4)|0;
     $1427 = $1426;
     $1428 = HEAP32[$1427>>2]|0;
     $1429 = ($1425|0)==(0);
     $1430 = ($1428|0)==(0);
     $1431 = $1429 & $1430;
     if ($1431) {
      $na4 = 0;
      $1432 = $dir;
      $nb5 = $1432;
      while(1) {
       $1433 = $na4;
       $1434 = HEAP32[$ndir>>2]|0;
       $1435 = ($1433>>>0)<($1434>>>0);
       if (!($1435)) {
        label = 305;
        break;
       }
       $1436 = $nb5;
       $1437 = HEAP16[$1436>>1]|0;
       $1438 = $1437&65535;
       $1439 = ($1438|0)==(330);
       if ($1439) {
        break;
       }
       $1440 = $na4;
       $1441 = (($1440) + 1)|0;
       $na4 = $1441;
       $1442 = $nb5;
       $1443 = (($1442) + 24|0);
       $nb5 = $1443;
      }
      if ((label|0) == 305) {
       ___assert_fail((22112|0),(21768|0),809,(21784|0));
       // unreachable;
      }
      $1444 = $1;
      $1445 = (($1444) + 12|0);
      $1446 = HEAP32[$1445>>2]|0;
      $1447 = $1446 & 524288;
      $1448 = ($1447|0)!=(0);
      if ($1448) {
       $1471 = $1;
       $1472 = (($1471) + 16|0);
       $1473 = $1472;
       $1474 = $1473;
       $1475 = HEAP32[$1474>>2]|0;
       $1476 = (($1473) + 4)|0;
       $1477 = $1476;
       $1478 = HEAP32[$1477>>2]|0;
       $1479 = (_i64Add(($1475|0),($1478|0),8,0)|0);
       $1480 = tempRet0;
       $1481 = $na4;
       $1482 = ($1481*20)|0;
       $1483 = (_i64Add(($1479|0),($1480|0),($1482|0),0)|0);
       $1484 = tempRet0;
       $1485 = (_i64Add(($1483|0),($1484|0),12,0)|0);
       $1486 = tempRet0;
       $1487 = $1;
       $1488 = (($1487) + 480|0);
       $1489 = $1488;
       $1490 = $1489;
       HEAP32[$1490>>2] = $1485;
       $1491 = (($1489) + 4)|0;
       $1492 = $1491;
       HEAP32[$1492>>2] = $1486;
      } else {
       $1449 = $1;
       $1450 = (($1449) + 16|0);
       $1451 = $1450;
       $1452 = $1451;
       $1453 = HEAP32[$1452>>2]|0;
       $1454 = (($1451) + 4)|0;
       $1455 = $1454;
       $1456 = HEAP32[$1455>>2]|0;
       $1457 = (_i64Add(($1453|0),($1456|0),2,0)|0);
       $1458 = tempRet0;
       $1459 = $na4;
       $1460 = ($1459*12)|0;
       $1461 = (_i64Add(($1457|0),($1458|0),($1460|0),0)|0);
       $1462 = tempRet0;
       $1463 = (_i64Add(($1461|0),($1462|0),8,0)|0);
       $1464 = tempRet0;
       $1465 = $1;
       $1466 = (($1465) + 480|0);
       $1467 = $1466;
       $1468 = $1467;
       HEAP32[$1468>>2] = $1463;
       $1469 = (($1467) + 4)|0;
       $1470 = $1469;
       HEAP32[$1470>>2] = $1464;
      }
     }
    }
   }
   $1493 = $dirsize;
   $1494 = (__TIFFmalloc($1493)|0);
   $dirmem = $1494;
   $1495 = $dirmem;
   $1496 = ($1495|0)==(0|0);
   if ($1496) {
    $1497 = $1;
    $1498 = (($1497) + 628|0);
    $1499 = HEAP32[$1498>>2]|0;
    _TIFFErrorExt($1499,21616,22064,$vararg_buffer23);
    break;
   }
   $1500 = $1;
   $1501 = (($1500) + 12|0);
   $1502 = HEAP32[$1501>>2]|0;
   $1503 = $1502 & 524288;
   $1504 = ($1503|0)!=(0);
   if ($1504) {
    $1584 = $dirmem;
    $n8 = $1584;
    $1585 = HEAP32[$ndir>>2]|0;
    $1586 = $n8;
    $1587 = $1586;
    $1588 = $1587;
    HEAP32[$1588>>2] = $1585;
    $1589 = (($1587) + 4)|0;
    $1590 = $1589;
    HEAP32[$1590>>2] = 0;
    $1591 = $1;
    $1592 = (($1591) + 12|0);
    $1593 = HEAP32[$1592>>2]|0;
    $1594 = $1593 & 128;
    $1595 = ($1594|0)!=(0);
    if ($1595) {
     $1596 = $n8;
     _TIFFSwabLong8($1596);
    }
    $1597 = $n8;
    $1598 = (($1597) + 8|0);
    $n8 = $1598;
    $1599 = $dir;
    $o9 = $1599;
    $m = 0;
    while(1) {
     $1600 = $m;
     $1601 = HEAP32[$ndir>>2]|0;
     $1602 = ($1600>>>0)<($1601>>>0);
     if (!($1602)) {
      break;
     }
     $1603 = $o9;
     $1604 = HEAP16[$1603>>1]|0;
     $1605 = $n8;
     HEAP16[$1605>>1] = $1604;
     $1606 = $1;
     $1607 = (($1606) + 12|0);
     $1608 = HEAP32[$1607>>2]|0;
     $1609 = $1608 & 128;
     $1610 = ($1609|0)!=(0);
     if ($1610) {
      $1611 = $n8;
      _TIFFSwabShort($1611);
     }
     $1612 = $n8;
     $1613 = (($1612) + 2|0);
     $n8 = $1613;
     $1614 = $o9;
     $1615 = (($1614) + 2|0);
     $1616 = HEAP16[$1615>>1]|0;
     $1617 = $n8;
     HEAP16[$1617>>1] = $1616;
     $1618 = $1;
     $1619 = (($1618) + 12|0);
     $1620 = HEAP32[$1619>>2]|0;
     $1621 = $1620 & 128;
     $1622 = ($1621|0)!=(0);
     if ($1622) {
      $1623 = $n8;
      _TIFFSwabShort($1623);
     }
     $1624 = $n8;
     $1625 = (($1624) + 2|0);
     $n8 = $1625;
     $1626 = $n8;
     $1627 = $o9;
     $1628 = (($1627) + 8|0);
     __TIFFmemcpy($1626,$1628,8);
     $1629 = $1;
     $1630 = (($1629) + 12|0);
     $1631 = HEAP32[$1630>>2]|0;
     $1632 = $1631 & 128;
     $1633 = ($1632|0)!=(0);
     if ($1633) {
      $1634 = $n8;
      _TIFFSwabLong8($1634);
     }
     $1635 = $n8;
     $1636 = (($1635) + 8|0);
     $n8 = $1636;
     $1637 = $n8;
     $1638 = $o9;
     $1639 = (($1638) + 16|0);
     __TIFFmemcpy($1637,$1639,8);
     $1640 = $n8;
     $1641 = (($1640) + 8|0);
     $n8 = $1641;
     $1642 = $o9;
     $1643 = (($1642) + 24|0);
     $o9 = $1643;
     $1644 = $m;
     $1645 = (($1644) + 1)|0;
     $m = $1645;
    }
    $1646 = $n8;
    $1647 = $1;
    $1648 = (($1647) + 24|0);
    __TIFFmemcpy($1646,$1648,8);
    $1649 = $1;
    $1650 = (($1649) + 12|0);
    $1651 = HEAP32[$1650>>2]|0;
    $1652 = $1651 & 128;
    $1653 = ($1652|0)!=(0);
    if ($1653) {
     $1654 = $n8;
     _TIFFSwabLong8($1654);
    }
   } else {
    $1505 = $dirmem;
    $n6 = $1505;
    $1506 = HEAP32[$ndir>>2]|0;
    $1507 = $1506&65535;
    $1508 = $n6;
    HEAP16[$1508>>1] = $1507;
    $1509 = $1;
    $1510 = (($1509) + 12|0);
    $1511 = HEAP32[$1510>>2]|0;
    $1512 = $1511 & 128;
    $1513 = ($1512|0)!=(0);
    if ($1513) {
     $1514 = $n6;
     _TIFFSwabShort($1514);
    }
    $1515 = $n6;
    $1516 = (($1515) + 2|0);
    $n6 = $1516;
    $1517 = $dir;
    $o7 = $1517;
    $m = 0;
    while(1) {
     $1518 = $m;
     $1519 = HEAP32[$ndir>>2]|0;
     $1520 = ($1518>>>0)<($1519>>>0);
     if (!($1520)) {
      break;
     }
     $1521 = $o7;
     $1522 = HEAP16[$1521>>1]|0;
     $1523 = $n6;
     HEAP16[$1523>>1] = $1522;
     $1524 = $1;
     $1525 = (($1524) + 12|0);
     $1526 = HEAP32[$1525>>2]|0;
     $1527 = $1526 & 128;
     $1528 = ($1527|0)!=(0);
     if ($1528) {
      $1529 = $n6;
      _TIFFSwabShort($1529);
     }
     $1530 = $n6;
     $1531 = (($1530) + 2|0);
     $n6 = $1531;
     $1532 = $o7;
     $1533 = (($1532) + 2|0);
     $1534 = HEAP16[$1533>>1]|0;
     $1535 = $n6;
     HEAP16[$1535>>1] = $1534;
     $1536 = $1;
     $1537 = (($1536) + 12|0);
     $1538 = HEAP32[$1537>>2]|0;
     $1539 = $1538 & 128;
     $1540 = ($1539|0)!=(0);
     if ($1540) {
      $1541 = $n6;
      _TIFFSwabShort($1541);
     }
     $1542 = $n6;
     $1543 = (($1542) + 2|0);
     $n6 = $1543;
     $1544 = $o7;
     $1545 = (($1544) + 8|0);
     $1546 = $1545;
     $1547 = $1546;
     $1548 = HEAP32[$1547>>2]|0;
     $1549 = (($1546) + 4)|0;
     $1550 = $1549;
     $1551 = HEAP32[$1550>>2]|0;
     HEAP32[$nTmp>>2] = $1548;
     $1552 = $n6;
     __TIFFmemcpy($1552,$nTmp,4);
     $1553 = $1;
     $1554 = (($1553) + 12|0);
     $1555 = HEAP32[$1554>>2]|0;
     $1556 = $1555 & 128;
     $1557 = ($1556|0)!=(0);
     if ($1557) {
      $1558 = $n6;
      _TIFFSwabLong($1558);
     }
     $1559 = $n6;
     $1560 = (($1559) + 4|0);
     $n6 = $1560;
     $1561 = $n6;
     $1562 = $o7;
     $1563 = (($1562) + 16|0);
     __TIFFmemcpy($1561,$1563,4);
     $1564 = $n6;
     $1565 = (($1564) + 4|0);
     $n6 = $1565;
     $1566 = $o7;
     $1567 = (($1566) + 24|0);
     $o7 = $1567;
     $1568 = $m;
     $1569 = (($1568) + 1)|0;
     $m = $1569;
    }
    $1570 = $1;
    $1571 = (($1570) + 24|0);
    $1572 = $1571;
    $1573 = $1572;
    $1574 = HEAP32[$1573>>2]|0;
    $1575 = (($1572) + 4)|0;
    $1576 = $1575;
    $1577 = HEAP32[$1576>>2]|0;
    HEAP32[$nTmp>>2] = $1574;
    $1578 = $1;
    $1579 = (($1578) + 12|0);
    $1580 = HEAP32[$1579>>2]|0;
    $1581 = $1580 & 128;
    $1582 = ($1581|0)!=(0);
    if ($1582) {
     _TIFFSwabLong($nTmp);
    }
    $1583 = $n6;
    __TIFFmemcpy($1583,$nTmp,4);
   }
   $1655 = $dir;
   __TIFFfree($1655);
   $dir = 0;
   $1656 = $1;
   $1657 = (($1656) + 640|0);
   $1658 = HEAP32[$1657>>2]|0;
   $1659 = $1;
   $1660 = (($1659) + 628|0);
   $1661 = HEAP32[$1660>>2]|0;
   $1662 = $1;
   $1663 = (($1662) + 16|0);
   $1664 = $1663;
   $1665 = $1664;
   $1666 = HEAP32[$1665>>2]|0;
   $1667 = (($1664) + 4)|0;
   $1668 = $1667;
   $1669 = HEAP32[$1668>>2]|0;
   $1670 = (FUNCTION_TABLE_iiiii[$1658 & 255]($1661,$1666,$1669,0)|0);
   $1671 = tempRet0;
   $1672 = $1;
   $1673 = (($1672) + 16|0);
   $1674 = $1673;
   $1675 = $1674;
   $1676 = HEAP32[$1675>>2]|0;
   $1677 = (($1674) + 4)|0;
   $1678 = $1677;
   $1679 = HEAP32[$1678>>2]|0;
   $1680 = ($1670|0)==($1676|0);
   $1681 = ($1671|0)==($1679|0);
   $1682 = $1680 & $1681;
   if (!($1682)) {
    $1683 = $1;
    $1684 = (($1683) + 628|0);
    $1685 = HEAP32[$1684>>2]|0;
    _TIFFErrorExt($1685,21616,22120,$vararg_buffer25);
    break;
   }
   $1686 = $1;
   $1687 = (($1686) + 636|0);
   $1688 = HEAP32[$1687>>2]|0;
   $1689 = $1;
   $1690 = (($1689) + 628|0);
   $1691 = HEAP32[$1690>>2]|0;
   $1692 = $dirmem;
   $1693 = $dirsize;
   $1694 = (FUNCTION_TABLE_iiii[$1688 & 255]($1691,$1692,$1693)|0);
   $1695 = $dirsize;
   $1696 = ($1694|0)==($1695|0);
   if (!($1696)) {
    $1697 = $1;
    $1698 = (($1697) + 628|0);
    $1699 = HEAP32[$1698>>2]|0;
    _TIFFErrorExt($1699,21616,22120,$vararg_buffer27);
    break;
   }
   $1700 = $dirmem;
   __TIFFfree($1700);
   $1701 = $3;
   $1702 = ($1701|0)!=(0);
   if ($1702) {
    $1703 = $1;
    _TIFFFreeDirectory($1703);
    $1704 = $1;
    $1705 = (($1704) + 12|0);
    $1706 = HEAP32[$1705>>2]|0;
    $1707 = $1706 & -9;
    HEAP32[$1705>>2] = $1707;
    $1708 = $1;
    $1709 = (($1708) + 12|0);
    $1710 = HEAP32[$1709>>2]|0;
    $1711 = $1710 & -2097153;
    HEAP32[$1709>>2] = $1711;
    $1712 = $1;
    $1713 = (($1712) + 564|0);
    $1714 = HEAP32[$1713>>2]|0;
    $1715 = $1;
    FUNCTION_TABLE_vi[$1714 & 255]($1715);
    $1716 = $1;
    (_TIFFCreateDirectory($1716)|0);
   }
   $0 = 1;
   $1723 = $0;
   STACKTOP = sp;return ($1723|0);
   break;
  }
  case 278: {
   $1243 = $1;
   $1244 = (($1243) + 628|0);
   $1245 = HEAP32[$1244>>2]|0;
   _TIFFErrorExt($1245,21616,22064,$vararg_buffer19);
   break;
  }
  case 282: {
   break;
  }
  case 294: {
   $1378 = $1;
   $1379 = (($1378) + 628|0);
   $1380 = HEAP32[$1379>>2]|0;
   _TIFFErrorExt($1380,21616,22080,$vararg_buffer21);
   break;
  }
 }
 $1717 = $dir;
 $1718 = ($1717|0)!=(0|0);
 if ($1718) {
  $1719 = $dir;
  __TIFFfree($1719);
 }
 $1720 = $dirmem;
 $1721 = ($1720|0)!=(0|0);
 if ($1721) {
  $1722 = $dirmem;
  __TIFFfree($1722);
 }
 $0 = 0;
 $1723 = $0;
 STACKTOP = sp;return ($1723|0);
}
function _TIFFWriteDirectoryTagShortLong($tif,$ndir,$dir,$tag,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $value;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[$8>>2] = $10;
  $0 = 1;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $11 = $5;
 $12 = ($11>>>0)<=(65535);
 if ($12) {
  $13 = $1;
  $14 = $2;
  $15 = $3;
  $16 = $4;
  $17 = $5;
  $18 = $17&65535;
  $19 = (_TIFFWriteDirectoryTagCheckedShort($13,$14,$15,$16,$18)|0);
  $0 = $19;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $20 = $1;
  $21 = $2;
  $22 = $3;
  $23 = $4;
  $24 = $5;
  $25 = (_TIFFWriteDirectoryTagCheckedLong($20,$21,$22,$23,$24)|0);
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagRational($tif,$ndir,$dir,$tag,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $value;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[$8>>2] = $10;
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $11 = $1;
  $12 = $2;
  $13 = $3;
  $14 = $4;
  $15 = $5;
  $16 = (_TIFFWriteDirectoryTagCheckedRational($11,$12,$13,$14,$15)|0);
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagLong($tif,$ndir,$dir,$tag,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $value;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[$8>>2] = $10;
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $11 = $1;
  $12 = $2;
  $13 = $3;
  $14 = $4;
  $15 = $5;
  $16 = (_TIFFWriteDirectoryTagCheckedLong($11,$12,$13,$14,$15)|0);
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagShortPerSample($tif,$ndir,$dir,$tag,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $na = 0, $nb = 0, $o = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $value;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[$8>>2] = $10;
  $0 = 1;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 $11 = $1;
 $12 = (($11) + 40|0);
 $13 = (($12) + 58|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = $15<<1;
 $17 = (__TIFFmalloc($16)|0);
 $m = $17;
 $18 = $m;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = $1;
  $21 = (($20) + 628|0);
  $22 = HEAP32[$21>>2]|0;
  _TIFFErrorExt($22,23352,22064,$vararg_buffer);
  $0 = 0;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 $23 = $m;
 $na = $23;
 $nb = 0;
 while(1) {
  $24 = $nb;
  $25 = $24&65535;
  $26 = $1;
  $27 = (($26) + 40|0);
  $28 = (($27) + 58|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = ($25|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = $5;
  $33 = $na;
  HEAP16[$33>>1] = $32;
  $34 = $na;
  $35 = (($34) + 2|0);
  $na = $35;
  $36 = $nb;
  $37 = (($36) + 1)<<16>>16;
  $nb = $37;
 }
 $38 = $1;
 $39 = $2;
 $40 = $3;
 $41 = $4;
 $42 = $1;
 $43 = (($42) + 40|0);
 $44 = (($43) + 58|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = $m;
 $48 = (_TIFFWriteDirectoryTagCheckedShortArray($38,$39,$40,$41,$46,$47)|0);
 $o = $48;
 $49 = $m;
 __TIFFfree($49);
 $50 = $o;
 $0 = $50;
 $51 = $0;
 STACKTOP = sp;return ($51|0);
}
function _TIFFWriteDirectoryTagShort($tif,$ndir,$dir,$tag,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $value;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[$8>>2] = $10;
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $11 = $1;
  $12 = $2;
  $13 = $3;
  $14 = $4;
  $15 = $5;
  $16 = (_TIFFWriteDirectoryTagCheckedShort($11,$12,$13,$14,$15)|0);
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagShortArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedShortArray($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagLongLong8Array($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $ma = 0, $mb = 0, $o = 0;
 var $p = 0, $q = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $12 = $1;
 $13 = (($12) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 524288;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $1;
  $18 = $2;
  $19 = $3;
  $20 = $4;
  $21 = $5;
  $22 = $6;
  $23 = (_TIFFWriteDirectoryTagCheckedLong8Array($17,$18,$19,$20,$21,$22)|0);
  $0 = $23;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $24 = $5;
 $25 = $24<<2;
 $26 = (__TIFFmalloc($25)|0);
 $p = $26;
 $27 = $p;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $29 = $1;
  $30 = (($29) + 628|0);
  $31 = HEAP32[$30>>2]|0;
  _TIFFErrorExt($31,23312,22064,$vararg_buffer);
  $0 = 0;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $32 = $p;
 $q = $32;
 $33 = $6;
 $ma = $33;
 $mb = 0;
 while(1) {
  $34 = $mb;
  $35 = $5;
  $36 = ($34>>>0)<($35>>>0);
  if (!($36)) {
   label = 13;
   break;
  }
  $37 = $ma;
  $38 = $37;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($38) + 4)|0;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43>>>0)>(0);
  $45 = ($40>>>0)>(4294967295);
  $46 = ($43|0)==(0);
  $47 = $46 & $45;
  $48 = $44 | $47;
  if ($48) {
   label = 10;
   break;
  }
  $53 = $ma;
  $54 = $53;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = $q;
  HEAP32[$60>>2] = $56;
  $61 = $ma;
  $62 = (($61) + 8|0);
  $ma = $62;
  $63 = $mb;
  $64 = (($63) + 1)|0;
  $mb = $64;
  $65 = $q;
  $66 = (($65) + 4|0);
  $q = $66;
 }
 if ((label|0) == 10) {
  $49 = $1;
  $50 = (($49) + 628|0);
  $51 = HEAP32[$50>>2]|0;
  _TIFFErrorExt($51,23312,22288,$vararg_buffer1);
  $52 = $p;
  __TIFFfree($52);
  $0 = 0;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 else if ((label|0) == 13) {
  $67 = $1;
  $68 = $2;
  $69 = $3;
  $70 = $4;
  $71 = $5;
  $72 = $p;
  $73 = (_TIFFWriteDirectoryTagCheckedLongArray($67,$68,$69,$70,$71,$72)|0);
  $o = $73;
  $74 = $p;
  __TIFFfree($74);
  $75 = $o;
  $0 = $75;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagColormap($tif,$ndir,$dir) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $m = 0, $n = 0, $o = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $3;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  $0 = 1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $9 = $1;
 $10 = (($9) + 40|0);
 $11 = (($10) + 44|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = 1 << $13;
 $m = $14;
 $15 = $m;
 $16 = ($15*3)|0;
 $17 = $16<<1;
 $18 = (__TIFFmalloc($17)|0);
 $n = $18;
 $19 = $n;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = $1;
  $22 = (($21) + 628|0);
  $23 = HEAP32[$22>>2]|0;
  _TIFFErrorExt($23,23280,22064,$vararg_buffer);
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 } else {
  $24 = $n;
  $25 = $1;
  $26 = (($25) + 40|0);
  $27 = (($26) + 100|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $m;
  $30 = $29<<1;
  __TIFFmemcpy($24,$28,$30);
  $31 = $m;
  $32 = $n;
  $33 = (($32) + ($31<<1)|0);
  $34 = $1;
  $35 = (($34) + 40|0);
  $36 = (($35) + 100|0);
  $37 = (($36) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $m;
  $40 = $39<<1;
  __TIFFmemcpy($33,$38,$40);
  $41 = $m;
  $42 = $41<<1;
  $43 = $n;
  $44 = (($43) + ($42<<1)|0);
  $45 = $1;
  $46 = (($45) + 40|0);
  $47 = (($46) + 100|0);
  $48 = (($47) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $m;
  $51 = $50<<1;
  __TIFFmemcpy($44,$49,$51);
  $52 = $1;
  $53 = $2;
  $54 = $3;
  $55 = $m;
  $56 = ($55*3)|0;
  $57 = $n;
  $58 = (_TIFFWriteDirectoryTagCheckedShortArray($52,$53,$54,320,$56,$57)|0);
  $o = $58;
  $59 = $n;
  __TIFFfree($59);
  $60 = $o;
  $0 = $60;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagSampleformatArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $conv = 0, $i = 0, $ok = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $5;
 $8 = $7<<3;
 $9 = (__TIFFmalloc($8)|0);
 $conv = $9;
 $10 = $conv;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = $1;
  $13 = (($12) + 628|0);
  $14 = HEAP32[$13>>2]|0;
  _TIFFErrorExt($14,23240,22064,$vararg_buffer);
  $0 = 0;
  $199 = $0;
  STACKTOP = sp;return ($199|0);
 }
 $15 = $1;
 $16 = (($15) + 40|0);
 $17 = (($16) + 46|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 if ((($19|0) == 3)) {
  $20 = $1;
  $21 = (($20) + 40|0);
  $22 = (($21) + 44|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = ($24|0)<=(32);
  if ($25) {
   $i = 0;
   while(1) {
    $26 = $i;
    $27 = $5;
    $28 = ($26>>>0)<($27>>>0);
    if (!($28)) {
     break;
    }
    $29 = $i;
    $30 = $6;
    $31 = (($30) + ($29<<3)|0);
    $32 = +HEAPF64[$31>>3];
    $33 = $32;
    $34 = $i;
    $35 = $conv;
    $36 = (($35) + ($34<<2)|0);
    HEAPF32[$36>>2] = $33;
    $37 = $i;
    $38 = (($37) + 1)|0;
    $i = $38;
   }
   $39 = $1;
   $40 = $2;
   $41 = $3;
   $42 = $4;
   $43 = $5;
   $44 = $conv;
   $45 = (_TIFFWriteDirectoryTagFloatArray($39,$40,$41,$42,$43,$44)|0);
   $ok = $45;
  } else {
   $46 = $1;
   $47 = $2;
   $48 = $3;
   $49 = $4;
   $50 = $5;
   $51 = $6;
   $52 = (_TIFFWriteDirectoryTagDoubleArray($46,$47,$48,$49,$50,$51)|0);
   $ok = $52;
  }
 } else if ((($19|0) == 2)) {
  $53 = $1;
  $54 = (($53) + 40|0);
  $55 = (($54) + 44|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&65535;
  $58 = ($57|0)<=(8);
  if ($58) {
   $i = 0;
   while(1) {
    $59 = $i;
    $60 = $5;
    $61 = ($59>>>0)<($60>>>0);
    if (!($61)) {
     break;
    }
    $62 = $i;
    $63 = $6;
    $64 = (($63) + ($62<<3)|0);
    $65 = +HEAPF64[$64>>3];
    $66 = (~~(($65)));
    $67 = $i;
    $68 = $conv;
    $69 = (($68) + ($67)|0);
    HEAP8[$69>>0] = $66;
    $70 = $i;
    $71 = (($70) + 1)|0;
    $i = $71;
   }
   $72 = $1;
   $73 = $2;
   $74 = $3;
   $75 = $4;
   $76 = $5;
   $77 = $conv;
   $78 = (_TIFFWriteDirectoryTagSbyteArray($72,$73,$74,$75,$76,$77)|0);
   $ok = $78;
  } else {
   $79 = $1;
   $80 = (($79) + 40|0);
   $81 = (($80) + 44|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = $82&65535;
   $84 = ($83|0)<=(16);
   if ($84) {
    $i = 0;
    while(1) {
     $85 = $i;
     $86 = $5;
     $87 = ($85>>>0)<($86>>>0);
     if (!($87)) {
      break;
     }
     $88 = $i;
     $89 = $6;
     $90 = (($89) + ($88<<3)|0);
     $91 = +HEAPF64[$90>>3];
     $92 = (~~(($91)));
     $93 = $i;
     $94 = $conv;
     $95 = (($94) + ($93<<1)|0);
     HEAP16[$95>>1] = $92;
     $96 = $i;
     $97 = (($96) + 1)|0;
     $i = $97;
    }
    $98 = $1;
    $99 = $2;
    $100 = $3;
    $101 = $4;
    $102 = $5;
    $103 = $conv;
    $104 = (_TIFFWriteDirectoryTagSshortArray($98,$99,$100,$101,$102,$103)|0);
    $ok = $104;
   } else {
    $i = 0;
    while(1) {
     $105 = $i;
     $106 = $5;
     $107 = ($105>>>0)<($106>>>0);
     if (!($107)) {
      break;
     }
     $108 = $i;
     $109 = $6;
     $110 = (($109) + ($108<<3)|0);
     $111 = +HEAPF64[$110>>3];
     $112 = (~~(($111)));
     $113 = $i;
     $114 = $conv;
     $115 = (($114) + ($113<<2)|0);
     HEAP32[$115>>2] = $112;
     $116 = $i;
     $117 = (($116) + 1)|0;
     $i = $117;
    }
    $118 = $1;
    $119 = $2;
    $120 = $3;
    $121 = $4;
    $122 = $5;
    $123 = $conv;
    $124 = (_TIFFWriteDirectoryTagSlongArray($118,$119,$120,$121,$122,$123)|0);
    $ok = $124;
   }
  }
 } else if ((($19|0) == 1)) {
  $125 = $1;
  $126 = (($125) + 40|0);
  $127 = (($126) + 44|0);
  $128 = HEAP16[$127>>1]|0;
  $129 = $128&65535;
  $130 = ($129|0)<=(8);
  if ($130) {
   $i = 0;
   while(1) {
    $131 = $i;
    $132 = $5;
    $133 = ($131>>>0)<($132>>>0);
    if (!($133)) {
     break;
    }
    $134 = $i;
    $135 = $6;
    $136 = (($135) + ($134<<3)|0);
    $137 = +HEAPF64[$136>>3];
    $138 = (~~(($137))&255);
    $139 = $i;
    $140 = $conv;
    $141 = (($140) + ($139)|0);
    HEAP8[$141>>0] = $138;
    $142 = $i;
    $143 = (($142) + 1)|0;
    $i = $143;
   }
   $144 = $1;
   $145 = $2;
   $146 = $3;
   $147 = $4;
   $148 = $5;
   $149 = $conv;
   $150 = (_TIFFWriteDirectoryTagByteArray($144,$145,$146,$147,$148,$149)|0);
   $ok = $150;
  } else {
   $151 = $1;
   $152 = (($151) + 40|0);
   $153 = (($152) + 44|0);
   $154 = HEAP16[$153>>1]|0;
   $155 = $154&65535;
   $156 = ($155|0)<=(16);
   if ($156) {
    $i = 0;
    while(1) {
     $157 = $i;
     $158 = $5;
     $159 = ($157>>>0)<($158>>>0);
     if (!($159)) {
      break;
     }
     $160 = $i;
     $161 = $6;
     $162 = (($161) + ($160<<3)|0);
     $163 = +HEAPF64[$162>>3];
     $164 = (~~(($163))&65535);
     $165 = $i;
     $166 = $conv;
     $167 = (($166) + ($165<<1)|0);
     HEAP16[$167>>1] = $164;
     $168 = $i;
     $169 = (($168) + 1)|0;
     $i = $169;
    }
    $170 = $1;
    $171 = $2;
    $172 = $3;
    $173 = $4;
    $174 = $5;
    $175 = $conv;
    $176 = (_TIFFWriteDirectoryTagShortArray($170,$171,$172,$173,$174,$175)|0);
    $ok = $176;
   } else {
    $i = 0;
    while(1) {
     $177 = $i;
     $178 = $5;
     $179 = ($177>>>0)<($178>>>0);
     if (!($179)) {
      break;
     }
     $180 = $i;
     $181 = $6;
     $182 = (($181) + ($180<<3)|0);
     $183 = +HEAPF64[$182>>3];
     $184 = (~~(($183))>>>0);
     $185 = $i;
     $186 = $conv;
     $187 = (($186) + ($185<<2)|0);
     HEAP32[$187>>2] = $184;
     $188 = $i;
     $189 = (($188) + 1)|0;
     $i = $189;
    }
    $190 = $1;
    $191 = $2;
    $192 = $3;
    $193 = $4;
    $194 = $5;
    $195 = $conv;
    $196 = (_TIFFWriteDirectoryTagLongArray($190,$191,$192,$193,$194,$195)|0);
    $ok = $196;
   }
  }
 } else {
  $ok = 0;
 }
 $197 = $conv;
 __TIFFfree($197);
 $198 = $ok;
 $0 = $198;
 $199 = $0;
 STACKTOP = sp;return ($199|0);
}
function _TIFFWriteDirectoryTagRationalArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedRationalArray($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagTransferfunction($tif,$ndir,$dir) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $m = 0, $n = 0, $o = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $3;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  $0 = 1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $9 = $1;
 $10 = (($9) + 40|0);
 $11 = (($10) + 44|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = 1 << $13;
 $m = $14;
 $15 = $1;
 $16 = (($15) + 40|0);
 $17 = (($16) + 58|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = $1;
 $21 = (($20) + 40|0);
 $22 = (($21) + 116|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = (($19) - ($24))|0;
 $26 = $25&65535;
 $n = $26;
 $27 = $n;
 $28 = $27&65535;
 $29 = ($28|0)>(3);
 if ($29) {
  $n = 3;
 }
 $30 = $n;
 $31 = $30&65535;
 $32 = ($31|0)==(3);
 if ($32) {
  $33 = $1;
  $34 = (($33) + 40|0);
  $35 = (($34) + 160|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $1;
  $38 = (($37) + 40|0);
  $39 = (($38) + 160|0);
  $40 = (($39) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $m;
  $43 = $42<<1;
  $44 = (__TIFFmemcmp($36,$41,$43)|0);
  $45 = ($44|0)!=(0);
  if (!($45)) {
   $n = 2;
  }
 }
 $46 = $n;
 $47 = $46&65535;
 $48 = ($47|0)==(2);
 if ($48) {
  $49 = $1;
  $50 = (($49) + 40|0);
  $51 = (($50) + 160|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $1;
  $54 = (($53) + 40|0);
  $55 = (($54) + 160|0);
  $56 = (($55) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $m;
  $59 = $58<<1;
  $60 = (__TIFFmemcmp($52,$57,$59)|0);
  $61 = ($60|0)!=(0);
  if (!($61)) {
   $n = 1;
  }
 }
 $62 = $n;
 $63 = $62&65535;
 $64 = ($63|0)==(0);
 if ($64) {
  $n = 1;
 }
 $65 = $n;
 $66 = $65&65535;
 $67 = $m;
 $68 = Math_imul($66, $67)|0;
 $69 = $68<<1;
 $70 = (__TIFFmalloc($69)|0);
 $o = $70;
 $71 = $o;
 $72 = ($71|0)==(0|0);
 if ($72) {
  $73 = $1;
  $74 = (($73) + 628|0);
  $75 = HEAP32[$74>>2]|0;
  _TIFFErrorExt($75,23112,22064,$vararg_buffer);
  $0 = 0;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $76 = $o;
 $77 = $1;
 $78 = (($77) + 40|0);
 $79 = (($78) + 160|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $m;
 $82 = $81<<1;
 __TIFFmemcpy($76,$80,$82);
 $83 = $n;
 $84 = $83&65535;
 $85 = ($84|0)>(1);
 if ($85) {
  $86 = $m;
  $87 = $o;
  $88 = (($87) + ($86<<1)|0);
  $89 = $1;
  $90 = (($89) + 40|0);
  $91 = (($90) + 160|0);
  $92 = (($91) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $m;
  $95 = $94<<1;
  __TIFFmemcpy($88,$93,$95);
 }
 $96 = $n;
 $97 = $96&65535;
 $98 = ($97|0)>(2);
 if ($98) {
  $99 = $m;
  $100 = $99<<1;
  $101 = $o;
  $102 = (($101) + ($100<<1)|0);
  $103 = $1;
  $104 = (($103) + 40|0);
  $105 = (($104) + 160|0);
  $106 = (($105) + 8|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $m;
  $109 = $108<<1;
  __TIFFmemcpy($102,$107,$109);
 }
 $110 = $1;
 $111 = $2;
 $112 = $3;
 $113 = $n;
 $114 = $113&65535;
 $115 = $m;
 $116 = Math_imul($114, $115)|0;
 $117 = $o;
 $118 = (_TIFFWriteDirectoryTagCheckedShortArray($110,$111,$112,301,$116,$117)|0);
 $p = $118;
 $119 = $o;
 __TIFFfree($119);
 $120 = $p;
 $0 = $120;
 $121 = $0;
 STACKTOP = sp;return ($121|0);
}
function _TIFFWriteDirectoryTagAscii($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedAscii($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagSubifd($tif,$ndir,$dir) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $m = 0, $n = 0, $o = 0, $p = 0, $pa = 0, $pb = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $m = sp;
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $1;
 $5 = (($4) + 40|0);
 $6 = (($5) + 144|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ($8|0)==(0);
 if ($9) {
  $0 = 1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $10 = $3;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $0 = 1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $15 = $1;
 $16 = (($15) + 464|0);
 $17 = $16;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $m;
 $24 = $23;
 HEAP32[$24>>2] = $19;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $22;
 $27 = $1;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 & 524288;
 $31 = ($30|0)!=(0);
 do {
  if ($31) {
   $94 = $1;
   $95 = $2;
   $96 = $3;
   $97 = $1;
   $98 = (($97) + 40|0);
   $99 = (($98) + 144|0);
   $100 = HEAP16[$99>>1]|0;
   $101 = $100&65535;
   $102 = $1;
   $103 = (($102) + 40|0);
   $104 = (($103) + 148|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (_TIFFWriteDirectoryTagCheckedIfd8Array($94,$95,$96,330,$101,$105)|0);
   $n = $106;
  } else {
   $32 = $1;
   $33 = (($32) + 40|0);
   $34 = (($33) + 144|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35&65535;
   $37 = $36<<2;
   $38 = (__TIFFmalloc($37)|0);
   $o = $38;
   $39 = $o;
   $40 = ($39|0)==(0|0);
   if ($40) {
    $41 = $1;
    $42 = (($41) + 628|0);
    $43 = HEAP32[$42>>2]|0;
    _TIFFErrorExt($43,23016,22064,$vararg_buffer);
    $0 = 0;
    $143 = $0;
    STACKTOP = sp;return ($143|0);
   }
   $44 = $1;
   $45 = (($44) + 40|0);
   $46 = (($45) + 148|0);
   $47 = HEAP32[$46>>2]|0;
   $pa = $47;
   $48 = $o;
   $pb = $48;
   $p = 0;
   while(1) {
    $49 = $p;
    $50 = $49&65535;
    $51 = $1;
    $52 = (($51) + 40|0);
    $53 = (($52) + 144|0);
    $54 = HEAP16[$53>>1]|0;
    $55 = $54&65535;
    $56 = ($50|0)<($55|0);
    if (!($56)) {
     label = 16;
     break;
    }
    $57 = $pa;
    $58 = ($57|0)!=(0|0);
    if (!($58)) {
     label = 11;
     break;
    }
    $59 = $pa;
    $60 = $59;
    $61 = $60;
    $62 = HEAP32[$61>>2]|0;
    $63 = (($60) + 4)|0;
    $64 = $63;
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65>>>0)<(0);
    $67 = ($62>>>0)<=(4294967295);
    $68 = ($65|0)==(0);
    $69 = $68 & $67;
    $70 = $66 | $69;
    if (!($70)) {
     label = 13;
     break;
    }
    $71 = $pa;
    $72 = (($71) + 8|0);
    $pa = $72;
    $73 = $71;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $76 = (($73) + 4)|0;
    $77 = $76;
    $78 = HEAP32[$77>>2]|0;
    $79 = $pb;
    $80 = (($79) + 4|0);
    $pb = $80;
    HEAP32[$79>>2] = $75;
    $81 = $p;
    $82 = (($81) + 1)<<16>>16;
    $p = $82;
   }
   if ((label|0) == 11) {
    ___assert_fail((23048|0),(21768|0),1868,(23056|0));
    // unreachable;
   }
   else if ((label|0) == 13) {
    ___assert_fail((23088|0),(21768|0),1869,(23056|0));
    // unreachable;
   }
   else if ((label|0) == 16) {
    $83 = $1;
    $84 = $2;
    $85 = $3;
    $86 = $1;
    $87 = (($86) + 40|0);
    $88 = (($87) + 144|0);
    $89 = HEAP16[$88>>1]|0;
    $90 = $89&65535;
    $91 = $o;
    $92 = (_TIFFWriteDirectoryTagCheckedIfdArray($83,$84,$85,330,$90,$91)|0);
    $n = $92;
    $93 = $o;
    __TIFFfree($93);
    break;
   }
  }
 } while(0);
 $107 = $n;
 $108 = ($107|0)!=(0);
 if (!($108)) {
  $0 = 0;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $109 = $1;
 $110 = (($109) + 12|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 | 8192;
 HEAP32[$110>>2] = $112;
 $113 = $1;
 $114 = (($113) + 40|0);
 $115 = (($114) + 144|0);
 $116 = HEAP16[$115>>1]|0;
 $117 = $1;
 $118 = (($117) + 472|0);
 HEAP16[$118>>1] = $116;
 $119 = $1;
 $120 = (($119) + 40|0);
 $121 = (($120) + 144|0);
 $122 = HEAP16[$121>>1]|0;
 $123 = $122&65535;
 $124 = ($123|0)==(1);
 if ($124) {
  $125 = $1;
  $126 = (($125) + 480|0);
  $127 = $126;
  $128 = $127;
  HEAP32[$128>>2] = 0;
  $129 = (($127) + 4)|0;
  $130 = $129;
  HEAP32[$130>>2] = 0;
 } else {
  $131 = $m;
  $132 = $131;
  $133 = HEAP32[$132>>2]|0;
  $134 = (($131) + 4)|0;
  $135 = $134;
  $136 = HEAP32[$135>>2]|0;
  $137 = $1;
  $138 = (($137) + 480|0);
  $139 = $138;
  $140 = $139;
  HEAP32[$140>>2] = $133;
  $141 = (($139) + 4)|0;
  $142 = $141;
  HEAP32[$142>>2] = $136;
 }
 $0 = 1;
 $143 = $0;
 STACKTOP = sp;return ($143|0);
}
function _TIFFWriteDirectoryTagUndefinedArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedUndefinedArray($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagByteArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedByteArray($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagSbyteArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedSbyteArray($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagSshortArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedSshortArray($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagLongArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedLongArray($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagSlongArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedSlongArray($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagLong8Array($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedLong8Array($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagSlong8Array($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedSlong8Array($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagSrationalArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedSrationalArray($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagFloatArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedFloatArray($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagDoubleArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedDoubleArray($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagIfdArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  $16 = $5;
  $17 = $6;
  $18 = (_TIFFWriteDirectoryTagCheckedIfdArray($12,$13,$14,$15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _TIFFWriteDirectoryTagIfdIfd8Array($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $ma = 0, $mb = 0, $o = 0;
 var $p = 0, $q = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $0 = 1;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $12 = $1;
 $13 = (($12) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 524288;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $1;
  $18 = $2;
  $19 = $3;
  $20 = $4;
  $21 = $5;
  $22 = $6;
  $23 = (_TIFFWriteDirectoryTagCheckedIfd8Array($17,$18,$19,$20,$21,$22)|0);
  $0 = $23;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $24 = $5;
 $25 = $24<<2;
 $26 = (__TIFFmalloc($25)|0);
 $p = $26;
 $27 = $p;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $29 = $1;
  $30 = (($29) + 628|0);
  $31 = HEAP32[$30>>2]|0;
  _TIFFErrorExt($31,22248,22064,$vararg_buffer);
  $0 = 0;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $32 = $p;
 $q = $32;
 $33 = $6;
 $ma = $33;
 $mb = 0;
 while(1) {
  $34 = $mb;
  $35 = $5;
  $36 = ($34>>>0)<($35>>>0);
  if (!($36)) {
   label = 13;
   break;
  }
  $37 = $ma;
  $38 = $37;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($38) + 4)|0;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43>>>0)>(0);
  $45 = ($40>>>0)>(4294967295);
  $46 = ($43|0)==(0);
  $47 = $46 & $45;
  $48 = $44 | $47;
  if ($48) {
   label = 10;
   break;
  }
  $53 = $ma;
  $54 = $53;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = $q;
  HEAP32[$60>>2] = $56;
  $61 = $ma;
  $62 = (($61) + 8|0);
  $ma = $62;
  $63 = $mb;
  $64 = (($63) + 1)|0;
  $mb = $64;
  $65 = $q;
  $66 = (($65) + 4|0);
  $q = $66;
 }
 if ((label|0) == 10) {
  $49 = $1;
  $50 = (($49) + 628|0);
  $51 = HEAP32[$50>>2]|0;
  _TIFFErrorExt($51,22248,22288,$vararg_buffer1);
  $52 = $p;
  __TIFFfree($52);
  $0 = 0;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 else if ((label|0) == 13) {
  $67 = $1;
  $68 = $2;
  $69 = $3;
  $70 = $4;
  $71 = $5;
  $72 = $p;
  $73 = (_TIFFWriteDirectoryTagCheckedIfdArray($67,$68,$69,$70,$71,$72)|0);
  $o = $73;
  $74 = $p;
  __TIFFfree($74);
  $75 = $o;
  $0 = $75;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function _TIFFLinkDirectory($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dircount = 0, $dircount5 = 0, $dircount64 = 0, $m = 0, $m1 = 0, $m2 = 0, $m3 = 0, $nextdir = 0, $nextdir4 = 0, $nextnextdir = 0, $nextnextdir6 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 120|0;
 $vararg_buffer17 = sp + 88|0;
 $vararg_buffer15 = sp + 32|0;
 $vararg_buffer13 = sp + 24|0;
 $vararg_buffer11 = sp + 64|0;
 $vararg_buffer9 = sp + 80|0;
 $vararg_buffer7 = sp + 96|0;
 $vararg_buffer5 = sp + 112|0;
 $vararg_buffer3 = sp + 40|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 56|0;
 $m = sp + 144|0;
 $m1 = sp + 72|0;
 $m2 = sp + 128|0;
 $dircount = sp + 148|0;
 $nextnextdir = sp + 132|0;
 $m3 = sp + 104|0;
 $nextdir4 = sp + 16|0;
 $dircount64 = sp + 48|0;
 $nextnextdir6 = sp + 8|0;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 640|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($5) + 628|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiiii[$4 & 255]($7,0,0,2)|0);
 $9 = tempRet0;
 $10 = (_i64Add(($8|0),($9|0),1,0)|0);
 $11 = tempRet0;
 $12 = $10 & -2;
 $13 = $1;
 $14 = (($13) + 16|0);
 $15 = $14;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $11;
 $19 = $1;
 $20 = (($19) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 8192;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $1;
  $25 = (($24) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 524288;
  $28 = ($27|0)!=(0);
  if ($28) {
   $91 = $1;
   $92 = (($91) + 16|0);
   $93 = $92;
   $94 = $93;
   $95 = HEAP32[$94>>2]|0;
   $96 = (($93) + 4)|0;
   $97 = $96;
   $98 = HEAP32[$97>>2]|0;
   $99 = $m1;
   $100 = $99;
   HEAP32[$100>>2] = $95;
   $101 = (($99) + 4)|0;
   $102 = $101;
   HEAP32[$102>>2] = $98;
   $103 = $1;
   $104 = (($103) + 12|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 128;
   $107 = ($106|0)!=(0);
   if ($107) {
    _TIFFSwabLong8($m1);
   }
   $108 = $1;
   $109 = (($108) + 640|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $1;
   $112 = (($111) + 628|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $1;
   $115 = (($114) + 480|0);
   $116 = $115;
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   $119 = (($116) + 4)|0;
   $120 = $119;
   $121 = HEAP32[$120>>2]|0;
   (FUNCTION_TABLE_iiiii[$110 & 255]($113,$118,$121,0)|0);
   $122 = tempRet0;
   $123 = $1;
   $124 = (($123) + 636|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $1;
   $127 = (($126) + 628|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (FUNCTION_TABLE_iiii[$125 & 255]($128,$m1,8)|0);
   $130 = ($129|0)==(8);
   if (!($130)) {
    $131 = $1;
    $132 = (($131) + 628|0);
    $133 = HEAP32[$132>>2]|0;
    _TIFFErrorExt($133,22152,22176,$vararg_buffer1);
    $0 = 0;
    $527 = $0;
    STACKTOP = sp;return ($527|0);
   }
   $134 = $1;
   $135 = (($134) + 472|0);
   $136 = HEAP16[$135>>1]|0;
   $137 = (($136) + -1)<<16>>16;
   HEAP16[$135>>1] = $137;
   $138 = ($137<<16>>16)!=(0);
   if ($138) {
    $139 = $1;
    $140 = (($139) + 480|0);
    $141 = $140;
    $142 = $141;
    $143 = HEAP32[$142>>2]|0;
    $144 = (($141) + 4)|0;
    $145 = $144;
    $146 = HEAP32[$145>>2]|0;
    $147 = (_i64Add(($143|0),($146|0),8,0)|0);
    $148 = tempRet0;
    $149 = $140;
    $150 = $149;
    HEAP32[$150>>2] = $147;
    $151 = (($149) + 4)|0;
    $152 = $151;
    HEAP32[$152>>2] = $148;
   } else {
    $153 = $1;
    $154 = (($153) + 12|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $155 & -8193;
    HEAP32[$154>>2] = $156;
   }
   $0 = 1;
   $527 = $0;
   STACKTOP = sp;return ($527|0);
  } else {
   $29 = $1;
   $30 = (($29) + 16|0);
   $31 = $30;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31) + 4)|0;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   HEAP32[$m>>2] = $33;
   $37 = $1;
   $38 = (($37) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 & 128;
   $41 = ($40|0)!=(0);
   if ($41) {
    _TIFFSwabLong($m);
   }
   $42 = $1;
   $43 = (($42) + 640|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $1;
   $46 = (($45) + 628|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $1;
   $49 = (($48) + 480|0);
   $50 = $49;
   $51 = $50;
   $52 = HEAP32[$51>>2]|0;
   $53 = (($50) + 4)|0;
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   (FUNCTION_TABLE_iiiii[$44 & 255]($47,$52,$55,0)|0);
   $56 = tempRet0;
   $57 = $1;
   $58 = (($57) + 636|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $1;
   $61 = (($60) + 628|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (FUNCTION_TABLE_iiii[$59 & 255]($62,$m,4)|0);
   $64 = ($63|0)==(4);
   if (!($64)) {
    $65 = $1;
    $66 = (($65) + 628|0);
    $67 = HEAP32[$66>>2]|0;
    _TIFFErrorExt($67,22152,22176,$vararg_buffer);
    $0 = 0;
    $527 = $0;
    STACKTOP = sp;return ($527|0);
   }
   $68 = $1;
   $69 = (($68) + 472|0);
   $70 = HEAP16[$69>>1]|0;
   $71 = (($70) + -1)<<16>>16;
   HEAP16[$69>>1] = $71;
   $72 = ($71<<16>>16)!=(0);
   if ($72) {
    $73 = $1;
    $74 = (($73) + 480|0);
    $75 = $74;
    $76 = $75;
    $77 = HEAP32[$76>>2]|0;
    $78 = (($75) + 4)|0;
    $79 = $78;
    $80 = HEAP32[$79>>2]|0;
    $81 = (_i64Add(($77|0),($80|0),4,0)|0);
    $82 = tempRet0;
    $83 = $74;
    $84 = $83;
    HEAP32[$84>>2] = $81;
    $85 = (($83) + 4)|0;
    $86 = $85;
    HEAP32[$86>>2] = $82;
   } else {
    $87 = $1;
    $88 = (($87) + 12|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $89 & -8193;
    HEAP32[$88>>2] = $90;
   }
   $0 = 1;
   $527 = $0;
   STACKTOP = sp;return ($527|0);
  }
 }
 $157 = $1;
 $158 = (($157) + 12|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = $159 & 524288;
 $161 = ($160|0)!=(0);
 do {
  if ($161) {
   $300 = $1;
   $301 = (($300) + 16|0);
   $302 = $301;
   $303 = $302;
   $304 = HEAP32[$303>>2]|0;
   $305 = (($302) + 4)|0;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = $m3;
   $309 = $308;
   HEAP32[$309>>2] = $304;
   $310 = (($308) + 4)|0;
   $311 = $310;
   HEAP32[$311>>2] = $307;
   $312 = $1;
   $313 = (($312) + 12|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = $314 & 128;
   $316 = ($315|0)!=(0);
   if ($316) {
    _TIFFSwabLong8($m3);
   }
   $317 = $1;
   $318 = (($317) + 424|0);
   $319 = (($318) + 8|0);
   $320 = $319;
   $321 = $320;
   $322 = HEAP32[$321>>2]|0;
   $323 = (($320) + 4)|0;
   $324 = $323;
   $325 = HEAP32[$324>>2]|0;
   $326 = ($322|0)==(0);
   $327 = ($325|0)==(0);
   $328 = $326 & $327;
   if ($328) {
    $329 = $1;
    $330 = (($329) + 16|0);
    $331 = $330;
    $332 = $331;
    $333 = HEAP32[$332>>2]|0;
    $334 = (($331) + 4)|0;
    $335 = $334;
    $336 = HEAP32[$335>>2]|0;
    $337 = $1;
    $338 = (($337) + 424|0);
    $339 = (($338) + 8|0);
    $340 = $339;
    $341 = $340;
    HEAP32[$341>>2] = $333;
    $342 = (($340) + 4)|0;
    $343 = $342;
    HEAP32[$343>>2] = $336;
    $344 = $1;
    $345 = (($344) + 640|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = $1;
    $348 = (($347) + 628|0);
    $349 = HEAP32[$348>>2]|0;
    (FUNCTION_TABLE_iiiii[$346 & 255]($349,8,0,0)|0);
    $350 = tempRet0;
    $351 = $1;
    $352 = (($351) + 636|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = $1;
    $355 = (($354) + 628|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = (FUNCTION_TABLE_iiii[$353 & 255]($356,$m3,8)|0);
    $358 = ($357|0)==(8);
    if ($358) {
     $0 = 1;
     $527 = $0;
     STACKTOP = sp;return ($527|0);
    } else {
     $359 = $1;
     $360 = (($359) + 628|0);
     $361 = HEAP32[$360>>2]|0;
     $362 = $1;
     $363 = HEAP32[$362>>2]|0;
     _TIFFErrorExt($361,$363,22216,$vararg_buffer11);
     $0 = 0;
     $527 = $0;
     STACKTOP = sp;return ($527|0);
    }
   }
   $364 = $1;
   $365 = (($364) + 424|0);
   $366 = (($365) + 8|0);
   $367 = $366;
   $368 = $367;
   $369 = HEAP32[$368>>2]|0;
   $370 = (($367) + 4)|0;
   $371 = $370;
   $372 = HEAP32[$371>>2]|0;
   $373 = $nextdir4;
   $374 = $373;
   HEAP32[$374>>2] = $369;
   $375 = (($373) + 4)|0;
   $376 = $375;
   HEAP32[$376>>2] = $372;
   while(1) {
    $377 = $1;
    $378 = (($377) + 640|0);
    $379 = HEAP32[$378>>2]|0;
    $380 = $1;
    $381 = (($380) + 628|0);
    $382 = HEAP32[$381>>2]|0;
    $383 = $nextdir4;
    $384 = $383;
    $385 = HEAP32[$384>>2]|0;
    $386 = (($383) + 4)|0;
    $387 = $386;
    $388 = HEAP32[$387>>2]|0;
    $389 = (FUNCTION_TABLE_iiiii[$379 & 255]($382,$385,$388,0)|0);
    $390 = tempRet0;
    $391 = $nextdir4;
    $392 = $391;
    $393 = HEAP32[$392>>2]|0;
    $394 = (($391) + 4)|0;
    $395 = $394;
    $396 = HEAP32[$395>>2]|0;
    $397 = ($389|0)==($393|0);
    $398 = ($390|0)==($396|0);
    $399 = $397 & $398;
    if (!($399)) {
     label = 51;
     break;
    }
    $400 = $1;
    $401 = (($400) + 632|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = $1;
    $404 = (($403) + 628|0);
    $405 = HEAP32[$404>>2]|0;
    $406 = (FUNCTION_TABLE_iiii[$402 & 255]($405,$dircount64,8)|0);
    $407 = ($406|0)==(8);
    if (!($407)) {
     label = 51;
     break;
    }
    $411 = $1;
    $412 = (($411) + 12|0);
    $413 = HEAP32[$412>>2]|0;
    $414 = $413 & 128;
    $415 = ($414|0)!=(0);
    if ($415) {
     _TIFFSwabLong8($dircount64);
    }
    $416 = $dircount64;
    $417 = $416;
    $418 = HEAP32[$417>>2]|0;
    $419 = (($416) + 4)|0;
    $420 = $419;
    $421 = HEAP32[$420>>2]|0;
    $422 = ($421>>>0)>(0);
    $423 = ($418>>>0)>(65535);
    $424 = ($421|0)==(0);
    $425 = $424 & $423;
    $426 = $422 | $425;
    if ($426) {
     label = 55;
     break;
    }
    $430 = $dircount64;
    $431 = $430;
    $432 = HEAP32[$431>>2]|0;
    $433 = (($430) + 4)|0;
    $434 = $433;
    $435 = HEAP32[$434>>2]|0;
    $436 = $432&65535;
    $dircount5 = $436;
    $437 = $1;
    $438 = (($437) + 640|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = $1;
    $441 = (($440) + 628|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = $nextdir4;
    $444 = $443;
    $445 = HEAP32[$444>>2]|0;
    $446 = (($443) + 4)|0;
    $447 = $446;
    $448 = HEAP32[$447>>2]|0;
    $449 = (_i64Add(($445|0),($448|0),8,0)|0);
    $450 = tempRet0;
    $451 = $dircount5;
    $452 = $451&65535;
    $453 = ($452*20)|0;
    $454 = ($453|0)<(0);
    $455 = $454 << 31 >> 31;
    $456 = (_i64Add(($449|0),($450|0),($453|0),($455|0))|0);
    $457 = tempRet0;
    (FUNCTION_TABLE_iiiii[$439 & 255]($442,$456,$457,0)|0);
    $458 = tempRet0;
    $459 = $1;
    $460 = (($459) + 632|0);
    $461 = HEAP32[$460>>2]|0;
    $462 = $1;
    $463 = (($462) + 628|0);
    $464 = HEAP32[$463>>2]|0;
    $465 = (FUNCTION_TABLE_iiii[$461 & 255]($464,$nextnextdir6,8)|0);
    $466 = ($465|0)==(8);
    if (!($466)) {
     label = 57;
     break;
    }
    $470 = $1;
    $471 = (($470) + 12|0);
    $472 = HEAP32[$471>>2]|0;
    $473 = $472 & 128;
    $474 = ($473|0)!=(0);
    if ($474) {
     _TIFFSwabLong8($nextnextdir6);
    }
    $475 = $nextnextdir6;
    $476 = $475;
    $477 = HEAP32[$476>>2]|0;
    $478 = (($475) + 4)|0;
    $479 = $478;
    $480 = HEAP32[$479>>2]|0;
    $481 = ($477|0)==(0);
    $482 = ($480|0)==(0);
    $483 = $481 & $482;
    if ($483) {
     label = 61;
     break;
    }
    $517 = $nextnextdir6;
    $518 = $517;
    $519 = HEAP32[$518>>2]|0;
    $520 = (($517) + 4)|0;
    $521 = $520;
    $522 = HEAP32[$521>>2]|0;
    $523 = $nextdir4;
    $524 = $523;
    HEAP32[$524>>2] = $519;
    $525 = (($523) + 4)|0;
    $526 = $525;
    HEAP32[$526>>2] = $522;
   }
   if ((label|0) == 51) {
    $408 = $1;
    $409 = (($408) + 628|0);
    $410 = HEAP32[$409>>2]|0;
    _TIFFErrorExt($410,22152,21056,$vararg_buffer13);
    $0 = 0;
    $527 = $0;
    STACKTOP = sp;return ($527|0);
   }
   else if ((label|0) == 55) {
    $427 = $1;
    $428 = (($427) + 628|0);
    $429 = HEAP32[$428>>2]|0;
    _TIFFErrorExt($429,22152,21152,$vararg_buffer15);
    $0 = 0;
    $527 = $0;
    STACKTOP = sp;return ($527|0);
   }
   else if ((label|0) == 57) {
    $467 = $1;
    $468 = (($467) + 628|0);
    $469 = HEAP32[$468>>2]|0;
    _TIFFErrorExt($469,22152,21088,$vararg_buffer17);
    $0 = 0;
    $527 = $0;
    STACKTOP = sp;return ($527|0);
   }
   else if ((label|0) == 61) {
    $484 = $1;
    $485 = (($484) + 640|0);
    $486 = HEAP32[$485>>2]|0;
    $487 = $1;
    $488 = (($487) + 628|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = $nextdir4;
    $491 = $490;
    $492 = HEAP32[$491>>2]|0;
    $493 = (($490) + 4)|0;
    $494 = $493;
    $495 = HEAP32[$494>>2]|0;
    $496 = (_i64Add(($492|0),($495|0),8,0)|0);
    $497 = tempRet0;
    $498 = $dircount5;
    $499 = $498&65535;
    $500 = ($499*20)|0;
    $501 = ($500|0)<(0);
    $502 = $501 << 31 >> 31;
    $503 = (_i64Add(($496|0),($497|0),($500|0),($502|0))|0);
    $504 = tempRet0;
    (FUNCTION_TABLE_iiiii[$486 & 255]($489,$503,$504,0)|0);
    $505 = tempRet0;
    $506 = $1;
    $507 = (($506) + 636|0);
    $508 = HEAP32[$507>>2]|0;
    $509 = $1;
    $510 = (($509) + 628|0);
    $511 = HEAP32[$510>>2]|0;
    $512 = (FUNCTION_TABLE_iiii[$508 & 255]($511,$m3,8)|0);
    $513 = ($512|0)==(8);
    if ($513) {
     break;
    } else {
     $514 = $1;
     $515 = (($514) + 628|0);
     $516 = HEAP32[$515>>2]|0;
     _TIFFErrorExt($516,22152,21120,$vararg_buffer19);
     $0 = 0;
     $527 = $0;
     STACKTOP = sp;return ($527|0);
    }
   }
  } else {
   $162 = $1;
   $163 = (($162) + 16|0);
   $164 = $163;
   $165 = $164;
   $166 = HEAP32[$165>>2]|0;
   $167 = (($164) + 4)|0;
   $168 = $167;
   $169 = HEAP32[$168>>2]|0;
   HEAP32[$m2>>2] = $166;
   $170 = $1;
   $171 = (($170) + 12|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = $172 & 128;
   $174 = ($173|0)!=(0);
   if ($174) {
    _TIFFSwabLong($m2);
   }
   $175 = $1;
   $176 = (($175) + 424|0);
   $177 = (($176) + 4|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ($178|0)==(0);
   if ($179) {
    $180 = $1;
    $181 = (($180) + 16|0);
    $182 = $181;
    $183 = $182;
    $184 = HEAP32[$183>>2]|0;
    $185 = (($182) + 4)|0;
    $186 = $185;
    $187 = HEAP32[$186>>2]|0;
    $188 = $1;
    $189 = (($188) + 424|0);
    $190 = (($189) + 4|0);
    HEAP32[$190>>2] = $184;
    $191 = $1;
    $192 = (($191) + 640|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = $1;
    $195 = (($194) + 628|0);
    $196 = HEAP32[$195>>2]|0;
    (FUNCTION_TABLE_iiiii[$193 & 255]($196,4,0,0)|0);
    $197 = tempRet0;
    $198 = $1;
    $199 = (($198) + 636|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = $1;
    $202 = (($201) + 628|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = (FUNCTION_TABLE_iiii[$200 & 255]($203,$m2,4)|0);
    $205 = ($204|0)==(4);
    if ($205) {
     $0 = 1;
     $527 = $0;
     STACKTOP = sp;return ($527|0);
    } else {
     $206 = $1;
     $207 = (($206) + 628|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = $1;
     $210 = HEAP32[$209>>2]|0;
     _TIFFErrorExt($208,$210,22216,$vararg_buffer3);
     $0 = 0;
     $527 = $0;
     STACKTOP = sp;return ($527|0);
    }
   }
   $211 = $1;
   $212 = (($211) + 424|0);
   $213 = (($212) + 4|0);
   $214 = HEAP32[$213>>2]|0;
   $nextdir = $214;
   while(1) {
    $215 = $1;
    $216 = (($215) + 640|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $1;
    $219 = (($218) + 628|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = $nextdir;
    $222 = (FUNCTION_TABLE_iiiii[$217 & 255]($220,$221,0,0)|0);
    $223 = tempRet0;
    $224 = $nextdir;
    $225 = ($222|0)==($224|0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if (!($227)) {
     label = 29;
     break;
    }
    $228 = $1;
    $229 = (($228) + 632|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = $1;
    $232 = (($231) + 628|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = (FUNCTION_TABLE_iiii[$230 & 255]($233,$dircount,2)|0);
    $235 = ($234|0)==(2);
    if (!($235)) {
     label = 29;
     break;
    }
    $239 = $1;
    $240 = (($239) + 12|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = $241 & 128;
    $243 = ($242|0)!=(0);
    if ($243) {
     _TIFFSwabShort($dircount);
    }
    $244 = $1;
    $245 = (($244) + 640|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = $1;
    $248 = (($247) + 628|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = $nextdir;
    $251 = (($250) + 2)|0;
    $252 = HEAP16[$dircount>>1]|0;
    $253 = $252&65535;
    $254 = ($253*12)|0;
    $255 = (($251) + ($254))|0;
    (FUNCTION_TABLE_iiiii[$246 & 255]($249,$255,0,0)|0);
    $256 = tempRet0;
    $257 = $1;
    $258 = (($257) + 632|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = $1;
    $261 = (($260) + 628|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = (FUNCTION_TABLE_iiii[$259 & 255]($262,$nextnextdir,4)|0);
    $264 = ($263|0)==(4);
    if (!($264)) {
     label = 33;
     break;
    }
    $268 = $1;
    $269 = (($268) + 12|0);
    $270 = HEAP32[$269>>2]|0;
    $271 = $270 & 128;
    $272 = ($271|0)!=(0);
    if ($272) {
     _TIFFSwabLong($nextnextdir);
    }
    $273 = HEAP32[$nextnextdir>>2]|0;
    $274 = ($273|0)==(0);
    if ($274) {
     label = 37;
     break;
    }
    $299 = HEAP32[$nextnextdir>>2]|0;
    $nextdir = $299;
   }
   if ((label|0) == 29) {
    $236 = $1;
    $237 = (($236) + 628|0);
    $238 = HEAP32[$237>>2]|0;
    _TIFFErrorExt($238,22152,21056,$vararg_buffer5);
    $0 = 0;
    $527 = $0;
    STACKTOP = sp;return ($527|0);
   }
   else if ((label|0) == 33) {
    $265 = $1;
    $266 = (($265) + 628|0);
    $267 = HEAP32[$266>>2]|0;
    _TIFFErrorExt($267,22152,21088,$vararg_buffer7);
    $0 = 0;
    $527 = $0;
    STACKTOP = sp;return ($527|0);
   }
   else if ((label|0) == 37) {
    $275 = $1;
    $276 = (($275) + 640|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = $1;
    $279 = (($278) + 628|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = $nextdir;
    $282 = (($281) + 2)|0;
    $283 = HEAP16[$dircount>>1]|0;
    $284 = $283&65535;
    $285 = ($284*12)|0;
    $286 = (($282) + ($285))|0;
    (FUNCTION_TABLE_iiiii[$277 & 255]($280,$286,0,0)|0);
    $287 = tempRet0;
    $288 = $1;
    $289 = (($288) + 636|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $1;
    $292 = (($291) + 628|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = (FUNCTION_TABLE_iiii[$290 & 255]($293,$m2,4)|0);
    $295 = ($294|0)==(4);
    if ($295) {
     break;
    } else {
     $296 = $1;
     $297 = (($296) + 628|0);
     $298 = HEAP32[$297>>2]|0;
     _TIFFErrorExt($298,22152,21120,$vararg_buffer9);
     $0 = 0;
     $527 = $0;
     STACKTOP = sp;return ($527|0);
    }
   }
  }
 } while(0);
 $0 = 1;
 $527 = $0;
 STACKTOP = sp;return ($527|0);
}
function _TIFFWriteDirectoryTagCheckedShort($tif,$ndir,$dir,$tag,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp + 12|0;
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $value;
 $5 = $4;
 HEAP16[$m>>1] = $5;
 $6 = $0;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 128;
 $10 = ($9|0)!=(0);
 if ($10) {
  _TIFFSwabShort($m);
 }
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = (_TIFFWriteDirectoryTagData($11,$12,$13,$14,3,1,2,$m)|0);
 STACKTOP = sp;return ($15|0);
}
function _TIFFWriteDirectoryTagCheckedLong($tif,$ndir,$dir,$tag,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp;
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $value;
 $5 = $4;
 HEAP32[$m>>2] = $5;
 $6 = $0;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 128;
 $10 = ($9|0)!=(0);
 if ($10) {
  _TIFFSwabLong($m);
 }
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = (_TIFFWriteDirectoryTagData($11,$12,$13,$14,4,1,4,$m)|0);
 STACKTOP = sp;return ($15|0);
}
function _TIFFWriteDirectoryTagCheckedRational($tif,$ndir,$dir,$tag,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $m = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp + 8|0;
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $value;
 $5 = $4;
 $6 = $5 >= 0.0;
 if (!($6)) {
  ___assert_fail((23392|0),(21768|0),2084,(23408|0));
  // unreachable;
 }
 $7 = $4;
 $8 = $7 <= 0.0;
 if ($8) {
  HEAP32[$m>>2] = 0;
  $9 = (($m) + 4|0);
  HEAP32[$9>>2] = 1;
 } else {
  $10 = $4;
  $11 = $4;
  $12 = (~~(($11))>>>0);
  $13 = (+($12>>>0));
  $14 = $10 == $13;
  if ($14) {
   $15 = $4;
   $16 = (~~(($15))>>>0);
   HEAP32[$m>>2] = $16;
   $17 = (($m) + 4|0);
   HEAP32[$17>>2] = 1;
  } else {
   $18 = $4;
   $19 = $18 < 1.0;
   if ($19) {
    $20 = $4;
    $21 = $20 * 4294967295.0;
    $22 = (~~(($21))>>>0);
    HEAP32[$m>>2] = $22;
    $23 = (($m) + 4|0);
    HEAP32[$23>>2] = -1;
   } else {
    HEAP32[$m>>2] = -1;
    $24 = $4;
    $25 = 4294967295.0 / $24;
    $26 = (~~(($25))>>>0);
    $27 = (($m) + 4|0);
    HEAP32[$27>>2] = $26;
   }
  }
 }
 $28 = $0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 128;
 $32 = ($31|0)!=(0);
 if (!($32)) {
  $34 = $0;
  $35 = $1;
  $36 = $2;
  $37 = $3;
  $38 = (_TIFFWriteDirectoryTagData($34,$35,$36,$37,5,1,8,$m)|0);
  STACKTOP = sp;return ($38|0);
 }
 _TIFFSwabLong($m);
 $33 = (($m) + 4|0);
 _TIFFSwabLong($33);
 $34 = $0;
 $35 = $1;
 $36 = $2;
 $37 = $3;
 $38 = (_TIFFWriteDirectoryTagData($34,$35,$36,$37,5,1,8,$m)|0);
 STACKTOP = sp;return ($38|0);
}
function _TIFFWriteDirectoryTagCheckedShortArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $4;
 $7 = ($6>>>0)<(2147483648);
 if (!($7)) {
  ___assert_fail((22952|0),(21768|0),1956,(23152|0));
  // unreachable;
 }
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 128;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $5;
  $14 = $4;
  _TIFFSwabArrayOfShort($13,$14);
 }
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $4;
 $21 = $20<<1;
 $22 = $5;
 $23 = (_TIFFWriteDirectoryTagData($15,$16,$17,$18,3,$19,$21,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function _TIFFWriteDirectoryTagCheckedLong8Array($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $4;
 $7 = ($6>>>0)<(536870912);
 if (!($7)) {
  ___assert_fail((22568|0),(21768|0),2047,(22832|0));
  // unreachable;
 }
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 524288;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  ___assert_fail((22632|0),(21768|0),2049,(22832|0));
  // unreachable;
 }
 $13 = $0;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 128;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $5;
  $19 = $4;
  _TIFFSwabArrayOfLong8($18,$19);
 }
 $20 = $0;
 $21 = $1;
 $22 = $2;
 $23 = $3;
 $24 = $4;
 $25 = $4;
 $26 = $25<<3;
 $27 = $5;
 $28 = (_TIFFWriteDirectoryTagData($20,$21,$22,$23,16,$24,$26,$27)|0);
 STACKTOP = sp;return ($28|0);
}
function _TIFFWriteDirectoryTagCheckedLongArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $4;
 $7 = ($6>>>0)<(1073741824);
 if (!($7)) {
  ___assert_fail((22360|0),(21768|0),2000,(22912|0));
  // unreachable;
 }
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 128;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $5;
  $14 = $4;
  _TIFFSwabArrayOfLong($13,$14);
 }
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $4;
 $21 = $20<<2;
 $22 = $5;
 $23 = (_TIFFWriteDirectoryTagData($15,$16,$17,$18,4,$19,$21,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function _TIFFWriteDirectoryTagCheckedRationalArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $m = 0, $na = 0, $nb = 0, $nc = 0, $o = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $5;
 $8 = $7<<1;
 $9 = $8<<2;
 $10 = (__TIFFmalloc($9)|0);
 $m = $10;
 $11 = $m;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $1;
  $14 = (($13) + 628|0);
  $15 = HEAP32[$14>>2]|0;
  _TIFFErrorExt($15,23192,22064,$vararg_buffer);
  $0 = 0;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 $16 = $6;
 $na = $16;
 $17 = $m;
 $nb = $17;
 $nc = 0;
 while(1) {
  $18 = $nc;
  $19 = $5;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $na;
  $22 = +HEAPF32[$21>>2];
  $23 = $22;
  $24 = $23 <= 0.0;
  if ($24) {
   $25 = $nb;
   HEAP32[$25>>2] = 0;
   $26 = $nb;
   $27 = (($26) + 4|0);
   HEAP32[$27>>2] = 1;
  } else {
   $28 = $na;
   $29 = +HEAPF32[$28>>2];
   $30 = $na;
   $31 = +HEAPF32[$30>>2];
   $32 = (~~(($31))>>>0);
   $33 = (+($32>>>0));
   $34 = $29 == $33;
   if ($34) {
    $35 = $na;
    $36 = +HEAPF32[$35>>2];
    $37 = (~~(($36))>>>0);
    $38 = $nb;
    HEAP32[$38>>2] = $37;
    $39 = $nb;
    $40 = (($39) + 4|0);
    HEAP32[$40>>2] = 1;
   } else {
    $41 = $na;
    $42 = +HEAPF32[$41>>2];
    $43 = $42;
    $44 = $43 < 1.0;
    if ($44) {
     $45 = $na;
     $46 = +HEAPF32[$45>>2];
     $47 = $46 * 4294967296.0;
     $48 = (~~(($47))>>>0);
     $49 = $nb;
     HEAP32[$49>>2] = $48;
     $50 = $nb;
     $51 = (($50) + 4|0);
     HEAP32[$51>>2] = -1;
    } else {
     $52 = $nb;
     HEAP32[$52>>2] = -1;
     $53 = $na;
     $54 = +HEAPF32[$53>>2];
     $55 = 4294967296.0 / $54;
     $56 = (~~(($55))>>>0);
     $57 = $nb;
     $58 = (($57) + 4|0);
     HEAP32[$58>>2] = $56;
    }
   }
  }
  $59 = $na;
  $60 = (($59) + 4|0);
  $na = $60;
  $61 = $nb;
  $62 = (($61) + 8|0);
  $nb = $62;
  $63 = $nc;
  $64 = (($63) + 1)|0;
  $nc = $64;
 }
 $65 = $1;
 $66 = (($65) + 12|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 & 128;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $m;
  $71 = $5;
  $72 = $71<<1;
  _TIFFSwabArrayOfLong($70,$72);
 }
 $73 = $1;
 $74 = $2;
 $75 = $3;
 $76 = $4;
 $77 = $5;
 $78 = $5;
 $79 = $78<<3;
 $80 = $m;
 $81 = (_TIFFWriteDirectoryTagData($73,$74,$75,$76,5,$77,$79,$80)|0);
 $o = $81;
 $82 = $m;
 __TIFFfree($82);
 $83 = $o;
 $0 = $83;
 $84 = $0;
 STACKTOP = sp;return ($84|0);
}
function _TIFFWriteDirectoryTagCheckedAscii($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $4;
 $12 = $5;
 $13 = (_TIFFWriteDirectoryTagData($6,$7,$8,$9,2,$10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _TIFFWriteDirectoryTagCheckedIfdArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $4;
 $7 = ($6>>>0)<(1073741824);
 if (!($7)) {
  ___assert_fail((22360|0),(21768|0),2275,(22384|0));
  // unreachable;
 }
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 128;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $5;
  $14 = $4;
  _TIFFSwabArrayOfLong($13,$14);
 }
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $4;
 $21 = $20<<2;
 $22 = $5;
 $23 = (_TIFFWriteDirectoryTagData($15,$16,$17,$18,13,$19,$21,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function _TIFFWriteDirectoryTagCheckedIfd8Array($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $4;
 $7 = ($6>>>0)<(536870912);
 if (!($7)) {
  ___assert_fail((22568|0),(21768|0),2285,(22592|0));
  // unreachable;
 }
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 524288;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  ___assert_fail((22632|0),(21768|0),2287,(22592|0));
  // unreachable;
 }
 $13 = $0;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 128;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $5;
  $19 = $4;
  _TIFFSwabArrayOfLong8($18,$19);
 }
 $20 = $0;
 $21 = $1;
 $22 = $2;
 $23 = $3;
 $24 = $4;
 $25 = $4;
 $26 = $25<<3;
 $27 = $5;
 $28 = (_TIFFWriteDirectoryTagData($20,$21,$22,$23,18,$24,$26,$27)|0);
 STACKTOP = sp;return ($28|0);
}
function _TIFFWriteDirectoryTagCheckedUndefinedArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $4;
 $12 = $5;
 $13 = (_TIFFWriteDirectoryTagData($6,$7,$8,$9,7,$10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _TIFFWriteDirectoryTagCheckedByteArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $4;
 $12 = $5;
 $13 = (_TIFFWriteDirectoryTagData($6,$7,$8,$9,1,$10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _TIFFWriteDirectoryTagCheckedSbyteArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $4;
 $12 = $5;
 $13 = (_TIFFWriteDirectoryTagData($6,$7,$8,$9,6,$10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _TIFFWriteDirectoryTagCheckedSshortArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $4;
 $7 = ($6>>>0)<(2147483648);
 if (!($7)) {
  ___assert_fail((22952|0),(21768|0),1979,(22976|0));
  // unreachable;
 }
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 128;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $5;
  $14 = $4;
  _TIFFSwabArrayOfShort($13,$14);
 }
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $4;
 $21 = $20<<1;
 $22 = $5;
 $23 = (_TIFFWriteDirectoryTagData($15,$16,$17,$18,8,$19,$21,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function _TIFFWriteDirectoryTagCheckedSlongArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $4;
 $7 = ($6>>>0)<(1073741824);
 if (!($7)) {
  ___assert_fail((22360|0),(21768|0),2023,(22872|0));
  // unreachable;
 }
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 128;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $5;
  $14 = $4;
  _TIFFSwabArrayOfLong($13,$14);
 }
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $4;
 $21 = $20<<2;
 $22 = $5;
 $23 = (_TIFFWriteDirectoryTagData($15,$16,$17,$18,9,$19,$21,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function _TIFFWriteDirectoryTagCheckedSlong8Array($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $4;
 $7 = ($6>>>0)<(536870912);
 if (!($7)) {
  ___assert_fail((22568|0),(21768|0),2072,(22792|0));
  // unreachable;
 }
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 524288;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  ___assert_fail((22632|0),(21768|0),2074,(22792|0));
  // unreachable;
 }
 $13 = $0;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 128;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $5;
  $19 = $4;
  _TIFFSwabArrayOfLong8($18,$19);
 }
 $20 = $0;
 $21 = $1;
 $22 = $2;
 $23 = $3;
 $24 = $4;
 $25 = $4;
 $26 = $25<<3;
 $27 = $5;
 $28 = (_TIFFWriteDirectoryTagData($20,$21,$22,$23,17,$24,$26,$27)|0);
 STACKTOP = sp;return ($28|0);
}
function _TIFFWriteDirectoryTagCheckedSrationalArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $m = 0, $na = 0, $nb = 0, $nc = 0;
 var $o = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $count;
 $6 = $value;
 $7 = $5;
 $8 = $7<<1;
 $9 = $8<<2;
 $10 = (__TIFFmalloc($9)|0);
 $m = $10;
 $11 = $m;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $1;
  $14 = (($13) + 628|0);
  $15 = HEAP32[$14>>2]|0;
  _TIFFErrorExt($15,22744,22064,$vararg_buffer);
  $0 = 0;
  $115 = $0;
  STACKTOP = sp;return ($115|0);
 }
 $16 = $6;
 $na = $16;
 $17 = $m;
 $nb = $17;
 $nc = 0;
 while(1) {
  $18 = $nc;
  $19 = $5;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $na;
  $22 = +HEAPF32[$21>>2];
  $23 = $22;
  $24 = $23 < 0.0;
  if ($24) {
   $25 = $na;
   $26 = +HEAPF32[$25>>2];
   $27 = $na;
   $28 = +HEAPF32[$27>>2];
   $29 = (~~(($28)));
   $30 = (+($29|0));
   $31 = $26 == $30;
   if ($31) {
    $32 = $na;
    $33 = +HEAPF32[$32>>2];
    $34 = (~~(($33)));
    $35 = $nb;
    HEAP32[$35>>2] = $34;
    $36 = $nb;
    $37 = (($36) + 4|0);
    HEAP32[$37>>2] = 1;
   } else {
    $38 = $na;
    $39 = +HEAPF32[$38>>2];
    $40 = $39;
    $41 = $40 > -1.0;
    if ($41) {
     $42 = $na;
     $43 = +HEAPF32[$42>>2];
     $44 = -$43;
     $45 = $44 * 2147483648.0;
     $46 = (~~(($45)));
     $47 = (0 - ($46))|0;
     $48 = $nb;
     HEAP32[$48>>2] = $47;
     $49 = $nb;
     $50 = (($49) + 4|0);
     HEAP32[$50>>2] = 2147483647;
    } else {
     $51 = $nb;
     HEAP32[$51>>2] = -2147483647;
     $52 = $na;
     $53 = +HEAPF32[$52>>2];
     $54 = -$53;
     $55 = 2147483648.0 / $54;
     $56 = (~~(($55)));
     $57 = $nb;
     $58 = (($57) + 4|0);
     HEAP32[$58>>2] = $56;
    }
   }
  } else {
   $59 = $na;
   $60 = +HEAPF32[$59>>2];
   $61 = $na;
   $62 = +HEAPF32[$61>>2];
   $63 = (~~(($62)));
   $64 = (+($63|0));
   $65 = $60 == $64;
   if ($65) {
    $66 = $na;
    $67 = +HEAPF32[$66>>2];
    $68 = (~~(($67)));
    $69 = $nb;
    HEAP32[$69>>2] = $68;
    $70 = $nb;
    $71 = (($70) + 4|0);
    HEAP32[$71>>2] = 1;
   } else {
    $72 = $na;
    $73 = +HEAPF32[$72>>2];
    $74 = $73;
    $75 = $74 < 1.0;
    if ($75) {
     $76 = $na;
     $77 = +HEAPF32[$76>>2];
     $78 = $77 * 2147483648.0;
     $79 = (~~(($78)));
     $80 = $nb;
     HEAP32[$80>>2] = $79;
     $81 = $nb;
     $82 = (($81) + 4|0);
     HEAP32[$82>>2] = 2147483647;
    } else {
     $83 = $nb;
     HEAP32[$83>>2] = 2147483647;
     $84 = $na;
     $85 = +HEAPF32[$84>>2];
     $86 = 2147483648.0 / $85;
     $87 = (~~(($86)));
     $88 = $nb;
     $89 = (($88) + 4|0);
     HEAP32[$89>>2] = $87;
    }
   }
  }
  $90 = $na;
  $91 = (($90) + 4|0);
  $na = $91;
  $92 = $nb;
  $93 = (($92) + 8|0);
  $nb = $93;
  $94 = $nc;
  $95 = (($94) + 1)|0;
  $nc = $95;
 }
 $96 = $1;
 $97 = (($96) + 12|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $98 & 128;
 $100 = ($99|0)!=(0);
 if ($100) {
  $101 = $m;
  $102 = $5;
  $103 = $102<<1;
  _TIFFSwabArrayOfLong($101,$103);
 }
 $104 = $1;
 $105 = $2;
 $106 = $3;
 $107 = $4;
 $108 = $5;
 $109 = $5;
 $110 = $109<<3;
 $111 = $m;
 $112 = (_TIFFWriteDirectoryTagData($104,$105,$106,$107,10,$108,$110,$111)|0);
 $o = $112;
 $113 = $m;
 __TIFFfree($113);
 $114 = $o;
 $0 = $114;
 $115 = $0;
 STACKTOP = sp;return ($115|0);
}
function _TIFFWriteDirectoryTagCheckedFloatArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $4;
 $7 = ($6>>>0)<(1073741824);
 if (!($7)) {
  ___assert_fail((22360|0),(21768|0),2239,(22704|0));
  // unreachable;
 }
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 128;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $5;
  $14 = $4;
  _TIFFSwabArrayOfFloat($13,$14);
 }
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $4;
 $21 = $20<<2;
 $22 = $5;
 $23 = (_TIFFWriteDirectoryTagData($15,$16,$17,$18,11,$19,$21,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function _TIFFWriteDirectoryTagCheckedDoubleArray($tif,$ndir,$dir,$tag,$count,$value) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $count = $count|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $ndir;
 $2 = $dir;
 $3 = $tag;
 $4 = $count;
 $5 = $value;
 $6 = $4;
 $7 = ($6>>>0)<(536870912);
 if (!($7)) {
  ___assert_fail((22568|0),(21768|0),2264,(22664|0));
  // unreachable;
 }
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 128;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $5;
  $14 = $4;
  _TIFFSwabArrayOfDouble($13,$14);
 }
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $4;
 $21 = $20<<3;
 $22 = $5;
 $23 = (_TIFFWriteDirectoryTagData($15,$16,$17,$18,12,$19,$21,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function _TIFFWriteDirectoryTagData($tif,$ndir,$dir,$tag,$datatype,$count,$datalength,$data) {
 $tif = $tif|0;
 $ndir = $ndir|0;
 $dir = $dir|0;
 $tag = $tag|0;
 $datatype = $datatype|0;
 $count = $count|0;
 $datalength = $datalength|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $m = 0, $n = 0, $na = 0, $nb = 0, $o = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $na = sp + 32|0;
 $nb = sp;
 $o = sp + 76|0;
 $1 = $tif;
 $2 = $ndir;
 $3 = $dir;
 $4 = $tag;
 $5 = $datatype;
 $6 = $count;
 $7 = $datalength;
 $8 = $data;
 $m = 0;
 while(1) {
  $9 = $m;
  $10 = $2;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $m;
  $14 = $3;
  $15 = (($14) + (($13*24)|0)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = $4;
  $19 = $18&65535;
  $20 = ($17|0)!=($19|0);
  if (!($20)) {
   label = 4;
   break;
  }
  $21 = $m;
  $22 = $3;
  $23 = (($22) + (($21*24)|0)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = $4;
  $27 = $26&65535;
  $28 = ($25|0)>($27|0);
  if ($28) {
   label = 6;
   break;
  }
  $29 = $m;
  $30 = (($29) + 1)|0;
  $m = $30;
 }
 if ((label|0) == 4) {
  ___assert_fail((22456|0),(21768|0),2301,(22480|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
 }
 $31 = $m;
 $32 = $2;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($31>>>0)<($33>>>0);
 if ($34) {
  $35 = $2;
  $36 = HEAP32[$35>>2]|0;
  $n = $36;
  while(1) {
   $37 = $n;
   $38 = $m;
   $39 = ($37>>>0)>($38>>>0);
   if (!($39)) {
    break;
   }
   $40 = $n;
   $41 = $3;
   $42 = (($41) + (($40*24)|0)|0);
   $43 = $n;
   $44 = (($43) - 1)|0;
   $45 = $3;
   $46 = (($45) + (($44*24)|0)|0);
   ;HEAP32[$42+0>>2]=HEAP32[$46+0>>2]|0;HEAP32[$42+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$42+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$42+12>>2]=HEAP32[$46+12>>2]|0;HEAP32[$42+16>>2]=HEAP32[$46+16>>2]|0;HEAP32[$42+20>>2]=HEAP32[$46+20>>2]|0;
   $47 = $n;
   $48 = (($47) + -1)|0;
   $n = $48;
  }
 }
 $49 = $4;
 $50 = $m;
 $51 = $3;
 $52 = (($51) + (($50*24)|0)|0);
 HEAP16[$52>>1] = $49;
 $53 = $5;
 $54 = $m;
 $55 = $3;
 $56 = (($55) + (($54*24)|0)|0);
 $57 = (($56) + 2|0);
 HEAP16[$57>>1] = $53;
 $58 = $6;
 $59 = $m;
 $60 = $3;
 $61 = (($60) + (($59*24)|0)|0);
 $62 = (($61) + 8|0);
 $63 = $62;
 $64 = $63;
 HEAP32[$64>>2] = $58;
 $65 = (($63) + 4)|0;
 $66 = $65;
 HEAP32[$66>>2] = 0;
 $67 = $m;
 $68 = $3;
 $69 = (($68) + (($67*24)|0)|0);
 $70 = (($69) + 16|0);
 $71 = $70;
 $72 = $71;
 HEAP32[$72>>2] = 0;
 $73 = (($71) + 4)|0;
 $74 = $73;
 HEAP32[$74>>2] = 0;
 $75 = $7;
 $76 = $1;
 $77 = (($76) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $78 & 524288;
 $80 = ($79|0)!=(0);
 $81 = $80 ? 8 : 4;
 $82 = ($75>>>0)<=($81>>>0);
 do {
  if ($82) {
   $83 = $m;
   $84 = $3;
   $85 = (($84) + (($83*24)|0)|0);
   $86 = (($85) + 16|0);
   $87 = $8;
   $88 = $7;
   __TIFFmemcpy($86,$87,$88);
  } else {
   $89 = $1;
   $90 = (($89) + 464|0);
   $91 = $90;
   $92 = $91;
   $93 = HEAP32[$92>>2]|0;
   $94 = (($91) + 4)|0;
   $95 = $94;
   $96 = HEAP32[$95>>2]|0;
   $97 = $na;
   $98 = $97;
   HEAP32[$98>>2] = $93;
   $99 = (($97) + 4)|0;
   $100 = $99;
   HEAP32[$100>>2] = $96;
   $101 = $na;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = (($101) + 4)|0;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $107 = $7;
   $108 = (_i64Add(($103|0),($106|0),($107|0),0)|0);
   $109 = tempRet0;
   $110 = $nb;
   $111 = $110;
   HEAP32[$111>>2] = $108;
   $112 = (($110) + 4)|0;
   $113 = $112;
   HEAP32[$113>>2] = $109;
   $114 = $1;
   $115 = (($114) + 12|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $116 & 524288;
   $118 = ($117|0)!=(0);
   if (!($118)) {
    $119 = $nb;
    $120 = $119;
    $121 = HEAP32[$120>>2]|0;
    $122 = (($119) + 4)|0;
    $123 = $122;
    $124 = HEAP32[$123>>2]|0;
    $125 = $nb;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = 0;
   }
   $129 = $nb;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + 4)|0;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = $na;
   $136 = $135;
   $137 = HEAP32[$136>>2]|0;
   $138 = (($135) + 4)|0;
   $139 = $138;
   $140 = HEAP32[$139>>2]|0;
   $141 = ($134>>>0)<($140>>>0);
   $142 = ($131>>>0)<($137>>>0);
   $143 = ($134|0)==($140|0);
   $144 = $143 & $142;
   $145 = $141 | $144;
   if (!($145)) {
    $146 = $nb;
    $147 = $146;
    $148 = HEAP32[$147>>2]|0;
    $149 = (($146) + 4)|0;
    $150 = $149;
    $151 = HEAP32[$150>>2]|0;
    $152 = $7;
    $153 = ($151>>>0)<(0);
    $154 = ($148>>>0)<($152>>>0);
    $155 = ($151|0)==(0);
    $156 = $155 & $154;
    $157 = $153 | $156;
    if (!($157)) {
     $161 = $1;
     $162 = (($161) + 640|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $1;
     $165 = (($164) + 628|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = $na;
     $168 = $167;
     $169 = HEAP32[$168>>2]|0;
     $170 = (($167) + 4)|0;
     $171 = $170;
     $172 = HEAP32[$171>>2]|0;
     $173 = (FUNCTION_TABLE_iiiii[$163 & 255]($166,$169,$172,0)|0);
     $174 = tempRet0;
     $175 = $na;
     $176 = $175;
     $177 = HEAP32[$176>>2]|0;
     $178 = (($175) + 4)|0;
     $179 = $178;
     $180 = HEAP32[$179>>2]|0;
     $181 = ($173|0)==($177|0);
     $182 = ($174|0)==($180|0);
     $183 = $181 & $182;
     if (!($183)) {
      $184 = $1;
      $185 = (($184) + 628|0);
      $186 = HEAP32[$185>>2]|0;
      _TIFFErrorExt($186,22424,22512,$vararg_buffer1);
      $0 = 0;
      $287 = $0;
      STACKTOP = sp;return ($287|0);
     }
     $187 = $7;
     $188 = ($187>>>0)<(2147483648);
     if (!($188)) {
      ___assert_fail((22544|0),(21768|0),2335,(22480|0));
      // unreachable;
     }
     $189 = $1;
     $190 = (($189) + 636|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = $1;
     $193 = (($192) + 628|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = $8;
     $196 = $7;
     $197 = (FUNCTION_TABLE_iiii[$191 & 255]($194,$195,$196)|0);
     $198 = $7;
     $199 = ($197|0)==($198|0);
     if (!($199)) {
      $200 = $1;
      $201 = (($200) + 628|0);
      $202 = HEAP32[$201>>2]|0;
      _TIFFErrorExt($202,22424,22512,$vararg_buffer3);
      $0 = 0;
      $287 = $0;
      STACKTOP = sp;return ($287|0);
     }
     $203 = $nb;
     $204 = $203;
     $205 = HEAP32[$204>>2]|0;
     $206 = (($203) + 4)|0;
     $207 = $206;
     $208 = HEAP32[$207>>2]|0;
     $209 = $1;
     $210 = (($209) + 464|0);
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $205;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $208;
     $215 = $1;
     $216 = (($215) + 464|0);
     $217 = $216;
     $218 = $217;
     $219 = HEAP32[$218>>2]|0;
     $220 = (($217) + 4)|0;
     $221 = $220;
     $222 = HEAP32[$221>>2]|0;
     $223 = $219 & 1;
     $224 = ($223|0)!=(0);
     $225 = (0)!=(0);
     $226 = $224 | $225;
     if ($226) {
      $227 = $1;
      $228 = (($227) + 464|0);
      $229 = $228;
      $230 = $229;
      $231 = HEAP32[$230>>2]|0;
      $232 = (($229) + 4)|0;
      $233 = $232;
      $234 = HEAP32[$233>>2]|0;
      $235 = (_i64Add(($231|0),($234|0),1,0)|0);
      $236 = tempRet0;
      $237 = $228;
      $238 = $237;
      HEAP32[$238>>2] = $235;
      $239 = (($237) + 4)|0;
      $240 = $239;
      HEAP32[$240>>2] = $236;
     }
     $241 = $1;
     $242 = (($241) + 12|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = $243 & 524288;
     $245 = ($244|0)!=(0);
     if ($245) {
      $261 = $na;
      $262 = $261;
      $263 = HEAP32[$262>>2]|0;
      $264 = (($261) + 4)|0;
      $265 = $264;
      $266 = HEAP32[$265>>2]|0;
      $267 = $m;
      $268 = $3;
      $269 = (($268) + (($267*24)|0)|0);
      $270 = (($269) + 16|0);
      $271 = $270;
      $272 = $271;
      HEAP32[$272>>2] = $263;
      $273 = (($271) + 4)|0;
      $274 = $273;
      HEAP32[$274>>2] = $266;
      $275 = $1;
      $276 = (($275) + 12|0);
      $277 = HEAP32[$276>>2]|0;
      $278 = $277 & 128;
      $279 = ($278|0)!=(0);
      if ($279) {
       $280 = $m;
       $281 = $3;
       $282 = (($281) + (($280*24)|0)|0);
       $283 = (($282) + 16|0);
       _TIFFSwabLong8($283);
      }
     } else {
      $246 = $na;
      $247 = $246;
      $248 = HEAP32[$247>>2]|0;
      $249 = (($246) + 4)|0;
      $250 = $249;
      $251 = HEAP32[$250>>2]|0;
      HEAP32[$o>>2] = $248;
      $252 = $1;
      $253 = (($252) + 12|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = $254 & 128;
      $256 = ($255|0)!=(0);
      if ($256) {
       _TIFFSwabLong($o);
      }
      $257 = $m;
      $258 = $3;
      $259 = (($258) + (($257*24)|0)|0);
      $260 = (($259) + 16|0);
      __TIFFmemcpy($260,$o,4);
     }
     break;
    }
   }
   $158 = $1;
   $159 = (($158) + 628|0);
   $160 = HEAP32[$159>>2]|0;
   _TIFFErrorExt($160,22424,22080,$vararg_buffer);
   $0 = 0;
   $287 = $0;
   STACKTOP = sp;return ($287|0);
  }
 } while(0);
 $284 = $2;
 $285 = HEAP32[$284>>2]|0;
 $286 = (($285) + 1)|0;
 HEAP32[$284>>2] = $286;
 $0 = 1;
 $287 = $0;
 STACKTOP = sp;return ($287|0);
}
function _NotConfigured($tif,$scheme) {
 $tif = $tif|0;
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $scheme;
 $2 = $0;
 $3 = (($2) + 504|0);
 HEAP32[$3>>2] = 83;
 $4 = $0;
 $5 = (($4) + 500|0);
 HEAP32[$5>>2] = 0;
 $6 = $0;
 $7 = (($6) + 508|0);
 HEAP32[$7>>2] = 83;
 $8 = $0;
 $9 = (($8) + 520|0);
 HEAP32[$9>>2] = 0;
 $10 = $0;
 $11 = (($10) + 516|0);
 HEAP32[$11>>2] = 83;
 STACKTOP = sp;return 1;
}
function __notConfigured($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $c = 0, $compression_code = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $compression_code = sp + 20|0;
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 40|0);
 $3 = (($2) + 48|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = (_TIFFFindCODEC($4)|0);
 $c = $5;
 $6 = $0;
 $7 = (($6) + 40|0);
 $8 = (($7) + 48|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 HEAP32[$vararg_buffer>>2] = $10;
 (_sprintf($compression_code,23912,$vararg_buffer)|0);
 $11 = $0;
 $12 = (($11) + 628|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 $16 = $c;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $c;
  $19 = HEAP32[$18>>2]|0;
  $20 = $19;
  HEAP32[$vararg_buffer1>>2] = $20;
  _TIFFErrorExt($13,$15,23920,$vararg_buffer1);
  STACKTOP = sp;return 0;
 } else {
  $20 = $compression_code;
  HEAP32[$vararg_buffer1>>2] = $20;
  _TIFFErrorExt($13,$15,23920,$vararg_buffer1);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _TIFFInitDumpMode($tif,$scheme) {
 $tif = $tif|0;
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $scheme;
 $2 = $0;
 $3 = (($2) + 504|0);
 HEAP32[$3>>2] = 84;
 $4 = $0;
 $5 = (($4) + 532|0);
 HEAP32[$5>>2] = 85;
 $6 = $0;
 $7 = (($6) + 540|0);
 HEAP32[$7>>2] = 85;
 $8 = $0;
 $9 = (($8) + 548|0);
 HEAP32[$9>>2] = 85;
 $10 = $0;
 $11 = (($10) + 536|0);
 HEAP32[$11>>2] = 86;
 $12 = $0;
 $13 = (($12) + 544|0);
 HEAP32[$13>>2] = 86;
 $14 = $0;
 $15 = (($14) + 552|0);
 HEAP32[$15>>2] = 86;
 $16 = $0;
 $17 = (($16) + 560|0);
 HEAP32[$17>>2] = 87;
 STACKTOP = sp;return 1;
}
function _DumpFixupTags($tif) {
 $tif = $tif|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 STACKTOP = sp;return 1;
}
function _DumpModeDecode($tif,$buf,$cc,$s) {
 $tif = $tif|0;
 $buf = $buf|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $buf;
 $3 = $cc;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 608|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = ($7|0)<($8|0);
 if ($9) {
  $10 = $1;
  $11 = (($10) + 628|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = (($13) + 444|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = (($16) + 608|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)<(0);
  $20 = $19 << 31 >> 31;
  $21 = $3;
  $22 = ($21|0)<(0);
  $23 = $22 << 31 >> 31;
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  $24 = $vararg_ptr1;
  $25 = $24;
  HEAP32[$25>>2] = $18;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $20;
  $vararg_ptr2 = (($vararg_buffer) + 12|0);
  $28 = $vararg_ptr2;
  $29 = $28;
  HEAP32[$29>>2] = $21;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $23;
  _TIFFErrorExt($12,24008,24024,$vararg_buffer);
  $0 = 0;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 $32 = $1;
 $33 = (($32) + 604|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $2;
 $36 = ($34|0)!=($35|0);
 if ($36) {
  $37 = $2;
  $38 = $1;
  $39 = (($38) + 604|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $3;
  __TIFFmemcpy($37,$40,$41);
 }
 $42 = $3;
 $43 = $1;
 $44 = (($43) + 604|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($42)|0);
 HEAP32[$44>>2] = $46;
 $47 = $3;
 $48 = $1;
 $49 = (($48) + 608|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) - ($47))|0;
 HEAP32[$49>>2] = $51;
 $0 = 1;
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function _DumpModeEncode($tif,$pp,$cc,$s) {
 $tif = $tif|0;
 $pp = $pp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $pp;
 $3 = $cc;
 $4 = $s;
 while(1) {
  $5 = $3;
  $6 = ($5|0)>(0);
  if (!($6)) {
   label = 13;
   break;
  }
  $7 = $3;
  $n = $7;
  $8 = $1;
  $9 = (($8) + 608|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $n;
  $12 = (($10) + ($11))|0;
  $13 = $1;
  $14 = (($13) + 592|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)>($15|0);
  if ($16) {
   $17 = $1;
   $18 = (($17) + 592|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $1;
   $21 = (($20) + 608|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($19) - ($22))|0;
   $n = $23;
  }
  $24 = $n;
  $25 = ($24|0)>(0);
  if (!($25)) {
   label = 6;
   break;
  }
  $26 = $1;
  $27 = (($26) + 604|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $2;
  $30 = ($28|0)!=($29|0);
  if ($30) {
   $31 = $1;
   $32 = (($31) + 604|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $2;
   $35 = $n;
   __TIFFmemcpy($33,$34,$35);
  }
  $36 = $n;
  $37 = $1;
  $38 = (($37) + 604|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($36)|0);
  HEAP32[$38>>2] = $40;
  $41 = $n;
  $42 = $1;
  $43 = (($42) + 608|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($41))|0;
  HEAP32[$43>>2] = $45;
  $46 = $n;
  $47 = $2;
  $48 = (($47) + ($46)|0);
  $2 = $48;
  $49 = $n;
  $50 = $3;
  $51 = (($50) - ($49))|0;
  $3 = $51;
  $52 = $1;
  $53 = (($52) + 608|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $1;
  $56 = (($55) + 592|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($54|0)>=($57|0);
  if ($58) {
   $59 = $1;
   $60 = (_TIFFFlushData1($59)|0);
   $61 = ($60|0)!=(0);
   if (!($61)) {
    label = 11;
    break;
   }
  }
 }
 if ((label|0) == 6) {
  ___assert_fail((23968|0),(23976|0),55,(23992|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 13) {
  $0 = 1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _DumpModeSeek($tif,$nrows) {
 $tif = $tif|0;
 $nrows = $nrows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $nrows;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 580|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($2, $5)|0;
 $7 = $0;
 $8 = (($7) + 604|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($6)|0);
 HEAP32[$8>>2] = $10;
 $11 = $1;
 $12 = $0;
 $13 = (($12) + 580|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = Math_imul($11, $14)|0;
 $16 = $0;
 $17 = (($16) + 608|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) - ($15))|0;
 HEAP32[$17>>2] = $19;
 STACKTOP = sp;return 1;
}
function __TIFFFax3fillruns($buf,$runs,$erun,$lastx) {
 $buf = $buf|0;
 $runs = $runs|0;
 $erun = $erun|0;
 $lastx = $lastx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bx = 0, $cp = 0, $lp = 0, $n = 0, $nw = 0, $run = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $runs;
 $2 = $erun;
 $3 = $lastx;
 $4 = $2;
 $5 = $1;
 $6 = $4;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = (($8|0) / 4)&-1;
 $10 = $9 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $2;
  $13 = (($12) + 4|0);
  $2 = $13;
  HEAP32[$12>>2] = 0;
 }
 $x = 0;
 while(1) {
  $14 = $1;
  $15 = $2;
  $16 = ($14>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $1;
  $18 = HEAP32[$17>>2]|0;
  $run = $18;
  $19 = $x;
  $20 = $run;
  $21 = (($19) + ($20))|0;
  $22 = $3;
  $23 = ($21>>>0)>($22>>>0);
  if ($23) {
   label = 7;
  } else {
   $24 = $run;
   $25 = $3;
   $26 = ($24>>>0)>($25>>>0);
   if ($26) {
    label = 7;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $27 = $3;
   $28 = $x;
   $29 = (($27) - ($28))|0;
   $30 = $1;
   HEAP32[$30>>2] = $29;
   $run = $29;
  }
  $31 = $run;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $0;
   $34 = $x;
   $35 = $34 >>> 3;
   $36 = (($33) + ($35)|0);
   $cp = $36;
   $37 = $x;
   $38 = $37 & 7;
   $bx = $38;
   $39 = $run;
   $40 = $bx;
   $41 = (8 - ($40))|0;
   $42 = ($39>>>0)>($41>>>0);
   if ($42) {
    $43 = $bx;
    $44 = ($43|0)!=(0);
    if ($44) {
     $45 = $bx;
     $46 = (8 - ($45))|0;
     $47 = 255 << $46;
     $48 = $cp;
     $49 = (($48) + 1|0);
     $cp = $49;
     $50 = HEAP8[$48>>0]|0;
     $51 = $50&255;
     $52 = $51 & $47;
     $53 = $52&255;
     HEAP8[$48>>0] = $53;
     $54 = $bx;
     $55 = (8 - ($54))|0;
     $56 = $run;
     $57 = (($56) - ($55))|0;
     $run = $57;
    }
    $58 = $run;
    $59 = $58 >>> 3;
    $n = $59;
    $60 = ($59|0)!=(0);
    if ($60) {
     $61 = $n;
     $62 = (($61>>>0) / 4)&-1;
     $63 = ($62>>>0)>(1);
     if ($63) {
      while(1) {
       $64 = $n;
       $65 = ($64|0)!=(0);
       if (!($65)) {
        break;
       }
       $66 = $cp;
       $67 = $66;
       $68 = $67 & 3;
       $69 = ($68|0)==(0);
       if ($69) {
        break;
       }
       $70 = $cp;
       $71 = (($70) + 1|0);
       $cp = $71;
       HEAP8[$70>>0] = 0;
       $72 = $n;
       $73 = (($72) + -1)|0;
       $n = $73;
      }
      $74 = $cp;
      $lp = $74;
      $75 = $n;
      $76 = (($75>>>0) / 4)&-1;
      $nw = $76;
      $77 = $nw;
      $78 = $77<<2;
      $79 = $n;
      $80 = (($79) - ($78))|0;
      $n = $80;
      while(1) {
       $81 = $lp;
       $82 = (($81) + 4|0);
       $lp = $82;
       HEAP32[$81>>2] = 0;
       $83 = $nw;
       $84 = (($83) + -1)|0;
       $nw = $84;
       $85 = ($84|0)!=(0);
       if (!($85)) {
        break;
       }
      }
      $86 = $lp;
      $cp = $86;
     }
     $87 = $n;
     switch ($87|0) {
     case 2:  {
      label = 37;
      break;
     }
     case 8:  {
      label = 31;
      break;
     }
     case 1:  {
      label = 38;
      break;
     }
     case 3:  {
      label = 36;
      break;
     }
     case 12:  {
      label = 27;
      break;
     }
     case 0:  {
      label = 39;
      break;
     }
     case 7:  {
      label = 32;
      break;
     }
     case 10:  {
      label = 29;
      break;
     }
     case 13:  {
      label = 26;
      break;
     }
     case 15:  {
      $88 = $cp;
      $89 = (($88) + 14|0);
      HEAP8[$89>>0] = 0;
      label = 25;
      break;
     }
     case 9:  {
      label = 30;
      break;
     }
     case 11:  {
      label = 28;
      break;
     }
     case 6:  {
      label = 33;
      break;
     }
     case 4:  {
      label = 35;
      break;
     }
     case 5:  {
      label = 34;
      break;
     }
     case 14:  {
      label = 25;
      break;
     }
     default: {
     }
     }
     if ((label|0) == 25) {
      label = 0;
      $90 = $cp;
      $91 = (($90) + 13|0);
      HEAP8[$91>>0] = 0;
      label = 26;
     }
     if ((label|0) == 26) {
      label = 0;
      $92 = $cp;
      $93 = (($92) + 12|0);
      HEAP8[$93>>0] = 0;
      label = 27;
     }
     if ((label|0) == 27) {
      label = 0;
      $94 = $cp;
      $95 = (($94) + 11|0);
      HEAP8[$95>>0] = 0;
      label = 28;
     }
     if ((label|0) == 28) {
      label = 0;
      $96 = $cp;
      $97 = (($96) + 10|0);
      HEAP8[$97>>0] = 0;
      label = 29;
     }
     if ((label|0) == 29) {
      label = 0;
      $98 = $cp;
      $99 = (($98) + 9|0);
      HEAP8[$99>>0] = 0;
      label = 30;
     }
     if ((label|0) == 30) {
      label = 0;
      $100 = $cp;
      $101 = (($100) + 8|0);
      HEAP8[$101>>0] = 0;
      label = 31;
     }
     if ((label|0) == 31) {
      label = 0;
      $102 = $cp;
      $103 = (($102) + 7|0);
      HEAP8[$103>>0] = 0;
      label = 32;
     }
     if ((label|0) == 32) {
      label = 0;
      $104 = $cp;
      $105 = (($104) + 6|0);
      HEAP8[$105>>0] = 0;
      label = 33;
     }
     if ((label|0) == 33) {
      label = 0;
      $106 = $cp;
      $107 = (($106) + 5|0);
      HEAP8[$107>>0] = 0;
      label = 34;
     }
     if ((label|0) == 34) {
      label = 0;
      $108 = $cp;
      $109 = (($108) + 4|0);
      HEAP8[$109>>0] = 0;
      label = 35;
     }
     if ((label|0) == 35) {
      label = 0;
      $110 = $cp;
      $111 = (($110) + 3|0);
      HEAP8[$111>>0] = 0;
      label = 36;
     }
     if ((label|0) == 36) {
      label = 0;
      $112 = $cp;
      $113 = (($112) + 2|0);
      HEAP8[$113>>0] = 0;
      label = 37;
     }
     if ((label|0) == 37) {
      label = 0;
      $114 = $cp;
      $115 = (($114) + 1|0);
      HEAP8[$115>>0] = 0;
      label = 38;
     }
     if ((label|0) == 38) {
      label = 0;
      $116 = $cp;
      HEAP8[$116>>0] = 0;
      $117 = $n;
      $118 = $cp;
      $119 = (($118) + ($117)|0);
      $cp = $119;
      label = 39;
     }
     if ((label|0) == 39) {
      label = 0;
     }
     $120 = $run;
     $121 = $120 & 7;
     $run = $121;
    }
    $122 = $run;
    $123 = ($122|0)!=(0);
    if ($123) {
     $124 = $run;
     $125 = 255 >> $124;
     $126 = $cp;
     $127 = HEAP8[$126>>0]|0;
     $128 = $127&255;
     $129 = $128 & $125;
     $130 = $129&255;
     HEAP8[$126>>0] = $130;
    }
   } else {
    $131 = $run;
    $132 = (25448 + ($131)|0);
    $133 = HEAP8[$132>>0]|0;
    $134 = $133&255;
    $135 = $bx;
    $136 = $134 >> $135;
    $137 = $136 ^ -1;
    $138 = $cp;
    $139 = HEAP8[$138>>0]|0;
    $140 = $139&255;
    $141 = $140 & $137;
    $142 = $141&255;
    HEAP8[$138>>0] = $142;
   }
   $143 = $1;
   $144 = HEAP32[$143>>2]|0;
   $145 = $x;
   $146 = (($145) + ($144))|0;
   $x = $146;
  }
  $147 = $1;
  $148 = (($147) + 4|0);
  $149 = HEAP32[$148>>2]|0;
  $run = $149;
  $150 = $x;
  $151 = $run;
  $152 = (($150) + ($151))|0;
  $153 = $3;
  $154 = ($152>>>0)>($153>>>0);
  if ($154) {
   label = 48;
  } else {
   $155 = $run;
   $156 = $3;
   $157 = ($155>>>0)>($156>>>0);
   if ($157) {
    label = 48;
   }
  }
  if ((label|0) == 48) {
   label = 0;
   $158 = $3;
   $159 = $x;
   $160 = (($158) - ($159))|0;
   $161 = $1;
   $162 = (($161) + 4|0);
   HEAP32[$162>>2] = $160;
   $run = $160;
  }
  $163 = $run;
  $164 = ($163|0)!=(0);
  if ($164) {
   $165 = $0;
   $166 = $x;
   $167 = $166 >>> 3;
   $168 = (($165) + ($167)|0);
   $cp = $168;
   $169 = $x;
   $170 = $169 & 7;
   $bx = $170;
   $171 = $run;
   $172 = $bx;
   $173 = (8 - ($172))|0;
   $174 = ($171>>>0)>($173>>>0);
   if ($174) {
    $175 = $bx;
    $176 = ($175|0)!=(0);
    if ($176) {
     $177 = $bx;
     $178 = 255 >> $177;
     $179 = $cp;
     $180 = (($179) + 1|0);
     $cp = $180;
     $181 = HEAP8[$179>>0]|0;
     $182 = $181&255;
     $183 = $182 | $178;
     $184 = $183&255;
     HEAP8[$179>>0] = $184;
     $185 = $bx;
     $186 = (8 - ($185))|0;
     $187 = $run;
     $188 = (($187) - ($186))|0;
     $run = $188;
    }
    $189 = $run;
    $190 = $189 >>> 3;
    $n = $190;
    $191 = ($190|0)!=(0);
    if ($191) {
     $192 = $n;
     $193 = (($192>>>0) / 4)&-1;
     $194 = ($193>>>0)>(1);
     if ($194) {
      while(1) {
       $195 = $n;
       $196 = ($195|0)!=(0);
       if (!($196)) {
        break;
       }
       $197 = $cp;
       $198 = $197;
       $199 = $198 & 3;
       $200 = ($199|0)==(0);
       if ($200) {
        break;
       }
       $201 = $cp;
       $202 = (($201) + 1|0);
       $cp = $202;
       HEAP8[$201>>0] = -1;
       $203 = $n;
       $204 = (($203) + -1)|0;
       $n = $204;
      }
      $205 = $cp;
      $lp = $205;
      $206 = $n;
      $207 = (($206>>>0) / 4)&-1;
      $nw = $207;
      $208 = $nw;
      $209 = $208<<2;
      $210 = $n;
      $211 = (($210) - ($209))|0;
      $n = $211;
      while(1) {
       $212 = $lp;
       $213 = (($212) + 4|0);
       $lp = $213;
       HEAP32[$212>>2] = -1;
       $214 = $nw;
       $215 = (($214) + -1)|0;
       $nw = $215;
       $216 = ($215|0)!=(0);
       if (!($216)) {
        break;
       }
      }
      $217 = $lp;
      $cp = $217;
     }
     $218 = $n;
     switch ($218|0) {
     case 2:  {
      label = 78;
      break;
     }
     case 5:  {
      label = 75;
      break;
     }
     case 4:  {
      label = 76;
      break;
     }
     case 3:  {
      label = 77;
      break;
     }
     case 1:  {
      label = 79;
      break;
     }
     case 0:  {
      label = 80;
      break;
     }
     case 13:  {
      label = 67;
      break;
     }
     case 12:  {
      label = 68;
      break;
     }
     case 7:  {
      label = 73;
      break;
     }
     case 6:  {
      label = 74;
      break;
     }
     case 11:  {
      label = 69;
      break;
     }
     case 10:  {
      label = 70;
      break;
     }
     case 9:  {
      label = 71;
      break;
     }
     case 8:  {
      label = 72;
      break;
     }
     case 14:  {
      label = 66;
      break;
     }
     case 15:  {
      $219 = $cp;
      $220 = (($219) + 14|0);
      HEAP8[$220>>0] = -1;
      label = 66;
      break;
     }
     default: {
     }
     }
     if ((label|0) == 66) {
      label = 0;
      $221 = $cp;
      $222 = (($221) + 13|0);
      HEAP8[$222>>0] = -1;
      label = 67;
     }
     if ((label|0) == 67) {
      label = 0;
      $223 = $cp;
      $224 = (($223) + 12|0);
      HEAP8[$224>>0] = -1;
      label = 68;
     }
     if ((label|0) == 68) {
      label = 0;
      $225 = $cp;
      $226 = (($225) + 11|0);
      HEAP8[$226>>0] = -1;
      label = 69;
     }
     if ((label|0) == 69) {
      label = 0;
      $227 = $cp;
      $228 = (($227) + 10|0);
      HEAP8[$228>>0] = -1;
      label = 70;
     }
     if ((label|0) == 70) {
      label = 0;
      $229 = $cp;
      $230 = (($229) + 9|0);
      HEAP8[$230>>0] = -1;
      label = 71;
     }
     if ((label|0) == 71) {
      label = 0;
      $231 = $cp;
      $232 = (($231) + 8|0);
      HEAP8[$232>>0] = -1;
      label = 72;
     }
     if ((label|0) == 72) {
      label = 0;
      $233 = $cp;
      $234 = (($233) + 7|0);
      HEAP8[$234>>0] = -1;
      label = 73;
     }
     if ((label|0) == 73) {
      label = 0;
      $235 = $cp;
      $236 = (($235) + 6|0);
      HEAP8[$236>>0] = -1;
      label = 74;
     }
     if ((label|0) == 74) {
      label = 0;
      $237 = $cp;
      $238 = (($237) + 5|0);
      HEAP8[$238>>0] = -1;
      label = 75;
     }
     if ((label|0) == 75) {
      label = 0;
      $239 = $cp;
      $240 = (($239) + 4|0);
      HEAP8[$240>>0] = -1;
      label = 76;
     }
     if ((label|0) == 76) {
      label = 0;
      $241 = $cp;
      $242 = (($241) + 3|0);
      HEAP8[$242>>0] = -1;
      label = 77;
     }
     if ((label|0) == 77) {
      label = 0;
      $243 = $cp;
      $244 = (($243) + 2|0);
      HEAP8[$244>>0] = -1;
      label = 78;
     }
     if ((label|0) == 78) {
      label = 0;
      $245 = $cp;
      $246 = (($245) + 1|0);
      HEAP8[$246>>0] = -1;
      label = 79;
     }
     if ((label|0) == 79) {
      label = 0;
      $247 = $cp;
      HEAP8[$247>>0] = -1;
      $248 = $n;
      $249 = $cp;
      $250 = (($249) + ($248)|0);
      $cp = $250;
      label = 80;
     }
     if ((label|0) == 80) {
      label = 0;
     }
     $251 = $run;
     $252 = $251 & 7;
     $run = $252;
    }
    $253 = $run;
    $254 = ($253|0)!=(0);
    if ($254) {
     $255 = $run;
     $256 = 65280 >> $255;
     $257 = $cp;
     $258 = HEAP8[$257>>0]|0;
     $259 = $258&255;
     $260 = $259 | $256;
     $261 = $260&255;
     HEAP8[$257>>0] = $261;
    }
   } else {
    $262 = $run;
    $263 = (25448 + ($262)|0);
    $264 = HEAP8[$263>>0]|0;
    $265 = $264&255;
    $266 = $bx;
    $267 = $265 >> $266;
    $268 = $cp;
    $269 = HEAP8[$268>>0]|0;
    $270 = $269&255;
    $271 = $270 | $267;
    $272 = $271&255;
    HEAP8[$268>>0] = $272;
   }
   $273 = $1;
   $274 = (($273) + 4|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = $x;
   $277 = (($276) + ($275))|0;
   $x = $277;
  }
  $278 = $1;
  $279 = (($278) + 8|0);
  $1 = $279;
 }
 $280 = $x;
 $281 = $3;
 $282 = ($280|0)==($281|0);
 if ($282) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((25464|0),(25480|0),452,(25496|0));
  // unreachable;
 }
}
function _TIFFInitCCITTFax3($tif,$scheme) {
 $tif = $tif|0;
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $scheme;
 $3 = $1;
 $4 = (_InitCCITTFax3($3)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $0 = 1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 $6 = $1;
 $7 = (__TIFFMergeFields($6,25520,1)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $12 = $1;
  HEAP32[$vararg_buffer1>>2] = 1;
  $13 = (_TIFFSetField($12,65536,$vararg_buffer1)|0);
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $1;
  $10 = (($9) + 628|0);
  $11 = HEAP32[$10>>2]|0;
  _TIFFErrorExt($11,25560,25584,$vararg_buffer);
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _TIFFInitCCITTFax4($tif,$scheme) {
 $tif = $tif|0;
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $scheme;
 $3 = $1;
 $4 = (_InitCCITTFax3($3)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $6 = $1;
 $7 = (__TIFFMergeFields($6,25632,1)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $12 = $1;
  $13 = (($12) + 532|0);
  HEAP32[$13>>2] = 88;
  $14 = $1;
  $15 = (($14) + 540|0);
  HEAP32[$15>>2] = 88;
  $16 = $1;
  $17 = (($16) + 548|0);
  HEAP32[$17>>2] = 88;
  $18 = $1;
  $19 = (($18) + 536|0);
  HEAP32[$19>>2] = 89;
  $20 = $1;
  $21 = (($20) + 544|0);
  HEAP32[$21>>2] = 89;
  $22 = $1;
  $23 = (($22) + 552|0);
  HEAP32[$23>>2] = 89;
  $24 = $1;
  $25 = (($24) + 528|0);
  HEAP32[$25>>2] = 90;
  $26 = $1;
  HEAP32[$vararg_buffer1>>2] = 1;
  $27 = (_TIFFSetField($26,65536,$vararg_buffer1)|0);
  $0 = $27;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 } else {
  $9 = $1;
  $10 = (($9) + 628|0);
  $11 = HEAP32[$10>>2]|0;
  _TIFFErrorExt($11,25672,25696,$vararg_buffer);
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _TIFFInitCCITTRLE($tif,$scheme) {
 $tif = $tif|0;
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $scheme;
 $3 = $1;
 $4 = (_InitCCITTFax3($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $1;
  $7 = (($6) + 532|0);
  HEAP32[$7>>2] = 91;
  $8 = $1;
  $9 = (($8) + 540|0);
  HEAP32[$9>>2] = 91;
  $10 = $1;
  $11 = (($10) + 548|0);
  HEAP32[$11>>2] = 91;
  $12 = $1;
  HEAP32[$vararg_buffer>>2] = 7;
  $13 = (_TIFFSetField($12,65536,$vararg_buffer)|0);
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _TIFFInitCCITTRLEW($tif,$scheme) {
 $tif = $tif|0;
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $scheme;
 $3 = $1;
 $4 = (_InitCCITTFax3($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $1;
  $7 = (($6) + 532|0);
  HEAP32[$7>>2] = 91;
  $8 = $1;
  $9 = (($8) + 540|0);
  HEAP32[$9>>2] = 91;
  $10 = $1;
  $11 = (($10) + 548|0);
  HEAP32[$11>>2] = 91;
  $12 = $1;
  HEAP32[$vararg_buffer>>2] = 11;
  $13 = (_TIFFSetField($12,65536,$vararg_buffer)|0);
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _InitCCITTFax3($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $sp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $1;
 $3 = (__TIFFMergeFields($2,26872,5)|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $5 = $1;
  $6 = (($5) + 628|0);
  $7 = HEAP32[$6>>2]|0;
  _TIFFErrorExt($7,27056,27072,$vararg_buffer);
  $0 = 0;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 }
 $8 = (__TIFFmalloc(96)|0);
 $9 = $1;
 $10 = (($9) + 576|0);
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = (($11) + 576|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = $1;
  $16 = (($15) + 628|0);
  $17 = HEAP32[$16>>2]|0;
  _TIFFErrorExt($17,26856,27128,$vararg_buffer1);
  $0 = 0;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 }
 $18 = $1;
 $19 = (($18) + 576|0);
 $20 = HEAP32[$19>>2]|0;
 $sp = $20;
 $21 = $1;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $sp;
 HEAP32[$24>>2] = $23;
 $25 = $1;
 $26 = (($25) + 668|0);
 $27 = (($26) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $sp;
 $30 = (($29) + 32|0);
 HEAP32[$30>>2] = $28;
 $31 = $1;
 $32 = (($31) + 668|0);
 $33 = (($32) + 4|0);
 HEAP32[$33>>2] = 92;
 $34 = $1;
 $35 = (($34) + 668|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $sp;
 $38 = (($37) + 36|0);
 HEAP32[$38>>2] = $36;
 $39 = $1;
 $40 = (($39) + 668|0);
 HEAP32[$40>>2] = 93;
 $41 = $1;
 $42 = (($41) + 668|0);
 $43 = (($42) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $sp;
 $46 = (($45) + 40|0);
 HEAP32[$46>>2] = $44;
 $47 = $1;
 $48 = (($47) + 668|0);
 $49 = (($48) + 8|0);
 HEAP32[$49>>2] = 94;
 $50 = $sp;
 $51 = (($50) + 28|0);
 HEAP32[$51>>2] = 0;
 $52 = $sp;
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0);
 if ($54) {
  $55 = $1;
  $56 = (($55) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $57 | 256;
  HEAP32[$56>>2] = $58;
 }
 $59 = $1;
 $60 = (($59) + 576|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 64|0);
 HEAP32[$62>>2] = 0;
 $63 = $1;
 HEAP32[$vararg_buffer3>>2] = 95;
 (_TIFFSetField($63,65540,$vararg_buffer3)|0);
 $64 = $1;
 $65 = (($64) + 576|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 80|0);
 HEAP32[$67>>2] = 0;
 $68 = $1;
 $69 = (($68) + 504|0);
 HEAP32[$69>>2] = 96;
 $70 = $1;
 $71 = (($70) + 508|0);
 HEAP32[$71>>2] = 97;
 $72 = $1;
 $73 = (($72) + 512|0);
 HEAP32[$73>>2] = 98;
 $74 = $1;
 $75 = (($74) + 532|0);
 HEAP32[$75>>2] = 99;
 $76 = $1;
 $77 = (($76) + 540|0);
 HEAP32[$77>>2] = 99;
 $78 = $1;
 $79 = (($78) + 548|0);
 HEAP32[$79>>2] = 99;
 $80 = $1;
 $81 = (($80) + 516|0);
 HEAP32[$81>>2] = 97;
 $82 = $1;
 $83 = (($82) + 524|0);
 HEAP32[$83>>2] = 100;
 $84 = $1;
 $85 = (($84) + 528|0);
 HEAP32[$85>>2] = 101;
 $86 = $1;
 $87 = (($86) + 536|0);
 HEAP32[$87>>2] = 102;
 $88 = $1;
 $89 = (($88) + 544|0);
 HEAP32[$89>>2] = 102;
 $90 = $1;
 $91 = (($90) + 552|0);
 HEAP32[$91>>2] = 102;
 $92 = $1;
 $93 = (($92) + 556|0);
 HEAP32[$93>>2] = 103;
 $94 = $1;
 $95 = (($94) + 564|0);
 HEAP32[$95>>2] = 104;
 $0 = 1;
 $96 = $0;
 STACKTOP = sp;return ($96|0);
}
function _Fax4Decode($tif,$buf,$occ,$s) {
 $tif = $tif|0;
 $buf = $buf|0;
 $occ = $occ|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $BitAcc = 0, $BitsAvail = 0, $EOLcnt = 0, $RunLength = 0, $TabEnt = 0, $a0 = 0, $b1 = 0, $bitmap = 0, $cp = 0, $ep = 0, $lastx = 0, $pa = 0, $pb = 0;
 var $sp = 0, $thisrun = 0, $vararg_buffer = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $buf;
 $3 = $occ;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $sp;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $lastx = $10;
 $11 = $sp;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $bitmap = $13;
 $14 = $3;
 $15 = $sp;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14|0) % ($17|0))&-1;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $1;
  $21 = (($20) + 628|0);
  $22 = HEAP32[$21>>2]|0;
  _TIFFErrorExt($22,26744,25760,$vararg_buffer);
  $0 = -1;
  $1019 = $0;
  STACKTOP = sp;return ($1019|0);
 }
 $23 = $sp;
 $24 = (($23) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $BitAcc = $25;
 $26 = $sp;
 $27 = (($26) + 52|0);
 $28 = HEAP32[$27>>2]|0;
 $BitsAvail = $28;
 $29 = $sp;
 $30 = (($29) + 56|0);
 $31 = HEAP32[$30>>2]|0;
 $EOLcnt = $31;
 $32 = $1;
 $33 = (($32) + 604|0);
 $34 = HEAP32[$33>>2]|0;
 $cp = $34;
 $35 = $cp;
 $36 = $1;
 $37 = (($36) + 608|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38)|0);
 $ep = $39;
 L7: while(1) {
  $40 = $3;
  $41 = ($40|0)>(0);
  if (!($41)) {
   label = 319;
   break;
  }
  $a0 = 0;
  $RunLength = 0;
  $42 = $sp;
  $43 = (($42) + 72|0);
  $44 = HEAP32[$43>>2]|0;
  $thisrun = $44;
  $pa = $44;
  $45 = $sp;
  $46 = (($45) + 68|0);
  $47 = HEAP32[$46>>2]|0;
  $pb = $47;
  $48 = $pb;
  $49 = (($48) + 4|0);
  $pb = $49;
  $50 = HEAP32[$48>>2]|0;
  $b1 = $50;
  L11: while(1) {
   $51 = $a0;
   $52 = $lastx;
   $53 = ($51|0)<($52|0);
   if (!($53)) {
    label = 243;
    break;
   }
   $54 = $BitsAvail;
   $55 = ($54|0)<(7);
   if ($55) {
    $56 = $cp;
    $57 = $ep;
    $58 = ($56>>>0)>=($57>>>0);
    if ($58) {
     $59 = $BitsAvail;
     $60 = ($59|0)==(0);
     if ($60) {
      label = 15;
      break L7;
     }
     $BitsAvail = 7;
    } else {
     $61 = $cp;
     $62 = (($61) + 1|0);
     $cp = $62;
     $63 = HEAP8[$61>>0]|0;
     $64 = $63&255;
     $65 = $bitmap;
     $66 = (($65) + ($64)|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = $67&255;
     $69 = $BitsAvail;
     $70 = $68 << $69;
     $71 = $BitAcc;
     $72 = $71 | $70;
     $BitAcc = $72;
     $73 = $BitsAvail;
     $74 = (($73) + 8)|0;
     $BitsAvail = $74;
    }
   }
   $75 = $BitAcc;
   $76 = $75 & 127;
   $77 = (27944 + ($76<<3)|0);
   $TabEnt = $77;
   $78 = $TabEnt;
   $79 = (($78) + 1|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $BitsAvail;
   $83 = (($82) - ($81))|0;
   $BitsAvail = $83;
   $84 = $TabEnt;
   $85 = (($84) + 1|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = $BitAcc;
   $89 = $88 >>> $87;
   $BitAcc = $89;
   $90 = $TabEnt;
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   switch ($92|0) {
   case 2:  {
    $128 = $pa;
    $129 = $thisrun;
    $130 = $128;
    $131 = $129;
    $132 = (($130) - ($131))|0;
    $133 = (($132|0) / 4)&-1;
    $134 = $133 & 1;
    $135 = ($134|0)!=(0);
    if ($135) {
     while(1) {
      $136 = $BitsAvail;
      $137 = ($136|0)<(13);
      if ($137) {
       $138 = $cp;
       $139 = $ep;
       $140 = ($138>>>0)>=($139>>>0);
       if ($140) {
        $141 = $BitsAvail;
        $142 = ($141|0)==(0);
        if ($142) {
         label = 41;
         break L7;
        }
        $BitsAvail = 13;
       } else {
        $143 = $cp;
        $144 = (($143) + 1|0);
        $cp = $144;
        $145 = HEAP8[$143>>0]|0;
        $146 = $145&255;
        $147 = $bitmap;
        $148 = (($147) + ($146)|0);
        $149 = HEAP8[$148>>0]|0;
        $150 = $149&255;
        $151 = $BitsAvail;
        $152 = $150 << $151;
        $153 = $BitAcc;
        $154 = $153 | $152;
        $BitAcc = $154;
        $155 = $BitsAvail;
        $156 = (($155) + 8)|0;
        $BitsAvail = $156;
        $157 = ($156|0)<(13);
        if ($157) {
         $158 = $cp;
         $159 = $ep;
         $160 = ($158>>>0)>=($159>>>0);
         if ($160) {
          $BitsAvail = 13;
         } else {
          $161 = $cp;
          $162 = (($161) + 1|0);
          $cp = $162;
          $163 = HEAP8[$161>>0]|0;
          $164 = $163&255;
          $165 = $bitmap;
          $166 = (($165) + ($164)|0);
          $167 = HEAP8[$166>>0]|0;
          $168 = $167&255;
          $169 = $BitsAvail;
          $170 = $168 << $169;
          $171 = $BitAcc;
          $172 = $171 | $170;
          $BitAcc = $172;
          $173 = $BitsAvail;
          $174 = (($173) + 8)|0;
          $BitsAvail = $174;
         }
        }
       }
      }
      $175 = $BitAcc;
      $176 = $175 & 8191;
      $177 = (61736 + ($176<<3)|0);
      $TabEnt = $177;
      $178 = $TabEnt;
      $179 = (($178) + 1|0);
      $180 = HEAP8[$179>>0]|0;
      $181 = $180&255;
      $182 = $BitsAvail;
      $183 = (($182) - ($181))|0;
      $BitsAvail = $183;
      $184 = $TabEnt;
      $185 = (($184) + 1|0);
      $186 = HEAP8[$185>>0]|0;
      $187 = $186&255;
      $188 = $BitAcc;
      $189 = $188 >>> $187;
      $BitAcc = $189;
      $190 = $TabEnt;
      $191 = HEAP8[$190>>0]|0;
      $192 = $191&255;
      if ((($192|0) == 8)) {
       break;
      } else if (!((($192|0) == 11) | (($192|0) == 10))) {
       label = 59;
       break L11;
      }
      $205 = $TabEnt;
      $206 = (($205) + 4|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = $a0;
      $209 = (($208) + ($207))|0;
      $a0 = $209;
      $210 = $TabEnt;
      $211 = (($210) + 4|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = $RunLength;
      $214 = (($213) + ($212))|0;
      $RunLength = $214;
     }
     $193 = $RunLength;
     $194 = $TabEnt;
     $195 = (($194) + 4|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = (($193) + ($196))|0;
     $198 = $pa;
     $199 = (($198) + 4|0);
     $pa = $199;
     HEAP32[$198>>2] = $197;
     $200 = $TabEnt;
     $201 = (($200) + 4|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = $a0;
     $204 = (($203) + ($202))|0;
     $a0 = $204;
     $RunLength = 0;
     while(1) {
      $215 = $BitsAvail;
      $216 = ($215|0)<(12);
      if ($216) {
       $217 = $cp;
       $218 = $ep;
       $219 = ($217>>>0)>=($218>>>0);
       if ($219) {
        $220 = $BitsAvail;
        $221 = ($220|0)==(0);
        if ($221) {
         label = 67;
         break L7;
        }
        $BitsAvail = 12;
       } else {
        $222 = $cp;
        $223 = (($222) + 1|0);
        $cp = $223;
        $224 = HEAP8[$222>>0]|0;
        $225 = $224&255;
        $226 = $bitmap;
        $227 = (($226) + ($225)|0);
        $228 = HEAP8[$227>>0]|0;
        $229 = $228&255;
        $230 = $BitsAvail;
        $231 = $229 << $230;
        $232 = $BitAcc;
        $233 = $232 | $231;
        $BitAcc = $233;
        $234 = $BitsAvail;
        $235 = (($234) + 8)|0;
        $BitsAvail = $235;
        $236 = ($235|0)<(12);
        if ($236) {
         $237 = $cp;
         $238 = $ep;
         $239 = ($237>>>0)>=($238>>>0);
         if ($239) {
          $BitsAvail = 12;
         } else {
          $240 = $cp;
          $241 = (($240) + 1|0);
          $cp = $241;
          $242 = HEAP8[$240>>0]|0;
          $243 = $242&255;
          $244 = $bitmap;
          $245 = (($244) + ($243)|0);
          $246 = HEAP8[$245>>0]|0;
          $247 = $246&255;
          $248 = $BitsAvail;
          $249 = $247 << $248;
          $250 = $BitAcc;
          $251 = $250 | $249;
          $BitAcc = $251;
          $252 = $BitsAvail;
          $253 = (($252) + 8)|0;
          $BitsAvail = $253;
         }
        }
       }
      }
      $254 = $BitAcc;
      $255 = $254 & 4095;
      $256 = (28968 + ($255<<3)|0);
      $TabEnt = $256;
      $257 = $TabEnt;
      $258 = (($257) + 1|0);
      $259 = HEAP8[$258>>0]|0;
      $260 = $259&255;
      $261 = $BitsAvail;
      $262 = (($261) - ($260))|0;
      $BitsAvail = $262;
      $263 = $TabEnt;
      $264 = (($263) + 1|0);
      $265 = HEAP8[$264>>0]|0;
      $266 = $265&255;
      $267 = $BitAcc;
      $268 = $267 >>> $266;
      $BitAcc = $268;
      $269 = $TabEnt;
      $270 = HEAP8[$269>>0]|0;
      $271 = $270&255;
      if ((($271|0) == 7)) {
       break;
      } else if (!((($271|0) == 11) | (($271|0) == 9))) {
       label = 85;
       break L11;
      }
      $284 = $TabEnt;
      $285 = (($284) + 4|0);
      $286 = HEAP32[$285>>2]|0;
      $287 = $a0;
      $288 = (($287) + ($286))|0;
      $a0 = $288;
      $289 = $TabEnt;
      $290 = (($289) + 4|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = $RunLength;
      $293 = (($292) + ($291))|0;
      $RunLength = $293;
     }
     $272 = $RunLength;
     $273 = $TabEnt;
     $274 = (($273) + 4|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = (($272) + ($275))|0;
     $277 = $pa;
     $278 = (($277) + 4|0);
     $pa = $278;
     HEAP32[$277>>2] = $276;
     $279 = $TabEnt;
     $280 = (($279) + 4|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = $a0;
     $283 = (($282) + ($281))|0;
     $a0 = $283;
     $RunLength = 0;
    } else {
     while(1) {
      $294 = $BitsAvail;
      $295 = ($294|0)<(12);
      if ($295) {
       $296 = $cp;
       $297 = $ep;
       $298 = ($296>>>0)>=($297>>>0);
       if ($298) {
        $299 = $BitsAvail;
        $300 = ($299|0)==(0);
        if ($300) {
         label = 94;
         break L7;
        }
        $BitsAvail = 12;
       } else {
        $301 = $cp;
        $302 = (($301) + 1|0);
        $cp = $302;
        $303 = HEAP8[$301>>0]|0;
        $304 = $303&255;
        $305 = $bitmap;
        $306 = (($305) + ($304)|0);
        $307 = HEAP8[$306>>0]|0;
        $308 = $307&255;
        $309 = $BitsAvail;
        $310 = $308 << $309;
        $311 = $BitAcc;
        $312 = $311 | $310;
        $BitAcc = $312;
        $313 = $BitsAvail;
        $314 = (($313) + 8)|0;
        $BitsAvail = $314;
        $315 = ($314|0)<(12);
        if ($315) {
         $316 = $cp;
         $317 = $ep;
         $318 = ($316>>>0)>=($317>>>0);
         if ($318) {
          $BitsAvail = 12;
         } else {
          $319 = $cp;
          $320 = (($319) + 1|0);
          $cp = $320;
          $321 = HEAP8[$319>>0]|0;
          $322 = $321&255;
          $323 = $bitmap;
          $324 = (($323) + ($322)|0);
          $325 = HEAP8[$324>>0]|0;
          $326 = $325&255;
          $327 = $BitsAvail;
          $328 = $326 << $327;
          $329 = $BitAcc;
          $330 = $329 | $328;
          $BitAcc = $330;
          $331 = $BitsAvail;
          $332 = (($331) + 8)|0;
          $BitsAvail = $332;
         }
        }
       }
      }
      $333 = $BitAcc;
      $334 = $333 & 4095;
      $335 = (28968 + ($334<<3)|0);
      $TabEnt = $335;
      $336 = $TabEnt;
      $337 = (($336) + 1|0);
      $338 = HEAP8[$337>>0]|0;
      $339 = $338&255;
      $340 = $BitsAvail;
      $341 = (($340) - ($339))|0;
      $BitsAvail = $341;
      $342 = $TabEnt;
      $343 = (($342) + 1|0);
      $344 = HEAP8[$343>>0]|0;
      $345 = $344&255;
      $346 = $BitAcc;
      $347 = $346 >>> $345;
      $BitAcc = $347;
      $348 = $TabEnt;
      $349 = HEAP8[$348>>0]|0;
      $350 = $349&255;
      if ((($350|0) == 7)) {
       break;
      } else if (!((($350|0) == 11) | (($350|0) == 9))) {
       label = 112;
       break L11;
      }
      $363 = $TabEnt;
      $364 = (($363) + 4|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = $a0;
      $367 = (($366) + ($365))|0;
      $a0 = $367;
      $368 = $TabEnt;
      $369 = (($368) + 4|0);
      $370 = HEAP32[$369>>2]|0;
      $371 = $RunLength;
      $372 = (($371) + ($370))|0;
      $RunLength = $372;
     }
     $351 = $RunLength;
     $352 = $TabEnt;
     $353 = (($352) + 4|0);
     $354 = HEAP32[$353>>2]|0;
     $355 = (($351) + ($354))|0;
     $356 = $pa;
     $357 = (($356) + 4|0);
     $pa = $357;
     HEAP32[$356>>2] = $355;
     $358 = $TabEnt;
     $359 = (($358) + 4|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = $a0;
     $362 = (($361) + ($360))|0;
     $a0 = $362;
     $RunLength = 0;
     while(1) {
      $373 = $BitsAvail;
      $374 = ($373|0)<(13);
      if ($374) {
       $375 = $cp;
       $376 = $ep;
       $377 = ($375>>>0)>=($376>>>0);
       if ($377) {
        $378 = $BitsAvail;
        $379 = ($378|0)==(0);
        if ($379) {
         label = 120;
         break L7;
        }
        $BitsAvail = 13;
       } else {
        $380 = $cp;
        $381 = (($380) + 1|0);
        $cp = $381;
        $382 = HEAP8[$380>>0]|0;
        $383 = $382&255;
        $384 = $bitmap;
        $385 = (($384) + ($383)|0);
        $386 = HEAP8[$385>>0]|0;
        $387 = $386&255;
        $388 = $BitsAvail;
        $389 = $387 << $388;
        $390 = $BitAcc;
        $391 = $390 | $389;
        $BitAcc = $391;
        $392 = $BitsAvail;
        $393 = (($392) + 8)|0;
        $BitsAvail = $393;
        $394 = ($393|0)<(13);
        if ($394) {
         $395 = $cp;
         $396 = $ep;
         $397 = ($395>>>0)>=($396>>>0);
         if ($397) {
          $BitsAvail = 13;
         } else {
          $398 = $cp;
          $399 = (($398) + 1|0);
          $cp = $399;
          $400 = HEAP8[$398>>0]|0;
          $401 = $400&255;
          $402 = $bitmap;
          $403 = (($402) + ($401)|0);
          $404 = HEAP8[$403>>0]|0;
          $405 = $404&255;
          $406 = $BitsAvail;
          $407 = $405 << $406;
          $408 = $BitAcc;
          $409 = $408 | $407;
          $BitAcc = $409;
          $410 = $BitsAvail;
          $411 = (($410) + 8)|0;
          $BitsAvail = $411;
         }
        }
       }
      }
      $412 = $BitAcc;
      $413 = $412 & 8191;
      $414 = (61736 + ($413<<3)|0);
      $TabEnt = $414;
      $415 = $TabEnt;
      $416 = (($415) + 1|0);
      $417 = HEAP8[$416>>0]|0;
      $418 = $417&255;
      $419 = $BitsAvail;
      $420 = (($419) - ($418))|0;
      $BitsAvail = $420;
      $421 = $TabEnt;
      $422 = (($421) + 1|0);
      $423 = HEAP8[$422>>0]|0;
      $424 = $423&255;
      $425 = $BitAcc;
      $426 = $425 >>> $424;
      $BitAcc = $426;
      $427 = $TabEnt;
      $428 = HEAP8[$427>>0]|0;
      $429 = $428&255;
      if ((($429|0) == 8)) {
       break;
      } else if (!((($429|0) == 11) | (($429|0) == 10))) {
       label = 138;
       break L11;
      }
      $442 = $TabEnt;
      $443 = (($442) + 4|0);
      $444 = HEAP32[$443>>2]|0;
      $445 = $a0;
      $446 = (($445) + ($444))|0;
      $a0 = $446;
      $447 = $TabEnt;
      $448 = (($447) + 4|0);
      $449 = HEAP32[$448>>2]|0;
      $450 = $RunLength;
      $451 = (($450) + ($449))|0;
      $RunLength = $451;
     }
     $430 = $RunLength;
     $431 = $TabEnt;
     $432 = (($431) + 4|0);
     $433 = HEAP32[$432>>2]|0;
     $434 = (($430) + ($433))|0;
     $435 = $pa;
     $436 = (($435) + 4|0);
     $pa = $436;
     HEAP32[$435>>2] = $434;
     $437 = $TabEnt;
     $438 = (($437) + 4|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = $a0;
     $441 = (($440) + ($439))|0;
     $a0 = $441;
     $RunLength = 0;
    }
    $452 = $pa;
    $453 = $thisrun;
    $454 = ($452|0)!=($453|0);
    if ($454) {
     while(1) {
      $455 = $b1;
      $456 = $a0;
      $457 = ($455|0)<=($456|0);
      if ($457) {
       $458 = $b1;
       $459 = $lastx;
       $460 = ($458|0)<($459|0);
       $1021 = $460;
      } else {
       $1021 = 0;
      }
      if (!($1021)) {
       break;
      }
      $461 = $pb;
      $462 = HEAP32[$461>>2]|0;
      $463 = $pb;
      $464 = (($463) + 4|0);
      $465 = HEAP32[$464>>2]|0;
      $466 = (($462) + ($465))|0;
      $467 = $b1;
      $468 = (($467) + ($466))|0;
      $b1 = $468;
      $469 = $pb;
      $470 = (($469) + 8|0);
      $pb = $470;
     }
    }
    break;
   }
   case 5:  {
    $551 = $pa;
    $552 = $thisrun;
    $553 = ($551|0)!=($552|0);
    if ($553) {
     while(1) {
      $554 = $b1;
      $555 = $a0;
      $556 = ($554|0)<=($555|0);
      if ($556) {
       $557 = $b1;
       $558 = $lastx;
       $559 = ($557|0)<($558|0);
       $1024 = $559;
      } else {
       $1024 = 0;
      }
      if (!($1024)) {
       break;
      }
      $560 = $pb;
      $561 = HEAP32[$560>>2]|0;
      $562 = $pb;
      $563 = (($562) + 4|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = (($561) + ($564))|0;
      $566 = $b1;
      $567 = (($566) + ($565))|0;
      $b1 = $567;
      $568 = $pb;
      $569 = (($568) + 8|0);
      $pb = $569;
     }
    }
    $570 = $b1;
    $571 = $a0;
    $572 = $TabEnt;
    $573 = (($572) + 4|0);
    $574 = HEAP32[$573>>2]|0;
    $575 = (($571) + ($574))|0;
    $576 = ($570|0)<=($575|0);
    if ($576) {
     $577 = $b1;
     $578 = $a0;
     $579 = $TabEnt;
     $580 = (($579) + 4|0);
     $581 = HEAP32[$580>>2]|0;
     $582 = (($578) + ($581))|0;
     $583 = ($577|0)<($582|0);
     if ($583) {
      label = 187;
      break L11;
     }
     $584 = $pa;
     $585 = $thisrun;
     $586 = ($584|0)!=($585|0);
     if ($586) {
      label = 187;
      break L11;
     }
    }
    $592 = $RunLength;
    $593 = $b1;
    $594 = $a0;
    $595 = (($593) - ($594))|0;
    $596 = $TabEnt;
    $597 = (($596) + 4|0);
    $598 = HEAP32[$597>>2]|0;
    $599 = (($595) - ($598))|0;
    $600 = (($592) + ($599))|0;
    $601 = $pa;
    $602 = (($601) + 4|0);
    $pa = $602;
    HEAP32[$601>>2] = $600;
    $603 = $b1;
    $604 = $a0;
    $605 = (($603) - ($604))|0;
    $606 = $TabEnt;
    $607 = (($606) + 4|0);
    $608 = HEAP32[$607>>2]|0;
    $609 = (($605) - ($608))|0;
    $610 = $a0;
    $611 = (($610) + ($609))|0;
    $a0 = $611;
    $RunLength = 0;
    $612 = $pb;
    $613 = (($612) + -4|0);
    $pb = $613;
    $614 = HEAP32[$613>>2]|0;
    $615 = $b1;
    $616 = (($615) - ($614))|0;
    $b1 = $616;
    break;
   }
   case 3:  {
    $471 = $pa;
    $472 = $thisrun;
    $473 = ($471|0)!=($472|0);
    if ($473) {
     while(1) {
      $474 = $b1;
      $475 = $a0;
      $476 = ($474|0)<=($475|0);
      if ($476) {
       $477 = $b1;
       $478 = $lastx;
       $479 = ($477|0)<($478|0);
       $1022 = $479;
      } else {
       $1022 = 0;
      }
      if (!($1022)) {
       break;
      }
      $480 = $pb;
      $481 = HEAP32[$480>>2]|0;
      $482 = $pb;
      $483 = (($482) + 4|0);
      $484 = HEAP32[$483>>2]|0;
      $485 = (($481) + ($484))|0;
      $486 = $b1;
      $487 = (($486) + ($485))|0;
      $b1 = $487;
      $488 = $pb;
      $489 = (($488) + 8|0);
      $pb = $489;
     }
    }
    $490 = $RunLength;
    $491 = $b1;
    $492 = $a0;
    $493 = (($491) - ($492))|0;
    $494 = (($490) + ($493))|0;
    $495 = $pa;
    $496 = (($495) + 4|0);
    $pa = $496;
    HEAP32[$495>>2] = $494;
    $497 = $b1;
    $498 = $a0;
    $499 = (($497) - ($498))|0;
    $500 = $a0;
    $501 = (($500) + ($499))|0;
    $a0 = $501;
    $RunLength = 0;
    $502 = $pb;
    $503 = (($502) + 4|0);
    $pb = $503;
    $504 = HEAP32[$502>>2]|0;
    $505 = $b1;
    $506 = (($505) + ($504))|0;
    $b1 = $506;
    break;
   }
   case 4:  {
    $507 = $pa;
    $508 = $thisrun;
    $509 = ($507|0)!=($508|0);
    if ($509) {
     while(1) {
      $510 = $b1;
      $511 = $a0;
      $512 = ($510|0)<=($511|0);
      if ($512) {
       $513 = $b1;
       $514 = $lastx;
       $515 = ($513|0)<($514|0);
       $1023 = $515;
      } else {
       $1023 = 0;
      }
      if (!($1023)) {
       break;
      }
      $516 = $pb;
      $517 = HEAP32[$516>>2]|0;
      $518 = $pb;
      $519 = (($518) + 4|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = (($517) + ($520))|0;
      $522 = $b1;
      $523 = (($522) + ($521))|0;
      $b1 = $523;
      $524 = $pb;
      $525 = (($524) + 8|0);
      $pb = $525;
     }
    }
    $526 = $RunLength;
    $527 = $b1;
    $528 = $a0;
    $529 = (($527) - ($528))|0;
    $530 = $TabEnt;
    $531 = (($530) + 4|0);
    $532 = HEAP32[$531>>2]|0;
    $533 = (($529) + ($532))|0;
    $534 = (($526) + ($533))|0;
    $535 = $pa;
    $536 = (($535) + 4|0);
    $pa = $536;
    HEAP32[$535>>2] = $534;
    $537 = $b1;
    $538 = $a0;
    $539 = (($537) - ($538))|0;
    $540 = $TabEnt;
    $541 = (($540) + 4|0);
    $542 = HEAP32[$541>>2]|0;
    $543 = (($539) + ($542))|0;
    $544 = $a0;
    $545 = (($544) + ($543))|0;
    $a0 = $545;
    $RunLength = 0;
    $546 = $pb;
    $547 = (($546) + 4|0);
    $pb = $547;
    $548 = HEAP32[$546>>2]|0;
    $549 = $b1;
    $550 = (($549) + ($548))|0;
    $b1 = $550;
    break;
   }
   case 12:  {
    label = 193;
    break L11;
    break;
   }
   case 6:  {
    label = 192;
    break L11;
    break;
   }
   case 1:  {
    $93 = $pa;
    $94 = $thisrun;
    $95 = ($93|0)!=($94|0);
    if ($95) {
     while(1) {
      $96 = $b1;
      $97 = $a0;
      $98 = ($96|0)<=($97|0);
      if ($98) {
       $99 = $b1;
       $100 = $lastx;
       $101 = ($99|0)<($100|0);
       $1020 = $101;
      } else {
       $1020 = 0;
      }
      if (!($1020)) {
       break;
      }
      $102 = $pb;
      $103 = HEAP32[$102>>2]|0;
      $104 = $pb;
      $105 = (($104) + 4|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = (($103) + ($106))|0;
      $108 = $b1;
      $109 = (($108) + ($107))|0;
      $b1 = $109;
      $110 = $pb;
      $111 = (($110) + 8|0);
      $pb = $111;
     }
    }
    $112 = $pb;
    $113 = (($112) + 4|0);
    $pb = $113;
    $114 = HEAP32[$112>>2]|0;
    $115 = $b1;
    $116 = (($115) + ($114))|0;
    $b1 = $116;
    $117 = $b1;
    $118 = $a0;
    $119 = (($117) - ($118))|0;
    $120 = $RunLength;
    $121 = (($120) + ($119))|0;
    $RunLength = $121;
    $122 = $b1;
    $a0 = $122;
    $123 = $pb;
    $124 = (($123) + 4|0);
    $pb = $124;
    $125 = HEAP32[$123>>2]|0;
    $126 = $b1;
    $127 = (($126) + ($125))|0;
    $b1 = $127;
    break;
   }
   default: {
    label = 207;
    break L11;
   }
   }
  }
  do {
   if ((label|0) == 59) {
    label = 0;
    label = 209;
   }
   else if ((label|0) == 85) {
    label = 0;
    label = 210;
   }
   else if ((label|0) == 112) {
    label = 0;
    label = 210;
   }
   else if ((label|0) == 138) {
    label = 0;
    label = 209;
   }
   else if ((label|0) == 187) {
    label = 0;
    $587 = $1;
    $588 = $sp;
    $589 = (($588) + 92|0);
    $590 = HEAP32[$589>>2]|0;
    $591 = $a0;
    _Fax3Unexpected(26744,$587,$590,$591);
   }
   else if ((label|0) == 192) {
    label = 0;
    $617 = $lastx;
    $618 = $a0;
    $619 = (($617) - ($618))|0;
    $620 = $pa;
    $621 = (($620) + 4|0);
    $pa = $621;
    HEAP32[$620>>2] = $619;
    $622 = $1;
    $623 = $sp;
    $624 = (($623) + 92|0);
    $625 = HEAP32[$624>>2]|0;
    $626 = $a0;
    _Fax3Extension(26744,$622,$625,$626);
   }
   else if ((label|0) == 193) {
    label = 0;
    $627 = $lastx;
    $628 = $a0;
    $629 = (($627) - ($628))|0;
    $630 = $pa;
    $631 = (($630) + 4|0);
    $pa = $631;
    HEAP32[$630>>2] = $629;
    $632 = $BitsAvail;
    $633 = ($632|0)<(4);
    if ($633) {
     $634 = $cp;
     $635 = $ep;
     $636 = ($634>>>0)>=($635>>>0);
     if ($636) {
      $637 = $BitsAvail;
      $638 = ($637|0)==(0);
      if ($638) {
       label = 197;
       break L7;
      }
      $BitsAvail = 4;
     } else {
      $639 = $cp;
      $640 = (($639) + 1|0);
      $cp = $640;
      $641 = HEAP8[$639>>0]|0;
      $642 = $641&255;
      $643 = $bitmap;
      $644 = (($643) + ($642)|0);
      $645 = HEAP8[$644>>0]|0;
      $646 = $645&255;
      $647 = $BitsAvail;
      $648 = $646 << $647;
      $649 = $BitAcc;
      $650 = $649 | $648;
      $BitAcc = $650;
      $651 = $BitsAvail;
      $652 = (($651) + 8)|0;
      $BitsAvail = $652;
     }
    }
    $653 = $BitAcc;
    $654 = $653 & 15;
    $655 = ($654|0)!=(0);
    if ($655) {
     $656 = $1;
     $657 = $sp;
     $658 = (($657) + 92|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = $a0;
     _Fax3Unexpected(26744,$656,$659,$660);
    }
    $661 = $BitsAvail;
    $662 = (($661) - 4)|0;
    $BitsAvail = $662;
    $663 = $BitAcc;
    $664 = $663 >>> 4;
    $BitAcc = $664;
    $EOLcnt = 1;
   }
   else if ((label|0) == 207) {
    label = 0;
    label = 208;
   }
   else if ((label|0) == 243) {
    label = 0;
    $761 = $RunLength;
    $762 = ($761|0)!=(0);
    if ($762) {
     $763 = $RunLength;
     $764 = $a0;
     $765 = (($763) + ($764))|0;
     $766 = $lastx;
     $767 = ($765|0)<($766|0);
     if ($767) {
      $768 = $BitsAvail;
      $769 = ($768|0)<(1);
      if ($769) {
       $770 = $cp;
       $771 = $ep;
       $772 = ($770>>>0)>=($771>>>0);
       if ($772) {
        $773 = $BitsAvail;
        $774 = ($773|0)==(0);
        if ($774) {
         label = 249;
         break L7;
        }
        $BitsAvail = 1;
       } else {
        $775 = $cp;
        $776 = (($775) + 1|0);
        $cp = $776;
        $777 = HEAP8[$775>>0]|0;
        $778 = $777&255;
        $779 = $bitmap;
        $780 = (($779) + ($778)|0);
        $781 = HEAP8[$780>>0]|0;
        $782 = $781&255;
        $783 = $BitsAvail;
        $784 = $782 << $783;
        $785 = $BitAcc;
        $786 = $785 | $784;
        $BitAcc = $786;
        $787 = $BitsAvail;
        $788 = (($787) + 8)|0;
        $BitsAvail = $788;
       }
      }
      $789 = $BitAcc;
      $790 = $789 & 1;
      $791 = ($790|0)!=(0);
      if (!($791)) {
       label = 208;
       break;
      }
      $792 = $BitsAvail;
      $793 = (($792) - 1)|0;
      $BitsAvail = $793;
      $794 = $BitAcc;
      $795 = $794 >>> 1;
      $BitAcc = $795;
     }
     $796 = $RunLength;
     $797 = (($796) + 0)|0;
     $798 = $pa;
     $799 = (($798) + 4|0);
     $pa = $799;
     HEAP32[$798>>2] = $797;
     $800 = $a0;
     $801 = (($800) + 0)|0;
     $a0 = $801;
     $RunLength = 0;
    }
   }
  } while(0);
  if ((label|0) == 208) {
   label = 0;
   $665 = $1;
   $666 = $sp;
   $667 = (($666) + 92|0);
   $668 = HEAP32[$667>>2]|0;
   $669 = $a0;
   _Fax3Unexpected(26744,$665,$668,$669);
  }
  else if ((label|0) == 209) {
   label = 0;
   $670 = $1;
   $671 = $sp;
   $672 = (($671) + 92|0);
   $673 = HEAP32[$672>>2]|0;
   $674 = $a0;
   _Fax3Unexpected(26744,$670,$673,$674);
  }
  else if ((label|0) == 210) {
   label = 0;
   $675 = $1;
   $676 = $sp;
   $677 = (($676) + 92|0);
   $678 = HEAP32[$677>>2]|0;
   $679 = $a0;
   _Fax3Unexpected(26744,$675,$678,$679);
  }
  $802 = $RunLength;
  $803 = ($802|0)!=(0);
  if ($803) {
   $804 = $RunLength;
   $805 = (($804) + 0)|0;
   $806 = $pa;
   $807 = (($806) + 4|0);
   $pa = $807;
   HEAP32[$806>>2] = $805;
   $808 = $a0;
   $809 = (($808) + 0)|0;
   $a0 = $809;
   $RunLength = 0;
  }
  $810 = $a0;
  $811 = $lastx;
  $812 = ($810|0)!=($811|0);
  if ($812) {
   $813 = $1;
   $814 = $sp;
   $815 = (($814) + 92|0);
   $816 = HEAP32[$815>>2]|0;
   $817 = $a0;
   $818 = $lastx;
   _Fax3BadLength(26744,$813,$816,$817,$818);
   while(1) {
    $819 = $a0;
    $820 = $lastx;
    $821 = ($819|0)>($820|0);
    if ($821) {
     $822 = $pa;
     $823 = $thisrun;
     $824 = ($822>>>0)>($823>>>0);
     $1026 = $824;
    } else {
     $1026 = 0;
    }
    if (!($1026)) {
     break;
    }
    $825 = $pa;
    $826 = (($825) + -4|0);
    $pa = $826;
    $827 = HEAP32[$826>>2]|0;
    $828 = $a0;
    $829 = (($828) - ($827))|0;
    $a0 = $829;
   }
   $830 = $a0;
   $831 = $lastx;
   $832 = ($830|0)<($831|0);
   if ($832) {
    $833 = $a0;
    $834 = ($833|0)<(0);
    if ($834) {
     $a0 = 0;
    }
    $835 = $pa;
    $836 = $thisrun;
    $837 = $835;
    $838 = $836;
    $839 = (($837) - ($838))|0;
    $840 = (($839|0) / 4)&-1;
    $841 = $840 & 1;
    $842 = ($841|0)!=(0);
    if ($842) {
     $843 = $RunLength;
     $844 = (($843) + 0)|0;
     $845 = $pa;
     $846 = (($845) + 4|0);
     $pa = $846;
     HEAP32[$845>>2] = $844;
     $847 = $a0;
     $848 = (($847) + 0)|0;
     $a0 = $848;
     $RunLength = 0;
    }
    $849 = $RunLength;
    $850 = $lastx;
    $851 = $a0;
    $852 = (($850) - ($851))|0;
    $853 = (($849) + ($852))|0;
    $854 = $pa;
    $855 = (($854) + 4|0);
    $pa = $855;
    HEAP32[$854>>2] = $853;
    $856 = $lastx;
    $857 = $a0;
    $858 = (($856) - ($857))|0;
    $859 = $a0;
    $860 = (($859) + ($858))|0;
    $a0 = $860;
    $RunLength = 0;
   } else {
    $861 = $a0;
    $862 = $lastx;
    $863 = ($861|0)>($862|0);
    if ($863) {
     $864 = $RunLength;
     $865 = $lastx;
     $866 = (($864) + ($865))|0;
     $867 = $pa;
     $868 = (($867) + 4|0);
     $pa = $868;
     HEAP32[$867>>2] = $866;
     $869 = $lastx;
     $870 = $a0;
     $871 = (($870) + ($869))|0;
     $a0 = $871;
     $RunLength = 0;
     $872 = $RunLength;
     $873 = (($872) + 0)|0;
     $874 = $pa;
     $875 = (($874) + 4|0);
     $pa = $875;
     HEAP32[$874>>2] = $873;
     $876 = $a0;
     $877 = (($876) + 0)|0;
     $a0 = $877;
     $RunLength = 0;
    }
   }
  }
  $878 = $EOLcnt;
  $879 = ($878|0)!=(0);
  if ($879) {
   label = 295;
   break;
  }
  $880 = $sp;
  $881 = (($880) + 60|0);
  $882 = HEAP32[$881>>2]|0;
  $883 = $2;
  $884 = $thisrun;
  $885 = $pa;
  $886 = $lastx;
  FUNCTION_TABLE_viiii[$882 & 127]($883,$884,$885,$886);
  $887 = $RunLength;
  $888 = (($887) + 0)|0;
  $889 = $pa;
  $890 = (($889) + 4|0);
  $pa = $890;
  HEAP32[$889>>2] = $888;
  $891 = $a0;
  $892 = (($891) + 0)|0;
  $a0 = $892;
  $RunLength = 0;
  $893 = $sp;
  $894 = (($893) + 72|0);
  $895 = HEAP32[$894>>2]|0;
  $x = $895;
  $896 = $sp;
  $897 = (($896) + 68|0);
  $898 = HEAP32[$897>>2]|0;
  $899 = $sp;
  $900 = (($899) + 72|0);
  HEAP32[$900>>2] = $898;
  $901 = $x;
  $902 = $sp;
  $903 = (($902) + 68|0);
  HEAP32[$903>>2] = $901;
  $904 = $sp;
  $905 = (($904) + 8|0);
  $906 = HEAP32[$905>>2]|0;
  $907 = $2;
  $908 = (($907) + ($906)|0);
  $2 = $908;
  $909 = $sp;
  $910 = (($909) + 8|0);
  $911 = HEAP32[$910>>2]|0;
  $912 = $3;
  $913 = (($912) - ($911))|0;
  $3 = $913;
  $914 = $sp;
  $915 = (($914) + 92|0);
  $916 = HEAP32[$915>>2]|0;
  $917 = (($916) + 1)|0;
  HEAP32[$915>>2] = $917;
 }
 if ((label|0) == 15) {
  label = 211;
 }
 else if ((label|0) == 41) {
  label = 211;
 }
 else if ((label|0) == 67) {
  label = 211;
 }
 else if ((label|0) == 94) {
  label = 211;
 }
 else if ((label|0) == 120) {
  label = 211;
 }
 else if ((label|0) == 197) {
  label = 211;
 }
 else if ((label|0) == 249) {
  label = 211;
 }
 else if ((label|0) == 295) {
 }
 else if ((label|0) == 319) {
  $996 = $BitsAvail;
  $997 = $sp;
  $998 = (($997) + 52|0);
  HEAP32[$998>>2] = $996;
  $999 = $BitAcc;
  $1000 = $sp;
  $1001 = (($1000) + 48|0);
  HEAP32[$1001>>2] = $999;
  $1002 = $EOLcnt;
  $1003 = $sp;
  $1004 = (($1003) + 56|0);
  HEAP32[$1004>>2] = $1002;
  $1005 = $cp;
  $1006 = $1;
  $1007 = (($1006) + 604|0);
  $1008 = HEAP32[$1007>>2]|0;
  $1009 = $1005;
  $1010 = $1008;
  $1011 = (($1009) - ($1010))|0;
  $1012 = $1;
  $1013 = (($1012) + 608|0);
  $1014 = HEAP32[$1013>>2]|0;
  $1015 = (($1014) - ($1011))|0;
  HEAP32[$1013>>2] = $1015;
  $1016 = $cp;
  $1017 = $1;
  $1018 = (($1017) + 604|0);
  HEAP32[$1018>>2] = $1016;
  $0 = 1;
  $1019 = $0;
  STACKTOP = sp;return ($1019|0);
 }
 if ((label|0) == 211) {
  $680 = $1;
  $681 = $sp;
  $682 = (($681) + 92|0);
  $683 = HEAP32[$682>>2]|0;
  $684 = $a0;
  _Fax3PrematureEOF(26744,$680,$683,$684);
  $685 = $RunLength;
  $686 = ($685|0)!=(0);
  if ($686) {
   $687 = $RunLength;
   $688 = (($687) + 0)|0;
   $689 = $pa;
   $690 = (($689) + 4|0);
   $pa = $690;
   HEAP32[$689>>2] = $688;
   $691 = $a0;
   $692 = (($691) + 0)|0;
   $a0 = $692;
   $RunLength = 0;
  }
  $693 = $a0;
  $694 = $lastx;
  $695 = ($693|0)!=($694|0);
  if ($695) {
   $696 = $1;
   $697 = $sp;
   $698 = (($697) + 92|0);
   $699 = HEAP32[$698>>2]|0;
   $700 = $a0;
   $701 = $lastx;
   _Fax3BadLength(26744,$696,$699,$700,$701);
   while(1) {
    $702 = $a0;
    $703 = $lastx;
    $704 = ($702|0)>($703|0);
    if ($704) {
     $705 = $pa;
     $706 = $thisrun;
     $707 = ($705>>>0)>($706>>>0);
     $1025 = $707;
    } else {
     $1025 = 0;
    }
    if (!($1025)) {
     break;
    }
    $708 = $pa;
    $709 = (($708) + -4|0);
    $pa = $709;
    $710 = HEAP32[$709>>2]|0;
    $711 = $a0;
    $712 = (($711) - ($710))|0;
    $a0 = $712;
   }
   $713 = $a0;
   $714 = $lastx;
   $715 = ($713|0)<($714|0);
   if ($715) {
    $716 = $a0;
    $717 = ($716|0)<(0);
    if ($717) {
     $a0 = 0;
    }
    $718 = $pa;
    $719 = $thisrun;
    $720 = $718;
    $721 = $719;
    $722 = (($720) - ($721))|0;
    $723 = (($722|0) / 4)&-1;
    $724 = $723 & 1;
    $725 = ($724|0)!=(0);
    if ($725) {
     $726 = $RunLength;
     $727 = (($726) + 0)|0;
     $728 = $pa;
     $729 = (($728) + 4|0);
     $pa = $729;
     HEAP32[$728>>2] = $727;
     $730 = $a0;
     $731 = (($730) + 0)|0;
     $a0 = $731;
     $RunLength = 0;
    }
    $732 = $RunLength;
    $733 = $lastx;
    $734 = $a0;
    $735 = (($733) - ($734))|0;
    $736 = (($732) + ($735))|0;
    $737 = $pa;
    $738 = (($737) + 4|0);
    $pa = $738;
    HEAP32[$737>>2] = $736;
    $739 = $lastx;
    $740 = $a0;
    $741 = (($739) - ($740))|0;
    $742 = $a0;
    $743 = (($742) + ($741))|0;
    $a0 = $743;
    $RunLength = 0;
   } else {
    $744 = $a0;
    $745 = $lastx;
    $746 = ($744|0)>($745|0);
    if ($746) {
     $747 = $RunLength;
     $748 = $lastx;
     $749 = (($747) + ($748))|0;
     $750 = $pa;
     $751 = (($750) + 4|0);
     $pa = $751;
     HEAP32[$750>>2] = $749;
     $752 = $lastx;
     $753 = $a0;
     $754 = (($753) + ($752))|0;
     $a0 = $754;
     $RunLength = 0;
     $755 = $RunLength;
     $756 = (($755) + 0)|0;
     $757 = $pa;
     $758 = (($757) + 4|0);
     $pa = $758;
     HEAP32[$757>>2] = $756;
     $759 = $a0;
     $760 = (($759) + 0)|0;
     $a0 = $760;
     $RunLength = 0;
    }
   }
  }
 }
 $918 = $BitsAvail;
 $919 = ($918|0)<(13);
 L376: do {
  if ($919) {
   $920 = $cp;
   $921 = $ep;
   $922 = ($920>>>0)>=($921>>>0);
   do {
    if ($922) {
     $923 = $BitsAvail;
     $924 = ($923|0)==(0);
     if ($924) {
      break L376;
     } else {
      $BitsAvail = 13;
      break;
     }
    } else {
     $925 = $cp;
     $926 = (($925) + 1|0);
     $cp = $926;
     $927 = HEAP8[$925>>0]|0;
     $928 = $927&255;
     $929 = $bitmap;
     $930 = (($929) + ($928)|0);
     $931 = HEAP8[$930>>0]|0;
     $932 = $931&255;
     $933 = $BitsAvail;
     $934 = $932 << $933;
     $935 = $BitAcc;
     $936 = $935 | $934;
     $BitAcc = $936;
     $937 = $BitsAvail;
     $938 = (($937) + 8)|0;
     $BitsAvail = $938;
     $939 = ($938|0)<(13);
     if ($939) {
      $940 = $cp;
      $941 = $ep;
      $942 = ($940>>>0)>=($941>>>0);
      if ($942) {
       $BitsAvail = 13;
      } else {
       $943 = $cp;
       $944 = (($943) + 1|0);
       $cp = $944;
       $945 = HEAP8[$943>>0]|0;
       $946 = $945&255;
       $947 = $bitmap;
       $948 = (($947) + ($946)|0);
       $949 = HEAP8[$948>>0]|0;
       $950 = $949&255;
       $951 = $BitsAvail;
       $952 = $950 << $951;
       $953 = $BitAcc;
       $954 = $953 | $952;
       $BitAcc = $954;
       $955 = $BitsAvail;
       $956 = (($955) + 8)|0;
       $BitsAvail = $956;
      }
     }
    }
   } while(0);
   label = 312;
  } else {
   label = 312;
  }
 } while(0);
 if ((label|0) == 312) {
 }
 $957 = $BitsAvail;
 $958 = (($957) - 13)|0;
 $BitsAvail = $958;
 $959 = $BitAcc;
 $960 = $959 >>> 13;
 $BitAcc = $960;
 $961 = $sp;
 $962 = (($961) + 60|0);
 $963 = HEAP32[$962>>2]|0;
 $964 = $2;
 $965 = $thisrun;
 $966 = $pa;
 $967 = $lastx;
 FUNCTION_TABLE_viiii[$963 & 127]($964,$965,$966,$967);
 $968 = $BitsAvail;
 $969 = $sp;
 $970 = (($969) + 52|0);
 HEAP32[$970>>2] = $968;
 $971 = $BitAcc;
 $972 = $sp;
 $973 = (($972) + 48|0);
 HEAP32[$973>>2] = $971;
 $974 = $EOLcnt;
 $975 = $sp;
 $976 = (($975) + 56|0);
 HEAP32[$976>>2] = $974;
 $977 = $cp;
 $978 = $1;
 $979 = (($978) + 604|0);
 $980 = HEAP32[$979>>2]|0;
 $981 = $977;
 $982 = $980;
 $983 = (($981) - ($982))|0;
 $984 = $1;
 $985 = (($984) + 608|0);
 $986 = HEAP32[$985>>2]|0;
 $987 = (($986) - ($983))|0;
 HEAP32[$985>>2] = $987;
 $988 = $cp;
 $989 = $1;
 $990 = (($989) + 604|0);
 HEAP32[$990>>2] = $988;
 $991 = $sp;
 $992 = (($991) + 92|0);
 $993 = HEAP32[$992>>2]|0;
 $994 = ($993|0)!=(0);
 $995 = $994 ? 1 : -1;
 $0 = $995;
 $1019 = $0;
 STACKTOP = sp;return ($1019|0);
}
function _Fax4Encode($tif,$bp,$cc,$s) {
 $tif = $tif|0;
 $bp = $bp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $bp;
 $3 = $cc;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $3;
 $9 = $sp;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8|0) % ($11|0))&-1;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $1;
  $15 = (($14) + 628|0);
  $16 = HEAP32[$15>>2]|0;
  _TIFFErrorExt($16,26072,26088,$vararg_buffer);
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 while(1) {
  $17 = $3;
  $18 = ($17|0)>(0);
  if (!($18)) {
   label = 8;
   break;
  }
  $19 = $1;
  $20 = $2;
  $21 = $sp;
  $22 = (($21) + 80|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $sp;
  $25 = (($24) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_Fax3Encode2DRow($19,$20,$23,$26)|0);
  $28 = ($27|0)!=(0);
  if (!($28)) {
   label = 6;
   break;
  }
  $29 = $sp;
  $30 = (($29) + 80|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $2;
  $33 = $sp;
  $34 = (($33) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  __TIFFmemcpy($31,$32,$35);
  $36 = $sp;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $2;
  $40 = (($39) + ($38)|0);
  $2 = $40;
  $41 = $sp;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $3;
  $45 = (($44) - ($43))|0;
  $3 = $45;
 }
 if ((label|0) == 6) {
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 8) {
  $0 = 1;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _Fax4PostEncode($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 576|0);
 $3 = HEAP32[$2>>2]|0;
 $sp = $3;
 $4 = $0;
 _Fax3PutBits($4,1,12);
 $5 = $0;
 _Fax3PutBits($5,1,12);
 $6 = $sp;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(8);
 if (!($9)) {
  STACKTOP = sp;return 1;
 }
 $10 = $0;
 $11 = (($10) + 608|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = (($13) + 592|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)>=($15|0);
 if ($16) {
  $17 = $0;
  (_TIFFFlushData1($17)|0);
 }
 $18 = $sp;
 $19 = (($18) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20&255;
 $22 = $0;
 $23 = (($22) + 604|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 1|0);
 HEAP32[$23>>2] = $25;
 HEAP8[$24>>0] = $21;
 $26 = $0;
 $27 = (($26) + 608|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 1)|0;
 HEAP32[$27>>2] = $29;
 $30 = $sp;
 $31 = (($30) + 48|0);
 HEAP32[$31>>2] = 0;
 $32 = $sp;
 $33 = (($32) + 52|0);
 HEAP32[$33>>2] = 8;
 STACKTOP = sp;return 1;
}
function _Fax3DecodeRLE($tif,$buf,$occ,$s) {
 $tif = $tif|0;
 $buf = $buf|0;
 $occ = $occ|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $BitAcc = 0, $BitsAvail = 0, $EOLcnt = 0, $RunLength = 0, $TabEnt = 0, $a0 = 0, $bitmap = 0, $cp = 0, $ep = 0, $lastx = 0, $mode = 0, $n = 0, $n1 = 0, $pa = 0, $sp = 0, $thisrun = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $buf;
 $3 = $occ;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $sp;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $lastx = $10;
 $11 = $sp;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $bitmap = $13;
 $14 = $sp;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $mode = $16;
 $17 = $3;
 $18 = $sp;
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17|0) % ($20|0))&-1;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $1;
  $24 = (($23) + 628|0);
  $25 = HEAP32[$24>>2]|0;
  _TIFFErrorExt($25,25744,25760,$vararg_buffer);
  $0 = -1;
  $498 = $0;
  STACKTOP = sp;return ($498|0);
 }
 $26 = $sp;
 $27 = (($26) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $BitAcc = $28;
 $29 = $sp;
 $30 = (($29) + 52|0);
 $31 = HEAP32[$30>>2]|0;
 $BitsAvail = $31;
 $32 = $sp;
 $33 = (($32) + 56|0);
 $34 = HEAP32[$33>>2]|0;
 $EOLcnt = $34;
 $35 = $1;
 $36 = (($35) + 604|0);
 $37 = HEAP32[$36>>2]|0;
 $cp = $37;
 $38 = $cp;
 $39 = $1;
 $40 = (($39) + 608|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($38) + ($41)|0);
 $ep = $42;
 $43 = $sp;
 $44 = (($43) + 72|0);
 $45 = HEAP32[$44>>2]|0;
 $thisrun = $45;
 L7: while(1) {
  $46 = $3;
  $47 = ($46|0)>(0);
  if (!($47)) {
   label = 149;
   break;
  }
  $a0 = 0;
  $RunLength = 0;
  $48 = $thisrun;
  $pa = $48;
  L11: while(1) {
   while(1) {
    $49 = $BitsAvail;
    $50 = ($49|0)<(12);
    if ($50) {
     $51 = $cp;
     $52 = $ep;
     $53 = ($51>>>0)>=($52>>>0);
     if ($53) {
      $54 = $BitsAvail;
      $55 = ($54|0)==(0);
      if ($55) {
       label = 15;
       break L7;
      }
      $BitsAvail = 12;
     } else {
      $56 = $cp;
      $57 = (($56) + 1|0);
      $cp = $57;
      $58 = HEAP8[$56>>0]|0;
      $59 = $58&255;
      $60 = $bitmap;
      $61 = (($60) + ($59)|0);
      $62 = HEAP8[$61>>0]|0;
      $63 = $62&255;
      $64 = $BitsAvail;
      $65 = $63 << $64;
      $66 = $BitAcc;
      $67 = $66 | $65;
      $BitAcc = $67;
      $68 = $BitsAvail;
      $69 = (($68) + 8)|0;
      $BitsAvail = $69;
      $70 = ($69|0)<(12);
      if ($70) {
       $71 = $cp;
       $72 = $ep;
       $73 = ($71>>>0)>=($72>>>0);
       if ($73) {
        $BitsAvail = 12;
       } else {
        $74 = $cp;
        $75 = (($74) + 1|0);
        $cp = $75;
        $76 = HEAP8[$74>>0]|0;
        $77 = $76&255;
        $78 = $bitmap;
        $79 = (($78) + ($77)|0);
        $80 = HEAP8[$79>>0]|0;
        $81 = $80&255;
        $82 = $BitsAvail;
        $83 = $81 << $82;
        $84 = $BitAcc;
        $85 = $84 | $83;
        $BitAcc = $85;
        $86 = $BitsAvail;
        $87 = (($86) + 8)|0;
        $BitsAvail = $87;
       }
      }
     }
    }
    $88 = $BitAcc;
    $89 = $88 & 4095;
    $90 = (28968 + ($89<<3)|0);
    $TabEnt = $90;
    $91 = $TabEnt;
    $92 = (($91) + 1|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = $BitsAvail;
    $96 = (($95) - ($94))|0;
    $BitsAvail = $96;
    $97 = $TabEnt;
    $98 = (($97) + 1|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = $BitAcc;
    $102 = $101 >>> $100;
    $BitAcc = $102;
    $103 = $TabEnt;
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    if ((($105|0) == 12)) {
     label = 29;
     break L11;
    } else if ((($105|0) == 7)) {
     break;
    } else if (!((($105|0) == 11) | (($105|0) == 9))) {
     label = 34;
     break L11;
    }
    $118 = $TabEnt;
    $119 = (($118) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $a0;
    $122 = (($121) + ($120))|0;
    $a0 = $122;
    $123 = $TabEnt;
    $124 = (($123) + 4|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $RunLength;
    $127 = (($126) + ($125))|0;
    $RunLength = $127;
   }
   $106 = $RunLength;
   $107 = $TabEnt;
   $108 = (($107) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($106) + ($109))|0;
   $111 = $pa;
   $112 = (($111) + 4|0);
   $pa = $112;
   HEAP32[$111>>2] = $110;
   $113 = $TabEnt;
   $114 = (($113) + 4|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $a0;
   $117 = (($116) + ($115))|0;
   $a0 = $117;
   $RunLength = 0;
   $133 = $a0;
   $134 = $lastx;
   $135 = ($133|0)>=($134|0);
   if ($135) {
    label = 37;
    break;
   }
   while(1) {
    $136 = $BitsAvail;
    $137 = ($136|0)<(13);
    if ($137) {
     $138 = $cp;
     $139 = $ep;
     $140 = ($138>>>0)>=($139>>>0);
     if ($140) {
      $141 = $BitsAvail;
      $142 = ($141|0)==(0);
      if ($142) {
       label = 44;
       break L7;
      }
      $BitsAvail = 13;
     } else {
      $143 = $cp;
      $144 = (($143) + 1|0);
      $cp = $144;
      $145 = HEAP8[$143>>0]|0;
      $146 = $145&255;
      $147 = $bitmap;
      $148 = (($147) + ($146)|0);
      $149 = HEAP8[$148>>0]|0;
      $150 = $149&255;
      $151 = $BitsAvail;
      $152 = $150 << $151;
      $153 = $BitAcc;
      $154 = $153 | $152;
      $BitAcc = $154;
      $155 = $BitsAvail;
      $156 = (($155) + 8)|0;
      $BitsAvail = $156;
      $157 = ($156|0)<(13);
      if ($157) {
       $158 = $cp;
       $159 = $ep;
       $160 = ($158>>>0)>=($159>>>0);
       if ($160) {
        $BitsAvail = 13;
       } else {
        $161 = $cp;
        $162 = (($161) + 1|0);
        $cp = $162;
        $163 = HEAP8[$161>>0]|0;
        $164 = $163&255;
        $165 = $bitmap;
        $166 = (($165) + ($164)|0);
        $167 = HEAP8[$166>>0]|0;
        $168 = $167&255;
        $169 = $BitsAvail;
        $170 = $168 << $169;
        $171 = $BitAcc;
        $172 = $171 | $170;
        $BitAcc = $172;
        $173 = $BitsAvail;
        $174 = (($173) + 8)|0;
        $BitsAvail = $174;
       }
      }
     }
    }
    $175 = $BitAcc;
    $176 = $175 & 8191;
    $177 = (61736 + ($176<<3)|0);
    $TabEnt = $177;
    $178 = $TabEnt;
    $179 = (($178) + 1|0);
    $180 = HEAP8[$179>>0]|0;
    $181 = $180&255;
    $182 = $BitsAvail;
    $183 = (($182) - ($181))|0;
    $BitsAvail = $183;
    $184 = $TabEnt;
    $185 = (($184) + 1|0);
    $186 = HEAP8[$185>>0]|0;
    $187 = $186&255;
    $188 = $BitAcc;
    $189 = $188 >>> $187;
    $BitAcc = $189;
    $190 = $TabEnt;
    $191 = HEAP8[$190>>0]|0;
    $192 = $191&255;
    if ((($192|0) == 12)) {
     label = 58;
     break L11;
    } else if ((($192|0) == 8)) {
     break;
    } else if (!((($192|0) == 11) | (($192|0) == 10))) {
     label = 63;
     break L11;
    }
    $205 = $TabEnt;
    $206 = (($205) + 4|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $a0;
    $209 = (($208) + ($207))|0;
    $a0 = $209;
    $210 = $TabEnt;
    $211 = (($210) + 4|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = $RunLength;
    $214 = (($213) + ($212))|0;
    $RunLength = $214;
   }
   $193 = $RunLength;
   $194 = $TabEnt;
   $195 = (($194) + 4|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = (($193) + ($196))|0;
   $198 = $pa;
   $199 = (($198) + 4|0);
   $pa = $199;
   HEAP32[$198>>2] = $197;
   $200 = $TabEnt;
   $201 = (($200) + 4|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = $a0;
   $204 = (($203) + ($202))|0;
   $a0 = $204;
   $RunLength = 0;
   $220 = $a0;
   $221 = $lastx;
   $222 = ($220|0)>=($221|0);
   if ($222) {
    label = 66;
    break;
   }
   $223 = $pa;
   $224 = (($223) + -4|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = ($225|0)==(0);
   if ($226) {
    $227 = $pa;
    $228 = (($227) + -8|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)==(0);
    if ($230) {
     $231 = $pa;
     $232 = (($231) + -8|0);
     $pa = $232;
    }
   }
  }
  if ((label|0) == 29) {
   label = 0;
   $EOLcnt = 1;
  }
  else if ((label|0) == 34) {
   label = 0;
   $128 = $1;
   $129 = $sp;
   $130 = (($129) + 92|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $a0;
   _Fax3Unexpected(25744,$128,$131,$132);
  }
  else if ((label|0) == 37) {
   label = 0;
  }
  else if ((label|0) == 58) {
   label = 0;
   $EOLcnt = 1;
  }
  else if ((label|0) == 63) {
   label = 0;
   $215 = $1;
   $216 = $sp;
   $217 = (($216) + 92|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = $a0;
   _Fax3Unexpected(25744,$215,$218,$219);
  }
  else if ((label|0) == 66) {
   label = 0;
  }
  $314 = $RunLength;
  $315 = ($314|0)!=(0);
  if ($315) {
   $316 = $RunLength;
   $317 = (($316) + 0)|0;
   $318 = $pa;
   $319 = (($318) + 4|0);
   $pa = $319;
   HEAP32[$318>>2] = $317;
   $320 = $a0;
   $321 = (($320) + 0)|0;
   $a0 = $321;
   $RunLength = 0;
  }
  $322 = $a0;
  $323 = $lastx;
  $324 = ($322|0)!=($323|0);
  if ($324) {
   $325 = $1;
   $326 = $sp;
   $327 = (($326) + 92|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = $a0;
   $330 = $lastx;
   _Fax3BadLength(25744,$325,$328,$329,$330);
   while(1) {
    $331 = $a0;
    $332 = $lastx;
    $333 = ($331|0)>($332|0);
    if ($333) {
     $334 = $pa;
     $335 = $thisrun;
     $336 = ($334>>>0)>($335>>>0);
     $500 = $336;
    } else {
     $500 = 0;
    }
    if (!($500)) {
     break;
    }
    $337 = $pa;
    $338 = (($337) + -4|0);
    $pa = $338;
    $339 = HEAP32[$338>>2]|0;
    $340 = $a0;
    $341 = (($340) - ($339))|0;
    $a0 = $341;
   }
   $342 = $a0;
   $343 = $lastx;
   $344 = ($342|0)<($343|0);
   if ($344) {
    $345 = $a0;
    $346 = ($345|0)<(0);
    if ($346) {
     $a0 = 0;
    }
    $347 = $pa;
    $348 = $thisrun;
    $349 = $347;
    $350 = $348;
    $351 = (($349) - ($350))|0;
    $352 = (($351|0) / 4)&-1;
    $353 = $352 & 1;
    $354 = ($353|0)!=(0);
    if ($354) {
     $355 = $RunLength;
     $356 = (($355) + 0)|0;
     $357 = $pa;
     $358 = (($357) + 4|0);
     $pa = $358;
     HEAP32[$357>>2] = $356;
     $359 = $a0;
     $360 = (($359) + 0)|0;
     $a0 = $360;
     $RunLength = 0;
    }
    $361 = $RunLength;
    $362 = $lastx;
    $363 = $a0;
    $364 = (($362) - ($363))|0;
    $365 = (($361) + ($364))|0;
    $366 = $pa;
    $367 = (($366) + 4|0);
    $pa = $367;
    HEAP32[$366>>2] = $365;
    $368 = $lastx;
    $369 = $a0;
    $370 = (($368) - ($369))|0;
    $371 = $a0;
    $372 = (($371) + ($370))|0;
    $a0 = $372;
    $RunLength = 0;
   } else {
    $373 = $a0;
    $374 = $lastx;
    $375 = ($373|0)>($374|0);
    if ($375) {
     $376 = $RunLength;
     $377 = $lastx;
     $378 = (($376) + ($377))|0;
     $379 = $pa;
     $380 = (($379) + 4|0);
     $pa = $380;
     HEAP32[$379>>2] = $378;
     $381 = $lastx;
     $382 = $a0;
     $383 = (($382) + ($381))|0;
     $a0 = $383;
     $RunLength = 0;
     $384 = $RunLength;
     $385 = (($384) + 0)|0;
     $386 = $pa;
     $387 = (($386) + 4|0);
     $pa = $387;
     HEAP32[$386>>2] = $385;
     $388 = $a0;
     $389 = (($388) + 0)|0;
     $a0 = $389;
     $RunLength = 0;
    }
   }
  }
  $390 = $sp;
  $391 = (($390) + 60|0);
  $392 = HEAP32[$391>>2]|0;
  $393 = $2;
  $394 = $thisrun;
  $395 = $pa;
  $396 = $lastx;
  FUNCTION_TABLE_viiii[$392 & 127]($393,$394,$395,$396);
  $397 = $mode;
  $398 = $397 & 4;
  $399 = ($398|0)!=(0);
  if ($399) {
   $400 = $BitsAvail;
   $401 = $BitsAvail;
   $402 = $401 & -8;
   $403 = (($400) - ($402))|0;
   $n = $403;
   $404 = $n;
   $405 = $BitsAvail;
   $406 = (($405) - ($404))|0;
   $BitsAvail = $406;
   $407 = $n;
   $408 = $BitAcc;
   $409 = $408 >>> $407;
   $BitAcc = $409;
  } else {
   $410 = $mode;
   $411 = $410 & 8;
   $412 = ($411|0)!=(0);
   if ($412) {
    $413 = $BitsAvail;
    $414 = $BitsAvail;
    $415 = $414 & -16;
    $416 = (($413) - ($415))|0;
    $n1 = $416;
    $417 = $n1;
    $418 = $BitsAvail;
    $419 = (($418) - ($417))|0;
    $BitsAvail = $419;
    $420 = $n1;
    $421 = $BitAcc;
    $422 = $421 >>> $420;
    $BitAcc = $422;
    $423 = $BitsAvail;
    $424 = ($423|0)==(0);
    if ($424) {
     $425 = $cp;
     $426 = $425;
     $427 = $426 & 1;
     $428 = ($427|0)==(0);
     if (!($428)) {
      $429 = $cp;
      $430 = (($429) + 1|0);
      $cp = $430;
     }
    }
   }
  }
  $431 = $sp;
  $432 = (($431) + 8|0);
  $433 = HEAP32[$432>>2]|0;
  $434 = $2;
  $435 = (($434) + ($433)|0);
  $2 = $435;
  $436 = $sp;
  $437 = (($436) + 8|0);
  $438 = HEAP32[$437>>2]|0;
  $439 = $3;
  $440 = (($439) - ($438))|0;
  $3 = $440;
  $441 = $sp;
  $442 = (($441) + 92|0);
  $443 = HEAP32[$442>>2]|0;
  $444 = (($443) + 1)|0;
  HEAP32[$442>>2] = $444;
 }
 if ((label|0) == 15) {
 }
 else if ((label|0) == 44) {
 }
 else if ((label|0) == 149) {
  $475 = $BitsAvail;
  $476 = $sp;
  $477 = (($476) + 52|0);
  HEAP32[$477>>2] = $475;
  $478 = $BitAcc;
  $479 = $sp;
  $480 = (($479) + 48|0);
  HEAP32[$480>>2] = $478;
  $481 = $EOLcnt;
  $482 = $sp;
  $483 = (($482) + 56|0);
  HEAP32[$483>>2] = $481;
  $484 = $cp;
  $485 = $1;
  $486 = (($485) + 604|0);
  $487 = HEAP32[$486>>2]|0;
  $488 = $484;
  $489 = $487;
  $490 = (($488) - ($489))|0;
  $491 = $1;
  $492 = (($491) + 608|0);
  $493 = HEAP32[$492>>2]|0;
  $494 = (($493) - ($490))|0;
  HEAP32[$492>>2] = $494;
  $495 = $cp;
  $496 = $1;
  $497 = (($496) + 604|0);
  HEAP32[$497>>2] = $495;
  $0 = 1;
  $498 = $0;
  STACKTOP = sp;return ($498|0);
 }
 $233 = $1;
 $234 = $sp;
 $235 = (($234) + 92|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = $a0;
 _Fax3PrematureEOF(25744,$233,$236,$237);
 $238 = $RunLength;
 $239 = ($238|0)!=(0);
 if ($239) {
  $240 = $RunLength;
  $241 = (($240) + 0)|0;
  $242 = $pa;
  $243 = (($242) + 4|0);
  $pa = $243;
  HEAP32[$242>>2] = $241;
  $244 = $a0;
  $245 = (($244) + 0)|0;
  $a0 = $245;
  $RunLength = 0;
 }
 $246 = $a0;
 $247 = $lastx;
 $248 = ($246|0)!=($247|0);
 if ($248) {
  $249 = $1;
  $250 = $sp;
  $251 = (($250) + 92|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $a0;
  $254 = $lastx;
  _Fax3BadLength(25744,$249,$252,$253,$254);
  while(1) {
   $255 = $a0;
   $256 = $lastx;
   $257 = ($255|0)>($256|0);
   if ($257) {
    $258 = $pa;
    $259 = $thisrun;
    $260 = ($258>>>0)>($259>>>0);
    $499 = $260;
   } else {
    $499 = 0;
   }
   if (!($499)) {
    break;
   }
   $261 = $pa;
   $262 = (($261) + -4|0);
   $pa = $262;
   $263 = HEAP32[$262>>2]|0;
   $264 = $a0;
   $265 = (($264) - ($263))|0;
   $a0 = $265;
  }
  $266 = $a0;
  $267 = $lastx;
  $268 = ($266|0)<($267|0);
  if ($268) {
   $269 = $a0;
   $270 = ($269|0)<(0);
   if ($270) {
    $a0 = 0;
   }
   $271 = $pa;
   $272 = $thisrun;
   $273 = $271;
   $274 = $272;
   $275 = (($273) - ($274))|0;
   $276 = (($275|0) / 4)&-1;
   $277 = $276 & 1;
   $278 = ($277|0)!=(0);
   if ($278) {
    $279 = $RunLength;
    $280 = (($279) + 0)|0;
    $281 = $pa;
    $282 = (($281) + 4|0);
    $pa = $282;
    HEAP32[$281>>2] = $280;
    $283 = $a0;
    $284 = (($283) + 0)|0;
    $a0 = $284;
    $RunLength = 0;
   }
   $285 = $RunLength;
   $286 = $lastx;
   $287 = $a0;
   $288 = (($286) - ($287))|0;
   $289 = (($285) + ($288))|0;
   $290 = $pa;
   $291 = (($290) + 4|0);
   $pa = $291;
   HEAP32[$290>>2] = $289;
   $292 = $lastx;
   $293 = $a0;
   $294 = (($292) - ($293))|0;
   $295 = $a0;
   $296 = (($295) + ($294))|0;
   $a0 = $296;
   $RunLength = 0;
  } else {
   $297 = $a0;
   $298 = $lastx;
   $299 = ($297|0)>($298|0);
   if ($299) {
    $300 = $RunLength;
    $301 = $lastx;
    $302 = (($300) + ($301))|0;
    $303 = $pa;
    $304 = (($303) + 4|0);
    $pa = $304;
    HEAP32[$303>>2] = $302;
    $305 = $lastx;
    $306 = $a0;
    $307 = (($306) + ($305))|0;
    $a0 = $307;
    $RunLength = 0;
    $308 = $RunLength;
    $309 = (($308) + 0)|0;
    $310 = $pa;
    $311 = (($310) + 4|0);
    $pa = $311;
    HEAP32[$310>>2] = $309;
    $312 = $a0;
    $313 = (($312) + 0)|0;
    $a0 = $313;
    $RunLength = 0;
   }
  }
 }
 $445 = $sp;
 $446 = (($445) + 60|0);
 $447 = HEAP32[$446>>2]|0;
 $448 = $2;
 $449 = $thisrun;
 $450 = $pa;
 $451 = $lastx;
 FUNCTION_TABLE_viiii[$447 & 127]($448,$449,$450,$451);
 $452 = $BitsAvail;
 $453 = $sp;
 $454 = (($453) + 52|0);
 HEAP32[$454>>2] = $452;
 $455 = $BitAcc;
 $456 = $sp;
 $457 = (($456) + 48|0);
 HEAP32[$457>>2] = $455;
 $458 = $EOLcnt;
 $459 = $sp;
 $460 = (($459) + 56|0);
 HEAP32[$460>>2] = $458;
 $461 = $cp;
 $462 = $1;
 $463 = (($462) + 604|0);
 $464 = HEAP32[$463>>2]|0;
 $465 = $461;
 $466 = $464;
 $467 = (($465) - ($466))|0;
 $468 = $1;
 $469 = (($468) + 608|0);
 $470 = HEAP32[$469>>2]|0;
 $471 = (($470) - ($467))|0;
 HEAP32[$469>>2] = $471;
 $472 = $cp;
 $473 = $1;
 $474 = (($473) + 604|0);
 HEAP32[$474>>2] = $472;
 $0 = -1;
 $498 = $0;
 STACKTOP = sp;return ($498|0);
}
function _Fax3VGetField($tif,$tag,$ap) {
 $tif = $tif|0;
 $tag = $tag|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current2 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next3 = 0;
 var $arglist_next6 = 0, $arglist_next9 = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $tag;
 $3 = $ap;
 $4 = $1;
 $5 = (($4) + 576|0);
 $6 = HEAP32[$5>>2]|0;
 $sp = $6;
 $7 = $sp;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((27160|0),(25480|0),1198,(27848|0));
  // unreachable;
 }
 $9 = $2;
 if ((($9|0) == 65540)) {
  $15 = $1;
  $16 = (($15) + 576|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 60|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $arglist_current2 = HEAP32[$20>>2]|0;
  $21 = HEAP32[$arglist_current2>>2]|0;
  $arglist_next3 = (($arglist_current2) + 4|0);
  HEAP32[$20>>2] = $arglist_next3;
  HEAP32[$21>>2] = $19;
 } else if ((($9|0) == 327)) {
  $32 = $sp;
  $33 = (($32) + 16|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $3;
  $arglist_current11 = HEAP32[$35>>2]|0;
  $36 = HEAP32[$arglist_current11>>2]|0;
  $arglist_next12 = (($arglist_current11) + 4|0);
  HEAP32[$35>>2] = $arglist_next12;
  HEAP16[$36>>1] = $34;
 } else if ((($9|0) == 326)) {
  $27 = $sp;
  $28 = (($27) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $3;
  $arglist_current8 = HEAP32[$30>>2]|0;
  $31 = HEAP32[$arglist_current8>>2]|0;
  $arglist_next9 = (($arglist_current8) + 4|0);
  HEAP32[$30>>2] = $arglist_next9;
  HEAP32[$31>>2] = $29;
 } else if ((($9|0) == 65536)) {
  $10 = $sp;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $3;
  $arglist_current = HEAP32[$13>>2]|0;
  $14 = HEAP32[$arglist_current>>2]|0;
  $arglist_next = (($arglist_current) + 4|0);
  HEAP32[$13>>2] = $arglist_next;
  HEAP32[$14>>2] = $12;
 } else if ((($9|0) == 328)) {
  $37 = $sp;
  $38 = (($37) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $3;
  $arglist_current14 = HEAP32[$40>>2]|0;
  $41 = HEAP32[$arglist_current14>>2]|0;
  $arglist_next15 = (($arglist_current14) + 4|0);
  HEAP32[$40>>2] = $arglist_next15;
  HEAP32[$41>>2] = $39;
 } else if ((($9|0) == 293) | (($9|0) == 292)) {
  $22 = $sp;
  $23 = (($22) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $3;
  $arglist_current5 = HEAP32[$25>>2]|0;
  $26 = HEAP32[$arglist_current5>>2]|0;
  $arglist_next6 = (($arglist_current5) + 4|0);
  HEAP32[$25>>2] = $arglist_next6;
  HEAP32[$26>>2] = $24;
 } else {
  $42 = $sp;
  $43 = (($42) + 32|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $1;
  $46 = $2;
  $47 = $3;
  $48 = (FUNCTION_TABLE_iiii[$44 & 255]($45,$46,$47)|0);
  $0 = $48;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $0 = 1;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function _Fax3VSetField($tif,$tag,$ap) {
 $tif = $tif|0;
 $tag = $tag|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0;
 var $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $fip = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $tag;
 $3 = $ap;
 $4 = $1;
 $5 = (($4) + 576|0);
 $6 = HEAP32[$5>>2]|0;
 $sp = $6;
 $7 = $sp;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((27160|0),(25480|0),1151,(27808|0));
  // unreachable;
 }
 $9 = $sp;
 $10 = (($9) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((27824|0),(25480|0),1152,(27808|0));
  // unreachable;
 }
 $13 = $2;
 if ((($13|0) == 65540)) {
  $18 = $3;
  $arglist_current2 = HEAP32[$18>>2]|0;
  $19 = HEAP32[$arglist_current2>>2]|0;
  $arglist_next3 = (($arglist_current2) + 4|0);
  HEAP32[$18>>2] = $arglist_next3;
  $20 = $1;
  $21 = (($20) + 576|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 60|0);
  HEAP32[$23>>2] = $19;
  $0 = 1;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 } else if ((($13|0) == 326)) {
  $44 = $3;
  $arglist_current11 = HEAP32[$44>>2]|0;
  $45 = HEAP32[$arglist_current11>>2]|0;
  $arglist_next12 = (($arglist_current11) + 4|0);
  HEAP32[$44>>2] = $arglist_next12;
  $46 = $sp;
  $47 = (($46) + 24|0);
  HEAP32[$47>>2] = $45;
 } else if ((($13|0) == 328)) {
  $53 = $3;
  $arglist_current17 = HEAP32[$53>>2]|0;
  $54 = HEAP32[$arglist_current17>>2]|0;
  $arglist_next18 = (($arglist_current17) + 4|0);
  HEAP32[$53>>2] = $arglist_next18;
  $55 = $sp;
  $56 = (($55) + 20|0);
  HEAP32[$56>>2] = $54;
 } else if ((($13|0) == 292)) {
  $24 = $1;
  $25 = (($24) + 40|0);
  $26 = (($25) + 48|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = ($28|0)==(3);
  if ($29) {
   $30 = $3;
   $arglist_current5 = HEAP32[$30>>2]|0;
   $31 = HEAP32[$arglist_current5>>2]|0;
   $arglist_next6 = (($arglist_current5) + 4|0);
   HEAP32[$30>>2] = $arglist_next6;
   $32 = $sp;
   $33 = (($32) + 28|0);
   HEAP32[$33>>2] = $31;
  }
 } else if ((($13|0) == 293)) {
  $34 = $1;
  $35 = (($34) + 40|0);
  $36 = (($35) + 48|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = ($38|0)==(4);
  if ($39) {
   $40 = $3;
   $arglist_current8 = HEAP32[$40>>2]|0;
   $41 = HEAP32[$arglist_current8>>2]|0;
   $arglist_next9 = (($arglist_current8) + 4|0);
   HEAP32[$40>>2] = $arglist_next9;
   $42 = $sp;
   $43 = (($42) + 28|0);
   HEAP32[$43>>2] = $41;
  }
 } else if ((($13|0) == 327)) {
  $48 = $3;
  $arglist_current14 = HEAP32[$48>>2]|0;
  $49 = HEAP32[$arglist_current14>>2]|0;
  $arglist_next15 = (($arglist_current14) + 4|0);
  HEAP32[$48>>2] = $arglist_next15;
  $50 = $49&65535;
  $51 = $sp;
  $52 = (($51) + 16|0);
  HEAP16[$52>>1] = $50;
 } else if ((($13|0) == 65536)) {
  $14 = $3;
  $arglist_current = HEAP32[$14>>2]|0;
  $15 = HEAP32[$arglist_current>>2]|0;
  $arglist_next = (($arglist_current) + 4|0);
  HEAP32[$14>>2] = $arglist_next;
  $16 = $sp;
  $17 = (($16) + 4|0);
  HEAP32[$17>>2] = $15;
  $0 = 1;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 } else {
  $57 = $sp;
  $58 = (($57) + 36|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $1;
  $61 = $2;
  $62 = $3;
  $63 = (FUNCTION_TABLE_iiii[$59 & 255]($60,$61,$62)|0);
  $0 = $63;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 $64 = $1;
 $65 = $2;
 $66 = (_TIFFFieldWithTag($64,$65)|0);
 $fip = $66;
 $67 = ($66|0)!=(0|0);
 if (!($67)) {
  $0 = 0;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 $68 = $fip;
 $69 = (($68) + 24|0);
 $70 = HEAP16[$69>>1]|0;
 $71 = $70&65535;
 $72 = $71 & 31;
 $73 = 1 << $72;
 $74 = $fip;
 $75 = (($74) + 24|0);
 $76 = HEAP16[$75>>1]|0;
 $77 = $76&65535;
 $78 = (($77|0) / 32)&-1;
 $79 = $1;
 $80 = (($79) + 40|0);
 $81 = (($80) + ($78<<2)|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $82 | $73;
 HEAP32[$81>>2] = $83;
 $84 = $1;
 $85 = (($84) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86 | 8;
 HEAP32[$85>>2] = $87;
 $0 = 1;
 $88 = $0;
 STACKTOP = sp;return ($88|0);
}
function _Fax3PrintDir($tif,$fd,$flags) {
 $tif = $tif|0;
 $fd = $fd|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sep = 0, $sp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0;
 var $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr17 = 0, $vararg_ptr29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer33 = sp + 104|0;
 $vararg_buffer30 = sp;
 $vararg_buffer26 = sp + 72|0;
 $vararg_buffer24 = sp + 88|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 96|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer3 = sp + 56|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $0 = $tif;
 $1 = $fd;
 $2 = $flags;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $sp = $5;
 $6 = $sp;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((27160|0),(25480|0),1231,(27504|0));
  // unreachable;
 }
 $8 = $0;
 $9 = (($8) + 40|0);
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 512;
 $13 = ($12|0)!=(0);
 if ($13) {
  $sep = 27520;
  $14 = $0;
  $15 = (($14) + 40|0);
  $16 = (($15) + 48|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($18|0)==(4);
  if ($19) {
   $20 = $1;
   (_fprintf(($20|0),(27528|0),($vararg_buffer|0))|0);
   $21 = $sp;
   $22 = (($21) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 & 2;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $1;
    $27 = $sep;
    HEAP32[$vararg_buffer1>>2] = $27;
    (_fprintf(($26|0),(27552|0),($vararg_buffer1|0))|0);
   }
  } else {
   $28 = $1;
   (_fprintf(($28|0),(27576|0),($vararg_buffer3|0))|0);
   $29 = $sp;
   $30 = (($29) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 & 1;
   $33 = ($32|0)!=(0);
   if ($33) {
    $34 = $1;
    $35 = $sep;
    HEAP32[$vararg_buffer5>>2] = $35;
    (_fprintf(($34|0),(27600|0),($vararg_buffer5|0))|0);
    $sep = 27616;
   }
   $36 = $sp;
   $37 = (($36) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 & 4;
   $40 = ($39|0)!=(0);
   if ($40) {
    $41 = $1;
    $42 = $sep;
    HEAP32[$vararg_buffer8>>2] = $42;
    (_fprintf(($41|0),(27624|0),($vararg_buffer8|0))|0);
    $sep = 27616;
   }
   $43 = $sp;
   $44 = (($43) + 28|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 & 2;
   $47 = ($46|0)!=(0);
   if ($47) {
    $48 = $1;
    $49 = $sep;
    HEAP32[$vararg_buffer11>>2] = $49;
    (_fprintf(($48|0),(27552|0),($vararg_buffer11|0))|0);
   }
  }
  $50 = $1;
  $51 = $sp;
  $52 = (($51) + 28|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $sp;
  $55 = (($54) + 28|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $53;
  $vararg_ptr17 = (($vararg_buffer14) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $56;
  (_fprintf(($50|0),(27640|0),($vararg_buffer14|0))|0);
 }
 $57 = $0;
 $58 = (($57) + 40|0);
 $59 = (($58) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 & 8;
 $62 = ($61|0)!=(0);
 if ($62) {
  $63 = $1;
  (_fprintf(($63|0),(27656|0),($vararg_buffer18|0))|0);
  $64 = $sp;
  $65 = (($64) + 16|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66&65535;
  if ((($67|0) == 2)) {
   $70 = $1;
   (_fprintf(($70|0),(27704|0),($vararg_buffer24|0))|0);
  } else if ((($67|0) == 0)) {
   $68 = $1;
   (_fprintf(($68|0),(27672|0),($vararg_buffer20|0))|0);
  } else if ((($67|0) == 1)) {
   $69 = $1;
   (_fprintf(($69|0),(27680|0),($vararg_buffer22|0))|0);
  }
  $71 = $1;
  $72 = $sp;
  $73 = (($72) + 16|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74&65535;
  $76 = $sp;
  $77 = (($76) + 16|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78&65535;
  HEAP32[$vararg_buffer26>>2] = $75;
  $vararg_ptr29 = (($vararg_buffer26) + 4|0);
  HEAP32[$vararg_ptr29>>2] = $79;
  (_fprintf(($71|0),(27728|0),($vararg_buffer26|0))|0);
 }
 $80 = $0;
 $81 = (($80) + 40|0);
 $82 = (($81) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 4;
 $85 = ($84|0)!=(0);
 if ($85) {
  $86 = $1;
  $87 = $sp;
  $88 = (($87) + 24|0);
  $89 = HEAP32[$88>>2]|0;
  HEAP32[$vararg_buffer30>>2] = $89;
  (_fprintf(($86|0),(27744|0),($vararg_buffer30|0))|0);
 }
 $90 = $0;
 $91 = (($90) + 40|0);
 $92 = (($91) + 8|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $93 & 16;
 $95 = ($94|0)!=(0);
 if ($95) {
  $96 = $1;
  $97 = $sp;
  $98 = (($97) + 20|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$vararg_buffer33>>2] = $99;
  (_fprintf(($96|0),(27768|0),($vararg_buffer33|0))|0);
 }
 $100 = $sp;
 $101 = (($100) + 40|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(0|0);
 if (!($103)) {
  STACKTOP = sp;return;
 }
 $104 = $sp;
 $105 = (($104) + 40|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $0;
 $108 = $1;
 $109 = $2;
 FUNCTION_TABLE_viii[$106 & 255]($107,$108,$109);
 STACKTOP = sp;return;
}
function _Fax3FixupTags($tif) {
 $tif = $tif|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 STACKTOP = sp;return 1;
}
function _Fax3SetupState($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dsp = 0, $esp = 0, $needsRefLine = 0, $nruns = 0, $rowbytes = 0, $rowpixels = 0, $sp = 0, $td = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 40|0);
 $td = $3;
 $4 = $1;
 $5 = (($4) + 576|0);
 $6 = HEAP32[$5>>2]|0;
 $sp = $6;
 $7 = $1;
 $8 = (($7) + 576|0);
 $9 = HEAP32[$8>>2]|0;
 $dsp = $9;
 $10 = $td;
 $11 = (($10) + 44|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ($13|0)!=(1);
 if ($14) {
  $15 = $1;
  $16 = (($15) + 628|0);
  $17 = HEAP32[$16>>2]|0;
  _TIFFErrorExt($17,27296,27312,$vararg_buffer);
  $0 = 0;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 $18 = $1;
 $19 = (($18) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 1024;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $1;
  $24 = (_TIFFTileRowSize($23)|0);
  $rowbytes = $24;
  $25 = $td;
  $26 = (($25) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $rowpixels = $27;
 } else {
  $28 = $1;
  $29 = (_TIFFScanlineSize($28)|0);
  $rowbytes = $29;
  $30 = $td;
  $31 = (($30) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $rowpixels = $32;
 }
 $33 = $rowbytes;
 $34 = $sp;
 $35 = (($34) + 8|0);
 HEAP32[$35>>2] = $33;
 $36 = $rowpixels;
 $37 = $sp;
 $38 = (($37) + 12|0);
 HEAP32[$38>>2] = $36;
 $39 = $sp;
 $40 = (($39) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & 1;
 $43 = ($42|0)!=(0);
 if ($43) {
  $50 = 1;
 } else {
  $44 = $td;
  $45 = (($44) + 48|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = ($47|0)==(4);
  $50 = $48;
 }
 $49 = $50&1;
 $needsRefLine = $49;
 $51 = $dsp;
 $52 = (($51) + 64|0);
 HEAP32[$52>>2] = 0;
 $53 = $rowpixels;
 $54 = ($53>>>0)<(4294967264);
 if ($54) {
  $55 = $rowpixels;
  $56 = (($55) + 31)|0;
  $57 = (($56>>>0) / 32)&-1;
  $59 = $57;
 } else {
  $59 = 0;
 }
 $58 = $59<<5;
 $nruns = $58;
 $60 = $needsRefLine;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = $nruns;
  $63 = $62<<1;
  $64 = (($63>>>0) / 2)&-1;
  $65 = $nruns;
  $66 = ($64|0)==($65|0);
  if ($66) {
   $67 = $nruns;
   $68 = $67<<1;
   $69 = $68;
  } else {
   $69 = 0;
  }
  $nruns = $69;
 }
 $70 = $nruns;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $72 = $nruns;
  $73 = $72<<1;
  $74 = (($73>>>0) / 2)&-1;
  $75 = $nruns;
  $76 = ($74|0)==($75|0);
  if ($76) {
   $77 = $nruns;
   $78 = $77<<1;
   $80 = $78;
  } else {
   $80 = 0;
  }
  $79 = ($80|0)==(0);
  if (!($79)) {
   $87 = $1;
   $88 = $nruns;
   $89 = $88<<1;
   $90 = (($89>>>0) / 2)&-1;
   $91 = $nruns;
   $92 = ($90|0)==($91|0);
   if ($92) {
    $93 = $nruns;
    $94 = $93<<1;
    $95 = $94;
   } else {
    $95 = 0;
   }
   $96 = (__TIFFCheckMalloc($87,$95,4,27416)|0);
   $97 = $dsp;
   $98 = (($97) + 64|0);
   HEAP32[$98>>2] = $96;
   $99 = $dsp;
   $100 = (($99) + 64|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==(0|0);
   if ($102) {
    $0 = 0;
    $167 = $0;
    STACKTOP = sp;return ($167|0);
   }
   $103 = $dsp;
   $104 = (($103) + 64|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $nruns;
   $107 = $106<<1;
   $108 = (($107>>>0) / 2)&-1;
   $109 = $nruns;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = $nruns;
    $112 = $111<<1;
    $114 = $112;
   } else {
    $114 = 0;
   }
   $113 = $114<<2;
   _memset(($105|0),0,($113|0))|0;
   $115 = $dsp;
   $116 = (($115) + 64|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $dsp;
   $119 = (($118) + 72|0);
   HEAP32[$119>>2] = $117;
   $120 = $needsRefLine;
   $121 = ($120|0)!=(0);
   if ($121) {
    $122 = $dsp;
    $123 = (($122) + 64|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $nruns;
    $126 = (($124) + ($125<<2)|0);
    $127 = $dsp;
    $128 = (($127) + 68|0);
    HEAP32[$128>>2] = $126;
   } else {
    $129 = $dsp;
    $130 = (($129) + 68|0);
    HEAP32[$130>>2] = 0;
   }
   $131 = $td;
   $132 = (($131) + 48|0);
   $133 = HEAP16[$132>>1]|0;
   $134 = $133&65535;
   $135 = ($134|0)==(3);
   if ($135) {
    $136 = $dsp;
    $137 = (($136) + 28|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $138 & 1;
    $140 = ($139|0)!=(0);
    if ($140) {
     $141 = $1;
     $142 = (($141) + 532|0);
     HEAP32[$142>>2] = 105;
     $143 = $1;
     $144 = (($143) + 540|0);
     HEAP32[$144>>2] = 105;
     $145 = $1;
     $146 = (($145) + 548|0);
     HEAP32[$146>>2] = 105;
    }
   }
   $147 = $needsRefLine;
   $148 = ($147|0)!=(0);
   do {
    if ($148) {
     $149 = $1;
     $150 = (($149) + 576|0);
     $151 = HEAP32[$150>>2]|0;
     $esp = $151;
     $152 = $rowbytes;
     $153 = (__TIFFmalloc($152)|0);
     $154 = $esp;
     $155 = (($154) + 80|0);
     HEAP32[$155>>2] = $153;
     $156 = $esp;
     $157 = (($156) + 80|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==(0|0);
     if (!($159)) {
      break;
     }
     $160 = $1;
     $161 = (($160) + 628|0);
     $162 = HEAP32[$161>>2]|0;
     _TIFFErrorExt($162,27296,27448,$vararg_buffer3);
     $0 = 0;
     $167 = $0;
     STACKTOP = sp;return ($167|0);
    } else {
     $163 = $1;
     $164 = (($163) + 576|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (($165) + 80|0);
     HEAP32[$166>>2] = 0;
    }
   } while(0);
   $0 = 1;
   $167 = $0;
   STACKTOP = sp;return ($167|0);
  }
 }
 $81 = $1;
 $82 = (($81) + 628|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $1;
 $85 = HEAP32[$84>>2]|0;
 $86 = $rowpixels;
 HEAP32[$vararg_buffer1>>2] = $86;
 _TIFFErrorExt($83,$85,27368,$vararg_buffer1);
 $0 = 0;
 $167 = $0;
 STACKTOP = sp;return ($167|0);
}
function _Fax3PreDecode($tif,$s) {
 $tif = $tif|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $s;
 $2 = $0;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $sp = $4;
 $5 = $sp;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((27232|0),(25480|0),152,(27280|0));
  // unreachable;
 }
 $7 = $sp;
 $8 = (($7) + 52|0);
 HEAP32[$8>>2] = 0;
 $9 = $sp;
 $10 = (($9) + 48|0);
 HEAP32[$10>>2] = 0;
 $11 = $sp;
 $12 = (($11) + 56|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = (($13) + 40|0);
 $15 = (($14) + 54|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = ($17|0)!=(2);
 $19 = $18&1;
 $20 = (_TIFFGetBitRevTable($19)|0);
 $21 = $sp;
 $22 = (($21) + 44|0);
 HEAP32[$22>>2] = $20;
 $23 = $sp;
 $24 = (($23) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $37 = $sp;
  $38 = (($37) + 92|0);
  HEAP32[$38>>2] = 0;
  STACKTOP = sp;return 1;
 }
 $27 = $sp;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $sp;
 $31 = (($30) + 68|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$32>>2] = $29;
 $33 = $sp;
 $34 = (($33) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = $sp;
 $38 = (($37) + 92|0);
 HEAP32[$38>>2] = 0;
 STACKTOP = sp;return 1;
}
function _Fax3Decode1D($tif,$buf,$occ,$s) {
 $tif = $tif|0;
 $buf = $buf|0;
 $occ = $occ|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $BitAcc = 0, $BitsAvail = 0, $EOLcnt = 0, $RunLength = 0, $TabEnt = 0, $a0 = 0, $bitmap = 0, $cp = 0, $ep = 0, $lastx = 0, $pa = 0, $sp = 0;
 var $thisrun = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $buf;
 $3 = $occ;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $sp;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $lastx = $10;
 $11 = $sp;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $bitmap = $13;
 $14 = $3;
 $15 = $sp;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14|0) % ($17|0))&-1;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $1;
  $21 = (($20) + 628|0);
  $22 = HEAP32[$21>>2]|0;
  _TIFFErrorExt($22,27264,25760,$vararg_buffer);
  $0 = -1;
  $624 = $0;
  STACKTOP = sp;return ($624|0);
 }
 $23 = $sp;
 $24 = (($23) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $BitAcc = $25;
 $26 = $sp;
 $27 = (($26) + 52|0);
 $28 = HEAP32[$27>>2]|0;
 $BitsAvail = $28;
 $29 = $sp;
 $30 = (($29) + 56|0);
 $31 = HEAP32[$30>>2]|0;
 $EOLcnt = $31;
 $32 = $1;
 $33 = (($32) + 604|0);
 $34 = HEAP32[$33>>2]|0;
 $cp = $34;
 $35 = $cp;
 $36 = $1;
 $37 = (($36) + 608|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38)|0);
 $ep = $39;
 $40 = $sp;
 $41 = (($40) + 72|0);
 $42 = HEAP32[$41>>2]|0;
 $thisrun = $42;
 L7: while(1) {
  $43 = $3;
  $44 = ($43|0)>(0);
  if (!($44)) {
   label = 214;
   break;
  }
  $a0 = 0;
  $RunLength = 0;
  $45 = $thisrun;
  $pa = $45;
  $46 = $EOLcnt;
  $47 = ($46|0)==(0);
  if ($47) {
   while(1) {
    $48 = $BitsAvail;
    $49 = ($48|0)<(11);
    if ($49) {
     $50 = $cp;
     $51 = $ep;
     $52 = ($50>>>0)>=($51>>>0);
     if ($52) {
      $53 = $BitsAvail;
      $54 = ($53|0)==(0);
      if ($54) {
       label = 14;
       break L7;
      }
      $BitsAvail = 11;
     } else {
      $55 = $cp;
      $56 = (($55) + 1|0);
      $cp = $56;
      $57 = HEAP8[$55>>0]|0;
      $58 = $57&255;
      $59 = $bitmap;
      $60 = (($59) + ($58)|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61&255;
      $63 = $BitsAvail;
      $64 = $62 << $63;
      $65 = $BitAcc;
      $66 = $65 | $64;
      $BitAcc = $66;
      $67 = $BitsAvail;
      $68 = (($67) + 8)|0;
      $BitsAvail = $68;
      $69 = ($68|0)<(11);
      if ($69) {
       $70 = $cp;
       $71 = $ep;
       $72 = ($70>>>0)>=($71>>>0);
       if ($72) {
        $BitsAvail = 11;
       } else {
        $73 = $cp;
        $74 = (($73) + 1|0);
        $cp = $74;
        $75 = HEAP8[$73>>0]|0;
        $76 = $75&255;
        $77 = $bitmap;
        $78 = (($77) + ($76)|0);
        $79 = HEAP8[$78>>0]|0;
        $80 = $79&255;
        $81 = $BitsAvail;
        $82 = $80 << $81;
        $83 = $BitAcc;
        $84 = $83 | $82;
        $BitAcc = $84;
        $85 = $BitsAvail;
        $86 = (($85) + 8)|0;
        $BitsAvail = $86;
       }
      }
     }
    }
    $87 = $BitAcc;
    $88 = $87 & 2047;
    $89 = ($88|0)==(0);
    if ($89) {
     break;
    }
    $90 = $BitsAvail;
    $91 = (($90) - 1)|0;
    $BitsAvail = $91;
    $92 = $BitAcc;
    $93 = $92 >>> 1;
    $BitAcc = $93;
   }
  }
  while(1) {
   $94 = $BitsAvail;
   $95 = ($94|0)<(8);
   if ($95) {
    $96 = $cp;
    $97 = $ep;
    $98 = ($96>>>0)>=($97>>>0);
    if ($98) {
     $99 = $BitsAvail;
     $100 = ($99|0)==(0);
     if ($100) {
      label = 35;
      break L7;
     }
     $BitsAvail = 8;
    } else {
     $101 = $cp;
     $102 = (($101) + 1|0);
     $cp = $102;
     $103 = HEAP8[$101>>0]|0;
     $104 = $103&255;
     $105 = $bitmap;
     $106 = (($105) + ($104)|0);
     $107 = HEAP8[$106>>0]|0;
     $108 = $107&255;
     $109 = $BitsAvail;
     $110 = $108 << $109;
     $111 = $BitAcc;
     $112 = $111 | $110;
     $BitAcc = $112;
     $113 = $BitsAvail;
     $114 = (($113) + 8)|0;
     $BitsAvail = $114;
    }
   }
   $115 = $BitAcc;
   $116 = $115 & 255;
   $117 = ($116|0)!=(0);
   if ($117) {
    break;
   }
   $118 = $BitsAvail;
   $119 = (($118) - 8)|0;
   $BitsAvail = $119;
   $120 = $BitAcc;
   $121 = $120 >>> 8;
   $BitAcc = $121;
  }
  while(1) {
   $122 = $BitAcc;
   $123 = $122 & 1;
   $124 = ($123|0)==(0);
   if (!($124)) {
    break;
   }
   $125 = $BitsAvail;
   $126 = (($125) - 1)|0;
   $BitsAvail = $126;
   $127 = $BitAcc;
   $128 = $127 >>> 1;
   $BitAcc = $128;
  }
  $129 = $BitsAvail;
  $130 = (($129) - 1)|0;
  $BitsAvail = $130;
  $131 = $BitAcc;
  $132 = $131 >>> 1;
  $BitAcc = $132;
  $EOLcnt = 0;
  L65: while(1) {
   while(1) {
    $133 = $BitsAvail;
    $134 = ($133|0)<(12);
    if ($134) {
     $135 = $cp;
     $136 = $ep;
     $137 = ($135>>>0)>=($136>>>0);
     if ($137) {
      $138 = $BitsAvail;
      $139 = ($138|0)==(0);
      if ($139) {
       label = 61;
       break L7;
      }
      $BitsAvail = 12;
     } else {
      $140 = $cp;
      $141 = (($140) + 1|0);
      $cp = $141;
      $142 = HEAP8[$140>>0]|0;
      $143 = $142&255;
      $144 = $bitmap;
      $145 = (($144) + ($143)|0);
      $146 = HEAP8[$145>>0]|0;
      $147 = $146&255;
      $148 = $BitsAvail;
      $149 = $147 << $148;
      $150 = $BitAcc;
      $151 = $150 | $149;
      $BitAcc = $151;
      $152 = $BitsAvail;
      $153 = (($152) + 8)|0;
      $BitsAvail = $153;
      $154 = ($153|0)<(12);
      if ($154) {
       $155 = $cp;
       $156 = $ep;
       $157 = ($155>>>0)>=($156>>>0);
       if ($157) {
        $BitsAvail = 12;
       } else {
        $158 = $cp;
        $159 = (($158) + 1|0);
        $cp = $159;
        $160 = HEAP8[$158>>0]|0;
        $161 = $160&255;
        $162 = $bitmap;
        $163 = (($162) + ($161)|0);
        $164 = HEAP8[$163>>0]|0;
        $165 = $164&255;
        $166 = $BitsAvail;
        $167 = $165 << $166;
        $168 = $BitAcc;
        $169 = $168 | $167;
        $BitAcc = $169;
        $170 = $BitsAvail;
        $171 = (($170) + 8)|0;
        $BitsAvail = $171;
       }
      }
     }
    }
    $172 = $BitAcc;
    $173 = $172 & 4095;
    $174 = (28968 + ($173<<3)|0);
    $TabEnt = $174;
    $175 = $TabEnt;
    $176 = (($175) + 1|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = $177&255;
    $179 = $BitsAvail;
    $180 = (($179) - ($178))|0;
    $BitsAvail = $180;
    $181 = $TabEnt;
    $182 = (($181) + 1|0);
    $183 = HEAP8[$182>>0]|0;
    $184 = $183&255;
    $185 = $BitAcc;
    $186 = $185 >>> $184;
    $BitAcc = $186;
    $187 = $TabEnt;
    $188 = HEAP8[$187>>0]|0;
    $189 = $188&255;
    if ((($189|0) == 12)) {
     label = 75;
     break L65;
    } else if ((($189|0) == 7)) {
     break;
    } else if (!((($189|0) == 11) | (($189|0) == 9))) {
     label = 80;
     break L65;
    }
    $202 = $TabEnt;
    $203 = (($202) + 4|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = $a0;
    $206 = (($205) + ($204))|0;
    $a0 = $206;
    $207 = $TabEnt;
    $208 = (($207) + 4|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = $RunLength;
    $211 = (($210) + ($209))|0;
    $RunLength = $211;
   }
   $190 = $RunLength;
   $191 = $TabEnt;
   $192 = (($191) + 4|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (($190) + ($193))|0;
   $195 = $pa;
   $196 = (($195) + 4|0);
   $pa = $196;
   HEAP32[$195>>2] = $194;
   $197 = $TabEnt;
   $198 = (($197) + 4|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $a0;
   $201 = (($200) + ($199))|0;
   $a0 = $201;
   $RunLength = 0;
   $217 = $a0;
   $218 = $lastx;
   $219 = ($217|0)>=($218|0);
   if ($219) {
    label = 83;
    break;
   }
   while(1) {
    $220 = $BitsAvail;
    $221 = ($220|0)<(13);
    if ($221) {
     $222 = $cp;
     $223 = $ep;
     $224 = ($222>>>0)>=($223>>>0);
     if ($224) {
      $225 = $BitsAvail;
      $226 = ($225|0)==(0);
      if ($226) {
       label = 90;
       break L7;
      }
      $BitsAvail = 13;
     } else {
      $227 = $cp;
      $228 = (($227) + 1|0);
      $cp = $228;
      $229 = HEAP8[$227>>0]|0;
      $230 = $229&255;
      $231 = $bitmap;
      $232 = (($231) + ($230)|0);
      $233 = HEAP8[$232>>0]|0;
      $234 = $233&255;
      $235 = $BitsAvail;
      $236 = $234 << $235;
      $237 = $BitAcc;
      $238 = $237 | $236;
      $BitAcc = $238;
      $239 = $BitsAvail;
      $240 = (($239) + 8)|0;
      $BitsAvail = $240;
      $241 = ($240|0)<(13);
      if ($241) {
       $242 = $cp;
       $243 = $ep;
       $244 = ($242>>>0)>=($243>>>0);
       if ($244) {
        $BitsAvail = 13;
       } else {
        $245 = $cp;
        $246 = (($245) + 1|0);
        $cp = $246;
        $247 = HEAP8[$245>>0]|0;
        $248 = $247&255;
        $249 = $bitmap;
        $250 = (($249) + ($248)|0);
        $251 = HEAP8[$250>>0]|0;
        $252 = $251&255;
        $253 = $BitsAvail;
        $254 = $252 << $253;
        $255 = $BitAcc;
        $256 = $255 | $254;
        $BitAcc = $256;
        $257 = $BitsAvail;
        $258 = (($257) + 8)|0;
        $BitsAvail = $258;
       }
      }
     }
    }
    $259 = $BitAcc;
    $260 = $259 & 8191;
    $261 = (61736 + ($260<<3)|0);
    $TabEnt = $261;
    $262 = $TabEnt;
    $263 = (($262) + 1|0);
    $264 = HEAP8[$263>>0]|0;
    $265 = $264&255;
    $266 = $BitsAvail;
    $267 = (($266) - ($265))|0;
    $BitsAvail = $267;
    $268 = $TabEnt;
    $269 = (($268) + 1|0);
    $270 = HEAP8[$269>>0]|0;
    $271 = $270&255;
    $272 = $BitAcc;
    $273 = $272 >>> $271;
    $BitAcc = $273;
    $274 = $TabEnt;
    $275 = HEAP8[$274>>0]|0;
    $276 = $275&255;
    if ((($276|0) == 12)) {
     label = 104;
     break L65;
    } else if ((($276|0) == 8)) {
     break;
    } else if (!((($276|0) == 11) | (($276|0) == 10))) {
     label = 109;
     break L65;
    }
    $289 = $TabEnt;
    $290 = (($289) + 4|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = $a0;
    $293 = (($292) + ($291))|0;
    $a0 = $293;
    $294 = $TabEnt;
    $295 = (($294) + 4|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = $RunLength;
    $298 = (($297) + ($296))|0;
    $RunLength = $298;
   }
   $277 = $RunLength;
   $278 = $TabEnt;
   $279 = (($278) + 4|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = (($277) + ($280))|0;
   $282 = $pa;
   $283 = (($282) + 4|0);
   $pa = $283;
   HEAP32[$282>>2] = $281;
   $284 = $TabEnt;
   $285 = (($284) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $a0;
   $288 = (($287) + ($286))|0;
   $a0 = $288;
   $RunLength = 0;
   $304 = $a0;
   $305 = $lastx;
   $306 = ($304|0)>=($305|0);
   if ($306) {
    label = 112;
    break;
   }
   $307 = $pa;
   $308 = (($307) + -4|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = ($309|0)==(0);
   if ($310) {
    $311 = $pa;
    $312 = (($311) + -8|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = ($313|0)==(0);
    if ($314) {
     $315 = $pa;
     $316 = (($315) + -8|0);
     $pa = $316;
    }
   }
  }
  if ((label|0) == 75) {
   label = 0;
   $EOLcnt = 1;
  }
  else if ((label|0) == 80) {
   label = 0;
   $212 = $1;
   $213 = $sp;
   $214 = (($213) + 92|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $a0;
   _Fax3Unexpected(27264,$212,$215,$216);
  }
  else if ((label|0) == 83) {
   label = 0;
  }
  else if ((label|0) == 104) {
   label = 0;
   $EOLcnt = 1;
  }
  else if ((label|0) == 109) {
   label = 0;
   $299 = $1;
   $300 = $sp;
   $301 = (($300) + 92|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = $a0;
   _Fax3Unexpected(27264,$299,$302,$303);
  }
  else if ((label|0) == 112) {
   label = 0;
  }
  $398 = $RunLength;
  $399 = ($398|0)!=(0);
  if ($399) {
   $400 = $RunLength;
   $401 = (($400) + 0)|0;
   $402 = $pa;
   $403 = (($402) + 4|0);
   $pa = $403;
   HEAP32[$402>>2] = $401;
   $404 = $a0;
   $405 = (($404) + 0)|0;
   $a0 = $405;
   $RunLength = 0;
  }
  $406 = $a0;
  $407 = $lastx;
  $408 = ($406|0)!=($407|0);
  if ($408) {
   $409 = $1;
   $410 = $sp;
   $411 = (($410) + 92|0);
   $412 = HEAP32[$411>>2]|0;
   $413 = $a0;
   $414 = $lastx;
   _Fax3BadLength(27264,$409,$412,$413,$414);
   while(1) {
    $415 = $a0;
    $416 = $lastx;
    $417 = ($415|0)>($416|0);
    if ($417) {
     $418 = $pa;
     $419 = $thisrun;
     $420 = ($418>>>0)>($419>>>0);
     $626 = $420;
    } else {
     $626 = 0;
    }
    if (!($626)) {
     break;
    }
    $421 = $pa;
    $422 = (($421) + -4|0);
    $pa = $422;
    $423 = HEAP32[$422>>2]|0;
    $424 = $a0;
    $425 = (($424) - ($423))|0;
    $a0 = $425;
   }
   $426 = $a0;
   $427 = $lastx;
   $428 = ($426|0)<($427|0);
   if ($428) {
    $429 = $a0;
    $430 = ($429|0)<(0);
    if ($430) {
     $a0 = 0;
    }
    $431 = $pa;
    $432 = $thisrun;
    $433 = $431;
    $434 = $432;
    $435 = (($433) - ($434))|0;
    $436 = (($435|0) / 4)&-1;
    $437 = $436 & 1;
    $438 = ($437|0)!=(0);
    if ($438) {
     $439 = $RunLength;
     $440 = (($439) + 0)|0;
     $441 = $pa;
     $442 = (($441) + 4|0);
     $pa = $442;
     HEAP32[$441>>2] = $440;
     $443 = $a0;
     $444 = (($443) + 0)|0;
     $a0 = $444;
     $RunLength = 0;
    }
    $445 = $RunLength;
    $446 = $lastx;
    $447 = $a0;
    $448 = (($446) - ($447))|0;
    $449 = (($445) + ($448))|0;
    $450 = $pa;
    $451 = (($450) + 4|0);
    $pa = $451;
    HEAP32[$450>>2] = $449;
    $452 = $lastx;
    $453 = $a0;
    $454 = (($452) - ($453))|0;
    $455 = $a0;
    $456 = (($455) + ($454))|0;
    $a0 = $456;
    $RunLength = 0;
   } else {
    $457 = $a0;
    $458 = $lastx;
    $459 = ($457|0)>($458|0);
    if ($459) {
     $460 = $RunLength;
     $461 = $lastx;
     $462 = (($460) + ($461))|0;
     $463 = $pa;
     $464 = (($463) + 4|0);
     $pa = $464;
     HEAP32[$463>>2] = $462;
     $465 = $lastx;
     $466 = $a0;
     $467 = (($466) + ($465))|0;
     $a0 = $467;
     $RunLength = 0;
     $468 = $RunLength;
     $469 = (($468) + 0)|0;
     $470 = $pa;
     $471 = (($470) + 4|0);
     $pa = $471;
     HEAP32[$470>>2] = $469;
     $472 = $a0;
     $473 = (($472) + 0)|0;
     $a0 = $473;
     $RunLength = 0;
    }
   }
  }
  $474 = $sp;
  $475 = (($474) + 60|0);
  $476 = HEAP32[$475>>2]|0;
  $477 = $2;
  $478 = $thisrun;
  $479 = $pa;
  $480 = $lastx;
  FUNCTION_TABLE_viiii[$476 & 127]($477,$478,$479,$480);
  $481 = $sp;
  $482 = (($481) + 8|0);
  $483 = HEAP32[$482>>2]|0;
  $484 = $2;
  $485 = (($484) + ($483)|0);
  $2 = $485;
  $486 = $sp;
  $487 = (($486) + 8|0);
  $488 = HEAP32[$487>>2]|0;
  $489 = $3;
  $490 = (($489) - ($488))|0;
  $3 = $490;
  $491 = $sp;
  $492 = (($491) + 92|0);
  $493 = HEAP32[$492>>2]|0;
  $494 = (($493) + 1)|0;
  HEAP32[$492>>2] = $494;
 }
 if ((label|0) == 14) {
  label = 180;
 }
 else if ((label|0) == 35) {
  label = 180;
 }
 else if ((label|0) == 61) {
  label = 117;
 }
 else if ((label|0) == 90) {
  label = 117;
 }
 else if ((label|0) == 214) {
  $601 = $BitsAvail;
  $602 = $sp;
  $603 = (($602) + 52|0);
  HEAP32[$603>>2] = $601;
  $604 = $BitAcc;
  $605 = $sp;
  $606 = (($605) + 48|0);
  HEAP32[$606>>2] = $604;
  $607 = $EOLcnt;
  $608 = $sp;
  $609 = (($608) + 56|0);
  HEAP32[$609>>2] = $607;
  $610 = $cp;
  $611 = $1;
  $612 = (($611) + 604|0);
  $613 = HEAP32[$612>>2]|0;
  $614 = $610;
  $615 = $613;
  $616 = (($614) - ($615))|0;
  $617 = $1;
  $618 = (($617) + 608|0);
  $619 = HEAP32[$618>>2]|0;
  $620 = (($619) - ($616))|0;
  HEAP32[$618>>2] = $620;
  $621 = $cp;
  $622 = $1;
  $623 = (($622) + 604|0);
  HEAP32[$623>>2] = $621;
  $0 = 1;
  $624 = $0;
  STACKTOP = sp;return ($624|0);
 }
 if ((label|0) == 117) {
  $317 = $1;
  $318 = $sp;
  $319 = (($318) + 92|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = $a0;
  _Fax3PrematureEOF(27264,$317,$320,$321);
  $322 = $RunLength;
  $323 = ($322|0)!=(0);
  if ($323) {
   $324 = $RunLength;
   $325 = (($324) + 0)|0;
   $326 = $pa;
   $327 = (($326) + 4|0);
   $pa = $327;
   HEAP32[$326>>2] = $325;
   $328 = $a0;
   $329 = (($328) + 0)|0;
   $a0 = $329;
   $RunLength = 0;
  }
  $330 = $a0;
  $331 = $lastx;
  $332 = ($330|0)!=($331|0);
  if ($332) {
   $333 = $1;
   $334 = $sp;
   $335 = (($334) + 92|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = $a0;
   $338 = $lastx;
   _Fax3BadLength(27264,$333,$336,$337,$338);
   while(1) {
    $339 = $a0;
    $340 = $lastx;
    $341 = ($339|0)>($340|0);
    if ($341) {
     $342 = $pa;
     $343 = $thisrun;
     $344 = ($342>>>0)>($343>>>0);
     $625 = $344;
    } else {
     $625 = 0;
    }
    if (!($625)) {
     break;
    }
    $345 = $pa;
    $346 = (($345) + -4|0);
    $pa = $346;
    $347 = HEAP32[$346>>2]|0;
    $348 = $a0;
    $349 = (($348) - ($347))|0;
    $a0 = $349;
   }
   $350 = $a0;
   $351 = $lastx;
   $352 = ($350|0)<($351|0);
   if ($352) {
    $353 = $a0;
    $354 = ($353|0)<(0);
    if ($354) {
     $a0 = 0;
    }
    $355 = $pa;
    $356 = $thisrun;
    $357 = $355;
    $358 = $356;
    $359 = (($357) - ($358))|0;
    $360 = (($359|0) / 4)&-1;
    $361 = $360 & 1;
    $362 = ($361|0)!=(0);
    if ($362) {
     $363 = $RunLength;
     $364 = (($363) + 0)|0;
     $365 = $pa;
     $366 = (($365) + 4|0);
     $pa = $366;
     HEAP32[$365>>2] = $364;
     $367 = $a0;
     $368 = (($367) + 0)|0;
     $a0 = $368;
     $RunLength = 0;
    }
    $369 = $RunLength;
    $370 = $lastx;
    $371 = $a0;
    $372 = (($370) - ($371))|0;
    $373 = (($369) + ($372))|0;
    $374 = $pa;
    $375 = (($374) + 4|0);
    $pa = $375;
    HEAP32[$374>>2] = $373;
    $376 = $lastx;
    $377 = $a0;
    $378 = (($376) - ($377))|0;
    $379 = $a0;
    $380 = (($379) + ($378))|0;
    $a0 = $380;
    $RunLength = 0;
   } else {
    $381 = $a0;
    $382 = $lastx;
    $383 = ($381|0)>($382|0);
    if ($383) {
     $384 = $RunLength;
     $385 = $lastx;
     $386 = (($384) + ($385))|0;
     $387 = $pa;
     $388 = (($387) + 4|0);
     $pa = $388;
     HEAP32[$387>>2] = $386;
     $389 = $lastx;
     $390 = $a0;
     $391 = (($390) + ($389))|0;
     $a0 = $391;
     $RunLength = 0;
     $392 = $RunLength;
     $393 = (($392) + 0)|0;
     $394 = $pa;
     $395 = (($394) + 4|0);
     $pa = $395;
     HEAP32[$394>>2] = $393;
     $396 = $a0;
     $397 = (($396) + 0)|0;
     $a0 = $397;
     $RunLength = 0;
    }
   }
  }
 }
 else if ((label|0) == 180) {
  $495 = $RunLength;
  $496 = ($495|0)!=(0);
  if ($496) {
   $497 = $RunLength;
   $498 = (($497) + 0)|0;
   $499 = $pa;
   $500 = (($499) + 4|0);
   $pa = $500;
   HEAP32[$499>>2] = $498;
   $501 = $a0;
   $502 = (($501) + 0)|0;
   $a0 = $502;
   $RunLength = 0;
  }
  $503 = $a0;
  $504 = $lastx;
  $505 = ($503|0)!=($504|0);
  if ($505) {
   $506 = $1;
   $507 = $sp;
   $508 = (($507) + 92|0);
   $509 = HEAP32[$508>>2]|0;
   $510 = $a0;
   $511 = $lastx;
   _Fax3BadLength(27264,$506,$509,$510,$511);
   while(1) {
    $512 = $a0;
    $513 = $lastx;
    $514 = ($512|0)>($513|0);
    if ($514) {
     $515 = $pa;
     $516 = $thisrun;
     $517 = ($515>>>0)>($516>>>0);
     $627 = $517;
    } else {
     $627 = 0;
    }
    if (!($627)) {
     break;
    }
    $518 = $pa;
    $519 = (($518) + -4|0);
    $pa = $519;
    $520 = HEAP32[$519>>2]|0;
    $521 = $a0;
    $522 = (($521) - ($520))|0;
    $a0 = $522;
   }
   $523 = $a0;
   $524 = $lastx;
   $525 = ($523|0)<($524|0);
   if ($525) {
    $526 = $a0;
    $527 = ($526|0)<(0);
    if ($527) {
     $a0 = 0;
    }
    $528 = $pa;
    $529 = $thisrun;
    $530 = $528;
    $531 = $529;
    $532 = (($530) - ($531))|0;
    $533 = (($532|0) / 4)&-1;
    $534 = $533 & 1;
    $535 = ($534|0)!=(0);
    if ($535) {
     $536 = $RunLength;
     $537 = (($536) + 0)|0;
     $538 = $pa;
     $539 = (($538) + 4|0);
     $pa = $539;
     HEAP32[$538>>2] = $537;
     $540 = $a0;
     $541 = (($540) + 0)|0;
     $a0 = $541;
     $RunLength = 0;
    }
    $542 = $RunLength;
    $543 = $lastx;
    $544 = $a0;
    $545 = (($543) - ($544))|0;
    $546 = (($542) + ($545))|0;
    $547 = $pa;
    $548 = (($547) + 4|0);
    $pa = $548;
    HEAP32[$547>>2] = $546;
    $549 = $lastx;
    $550 = $a0;
    $551 = (($549) - ($550))|0;
    $552 = $a0;
    $553 = (($552) + ($551))|0;
    $a0 = $553;
    $RunLength = 0;
   } else {
    $554 = $a0;
    $555 = $lastx;
    $556 = ($554|0)>($555|0);
    if ($556) {
     $557 = $RunLength;
     $558 = $lastx;
     $559 = (($557) + ($558))|0;
     $560 = $pa;
     $561 = (($560) + 4|0);
     $pa = $561;
     HEAP32[$560>>2] = $559;
     $562 = $lastx;
     $563 = $a0;
     $564 = (($563) + ($562))|0;
     $a0 = $564;
     $RunLength = 0;
     $565 = $RunLength;
     $566 = (($565) + 0)|0;
     $567 = $pa;
     $568 = (($567) + 4|0);
     $pa = $568;
     HEAP32[$567>>2] = $566;
     $569 = $a0;
     $570 = (($569) + 0)|0;
     $a0 = $570;
     $RunLength = 0;
    }
   }
  }
 }
 $571 = $sp;
 $572 = (($571) + 60|0);
 $573 = HEAP32[$572>>2]|0;
 $574 = $2;
 $575 = $thisrun;
 $576 = $pa;
 $577 = $lastx;
 FUNCTION_TABLE_viiii[$573 & 127]($574,$575,$576,$577);
 $578 = $BitsAvail;
 $579 = $sp;
 $580 = (($579) + 52|0);
 HEAP32[$580>>2] = $578;
 $581 = $BitAcc;
 $582 = $sp;
 $583 = (($582) + 48|0);
 HEAP32[$583>>2] = $581;
 $584 = $EOLcnt;
 $585 = $sp;
 $586 = (($585) + 56|0);
 HEAP32[$586>>2] = $584;
 $587 = $cp;
 $588 = $1;
 $589 = (($588) + 604|0);
 $590 = HEAP32[$589>>2]|0;
 $591 = $587;
 $592 = $590;
 $593 = (($591) - ($592))|0;
 $594 = $1;
 $595 = (($594) + 608|0);
 $596 = HEAP32[$595>>2]|0;
 $597 = (($596) - ($593))|0;
 HEAP32[$595>>2] = $597;
 $598 = $cp;
 $599 = $1;
 $600 = (($599) + 604|0);
 HEAP32[$600>>2] = $598;
 $0 = -1;
 $624 = $0;
 STACKTOP = sp;return ($624|0);
}
function _Fax3PreEncode($tif,$s) {
 $tif = $tif|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res = 0.0, $sp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $s;
 $2 = $0;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $sp = $4;
 $5 = $sp;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((27232|0),(25480|0),722,(27248|0));
  // unreachable;
 }
 $7 = $sp;
 $8 = (($7) + 52|0);
 HEAP32[$8>>2] = 8;
 $9 = $sp;
 $10 = (($9) + 48|0);
 HEAP32[$10>>2] = 0;
 $11 = $sp;
 $12 = (($11) + 76|0);
 HEAP32[$12>>2] = 0;
 $13 = $sp;
 $14 = (($13) + 80|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $sp;
  $18 = (($17) + 80|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $sp;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  __TIFFmemset($19,0,$22);
 }
 $23 = $sp;
 $24 = (($23) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $51 = $sp;
  $52 = (($51) + 88|0);
  HEAP32[$52>>2] = 0;
  $53 = $sp;
  $54 = (($53) + 84|0);
  HEAP32[$54>>2] = 0;
  $55 = $sp;
  $56 = (($55) + 92|0);
  HEAP32[$56>>2] = 0;
  STACKTOP = sp;return 1;
 }
 $28 = $0;
 $29 = (($28) + 40|0);
 $30 = (($29) + 80|0);
 $31 = +HEAPF32[$30>>2];
 $res = $31;
 $32 = $0;
 $33 = (($32) + 40|0);
 $34 = (($33) + 84|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = ($36|0)==(3);
 if ($37) {
  $38 = $res;
  $39 = $38 * 2.5399999618530273;
  $res = $39;
 }
 $40 = $res;
 $41 = $40 > 150.0;
 $42 = $41 ? 4 : 2;
 $43 = $sp;
 $44 = (($43) + 88|0);
 HEAP32[$44>>2] = $42;
 $45 = $sp;
 $46 = (($45) + 88|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) - 1)|0;
 $49 = $sp;
 $50 = (($49) + 84|0);
 HEAP32[$50>>2] = $48;
 $55 = $sp;
 $56 = (($55) + 92|0);
 HEAP32[$56>>2] = 0;
 STACKTOP = sp;return 1;
}
function _Fax3PostEncode($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 576|0);
 $3 = HEAP32[$2>>2]|0;
 $sp = $3;
 $4 = $sp;
 $5 = (($4) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(8);
 if (!($7)) {
  STACKTOP = sp;return 1;
 }
 $8 = $0;
 $9 = (($8) + 608|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = (($11) + 592|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)>=($13|0);
 if ($14) {
  $15 = $0;
  (_TIFFFlushData1($15)|0);
 }
 $16 = $sp;
 $17 = (($16) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18&255;
 $20 = $0;
 $21 = (($20) + 604|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 1|0);
 HEAP32[$21>>2] = $23;
 HEAP8[$22>>0] = $19;
 $24 = $0;
 $25 = (($24) + 608|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[$25>>2] = $27;
 $28 = $sp;
 $29 = (($28) + 48|0);
 HEAP32[$29>>2] = 0;
 $30 = $sp;
 $31 = (($30) + 52|0);
 HEAP32[$31>>2] = 8;
 STACKTOP = sp;return 1;
}
function _Fax3Encode($tif,$bp,$cc,$s) {
 $tif = $tif|0;
 $bp = $bp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $sp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $bp;
 $3 = $cc;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $3;
 $9 = $sp;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8|0) % ($11|0))&-1;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $1;
  $15 = (($14) + 628|0);
  $16 = HEAP32[$15>>2]|0;
  _TIFFErrorExt($16,27184,26088,$vararg_buffer);
  $0 = 0;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 while(1) {
  $17 = $3;
  $18 = ($17|0)>(0);
  if (!($18)) {
   label = 23;
   break;
  }
  $19 = $sp;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2;
  $23 = ($22|0)==(0);
  if ($23) {
   $24 = $1;
   _Fax3PutEOL($24);
  }
  $25 = $sp;
  $26 = (($25) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & 1;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $sp;
   $31 = (($30) + 76|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = $1;
    $35 = $2;
    $36 = $sp;
    $37 = (($36) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (_Fax3Encode1DRow($34,$35,$38)|0);
    $40 = ($39|0)!=(0);
    if (!($40)) {
     label = 10;
     break;
    }
    $41 = $sp;
    $42 = (($41) + 76|0);
    HEAP32[$42>>2] = 1;
   } else {
    $43 = $1;
    $44 = $2;
    $45 = $sp;
    $46 = (($45) + 80|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $sp;
    $49 = (($48) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (_Fax3Encode2DRow($43,$44,$47,$50)|0);
    $52 = ($51|0)!=(0);
    if (!($52)) {
     label = 13;
     break;
    }
    $53 = $sp;
    $54 = (($53) + 84|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) + -1)|0;
    HEAP32[$54>>2] = $56;
   }
   $57 = $sp;
   $58 = (($57) + 84|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(0);
   if ($60) {
    $61 = $sp;
    $62 = (($61) + 76|0);
    HEAP32[$62>>2] = 0;
    $63 = $sp;
    $64 = (($63) + 88|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) - 1)|0;
    $67 = $sp;
    $68 = (($67) + 84|0);
    HEAP32[$68>>2] = $66;
   } else {
    $69 = $sp;
    $70 = (($69) + 80|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $2;
    $73 = $sp;
    $74 = (($73) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    __TIFFmemcpy($71,$72,$75);
   }
  } else {
   $76 = $1;
   $77 = $2;
   $78 = $sp;
   $79 = (($78) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (_Fax3Encode1DRow($76,$77,$80)|0);
   $82 = ($81|0)!=(0);
   if (!($82)) {
    label = 20;
    break;
   }
  }
  $83 = $sp;
  $84 = (($83) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $2;
  $87 = (($86) + ($85)|0);
  $2 = $87;
  $88 = $sp;
  $89 = (($88) + 8|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $3;
  $92 = (($91) - ($90))|0;
  $3 = $92;
 }
 if ((label|0) == 10) {
  $0 = 0;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 else if ((label|0) == 20) {
  $0 = 0;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 else if ((label|0) == 23) {
  $0 = 1;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 return (0)|0;
}
function _Fax3Close($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code = 0, $i = 0, $length = 0;
 var $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 576|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = (($8) + 576|0);
 $10 = HEAP32[$9>>2]|0;
 $sp = $10;
 $code = 1;
 $length = 12;
 $11 = $sp;
 $12 = (($11) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $code;
  $17 = $16 << 1;
  $18 = $sp;
  $19 = (($18) + 76|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  $22 = $21&1;
  $23 = $17 | $22;
  $code = $23;
  $24 = $length;
  $25 = (($24) + 1)|0;
  $length = $25;
 }
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = ($26|0)<(6);
  if (!($27)) {
   break;
  }
  $28 = $0;
  $29 = $code;
  $30 = $length;
  _Fax3PutBits($28,$29,$30);
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 $33 = $0;
 $34 = (($33) + 608|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $0;
 $37 = (($36) + 592|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($35|0)>=($38|0);
 if ($39) {
  $40 = $0;
  (_TIFFFlushData1($40)|0);
 }
 $41 = $sp;
 $42 = (($41) + 48|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43&255;
 $45 = $0;
 $46 = (($45) + 604|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 1|0);
 HEAP32[$46>>2] = $48;
 HEAP8[$47>>0] = $44;
 $49 = $0;
 $50 = (($49) + 608|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$50>>2] = $52;
 $53 = $sp;
 $54 = (($53) + 48|0);
 HEAP32[$54>>2] = 0;
 $55 = $sp;
 $56 = (($55) + 52|0);
 HEAP32[$56>>2] = 8;
 STACKTOP = sp;return;
}
function _Fax3Cleanup($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 576|0);
 $3 = HEAP32[$2>>2]|0;
 $sp = $3;
 $4 = $sp;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((27160|0),(25480|0),1109,(27168|0));
  // unreachable;
 }
 $6 = $sp;
 $7 = (($6) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = (($9) + 668|0);
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = $8;
 $12 = $sp;
 $13 = (($12) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (($15) + 668|0);
 HEAP32[$16>>2] = $14;
 $17 = $sp;
 $18 = (($17) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = (($20) + 668|0);
 $22 = (($21) + 8|0);
 HEAP32[$22>>2] = $19;
 $23 = $sp;
 $24 = (($23) + 64|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $sp;
  $28 = (($27) + 64|0);
  $29 = HEAP32[$28>>2]|0;
  __TIFFfree($29);
 }
 $30 = $sp;
 $31 = (($30) + 80|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $37 = $0;
  $38 = (($37) + 576|0);
  $39 = HEAP32[$38>>2]|0;
  __TIFFfree($39);
  $40 = $0;
  $41 = (($40) + 576|0);
  HEAP32[$41>>2] = 0;
  $42 = $0;
  __TIFFSetDefaultCompressionState($42);
  STACKTOP = sp;return;
 }
 $34 = $sp;
 $35 = (($34) + 80|0);
 $36 = HEAP32[$35>>2]|0;
 __TIFFfree($36);
 $37 = $0;
 $38 = (($37) + 576|0);
 $39 = HEAP32[$38>>2]|0;
 __TIFFfree($39);
 $40 = $0;
 $41 = (($40) + 576|0);
 HEAP32[$41>>2] = 0;
 $42 = $0;
 __TIFFSetDefaultCompressionState($42);
 STACKTOP = sp;return;
}
function _Fax3Unexpected($module,$tif,$line,$a0) {
 $module = $module|0;
 $tif = $tif|0;
 $line = $line|0;
 $a0 = $a0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $module;
 $1 = $tif;
 $2 = $line;
 $3 = $a0;
 $4 = $1;
 $5 = (($4) + 628|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $2;
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 1024;
 $13 = ($12|0)!=(0);
 $14 = $13 ? 25888 : 25896;
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 1024;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $1;
  $21 = (($20) + 492|0);
  $22 = HEAP32[$21>>2]|0;
  $27 = $22;
 } else {
  $23 = $1;
  $24 = (($23) + 452|0);
  $25 = HEAP32[$24>>2]|0;
  $27 = $25;
 }
 $26 = $3;
 HEAP32[$vararg_buffer>>2] = $8;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $27;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $26;
 _TIFFErrorExt($6,$7,25952,$vararg_buffer);
 STACKTOP = sp;return;
}
function _Fax3Extension($module,$tif,$line,$a0) {
 $module = $module|0;
 $tif = $tif|0;
 $line = $line|0;
 $a0 = $a0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $module;
 $1 = $tif;
 $2 = $line;
 $3 = $a0;
 $4 = $1;
 $5 = (($4) + 628|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $2;
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 1024;
 $13 = ($12|0)!=(0);
 $14 = $13 ? 25888 : 25896;
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 1024;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $1;
  $21 = (($20) + 492|0);
  $22 = HEAP32[$21>>2]|0;
  $27 = $22;
 } else {
  $23 = $1;
  $24 = (($23) + 452|0);
  $25 = HEAP32[$24>>2]|0;
  $27 = $25;
 }
 $26 = $3;
 HEAP32[$vararg_buffer>>2] = $8;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $27;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $26;
 _TIFFErrorExt($6,$7,26760,$vararg_buffer);
 STACKTOP = sp;return;
}
function _Fax3PrematureEOF($module,$tif,$line,$a0) {
 $module = $module|0;
 $tif = $tif|0;
 $line = $line|0;
 $a0 = $a0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $module;
 $1 = $tif;
 $2 = $line;
 $3 = $a0;
 $4 = $1;
 $5 = (($4) + 628|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $2;
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 1024;
 $13 = ($12|0)!=(0);
 $14 = $13 ? 25888 : 25896;
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 1024;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $1;
  $21 = (($20) + 492|0);
  $22 = HEAP32[$21>>2]|0;
  $27 = $22;
 } else {
  $23 = $1;
  $24 = (($23) + 452|0);
  $25 = HEAP32[$24>>2]|0;
  $27 = $25;
 }
 $26 = $3;
 HEAP32[$vararg_buffer>>2] = $8;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $27;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $26;
 _TIFFWarningExt($6,$7,25904,$vararg_buffer);
 STACKTOP = sp;return;
}
function _Fax3BadLength($module,$tif,$line,$a0,$lastx) {
 $module = $module|0;
 $tif = $tif|0;
 $line = $line|0;
 $a0 = $a0|0;
 $lastx = $lastx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $module;
 $1 = $tif;
 $2 = $line;
 $3 = $a0;
 $4 = $lastx;
 $5 = $1;
 $6 = (($5) + 628|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $3;
 $10 = $4;
 $11 = ($9>>>0)<($10>>>0);
 $12 = $11 ? 25848 : 25864;
 $13 = $2;
 $14 = $1;
 $15 = (($14) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 1024;
 $18 = ($17|0)!=(0);
 $19 = $18 ? 25888 : 25896;
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 1024;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $1;
  $26 = (($25) + 492|0);
  $27 = HEAP32[$26>>2]|0;
  $33 = $27;
 } else {
  $28 = $1;
  $29 = (($28) + 452|0);
  $30 = HEAP32[$29>>2]|0;
  $33 = $30;
 }
 $31 = $3;
 $32 = $4;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $19;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $33;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $31;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $32;
 _TIFFWarningExt($7,$8,25800,$vararg_buffer);
 STACKTOP = sp;return;
}
function _Fax3Encode2DRow($tif,$bp,$rp,$bits) {
 $tif = $tif|0;
 $bp = $bp|0;
 $rp = $rp|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $a0 = 0, $a1 = 0, $a2 = 0, $b1 = 0, $b2 = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $bp;
 $2 = $rp;
 $3 = $bits;
 $a0 = 0;
 $4 = $1;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 >> 7;
 $8 = $7 & 1;
 $9 = ($8|0)!=(0);
 if ($9) {
  $14 = 0;
 } else {
  $10 = $1;
  $11 = $3;
  $12 = (_find0span($10,0,$11)|0);
  $13 = (0 + ($12))|0;
  $14 = $13;
 }
 $a1 = $14;
 $15 = $2;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 >> 7;
 $19 = $18 & 1;
 $20 = ($19|0)!=(0);
 if ($20) {
  $25 = 0;
 } else {
  $21 = $2;
  $22 = $3;
  $23 = (_find0span($21,0,$22)|0);
  $24 = (0 + ($23))|0;
  $25 = $24;
 }
 $b1 = $25;
 while(1) {
  $26 = $b1;
  $27 = $3;
  $28 = ($26>>>0)<($27>>>0);
  if ($28) {
   $29 = $b1;
   $30 = $b1;
   $31 = $30 >>> 3;
   $32 = $2;
   $33 = (($32) + ($31)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $b1;
   $37 = $36 & 7;
   $38 = (7 - ($37))|0;
   $39 = $35 >> $38;
   $40 = $39 & 1;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $2;
    $43 = $b1;
    $44 = $3;
    $45 = (_find1span($42,$43,$44)|0);
    $51 = $45;
   } else {
    $46 = $2;
    $47 = $b1;
    $48 = $3;
    $49 = (_find0span($46,$47,$48)|0);
    $51 = $49;
   }
   $50 = (($29) + ($51))|0;
   $53 = $50;
  } else {
   $52 = $3;
   $53 = $52;
  }
  $b2 = $53;
  $54 = $b2;
  $55 = $a1;
  $56 = ($54>>>0)>=($55>>>0);
  if ($56) {
   $57 = $b1;
   $58 = $a1;
   $59 = (($57) - ($58))|0;
   $d = $59;
   $60 = $d;
   $61 = (-3)<=($60|0);
   if ($61) {
    $62 = $d;
    $63 = ($62|0)<=(3);
    if ($63) {
     $130 = $0;
     $131 = $d;
     $132 = (($131) + 3)|0;
     $133 = (26136 + (($132*6)|0)|0);
     $134 = (($133) + 2|0);
     $135 = HEAP16[$134>>1]|0;
     $136 = $135&65535;
     $137 = $d;
     $138 = (($137) + 3)|0;
     $139 = (26136 + (($138*6)|0)|0);
     $140 = HEAP16[$139>>1]|0;
     $141 = $140&65535;
     _Fax3PutBits($130,$136,$141);
     $142 = $a1;
     $a0 = $142;
    } else {
     label = 17;
    }
   } else {
    label = 17;
   }
   if ((label|0) == 17) {
    label = 0;
    $64 = $a1;
    $65 = $3;
    $66 = ($64>>>0)<($65>>>0);
    if ($66) {
     $67 = $a1;
     $68 = $a1;
     $69 = $68 >>> 3;
     $70 = $1;
     $71 = (($70) + ($69)|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = $a1;
     $75 = $74 & 7;
     $76 = (7 - ($75))|0;
     $77 = $73 >> $76;
     $78 = $77 & 1;
     $79 = ($78|0)!=(0);
     if ($79) {
      $80 = $1;
      $81 = $a1;
      $82 = $3;
      $83 = (_find1span($80,$81,$82)|0);
      $89 = $83;
     } else {
      $84 = $1;
      $85 = $a1;
      $86 = $3;
      $87 = (_find0span($84,$85,$86)|0);
      $89 = $87;
     }
     $88 = (($67) + ($89))|0;
     $91 = $88;
    } else {
     $90 = $3;
     $91 = $90;
    }
    $a2 = $91;
    $92 = $0;
    $93 = HEAP16[((26128 + 2|0))>>1]|0;
    $94 = $93&65535;
    $95 = HEAP16[26128>>1]|0;
    $96 = $95&65535;
    _Fax3PutBits($92,$94,$96);
    $97 = $a0;
    $98 = $a1;
    $99 = (($97) + ($98))|0;
    $100 = ($99|0)==(0);
    if ($100) {
     label = 25;
    } else {
     $101 = $a0;
     $102 = $101 >>> 3;
     $103 = $1;
     $104 = (($103) + ($102)|0);
     $105 = HEAP8[$104>>0]|0;
     $106 = $105&255;
     $107 = $a0;
     $108 = $107 & 7;
     $109 = (7 - ($108))|0;
     $110 = $106 >> $109;
     $111 = $110 & 1;
     $112 = ($111|0)==(0);
     if ($112) {
      label = 25;
     } else {
      $121 = $0;
      $122 = $a1;
      $123 = $a0;
      $124 = (($122) - ($123))|0;
      _putspan($121,$124,24792);
      $125 = $0;
      $126 = $a2;
      $127 = $a1;
      $128 = (($126) - ($127))|0;
      _putspan($125,$128,24136);
     }
    }
    if ((label|0) == 25) {
     label = 0;
     $113 = $0;
     $114 = $a1;
     $115 = $a0;
     $116 = (($114) - ($115))|0;
     _putspan($113,$116,24136);
     $117 = $0;
     $118 = $a2;
     $119 = $a1;
     $120 = (($118) - ($119))|0;
     _putspan($117,$120,24792);
    }
    $129 = $a2;
    $a0 = $129;
   }
  } else {
   $143 = $0;
   $144 = HEAP16[((26184 + 2|0))>>1]|0;
   $145 = $144&65535;
   $146 = HEAP16[26184>>1]|0;
   $147 = $146&65535;
   _Fax3PutBits($143,$145,$147);
   $148 = $b2;
   $a0 = $148;
  }
  $149 = $a0;
  $150 = $3;
  $151 = ($149>>>0)>=($150>>>0);
  if ($151) {
   break;
  }
  $152 = $a0;
  $153 = $a0;
  $154 = $153 >>> 3;
  $155 = $1;
  $156 = (($155) + ($154)|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = $157&255;
  $159 = $a0;
  $160 = $159 & 7;
  $161 = (7 - ($160))|0;
  $162 = $158 >> $161;
  $163 = $162 & 1;
  $164 = ($163|0)!=(0);
  if ($164) {
   $165 = $1;
   $166 = $a0;
   $167 = $3;
   $168 = (_find1span($165,$166,$167)|0);
   $174 = $168;
  } else {
   $169 = $1;
   $170 = $a0;
   $171 = $3;
   $172 = (_find0span($169,$170,$171)|0);
   $174 = $172;
  }
  $173 = (($152) + ($174))|0;
  $a1 = $173;
  $175 = $a0;
  $176 = $a0;
  $177 = $176 >>> 3;
  $178 = $1;
  $179 = (($178) + ($177)|0);
  $180 = HEAP8[$179>>0]|0;
  $181 = $180&255;
  $182 = $a0;
  $183 = $182 & 7;
  $184 = (7 - ($183))|0;
  $185 = $181 >> $184;
  $186 = $185 & 1;
  $187 = ($186|0)!=(0);
  if ($187) {
   $192 = $2;
   $193 = $a0;
   $194 = $3;
   $195 = (_find0span($192,$193,$194)|0);
   $197 = $195;
  } else {
   $188 = $2;
   $189 = $a0;
   $190 = $3;
   $191 = (_find1span($188,$189,$190)|0);
   $197 = $191;
  }
  $196 = (($175) + ($197))|0;
  $b1 = $196;
  $198 = $b1;
  $199 = $a0;
  $200 = $199 >>> 3;
  $201 = $1;
  $202 = (($201) + ($200)|0);
  $203 = HEAP8[$202>>0]|0;
  $204 = $203&255;
  $205 = $a0;
  $206 = $205 & 7;
  $207 = (7 - ($206))|0;
  $208 = $204 >> $207;
  $209 = $208 & 1;
  $210 = ($209|0)!=(0);
  if ($210) {
   $211 = $2;
   $212 = $b1;
   $213 = $3;
   $214 = (_find1span($211,$212,$213)|0);
   $220 = $214;
  } else {
   $215 = $2;
   $216 = $b1;
   $217 = $3;
   $218 = (_find0span($215,$216,$217)|0);
   $220 = $218;
  }
  $219 = (($198) + ($220))|0;
  $b1 = $219;
 }
 STACKTOP = sp;return 1;
}
function _Fax3PutBits($tif,$bits,$length) {
 $tif = $tif|0;
 $bits = $bits|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $bit = 0, $data = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $bits;
 $2 = $length;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $sp = $5;
 $6 = $sp;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $bit = $8;
 $9 = $sp;
 $10 = (($9) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $data = $11;
 while(1) {
  $12 = $2;
  $13 = $bit;
  $14 = ($12>>>0)>($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $1;
  $16 = $2;
  $17 = $bit;
  $18 = (($16) - ($17))|0;
  $19 = $15 >>> $18;
  $20 = $data;
  $21 = $20 | $19;
  $data = $21;
  $22 = $bit;
  $23 = $2;
  $24 = (($23) - ($22))|0;
  $2 = $24;
  $25 = $0;
  $26 = (($25) + 608|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $0;
  $29 = (($28) + 592|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27|0)>=($30|0);
  if ($31) {
   $32 = $0;
   (_TIFFFlushData1($32)|0);
  }
  $33 = $data;
  $34 = $33&255;
  $35 = $0;
  $36 = (($35) + 604|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 1|0);
  HEAP32[$36>>2] = $38;
  HEAP8[$37>>0] = $34;
  $39 = $0;
  $40 = (($39) + 608|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  $data = 0;
  $bit = 8;
 }
 $43 = $2;
 $44 = ($43>>>0)<(9);
 if (!($44)) {
  ___assert_fail((26000|0),(25480|0),608,(26016|0));
  // unreachable;
 }
 $45 = $1;
 $46 = $2;
 $47 = (26032 + ($46<<2)|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $45 & $48;
 $50 = $bit;
 $51 = $2;
 $52 = (($50) - ($51))|0;
 $53 = $49 << $52;
 $54 = $data;
 $55 = $54 | $53;
 $data = $55;
 $56 = $2;
 $57 = $bit;
 $58 = (($57) - ($56))|0;
 $bit = $58;
 $59 = $bit;
 $60 = ($59|0)==(0);
 if (!($60)) {
  $79 = $data;
  $80 = $sp;
  $81 = (($80) + 48|0);
  HEAP32[$81>>2] = $79;
  $82 = $bit;
  $83 = $sp;
  $84 = (($83) + 52|0);
  HEAP32[$84>>2] = $82;
  STACKTOP = sp;return;
 }
 $61 = $0;
 $62 = (($61) + 608|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $0;
 $65 = (($64) + 592|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($63|0)>=($66|0);
 if ($67) {
  $68 = $0;
  (_TIFFFlushData1($68)|0);
 }
 $69 = $data;
 $70 = $69&255;
 $71 = $0;
 $72 = (($71) + 604|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($73) + 1|0);
 HEAP32[$72>>2] = $74;
 HEAP8[$73>>0] = $70;
 $75 = $0;
 $76 = (($75) + 608|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + 1)|0;
 HEAP32[$76>>2] = $78;
 $data = 0;
 $bit = 8;
 $79 = $data;
 $80 = $sp;
 $81 = (($80) + 48|0);
 HEAP32[$81>>2] = $79;
 $82 = $bit;
 $83 = $sp;
 $84 = (($83) + 52|0);
 HEAP32[$84>>2] = $82;
 STACKTOP = sp;return;
}
function _Fax3Decode2D($tif,$buf,$occ,$s) {
 $tif = $tif|0;
 $buf = $buf|0;
 $occ = $occ|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $BitAcc = 0, $BitsAvail = 0, $EOLcnt = 0, $RunLength = 0, $TabEnt = 0, $a0 = 0, $b1 = 0;
 var $bitmap = 0, $cp = 0, $ep = 0, $is1D = 0, $lastx = 0, $pa = 0, $pb = 0, $sp = 0, $thisrun = 0, $vararg_buffer = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $buf;
 $3 = $occ;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $sp;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $lastx = $10;
 $11 = $sp;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $bitmap = $13;
 $14 = $3;
 $15 = $sp;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14|0) % ($17|0))&-1;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $1;
  $21 = (($20) + 628|0);
  $22 = HEAP32[$21>>2]|0;
  _TIFFErrorExt($22,27488,25760,$vararg_buffer);
  $0 = -1;
  $1502 = $0;
  STACKTOP = sp;return ($1502|0);
 }
 $23 = $sp;
 $24 = (($23) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $BitAcc = $25;
 $26 = $sp;
 $27 = (($26) + 52|0);
 $28 = HEAP32[$27>>2]|0;
 $BitsAvail = $28;
 $29 = $sp;
 $30 = (($29) + 56|0);
 $31 = HEAP32[$30>>2]|0;
 $EOLcnt = $31;
 $32 = $1;
 $33 = (($32) + 604|0);
 $34 = HEAP32[$33>>2]|0;
 $cp = $34;
 $35 = $cp;
 $36 = $1;
 $37 = (($36) + 608|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38)|0);
 $ep = $39;
 L7: while(1) {
  $40 = $3;
  $41 = ($40|0)>(0);
  if (!($41)) {
   label = 517;
   break;
  }
  $a0 = 0;
  $RunLength = 0;
  $42 = $sp;
  $43 = (($42) + 72|0);
  $44 = HEAP32[$43>>2]|0;
  $thisrun = $44;
  $pa = $44;
  $45 = $EOLcnt;
  $46 = ($45|0)==(0);
  if ($46) {
   while(1) {
    $47 = $BitsAvail;
    $48 = ($47|0)<(11);
    if ($48) {
     $49 = $cp;
     $50 = $ep;
     $51 = ($49>>>0)>=($50>>>0);
     if ($51) {
      $52 = $BitsAvail;
      $53 = ($52|0)==(0);
      if ($53) {
       label = 14;
       break L7;
      }
      $BitsAvail = 11;
     } else {
      $54 = $cp;
      $55 = (($54) + 1|0);
      $cp = $55;
      $56 = HEAP8[$54>>0]|0;
      $57 = $56&255;
      $58 = $bitmap;
      $59 = (($58) + ($57)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = $60&255;
      $62 = $BitsAvail;
      $63 = $61 << $62;
      $64 = $BitAcc;
      $65 = $64 | $63;
      $BitAcc = $65;
      $66 = $BitsAvail;
      $67 = (($66) + 8)|0;
      $BitsAvail = $67;
      $68 = ($67|0)<(11);
      if ($68) {
       $69 = $cp;
       $70 = $ep;
       $71 = ($69>>>0)>=($70>>>0);
       if ($71) {
        $BitsAvail = 11;
       } else {
        $72 = $cp;
        $73 = (($72) + 1|0);
        $cp = $73;
        $74 = HEAP8[$72>>0]|0;
        $75 = $74&255;
        $76 = $bitmap;
        $77 = (($76) + ($75)|0);
        $78 = HEAP8[$77>>0]|0;
        $79 = $78&255;
        $80 = $BitsAvail;
        $81 = $79 << $80;
        $82 = $BitAcc;
        $83 = $82 | $81;
        $BitAcc = $83;
        $84 = $BitsAvail;
        $85 = (($84) + 8)|0;
        $BitsAvail = $85;
       }
      }
     }
    }
    $86 = $BitAcc;
    $87 = $86 & 2047;
    $88 = ($87|0)==(0);
    if ($88) {
     break;
    }
    $89 = $BitsAvail;
    $90 = (($89) - 1)|0;
    $BitsAvail = $90;
    $91 = $BitAcc;
    $92 = $91 >>> 1;
    $BitAcc = $92;
   }
  }
  while(1) {
   $93 = $BitsAvail;
   $94 = ($93|0)<(8);
   if ($94) {
    $95 = $cp;
    $96 = $ep;
    $97 = ($95>>>0)>=($96>>>0);
    if ($97) {
     $98 = $BitsAvail;
     $99 = ($98|0)==(0);
     if ($99) {
      label = 35;
      break L7;
     }
     $BitsAvail = 8;
    } else {
     $100 = $cp;
     $101 = (($100) + 1|0);
     $cp = $101;
     $102 = HEAP8[$100>>0]|0;
     $103 = $102&255;
     $104 = $bitmap;
     $105 = (($104) + ($103)|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = $106&255;
     $108 = $BitsAvail;
     $109 = $107 << $108;
     $110 = $BitAcc;
     $111 = $110 | $109;
     $BitAcc = $111;
     $112 = $BitsAvail;
     $113 = (($112) + 8)|0;
     $BitsAvail = $113;
    }
   }
   $114 = $BitAcc;
   $115 = $114 & 255;
   $116 = ($115|0)!=(0);
   if ($116) {
    break;
   }
   $117 = $BitsAvail;
   $118 = (($117) - 8)|0;
   $BitsAvail = $118;
   $119 = $BitAcc;
   $120 = $119 >>> 8;
   $BitAcc = $120;
  }
  while(1) {
   $121 = $BitAcc;
   $122 = $121 & 1;
   $123 = ($122|0)==(0);
   if (!($123)) {
    break;
   }
   $124 = $BitsAvail;
   $125 = (($124) - 1)|0;
   $BitsAvail = $125;
   $126 = $BitAcc;
   $127 = $126 >>> 1;
   $BitAcc = $127;
  }
  $128 = $BitsAvail;
  $129 = (($128) - 1)|0;
  $BitsAvail = $129;
  $130 = $BitAcc;
  $131 = $130 >>> 1;
  $BitAcc = $131;
  $EOLcnt = 0;
  $132 = $BitsAvail;
  $133 = ($132|0)<(1);
  if ($133) {
   $134 = $cp;
   $135 = $ep;
   $136 = ($134>>>0)>=($135>>>0);
   if ($136) {
    $137 = $BitsAvail;
    $138 = ($137|0)==(0);
    if ($138) {
     label = 57;
     break;
    }
    $BitsAvail = 1;
   } else {
    $139 = $cp;
    $140 = (($139) + 1|0);
    $cp = $140;
    $141 = HEAP8[$139>>0]|0;
    $142 = $141&255;
    $143 = $bitmap;
    $144 = (($143) + ($142)|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $147 = $BitsAvail;
    $148 = $146 << $147;
    $149 = $BitAcc;
    $150 = $149 | $148;
    $BitAcc = $150;
    $151 = $BitsAvail;
    $152 = (($151) + 8)|0;
    $BitsAvail = $152;
   }
  }
  $153 = $BitAcc;
  $154 = $153 & 1;
  $is1D = $154;
  $155 = $BitsAvail;
  $156 = (($155) - 1)|0;
  $BitsAvail = $156;
  $157 = $BitAcc;
  $158 = $157 >>> 1;
  $BitAcc = $158;
  $159 = $sp;
  $160 = (($159) + 68|0);
  $161 = HEAP32[$160>>2]|0;
  $pb = $161;
  $162 = $pb;
  $163 = (($162) + 4|0);
  $pb = $163;
  $164 = HEAP32[$162>>2]|0;
  $b1 = $164;
  $165 = $is1D;
  $166 = ($165|0)!=(0);
  if ($166) {
   L79: while(1) {
    while(1) {
     $167 = $BitsAvail;
     $168 = ($167|0)<(12);
     if ($168) {
      $169 = $cp;
      $170 = $ep;
      $171 = ($169>>>0)>=($170>>>0);
      if ($171) {
       $172 = $BitsAvail;
       $173 = ($172|0)==(0);
       if ($173) {
        label = 73;
        break L7;
       }
       $BitsAvail = 12;
      } else {
       $174 = $cp;
       $175 = (($174) + 1|0);
       $cp = $175;
       $176 = HEAP8[$174>>0]|0;
       $177 = $176&255;
       $178 = $bitmap;
       $179 = (($178) + ($177)|0);
       $180 = HEAP8[$179>>0]|0;
       $181 = $180&255;
       $182 = $BitsAvail;
       $183 = $181 << $182;
       $184 = $BitAcc;
       $185 = $184 | $183;
       $BitAcc = $185;
       $186 = $BitsAvail;
       $187 = (($186) + 8)|0;
       $BitsAvail = $187;
       $188 = ($187|0)<(12);
       if ($188) {
        $189 = $cp;
        $190 = $ep;
        $191 = ($189>>>0)>=($190>>>0);
        if ($191) {
         $BitsAvail = 12;
        } else {
         $192 = $cp;
         $193 = (($192) + 1|0);
         $cp = $193;
         $194 = HEAP8[$192>>0]|0;
         $195 = $194&255;
         $196 = $bitmap;
         $197 = (($196) + ($195)|0);
         $198 = HEAP8[$197>>0]|0;
         $199 = $198&255;
         $200 = $BitsAvail;
         $201 = $199 << $200;
         $202 = $BitAcc;
         $203 = $202 | $201;
         $BitAcc = $203;
         $204 = $BitsAvail;
         $205 = (($204) + 8)|0;
         $BitsAvail = $205;
        }
       }
      }
     }
     $206 = $BitAcc;
     $207 = $206 & 4095;
     $208 = (28968 + ($207<<3)|0);
     $TabEnt = $208;
     $209 = $TabEnt;
     $210 = (($209) + 1|0);
     $211 = HEAP8[$210>>0]|0;
     $212 = $211&255;
     $213 = $BitsAvail;
     $214 = (($213) - ($212))|0;
     $BitsAvail = $214;
     $215 = $TabEnt;
     $216 = (($215) + 1|0);
     $217 = HEAP8[$216>>0]|0;
     $218 = $217&255;
     $219 = $BitAcc;
     $220 = $219 >>> $218;
     $BitAcc = $220;
     $221 = $TabEnt;
     $222 = HEAP8[$221>>0]|0;
     $223 = $222&255;
     if ((($223|0) == 12)) {
      label = 87;
      break L79;
     } else if ((($223|0) == 7)) {
      break;
     } else if (!((($223|0) == 11) | (($223|0) == 9))) {
      label = 92;
      break L79;
     }
     $236 = $TabEnt;
     $237 = (($236) + 4|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = $a0;
     $240 = (($239) + ($238))|0;
     $a0 = $240;
     $241 = $TabEnt;
     $242 = (($241) + 4|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = $RunLength;
     $245 = (($244) + ($243))|0;
     $RunLength = $245;
    }
    $224 = $RunLength;
    $225 = $TabEnt;
    $226 = (($225) + 4|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = (($224) + ($227))|0;
    $229 = $pa;
    $230 = (($229) + 4|0);
    $pa = $230;
    HEAP32[$229>>2] = $228;
    $231 = $TabEnt;
    $232 = (($231) + 4|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $a0;
    $235 = (($234) + ($233))|0;
    $a0 = $235;
    $RunLength = 0;
    $251 = $a0;
    $252 = $lastx;
    $253 = ($251|0)>=($252|0);
    if ($253) {
     label = 95;
     break;
    }
    while(1) {
     $254 = $BitsAvail;
     $255 = ($254|0)<(13);
     if ($255) {
      $256 = $cp;
      $257 = $ep;
      $258 = ($256>>>0)>=($257>>>0);
      if ($258) {
       $259 = $BitsAvail;
       $260 = ($259|0)==(0);
       if ($260) {
        label = 102;
        break L7;
       }
       $BitsAvail = 13;
      } else {
       $261 = $cp;
       $262 = (($261) + 1|0);
       $cp = $262;
       $263 = HEAP8[$261>>0]|0;
       $264 = $263&255;
       $265 = $bitmap;
       $266 = (($265) + ($264)|0);
       $267 = HEAP8[$266>>0]|0;
       $268 = $267&255;
       $269 = $BitsAvail;
       $270 = $268 << $269;
       $271 = $BitAcc;
       $272 = $271 | $270;
       $BitAcc = $272;
       $273 = $BitsAvail;
       $274 = (($273) + 8)|0;
       $BitsAvail = $274;
       $275 = ($274|0)<(13);
       if ($275) {
        $276 = $cp;
        $277 = $ep;
        $278 = ($276>>>0)>=($277>>>0);
        if ($278) {
         $BitsAvail = 13;
        } else {
         $279 = $cp;
         $280 = (($279) + 1|0);
         $cp = $280;
         $281 = HEAP8[$279>>0]|0;
         $282 = $281&255;
         $283 = $bitmap;
         $284 = (($283) + ($282)|0);
         $285 = HEAP8[$284>>0]|0;
         $286 = $285&255;
         $287 = $BitsAvail;
         $288 = $286 << $287;
         $289 = $BitAcc;
         $290 = $289 | $288;
         $BitAcc = $290;
         $291 = $BitsAvail;
         $292 = (($291) + 8)|0;
         $BitsAvail = $292;
        }
       }
      }
     }
     $293 = $BitAcc;
     $294 = $293 & 8191;
     $295 = (61736 + ($294<<3)|0);
     $TabEnt = $295;
     $296 = $TabEnt;
     $297 = (($296) + 1|0);
     $298 = HEAP8[$297>>0]|0;
     $299 = $298&255;
     $300 = $BitsAvail;
     $301 = (($300) - ($299))|0;
     $BitsAvail = $301;
     $302 = $TabEnt;
     $303 = (($302) + 1|0);
     $304 = HEAP8[$303>>0]|0;
     $305 = $304&255;
     $306 = $BitAcc;
     $307 = $306 >>> $305;
     $BitAcc = $307;
     $308 = $TabEnt;
     $309 = HEAP8[$308>>0]|0;
     $310 = $309&255;
     if ((($310|0) == 12)) {
      label = 116;
      break L79;
     } else if ((($310|0) == 8)) {
      break;
     } else if (!((($310|0) == 11) | (($310|0) == 10))) {
      label = 121;
      break L79;
     }
     $323 = $TabEnt;
     $324 = (($323) + 4|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = $a0;
     $327 = (($326) + ($325))|0;
     $a0 = $327;
     $328 = $TabEnt;
     $329 = (($328) + 4|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = $RunLength;
     $332 = (($331) + ($330))|0;
     $RunLength = $332;
    }
    $311 = $RunLength;
    $312 = $TabEnt;
    $313 = (($312) + 4|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = (($311) + ($314))|0;
    $316 = $pa;
    $317 = (($316) + 4|0);
    $pa = $317;
    HEAP32[$316>>2] = $315;
    $318 = $TabEnt;
    $319 = (($318) + 4|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = $a0;
    $322 = (($321) + ($320))|0;
    $a0 = $322;
    $RunLength = 0;
    $338 = $a0;
    $339 = $lastx;
    $340 = ($338|0)>=($339|0);
    if ($340) {
     label = 124;
     break;
    }
    $341 = $pa;
    $342 = (($341) + -4|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = ($343|0)==(0);
    if ($344) {
     $345 = $pa;
     $346 = (($345) + -8|0);
     $347 = HEAP32[$346>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $349 = $pa;
      $350 = (($349) + -8|0);
      $pa = $350;
     }
    }
   }
   if ((label|0) == 87) {
    label = 0;
    $EOLcnt = 1;
   }
   else if ((label|0) == 92) {
    label = 0;
    $246 = $1;
    $247 = $sp;
    $248 = (($247) + 92|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = $a0;
    _Fax3Unexpected(27488,$246,$249,$250);
   }
   else if ((label|0) == 95) {
    label = 0;
   }
   else if ((label|0) == 116) {
    label = 0;
    $EOLcnt = 1;
   }
   else if ((label|0) == 121) {
    label = 0;
    $333 = $1;
    $334 = $sp;
    $335 = (($334) + 92|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = $a0;
    _Fax3Unexpected(27488,$333,$336,$337);
   }
   else if ((label|0) == 124) {
    label = 0;
   }
   $432 = $RunLength;
   $433 = ($432|0)!=(0);
   if ($433) {
    $434 = $RunLength;
    $435 = (($434) + 0)|0;
    $436 = $pa;
    $437 = (($436) + 4|0);
    $pa = $437;
    HEAP32[$436>>2] = $435;
    $438 = $a0;
    $439 = (($438) + 0)|0;
    $a0 = $439;
    $RunLength = 0;
   }
   $440 = $a0;
   $441 = $lastx;
   $442 = ($440|0)!=($441|0);
   if ($442) {
    $443 = $1;
    $444 = $sp;
    $445 = (($444) + 92|0);
    $446 = HEAP32[$445>>2]|0;
    $447 = $a0;
    $448 = $lastx;
    _Fax3BadLength(27488,$443,$446,$447,$448);
    while(1) {
     $449 = $a0;
     $450 = $lastx;
     $451 = ($449|0)>($450|0);
     if ($451) {
      $452 = $pa;
      $453 = $thisrun;
      $454 = ($452>>>0)>($453>>>0);
      $1504 = $454;
     } else {
      $1504 = 0;
     }
     if (!($1504)) {
      break;
     }
     $455 = $pa;
     $456 = (($455) + -4|0);
     $pa = $456;
     $457 = HEAP32[$456>>2]|0;
     $458 = $a0;
     $459 = (($458) - ($457))|0;
     $a0 = $459;
    }
    $460 = $a0;
    $461 = $lastx;
    $462 = ($460|0)<($461|0);
    if ($462) {
     $463 = $a0;
     $464 = ($463|0)<(0);
     if ($464) {
      $a0 = 0;
     }
     $465 = $pa;
     $466 = $thisrun;
     $467 = $465;
     $468 = $466;
     $469 = (($467) - ($468))|0;
     $470 = (($469|0) / 4)&-1;
     $471 = $470 & 1;
     $472 = ($471|0)!=(0);
     if ($472) {
      $473 = $RunLength;
      $474 = (($473) + 0)|0;
      $475 = $pa;
      $476 = (($475) + 4|0);
      $pa = $476;
      HEAP32[$475>>2] = $474;
      $477 = $a0;
      $478 = (($477) + 0)|0;
      $a0 = $478;
      $RunLength = 0;
     }
     $479 = $RunLength;
     $480 = $lastx;
     $481 = $a0;
     $482 = (($480) - ($481))|0;
     $483 = (($479) + ($482))|0;
     $484 = $pa;
     $485 = (($484) + 4|0);
     $pa = $485;
     HEAP32[$484>>2] = $483;
     $486 = $lastx;
     $487 = $a0;
     $488 = (($486) - ($487))|0;
     $489 = $a0;
     $490 = (($489) + ($488))|0;
     $a0 = $490;
     $RunLength = 0;
    } else {
     $491 = $a0;
     $492 = $lastx;
     $493 = ($491|0)>($492|0);
     if ($493) {
      $494 = $RunLength;
      $495 = $lastx;
      $496 = (($494) + ($495))|0;
      $497 = $pa;
      $498 = (($497) + 4|0);
      $pa = $498;
      HEAP32[$497>>2] = $496;
      $499 = $lastx;
      $500 = $a0;
      $501 = (($500) + ($499))|0;
      $a0 = $501;
      $RunLength = 0;
      $502 = $RunLength;
      $503 = (($502) + 0)|0;
      $504 = $pa;
      $505 = (($504) + 4|0);
      $pa = $505;
      HEAP32[$504>>2] = $503;
      $506 = $a0;
      $507 = (($506) + 0)|0;
      $a0 = $507;
      $RunLength = 0;
     }
    }
   }
  } else {
   L194: while(1) {
    $508 = $a0;
    $509 = $lastx;
    $510 = ($508|0)<($509|0);
    if (!($510)) {
     label = 428;
     break;
    }
    $511 = $BitsAvail;
    $512 = ($511|0)<(7);
    if ($512) {
     $513 = $cp;
     $514 = $ep;
     $515 = ($513>>>0)>=($514>>>0);
     if ($515) {
      $516 = $BitsAvail;
      $517 = ($516|0)==(0);
      if ($517) {
       label = 200;
       break L7;
      }
      $BitsAvail = 7;
     } else {
      $518 = $cp;
      $519 = (($518) + 1|0);
      $cp = $519;
      $520 = HEAP8[$518>>0]|0;
      $521 = $520&255;
      $522 = $bitmap;
      $523 = (($522) + ($521)|0);
      $524 = HEAP8[$523>>0]|0;
      $525 = $524&255;
      $526 = $BitsAvail;
      $527 = $525 << $526;
      $528 = $BitAcc;
      $529 = $528 | $527;
      $BitAcc = $529;
      $530 = $BitsAvail;
      $531 = (($530) + 8)|0;
      $BitsAvail = $531;
     }
    }
    $532 = $BitAcc;
    $533 = $532 & 127;
    $534 = (27944 + ($533<<3)|0);
    $TabEnt = $534;
    $535 = $TabEnt;
    $536 = (($535) + 1|0);
    $537 = HEAP8[$536>>0]|0;
    $538 = $537&255;
    $539 = $BitsAvail;
    $540 = (($539) - ($538))|0;
    $BitsAvail = $540;
    $541 = $TabEnt;
    $542 = (($541) + 1|0);
    $543 = HEAP8[$542>>0]|0;
    $544 = $543&255;
    $545 = $BitAcc;
    $546 = $545 >>> $544;
    $BitAcc = $546;
    $547 = $TabEnt;
    $548 = HEAP8[$547>>0]|0;
    $549 = $548&255;
    switch ($549|0) {
    case 2:  {
     $585 = $pa;
     $586 = $thisrun;
     $587 = $585;
     $588 = $586;
     $589 = (($587) - ($588))|0;
     $590 = (($589|0) / 4)&-1;
     $591 = $590 & 1;
     $592 = ($591|0)!=(0);
     if ($592) {
      while(1) {
       $593 = $BitsAvail;
       $594 = ($593|0)<(13);
       if ($594) {
        $595 = $cp;
        $596 = $ep;
        $597 = ($595>>>0)>=($596>>>0);
        if ($597) {
         $598 = $BitsAvail;
         $599 = ($598|0)==(0);
         if ($599) {
          label = 226;
          break L7;
         }
         $BitsAvail = 13;
        } else {
         $600 = $cp;
         $601 = (($600) + 1|0);
         $cp = $601;
         $602 = HEAP8[$600>>0]|0;
         $603 = $602&255;
         $604 = $bitmap;
         $605 = (($604) + ($603)|0);
         $606 = HEAP8[$605>>0]|0;
         $607 = $606&255;
         $608 = $BitsAvail;
         $609 = $607 << $608;
         $610 = $BitAcc;
         $611 = $610 | $609;
         $BitAcc = $611;
         $612 = $BitsAvail;
         $613 = (($612) + 8)|0;
         $BitsAvail = $613;
         $614 = ($613|0)<(13);
         if ($614) {
          $615 = $cp;
          $616 = $ep;
          $617 = ($615>>>0)>=($616>>>0);
          if ($617) {
           $BitsAvail = 13;
          } else {
           $618 = $cp;
           $619 = (($618) + 1|0);
           $cp = $619;
           $620 = HEAP8[$618>>0]|0;
           $621 = $620&255;
           $622 = $bitmap;
           $623 = (($622) + ($621)|0);
           $624 = HEAP8[$623>>0]|0;
           $625 = $624&255;
           $626 = $BitsAvail;
           $627 = $625 << $626;
           $628 = $BitAcc;
           $629 = $628 | $627;
           $BitAcc = $629;
           $630 = $BitsAvail;
           $631 = (($630) + 8)|0;
           $BitsAvail = $631;
          }
         }
        }
       }
       $632 = $BitAcc;
       $633 = $632 & 8191;
       $634 = (61736 + ($633<<3)|0);
       $TabEnt = $634;
       $635 = $TabEnt;
       $636 = (($635) + 1|0);
       $637 = HEAP8[$636>>0]|0;
       $638 = $637&255;
       $639 = $BitsAvail;
       $640 = (($639) - ($638))|0;
       $BitsAvail = $640;
       $641 = $TabEnt;
       $642 = (($641) + 1|0);
       $643 = HEAP8[$642>>0]|0;
       $644 = $643&255;
       $645 = $BitAcc;
       $646 = $645 >>> $644;
       $BitAcc = $646;
       $647 = $TabEnt;
       $648 = HEAP8[$647>>0]|0;
       $649 = $648&255;
       if ((($649|0) == 8)) {
        break;
       } else if (!((($649|0) == 11) | (($649|0) == 10))) {
        label = 244;
        break L194;
       }
       $662 = $TabEnt;
       $663 = (($662) + 4|0);
       $664 = HEAP32[$663>>2]|0;
       $665 = $a0;
       $666 = (($665) + ($664))|0;
       $a0 = $666;
       $667 = $TabEnt;
       $668 = (($667) + 4|0);
       $669 = HEAP32[$668>>2]|0;
       $670 = $RunLength;
       $671 = (($670) + ($669))|0;
       $RunLength = $671;
      }
      $650 = $RunLength;
      $651 = $TabEnt;
      $652 = (($651) + 4|0);
      $653 = HEAP32[$652>>2]|0;
      $654 = (($650) + ($653))|0;
      $655 = $pa;
      $656 = (($655) + 4|0);
      $pa = $656;
      HEAP32[$655>>2] = $654;
      $657 = $TabEnt;
      $658 = (($657) + 4|0);
      $659 = HEAP32[$658>>2]|0;
      $660 = $a0;
      $661 = (($660) + ($659))|0;
      $a0 = $661;
      $RunLength = 0;
      while(1) {
       $672 = $BitsAvail;
       $673 = ($672|0)<(12);
       if ($673) {
        $674 = $cp;
        $675 = $ep;
        $676 = ($674>>>0)>=($675>>>0);
        if ($676) {
         $677 = $BitsAvail;
         $678 = ($677|0)==(0);
         if ($678) {
          label = 252;
          break L7;
         }
         $BitsAvail = 12;
        } else {
         $679 = $cp;
         $680 = (($679) + 1|0);
         $cp = $680;
         $681 = HEAP8[$679>>0]|0;
         $682 = $681&255;
         $683 = $bitmap;
         $684 = (($683) + ($682)|0);
         $685 = HEAP8[$684>>0]|0;
         $686 = $685&255;
         $687 = $BitsAvail;
         $688 = $686 << $687;
         $689 = $BitAcc;
         $690 = $689 | $688;
         $BitAcc = $690;
         $691 = $BitsAvail;
         $692 = (($691) + 8)|0;
         $BitsAvail = $692;
         $693 = ($692|0)<(12);
         if ($693) {
          $694 = $cp;
          $695 = $ep;
          $696 = ($694>>>0)>=($695>>>0);
          if ($696) {
           $BitsAvail = 12;
          } else {
           $697 = $cp;
           $698 = (($697) + 1|0);
           $cp = $698;
           $699 = HEAP8[$697>>0]|0;
           $700 = $699&255;
           $701 = $bitmap;
           $702 = (($701) + ($700)|0);
           $703 = HEAP8[$702>>0]|0;
           $704 = $703&255;
           $705 = $BitsAvail;
           $706 = $704 << $705;
           $707 = $BitAcc;
           $708 = $707 | $706;
           $BitAcc = $708;
           $709 = $BitsAvail;
           $710 = (($709) + 8)|0;
           $BitsAvail = $710;
          }
         }
        }
       }
       $711 = $BitAcc;
       $712 = $711 & 4095;
       $713 = (28968 + ($712<<3)|0);
       $TabEnt = $713;
       $714 = $TabEnt;
       $715 = (($714) + 1|0);
       $716 = HEAP8[$715>>0]|0;
       $717 = $716&255;
       $718 = $BitsAvail;
       $719 = (($718) - ($717))|0;
       $BitsAvail = $719;
       $720 = $TabEnt;
       $721 = (($720) + 1|0);
       $722 = HEAP8[$721>>0]|0;
       $723 = $722&255;
       $724 = $BitAcc;
       $725 = $724 >>> $723;
       $BitAcc = $725;
       $726 = $TabEnt;
       $727 = HEAP8[$726>>0]|0;
       $728 = $727&255;
       if ((($728|0) == 7)) {
        break;
       } else if (!((($728|0) == 11) | (($728|0) == 9))) {
        label = 270;
        break L194;
       }
       $741 = $TabEnt;
       $742 = (($741) + 4|0);
       $743 = HEAP32[$742>>2]|0;
       $744 = $a0;
       $745 = (($744) + ($743))|0;
       $a0 = $745;
       $746 = $TabEnt;
       $747 = (($746) + 4|0);
       $748 = HEAP32[$747>>2]|0;
       $749 = $RunLength;
       $750 = (($749) + ($748))|0;
       $RunLength = $750;
      }
      $729 = $RunLength;
      $730 = $TabEnt;
      $731 = (($730) + 4|0);
      $732 = HEAP32[$731>>2]|0;
      $733 = (($729) + ($732))|0;
      $734 = $pa;
      $735 = (($734) + 4|0);
      $pa = $735;
      HEAP32[$734>>2] = $733;
      $736 = $TabEnt;
      $737 = (($736) + 4|0);
      $738 = HEAP32[$737>>2]|0;
      $739 = $a0;
      $740 = (($739) + ($738))|0;
      $a0 = $740;
      $RunLength = 0;
     } else {
      while(1) {
       $751 = $BitsAvail;
       $752 = ($751|0)<(12);
       if ($752) {
        $753 = $cp;
        $754 = $ep;
        $755 = ($753>>>0)>=($754>>>0);
        if ($755) {
         $756 = $BitsAvail;
         $757 = ($756|0)==(0);
         if ($757) {
          label = 279;
          break L7;
         }
         $BitsAvail = 12;
        } else {
         $758 = $cp;
         $759 = (($758) + 1|0);
         $cp = $759;
         $760 = HEAP8[$758>>0]|0;
         $761 = $760&255;
         $762 = $bitmap;
         $763 = (($762) + ($761)|0);
         $764 = HEAP8[$763>>0]|0;
         $765 = $764&255;
         $766 = $BitsAvail;
         $767 = $765 << $766;
         $768 = $BitAcc;
         $769 = $768 | $767;
         $BitAcc = $769;
         $770 = $BitsAvail;
         $771 = (($770) + 8)|0;
         $BitsAvail = $771;
         $772 = ($771|0)<(12);
         if ($772) {
          $773 = $cp;
          $774 = $ep;
          $775 = ($773>>>0)>=($774>>>0);
          if ($775) {
           $BitsAvail = 12;
          } else {
           $776 = $cp;
           $777 = (($776) + 1|0);
           $cp = $777;
           $778 = HEAP8[$776>>0]|0;
           $779 = $778&255;
           $780 = $bitmap;
           $781 = (($780) + ($779)|0);
           $782 = HEAP8[$781>>0]|0;
           $783 = $782&255;
           $784 = $BitsAvail;
           $785 = $783 << $784;
           $786 = $BitAcc;
           $787 = $786 | $785;
           $BitAcc = $787;
           $788 = $BitsAvail;
           $789 = (($788) + 8)|0;
           $BitsAvail = $789;
          }
         }
        }
       }
       $790 = $BitAcc;
       $791 = $790 & 4095;
       $792 = (28968 + ($791<<3)|0);
       $TabEnt = $792;
       $793 = $TabEnt;
       $794 = (($793) + 1|0);
       $795 = HEAP8[$794>>0]|0;
       $796 = $795&255;
       $797 = $BitsAvail;
       $798 = (($797) - ($796))|0;
       $BitsAvail = $798;
       $799 = $TabEnt;
       $800 = (($799) + 1|0);
       $801 = HEAP8[$800>>0]|0;
       $802 = $801&255;
       $803 = $BitAcc;
       $804 = $803 >>> $802;
       $BitAcc = $804;
       $805 = $TabEnt;
       $806 = HEAP8[$805>>0]|0;
       $807 = $806&255;
       if ((($807|0) == 7)) {
        break;
       } else if (!((($807|0) == 11) | (($807|0) == 9))) {
        label = 297;
        break L194;
       }
       $820 = $TabEnt;
       $821 = (($820) + 4|0);
       $822 = HEAP32[$821>>2]|0;
       $823 = $a0;
       $824 = (($823) + ($822))|0;
       $a0 = $824;
       $825 = $TabEnt;
       $826 = (($825) + 4|0);
       $827 = HEAP32[$826>>2]|0;
       $828 = $RunLength;
       $829 = (($828) + ($827))|0;
       $RunLength = $829;
      }
      $808 = $RunLength;
      $809 = $TabEnt;
      $810 = (($809) + 4|0);
      $811 = HEAP32[$810>>2]|0;
      $812 = (($808) + ($811))|0;
      $813 = $pa;
      $814 = (($813) + 4|0);
      $pa = $814;
      HEAP32[$813>>2] = $812;
      $815 = $TabEnt;
      $816 = (($815) + 4|0);
      $817 = HEAP32[$816>>2]|0;
      $818 = $a0;
      $819 = (($818) + ($817))|0;
      $a0 = $819;
      $RunLength = 0;
      while(1) {
       $830 = $BitsAvail;
       $831 = ($830|0)<(13);
       if ($831) {
        $832 = $cp;
        $833 = $ep;
        $834 = ($832>>>0)>=($833>>>0);
        if ($834) {
         $835 = $BitsAvail;
         $836 = ($835|0)==(0);
         if ($836) {
          label = 305;
          break L7;
         }
         $BitsAvail = 13;
        } else {
         $837 = $cp;
         $838 = (($837) + 1|0);
         $cp = $838;
         $839 = HEAP8[$837>>0]|0;
         $840 = $839&255;
         $841 = $bitmap;
         $842 = (($841) + ($840)|0);
         $843 = HEAP8[$842>>0]|0;
         $844 = $843&255;
         $845 = $BitsAvail;
         $846 = $844 << $845;
         $847 = $BitAcc;
         $848 = $847 | $846;
         $BitAcc = $848;
         $849 = $BitsAvail;
         $850 = (($849) + 8)|0;
         $BitsAvail = $850;
         $851 = ($850|0)<(13);
         if ($851) {
          $852 = $cp;
          $853 = $ep;
          $854 = ($852>>>0)>=($853>>>0);
          if ($854) {
           $BitsAvail = 13;
          } else {
           $855 = $cp;
           $856 = (($855) + 1|0);
           $cp = $856;
           $857 = HEAP8[$855>>0]|0;
           $858 = $857&255;
           $859 = $bitmap;
           $860 = (($859) + ($858)|0);
           $861 = HEAP8[$860>>0]|0;
           $862 = $861&255;
           $863 = $BitsAvail;
           $864 = $862 << $863;
           $865 = $BitAcc;
           $866 = $865 | $864;
           $BitAcc = $866;
           $867 = $BitsAvail;
           $868 = (($867) + 8)|0;
           $BitsAvail = $868;
          }
         }
        }
       }
       $869 = $BitAcc;
       $870 = $869 & 8191;
       $871 = (61736 + ($870<<3)|0);
       $TabEnt = $871;
       $872 = $TabEnt;
       $873 = (($872) + 1|0);
       $874 = HEAP8[$873>>0]|0;
       $875 = $874&255;
       $876 = $BitsAvail;
       $877 = (($876) - ($875))|0;
       $BitsAvail = $877;
       $878 = $TabEnt;
       $879 = (($878) + 1|0);
       $880 = HEAP8[$879>>0]|0;
       $881 = $880&255;
       $882 = $BitAcc;
       $883 = $882 >>> $881;
       $BitAcc = $883;
       $884 = $TabEnt;
       $885 = HEAP8[$884>>0]|0;
       $886 = $885&255;
       if ((($886|0) == 8)) {
        break;
       } else if (!((($886|0) == 11) | (($886|0) == 10))) {
        label = 323;
        break L194;
       }
       $899 = $TabEnt;
       $900 = (($899) + 4|0);
       $901 = HEAP32[$900>>2]|0;
       $902 = $a0;
       $903 = (($902) + ($901))|0;
       $a0 = $903;
       $904 = $TabEnt;
       $905 = (($904) + 4|0);
       $906 = HEAP32[$905>>2]|0;
       $907 = $RunLength;
       $908 = (($907) + ($906))|0;
       $RunLength = $908;
      }
      $887 = $RunLength;
      $888 = $TabEnt;
      $889 = (($888) + 4|0);
      $890 = HEAP32[$889>>2]|0;
      $891 = (($887) + ($890))|0;
      $892 = $pa;
      $893 = (($892) + 4|0);
      $pa = $893;
      HEAP32[$892>>2] = $891;
      $894 = $TabEnt;
      $895 = (($894) + 4|0);
      $896 = HEAP32[$895>>2]|0;
      $897 = $a0;
      $898 = (($897) + ($896))|0;
      $a0 = $898;
      $RunLength = 0;
     }
     $909 = $pa;
     $910 = $thisrun;
     $911 = ($909|0)!=($910|0);
     if ($911) {
      while(1) {
       $912 = $b1;
       $913 = $a0;
       $914 = ($912|0)<=($913|0);
       if ($914) {
        $915 = $b1;
        $916 = $lastx;
        $917 = ($915|0)<($916|0);
        $1506 = $917;
       } else {
        $1506 = 0;
       }
       if (!($1506)) {
        break;
       }
       $918 = $pb;
       $919 = HEAP32[$918>>2]|0;
       $920 = $pb;
       $921 = (($920) + 4|0);
       $922 = HEAP32[$921>>2]|0;
       $923 = (($919) + ($922))|0;
       $924 = $b1;
       $925 = (($924) + ($923))|0;
       $b1 = $925;
       $926 = $pb;
       $927 = (($926) + 8|0);
       $pb = $927;
      }
     }
     break;
    }
    case 1:  {
     $550 = $pa;
     $551 = $thisrun;
     $552 = ($550|0)!=($551|0);
     if ($552) {
      while(1) {
       $553 = $b1;
       $554 = $a0;
       $555 = ($553|0)<=($554|0);
       if ($555) {
        $556 = $b1;
        $557 = $lastx;
        $558 = ($556|0)<($557|0);
        $1505 = $558;
       } else {
        $1505 = 0;
       }
       if (!($1505)) {
        break;
       }
       $559 = $pb;
       $560 = HEAP32[$559>>2]|0;
       $561 = $pb;
       $562 = (($561) + 4|0);
       $563 = HEAP32[$562>>2]|0;
       $564 = (($560) + ($563))|0;
       $565 = $b1;
       $566 = (($565) + ($564))|0;
       $b1 = $566;
       $567 = $pb;
       $568 = (($567) + 8|0);
       $pb = $568;
      }
     }
     $569 = $pb;
     $570 = (($569) + 4|0);
     $pb = $570;
     $571 = HEAP32[$569>>2]|0;
     $572 = $b1;
     $573 = (($572) + ($571))|0;
     $b1 = $573;
     $574 = $b1;
     $575 = $a0;
     $576 = (($574) - ($575))|0;
     $577 = $RunLength;
     $578 = (($577) + ($576))|0;
     $RunLength = $578;
     $579 = $b1;
     $a0 = $579;
     $580 = $pb;
     $581 = (($580) + 4|0);
     $pb = $581;
     $582 = HEAP32[$580>>2]|0;
     $583 = $b1;
     $584 = (($583) + ($582))|0;
     $b1 = $584;
     break;
    }
    case 3:  {
     $928 = $pa;
     $929 = $thisrun;
     $930 = ($928|0)!=($929|0);
     if ($930) {
      while(1) {
       $931 = $b1;
       $932 = $a0;
       $933 = ($931|0)<=($932|0);
       if ($933) {
        $934 = $b1;
        $935 = $lastx;
        $936 = ($934|0)<($935|0);
        $1507 = $936;
       } else {
        $1507 = 0;
       }
       if (!($1507)) {
        break;
       }
       $937 = $pb;
       $938 = HEAP32[$937>>2]|0;
       $939 = $pb;
       $940 = (($939) + 4|0);
       $941 = HEAP32[$940>>2]|0;
       $942 = (($938) + ($941))|0;
       $943 = $b1;
       $944 = (($943) + ($942))|0;
       $b1 = $944;
       $945 = $pb;
       $946 = (($945) + 8|0);
       $pb = $946;
      }
     }
     $947 = $RunLength;
     $948 = $b1;
     $949 = $a0;
     $950 = (($948) - ($949))|0;
     $951 = (($947) + ($950))|0;
     $952 = $pa;
     $953 = (($952) + 4|0);
     $pa = $953;
     HEAP32[$952>>2] = $951;
     $954 = $b1;
     $955 = $a0;
     $956 = (($954) - ($955))|0;
     $957 = $a0;
     $958 = (($957) + ($956))|0;
     $a0 = $958;
     $RunLength = 0;
     $959 = $pb;
     $960 = (($959) + 4|0);
     $pb = $960;
     $961 = HEAP32[$959>>2]|0;
     $962 = $b1;
     $963 = (($962) + ($961))|0;
     $b1 = $963;
     break;
    }
    case 4:  {
     $964 = $pa;
     $965 = $thisrun;
     $966 = ($964|0)!=($965|0);
     if ($966) {
      while(1) {
       $967 = $b1;
       $968 = $a0;
       $969 = ($967|0)<=($968|0);
       if ($969) {
        $970 = $b1;
        $971 = $lastx;
        $972 = ($970|0)<($971|0);
        $1508 = $972;
       } else {
        $1508 = 0;
       }
       if (!($1508)) {
        break;
       }
       $973 = $pb;
       $974 = HEAP32[$973>>2]|0;
       $975 = $pb;
       $976 = (($975) + 4|0);
       $977 = HEAP32[$976>>2]|0;
       $978 = (($974) + ($977))|0;
       $979 = $b1;
       $980 = (($979) + ($978))|0;
       $b1 = $980;
       $981 = $pb;
       $982 = (($981) + 8|0);
       $pb = $982;
      }
     }
     $983 = $RunLength;
     $984 = $b1;
     $985 = $a0;
     $986 = (($984) - ($985))|0;
     $987 = $TabEnt;
     $988 = (($987) + 4|0);
     $989 = HEAP32[$988>>2]|0;
     $990 = (($986) + ($989))|0;
     $991 = (($983) + ($990))|0;
     $992 = $pa;
     $993 = (($992) + 4|0);
     $pa = $993;
     HEAP32[$992>>2] = $991;
     $994 = $b1;
     $995 = $a0;
     $996 = (($994) - ($995))|0;
     $997 = $TabEnt;
     $998 = (($997) + 4|0);
     $999 = HEAP32[$998>>2]|0;
     $1000 = (($996) + ($999))|0;
     $1001 = $a0;
     $1002 = (($1001) + ($1000))|0;
     $a0 = $1002;
     $RunLength = 0;
     $1003 = $pb;
     $1004 = (($1003) + 4|0);
     $pb = $1004;
     $1005 = HEAP32[$1003>>2]|0;
     $1006 = $b1;
     $1007 = (($1006) + ($1005))|0;
     $b1 = $1007;
     break;
    }
    case 5:  {
     $1008 = $pa;
     $1009 = $thisrun;
     $1010 = ($1008|0)!=($1009|0);
     if ($1010) {
      while(1) {
       $1011 = $b1;
       $1012 = $a0;
       $1013 = ($1011|0)<=($1012|0);
       if ($1013) {
        $1014 = $b1;
        $1015 = $lastx;
        $1016 = ($1014|0)<($1015|0);
        $1509 = $1016;
       } else {
        $1509 = 0;
       }
       if (!($1509)) {
        break;
       }
       $1017 = $pb;
       $1018 = HEAP32[$1017>>2]|0;
       $1019 = $pb;
       $1020 = (($1019) + 4|0);
       $1021 = HEAP32[$1020>>2]|0;
       $1022 = (($1018) + ($1021))|0;
       $1023 = $b1;
       $1024 = (($1023) + ($1022))|0;
       $b1 = $1024;
       $1025 = $pb;
       $1026 = (($1025) + 8|0);
       $pb = $1026;
      }
     }
     $1027 = $b1;
     $1028 = $a0;
     $1029 = $TabEnt;
     $1030 = (($1029) + 4|0);
     $1031 = HEAP32[$1030>>2]|0;
     $1032 = (($1028) + ($1031))|0;
     $1033 = ($1027|0)<=($1032|0);
     if ($1033) {
      $1034 = $b1;
      $1035 = $a0;
      $1036 = $TabEnt;
      $1037 = (($1036) + 4|0);
      $1038 = HEAP32[$1037>>2]|0;
      $1039 = (($1035) + ($1038))|0;
      $1040 = ($1034|0)<($1039|0);
      if ($1040) {
       label = 372;
       break L194;
      }
      $1041 = $pa;
      $1042 = $thisrun;
      $1043 = ($1041|0)!=($1042|0);
      if ($1043) {
       label = 372;
       break L194;
      }
     }
     $1049 = $RunLength;
     $1050 = $b1;
     $1051 = $a0;
     $1052 = (($1050) - ($1051))|0;
     $1053 = $TabEnt;
     $1054 = (($1053) + 4|0);
     $1055 = HEAP32[$1054>>2]|0;
     $1056 = (($1052) - ($1055))|0;
     $1057 = (($1049) + ($1056))|0;
     $1058 = $pa;
     $1059 = (($1058) + 4|0);
     $pa = $1059;
     HEAP32[$1058>>2] = $1057;
     $1060 = $b1;
     $1061 = $a0;
     $1062 = (($1060) - ($1061))|0;
     $1063 = $TabEnt;
     $1064 = (($1063) + 4|0);
     $1065 = HEAP32[$1064>>2]|0;
     $1066 = (($1062) - ($1065))|0;
     $1067 = $a0;
     $1068 = (($1067) + ($1066))|0;
     $a0 = $1068;
     $RunLength = 0;
     $1069 = $pb;
     $1070 = (($1069) + -4|0);
     $pb = $1070;
     $1071 = HEAP32[$1070>>2]|0;
     $1072 = $b1;
     $1073 = (($1072) - ($1071))|0;
     $b1 = $1073;
     break;
    }
    case 6:  {
     label = 377;
     break L194;
     break;
    }
    case 12:  {
     label = 378;
     break L194;
     break;
    }
    default: {
     label = 392;
     break L194;
    }
    }
   }
   do {
    if ((label|0) == 244) {
     label = 0;
     label = 394;
    }
    else if ((label|0) == 270) {
     label = 0;
     label = 395;
    }
    else if ((label|0) == 297) {
     label = 0;
     label = 395;
    }
    else if ((label|0) == 323) {
     label = 0;
     label = 394;
    }
    else if ((label|0) == 372) {
     label = 0;
     $1044 = $1;
     $1045 = $sp;
     $1046 = (($1045) + 92|0);
     $1047 = HEAP32[$1046>>2]|0;
     $1048 = $a0;
     _Fax3Unexpected(27488,$1044,$1047,$1048);
    }
    else if ((label|0) == 377) {
     label = 0;
     $1074 = $lastx;
     $1075 = $a0;
     $1076 = (($1074) - ($1075))|0;
     $1077 = $pa;
     $1078 = (($1077) + 4|0);
     $pa = $1078;
     HEAP32[$1077>>2] = $1076;
     $1079 = $1;
     $1080 = $sp;
     $1081 = (($1080) + 92|0);
     $1082 = HEAP32[$1081>>2]|0;
     $1083 = $a0;
     _Fax3Extension(27488,$1079,$1082,$1083);
    }
    else if ((label|0) == 378) {
     label = 0;
     $1084 = $lastx;
     $1085 = $a0;
     $1086 = (($1084) - ($1085))|0;
     $1087 = $pa;
     $1088 = (($1087) + 4|0);
     $pa = $1088;
     HEAP32[$1087>>2] = $1086;
     $1089 = $BitsAvail;
     $1090 = ($1089|0)<(4);
     if ($1090) {
      $1091 = $cp;
      $1092 = $ep;
      $1093 = ($1091>>>0)>=($1092>>>0);
      if ($1093) {
       $1094 = $BitsAvail;
       $1095 = ($1094|0)==(0);
       if ($1095) {
        label = 382;
        break L7;
       }
       $BitsAvail = 4;
      } else {
       $1096 = $cp;
       $1097 = (($1096) + 1|0);
       $cp = $1097;
       $1098 = HEAP8[$1096>>0]|0;
       $1099 = $1098&255;
       $1100 = $bitmap;
       $1101 = (($1100) + ($1099)|0);
       $1102 = HEAP8[$1101>>0]|0;
       $1103 = $1102&255;
       $1104 = $BitsAvail;
       $1105 = $1103 << $1104;
       $1106 = $BitAcc;
       $1107 = $1106 | $1105;
       $BitAcc = $1107;
       $1108 = $BitsAvail;
       $1109 = (($1108) + 8)|0;
       $BitsAvail = $1109;
      }
     }
     $1110 = $BitAcc;
     $1111 = $1110 & 15;
     $1112 = ($1111|0)!=(0);
     if ($1112) {
      $1113 = $1;
      $1114 = $sp;
      $1115 = (($1114) + 92|0);
      $1116 = HEAP32[$1115>>2]|0;
      $1117 = $a0;
      _Fax3Unexpected(27488,$1113,$1116,$1117);
     }
     $1118 = $BitsAvail;
     $1119 = (($1118) - 4)|0;
     $BitsAvail = $1119;
     $1120 = $BitAcc;
     $1121 = $1120 >>> 4;
     $BitAcc = $1121;
     $EOLcnt = 1;
    }
    else if ((label|0) == 392) {
     label = 0;
     label = 393;
    }
    else if ((label|0) == 428) {
     label = 0;
     $1218 = $RunLength;
     $1219 = ($1218|0)!=(0);
     if ($1219) {
      $1220 = $RunLength;
      $1221 = $a0;
      $1222 = (($1220) + ($1221))|0;
      $1223 = $lastx;
      $1224 = ($1222|0)<($1223|0);
      if ($1224) {
       $1225 = $BitsAvail;
       $1226 = ($1225|0)<(1);
       if ($1226) {
        $1227 = $cp;
        $1228 = $ep;
        $1229 = ($1227>>>0)>=($1228>>>0);
        if ($1229) {
         $1230 = $BitsAvail;
         $1231 = ($1230|0)==(0);
         if ($1231) {
          label = 434;
          break L7;
         }
         $BitsAvail = 1;
        } else {
         $1232 = $cp;
         $1233 = (($1232) + 1|0);
         $cp = $1233;
         $1234 = HEAP8[$1232>>0]|0;
         $1235 = $1234&255;
         $1236 = $bitmap;
         $1237 = (($1236) + ($1235)|0);
         $1238 = HEAP8[$1237>>0]|0;
         $1239 = $1238&255;
         $1240 = $BitsAvail;
         $1241 = $1239 << $1240;
         $1242 = $BitAcc;
         $1243 = $1242 | $1241;
         $BitAcc = $1243;
         $1244 = $BitsAvail;
         $1245 = (($1244) + 8)|0;
         $BitsAvail = $1245;
        }
       }
       $1246 = $BitAcc;
       $1247 = $1246 & 1;
       $1248 = ($1247|0)!=(0);
       if (!($1248)) {
        label = 393;
        break;
       }
       $1249 = $BitsAvail;
       $1250 = (($1249) - 1)|0;
       $BitsAvail = $1250;
       $1251 = $BitAcc;
       $1252 = $1251 >>> 1;
       $BitAcc = $1252;
      }
      $1253 = $RunLength;
      $1254 = (($1253) + 0)|0;
      $1255 = $pa;
      $1256 = (($1255) + 4|0);
      $pa = $1256;
      HEAP32[$1255>>2] = $1254;
      $1257 = $a0;
      $1258 = (($1257) + 0)|0;
      $a0 = $1258;
      $RunLength = 0;
     }
    }
   } while(0);
   if ((label|0) == 393) {
    label = 0;
    $1122 = $1;
    $1123 = $sp;
    $1124 = (($1123) + 92|0);
    $1125 = HEAP32[$1124>>2]|0;
    $1126 = $a0;
    _Fax3Unexpected(27488,$1122,$1125,$1126);
   }
   else if ((label|0) == 394) {
    label = 0;
    $1127 = $1;
    $1128 = $sp;
    $1129 = (($1128) + 92|0);
    $1130 = HEAP32[$1129>>2]|0;
    $1131 = $a0;
    _Fax3Unexpected(27488,$1127,$1130,$1131);
   }
   else if ((label|0) == 395) {
    label = 0;
    $1132 = $1;
    $1133 = $sp;
    $1134 = (($1133) + 92|0);
    $1135 = HEAP32[$1134>>2]|0;
    $1136 = $a0;
    _Fax3Unexpected(27488,$1132,$1135,$1136);
   }
   $1259 = $RunLength;
   $1260 = ($1259|0)!=(0);
   if ($1260) {
    $1261 = $RunLength;
    $1262 = (($1261) + 0)|0;
    $1263 = $pa;
    $1264 = (($1263) + 4|0);
    $pa = $1264;
    HEAP32[$1263>>2] = $1262;
    $1265 = $a0;
    $1266 = (($1265) + 0)|0;
    $a0 = $1266;
    $RunLength = 0;
   }
   $1267 = $a0;
   $1268 = $lastx;
   $1269 = ($1267|0)!=($1268|0);
   if ($1269) {
    $1270 = $1;
    $1271 = $sp;
    $1272 = (($1271) + 92|0);
    $1273 = HEAP32[$1272>>2]|0;
    $1274 = $a0;
    $1275 = $lastx;
    _Fax3BadLength(27488,$1270,$1273,$1274,$1275);
    while(1) {
     $1276 = $a0;
     $1277 = $lastx;
     $1278 = ($1276|0)>($1277|0);
     if ($1278) {
      $1279 = $pa;
      $1280 = $thisrun;
      $1281 = ($1279>>>0)>($1280>>>0);
      $1511 = $1281;
     } else {
      $1511 = 0;
     }
     if (!($1511)) {
      break;
     }
     $1282 = $pa;
     $1283 = (($1282) + -4|0);
     $pa = $1283;
     $1284 = HEAP32[$1283>>2]|0;
     $1285 = $a0;
     $1286 = (($1285) - ($1284))|0;
     $a0 = $1286;
    }
    $1287 = $a0;
    $1288 = $lastx;
    $1289 = ($1287|0)<($1288|0);
    if ($1289) {
     $1290 = $a0;
     $1291 = ($1290|0)<(0);
     if ($1291) {
      $a0 = 0;
     }
     $1292 = $pa;
     $1293 = $thisrun;
     $1294 = $1292;
     $1295 = $1293;
     $1296 = (($1294) - ($1295))|0;
     $1297 = (($1296|0) / 4)&-1;
     $1298 = $1297 & 1;
     $1299 = ($1298|0)!=(0);
     if ($1299) {
      $1300 = $RunLength;
      $1301 = (($1300) + 0)|0;
      $1302 = $pa;
      $1303 = (($1302) + 4|0);
      $pa = $1303;
      HEAP32[$1302>>2] = $1301;
      $1304 = $a0;
      $1305 = (($1304) + 0)|0;
      $a0 = $1305;
      $RunLength = 0;
     }
     $1306 = $RunLength;
     $1307 = $lastx;
     $1308 = $a0;
     $1309 = (($1307) - ($1308))|0;
     $1310 = (($1306) + ($1309))|0;
     $1311 = $pa;
     $1312 = (($1311) + 4|0);
     $pa = $1312;
     HEAP32[$1311>>2] = $1310;
     $1313 = $lastx;
     $1314 = $a0;
     $1315 = (($1313) - ($1314))|0;
     $1316 = $a0;
     $1317 = (($1316) + ($1315))|0;
     $a0 = $1317;
     $RunLength = 0;
    } else {
     $1318 = $a0;
     $1319 = $lastx;
     $1320 = ($1318|0)>($1319|0);
     if ($1320) {
      $1321 = $RunLength;
      $1322 = $lastx;
      $1323 = (($1321) + ($1322))|0;
      $1324 = $pa;
      $1325 = (($1324) + 4|0);
      $pa = $1325;
      HEAP32[$1324>>2] = $1323;
      $1326 = $lastx;
      $1327 = $a0;
      $1328 = (($1327) + ($1326))|0;
      $a0 = $1328;
      $RunLength = 0;
      $1329 = $RunLength;
      $1330 = (($1329) + 0)|0;
      $1331 = $pa;
      $1332 = (($1331) + 4|0);
      $pa = $1332;
      HEAP32[$1331>>2] = $1330;
      $1333 = $a0;
      $1334 = (($1333) + 0)|0;
      $a0 = $1334;
      $RunLength = 0;
     }
    }
   }
  }
  $1335 = $sp;
  $1336 = (($1335) + 60|0);
  $1337 = HEAP32[$1336>>2]|0;
  $1338 = $2;
  $1339 = $thisrun;
  $1340 = $pa;
  $1341 = $lastx;
  FUNCTION_TABLE_viiii[$1337 & 127]($1338,$1339,$1340,$1341);
  $1342 = $RunLength;
  $1343 = (($1342) + 0)|0;
  $1344 = $pa;
  $1345 = (($1344) + 4|0);
  $pa = $1345;
  HEAP32[$1344>>2] = $1343;
  $1346 = $a0;
  $1347 = (($1346) + 0)|0;
  $a0 = $1347;
  $RunLength = 0;
  $1348 = $sp;
  $1349 = (($1348) + 72|0);
  $1350 = HEAP32[$1349>>2]|0;
  $x = $1350;
  $1351 = $sp;
  $1352 = (($1351) + 68|0);
  $1353 = HEAP32[$1352>>2]|0;
  $1354 = $sp;
  $1355 = (($1354) + 72|0);
  HEAP32[$1355>>2] = $1353;
  $1356 = $x;
  $1357 = $sp;
  $1358 = (($1357) + 68|0);
  HEAP32[$1358>>2] = $1356;
  $1359 = $sp;
  $1360 = (($1359) + 8|0);
  $1361 = HEAP32[$1360>>2]|0;
  $1362 = $2;
  $1363 = (($1362) + ($1361)|0);
  $2 = $1363;
  $1364 = $sp;
  $1365 = (($1364) + 8|0);
  $1366 = HEAP32[$1365>>2]|0;
  $1367 = $3;
  $1368 = (($1367) - ($1366))|0;
  $3 = $1368;
  $1369 = $sp;
  $1370 = (($1369) + 92|0);
  $1371 = HEAP32[$1370>>2]|0;
  $1372 = (($1371) + 1)|0;
  HEAP32[$1370>>2] = $1372;
 }
 switch (label|0) {
  case 14: {
   label = 483;
   break;
  }
  case 35: {
   label = 483;
   break;
  }
  case 57: {
   label = 483;
   break;
  }
  case 73: {
   label = 129;
   break;
  }
  case 102: {
   label = 129;
   break;
  }
  case 200: {
   label = 396;
   break;
  }
  case 226: {
   label = 396;
   break;
  }
  case 252: {
   label = 396;
   break;
  }
  case 279: {
   label = 396;
   break;
  }
  case 305: {
   label = 396;
   break;
  }
  case 382: {
   label = 396;
   break;
  }
  case 434: {
   label = 396;
   break;
  }
  case 517: {
   $1479 = $BitsAvail;
   $1480 = $sp;
   $1481 = (($1480) + 52|0);
   HEAP32[$1481>>2] = $1479;
   $1482 = $BitAcc;
   $1483 = $sp;
   $1484 = (($1483) + 48|0);
   HEAP32[$1484>>2] = $1482;
   $1485 = $EOLcnt;
   $1486 = $sp;
   $1487 = (($1486) + 56|0);
   HEAP32[$1487>>2] = $1485;
   $1488 = $cp;
   $1489 = $1;
   $1490 = (($1489) + 604|0);
   $1491 = HEAP32[$1490>>2]|0;
   $1492 = $1488;
   $1493 = $1491;
   $1494 = (($1492) - ($1493))|0;
   $1495 = $1;
   $1496 = (($1495) + 608|0);
   $1497 = HEAP32[$1496>>2]|0;
   $1498 = (($1497) - ($1494))|0;
   HEAP32[$1496>>2] = $1498;
   $1499 = $cp;
   $1500 = $1;
   $1501 = (($1500) + 604|0);
   HEAP32[$1501>>2] = $1499;
   $0 = 1;
   $1502 = $0;
   STACKTOP = sp;return ($1502|0);
   break;
  }
 }
 if ((label|0) == 129) {
  $351 = $1;
  $352 = $sp;
  $353 = (($352) + 92|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = $a0;
  _Fax3PrematureEOF(27488,$351,$354,$355);
  $356 = $RunLength;
  $357 = ($356|0)!=(0);
  if ($357) {
   $358 = $RunLength;
   $359 = (($358) + 0)|0;
   $360 = $pa;
   $361 = (($360) + 4|0);
   $pa = $361;
   HEAP32[$360>>2] = $359;
   $362 = $a0;
   $363 = (($362) + 0)|0;
   $a0 = $363;
   $RunLength = 0;
  }
  $364 = $a0;
  $365 = $lastx;
  $366 = ($364|0)!=($365|0);
  if ($366) {
   $367 = $1;
   $368 = $sp;
   $369 = (($368) + 92|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = $a0;
   $372 = $lastx;
   _Fax3BadLength(27488,$367,$370,$371,$372);
   while(1) {
    $373 = $a0;
    $374 = $lastx;
    $375 = ($373|0)>($374|0);
    if ($375) {
     $376 = $pa;
     $377 = $thisrun;
     $378 = ($376>>>0)>($377>>>0);
     $1503 = $378;
    } else {
     $1503 = 0;
    }
    if (!($1503)) {
     break;
    }
    $379 = $pa;
    $380 = (($379) + -4|0);
    $pa = $380;
    $381 = HEAP32[$380>>2]|0;
    $382 = $a0;
    $383 = (($382) - ($381))|0;
    $a0 = $383;
   }
   $384 = $a0;
   $385 = $lastx;
   $386 = ($384|0)<($385|0);
   if ($386) {
    $387 = $a0;
    $388 = ($387|0)<(0);
    if ($388) {
     $a0 = 0;
    }
    $389 = $pa;
    $390 = $thisrun;
    $391 = $389;
    $392 = $390;
    $393 = (($391) - ($392))|0;
    $394 = (($393|0) / 4)&-1;
    $395 = $394 & 1;
    $396 = ($395|0)!=(0);
    if ($396) {
     $397 = $RunLength;
     $398 = (($397) + 0)|0;
     $399 = $pa;
     $400 = (($399) + 4|0);
     $pa = $400;
     HEAP32[$399>>2] = $398;
     $401 = $a0;
     $402 = (($401) + 0)|0;
     $a0 = $402;
     $RunLength = 0;
    }
    $403 = $RunLength;
    $404 = $lastx;
    $405 = $a0;
    $406 = (($404) - ($405))|0;
    $407 = (($403) + ($406))|0;
    $408 = $pa;
    $409 = (($408) + 4|0);
    $pa = $409;
    HEAP32[$408>>2] = $407;
    $410 = $lastx;
    $411 = $a0;
    $412 = (($410) - ($411))|0;
    $413 = $a0;
    $414 = (($413) + ($412))|0;
    $a0 = $414;
    $RunLength = 0;
   } else {
    $415 = $a0;
    $416 = $lastx;
    $417 = ($415|0)>($416|0);
    if ($417) {
     $418 = $RunLength;
     $419 = $lastx;
     $420 = (($418) + ($419))|0;
     $421 = $pa;
     $422 = (($421) + 4|0);
     $pa = $422;
     HEAP32[$421>>2] = $420;
     $423 = $lastx;
     $424 = $a0;
     $425 = (($424) + ($423))|0;
     $a0 = $425;
     $RunLength = 0;
     $426 = $RunLength;
     $427 = (($426) + 0)|0;
     $428 = $pa;
     $429 = (($428) + 4|0);
     $pa = $429;
     HEAP32[$428>>2] = $427;
     $430 = $a0;
     $431 = (($430) + 0)|0;
     $a0 = $431;
     $RunLength = 0;
    }
   }
  }
 }
 else if ((label|0) == 396) {
  $1137 = $1;
  $1138 = $sp;
  $1139 = (($1138) + 92|0);
  $1140 = HEAP32[$1139>>2]|0;
  $1141 = $a0;
  _Fax3PrematureEOF(27488,$1137,$1140,$1141);
  $1142 = $RunLength;
  $1143 = ($1142|0)!=(0);
  if ($1143) {
   $1144 = $RunLength;
   $1145 = (($1144) + 0)|0;
   $1146 = $pa;
   $1147 = (($1146) + 4|0);
   $pa = $1147;
   HEAP32[$1146>>2] = $1145;
   $1148 = $a0;
   $1149 = (($1148) + 0)|0;
   $a0 = $1149;
   $RunLength = 0;
  }
  $1150 = $a0;
  $1151 = $lastx;
  $1152 = ($1150|0)!=($1151|0);
  if ($1152) {
   $1153 = $1;
   $1154 = $sp;
   $1155 = (($1154) + 92|0);
   $1156 = HEAP32[$1155>>2]|0;
   $1157 = $a0;
   $1158 = $lastx;
   _Fax3BadLength(27488,$1153,$1156,$1157,$1158);
   while(1) {
    $1159 = $a0;
    $1160 = $lastx;
    $1161 = ($1159|0)>($1160|0);
    if ($1161) {
     $1162 = $pa;
     $1163 = $thisrun;
     $1164 = ($1162>>>0)>($1163>>>0);
     $1510 = $1164;
    } else {
     $1510 = 0;
    }
    if (!($1510)) {
     break;
    }
    $1165 = $pa;
    $1166 = (($1165) + -4|0);
    $pa = $1166;
    $1167 = HEAP32[$1166>>2]|0;
    $1168 = $a0;
    $1169 = (($1168) - ($1167))|0;
    $a0 = $1169;
   }
   $1170 = $a0;
   $1171 = $lastx;
   $1172 = ($1170|0)<($1171|0);
   if ($1172) {
    $1173 = $a0;
    $1174 = ($1173|0)<(0);
    if ($1174) {
     $a0 = 0;
    }
    $1175 = $pa;
    $1176 = $thisrun;
    $1177 = $1175;
    $1178 = $1176;
    $1179 = (($1177) - ($1178))|0;
    $1180 = (($1179|0) / 4)&-1;
    $1181 = $1180 & 1;
    $1182 = ($1181|0)!=(0);
    if ($1182) {
     $1183 = $RunLength;
     $1184 = (($1183) + 0)|0;
     $1185 = $pa;
     $1186 = (($1185) + 4|0);
     $pa = $1186;
     HEAP32[$1185>>2] = $1184;
     $1187 = $a0;
     $1188 = (($1187) + 0)|0;
     $a0 = $1188;
     $RunLength = 0;
    }
    $1189 = $RunLength;
    $1190 = $lastx;
    $1191 = $a0;
    $1192 = (($1190) - ($1191))|0;
    $1193 = (($1189) + ($1192))|0;
    $1194 = $pa;
    $1195 = (($1194) + 4|0);
    $pa = $1195;
    HEAP32[$1194>>2] = $1193;
    $1196 = $lastx;
    $1197 = $a0;
    $1198 = (($1196) - ($1197))|0;
    $1199 = $a0;
    $1200 = (($1199) + ($1198))|0;
    $a0 = $1200;
    $RunLength = 0;
   } else {
    $1201 = $a0;
    $1202 = $lastx;
    $1203 = ($1201|0)>($1202|0);
    if ($1203) {
     $1204 = $RunLength;
     $1205 = $lastx;
     $1206 = (($1204) + ($1205))|0;
     $1207 = $pa;
     $1208 = (($1207) + 4|0);
     $pa = $1208;
     HEAP32[$1207>>2] = $1206;
     $1209 = $lastx;
     $1210 = $a0;
     $1211 = (($1210) + ($1209))|0;
     $a0 = $1211;
     $RunLength = 0;
     $1212 = $RunLength;
     $1213 = (($1212) + 0)|0;
     $1214 = $pa;
     $1215 = (($1214) + 4|0);
     $pa = $1215;
     HEAP32[$1214>>2] = $1213;
     $1216 = $a0;
     $1217 = (($1216) + 0)|0;
     $a0 = $1217;
     $RunLength = 0;
    }
   }
  }
 }
 else if ((label|0) == 483) {
  $1373 = $RunLength;
  $1374 = ($1373|0)!=(0);
  if ($1374) {
   $1375 = $RunLength;
   $1376 = (($1375) + 0)|0;
   $1377 = $pa;
   $1378 = (($1377) + 4|0);
   $pa = $1378;
   HEAP32[$1377>>2] = $1376;
   $1379 = $a0;
   $1380 = (($1379) + 0)|0;
   $a0 = $1380;
   $RunLength = 0;
  }
  $1381 = $a0;
  $1382 = $lastx;
  $1383 = ($1381|0)!=($1382|0);
  if ($1383) {
   $1384 = $1;
   $1385 = $sp;
   $1386 = (($1385) + 92|0);
   $1387 = HEAP32[$1386>>2]|0;
   $1388 = $a0;
   $1389 = $lastx;
   _Fax3BadLength(27488,$1384,$1387,$1388,$1389);
   while(1) {
    $1390 = $a0;
    $1391 = $lastx;
    $1392 = ($1390|0)>($1391|0);
    if ($1392) {
     $1393 = $pa;
     $1394 = $thisrun;
     $1395 = ($1393>>>0)>($1394>>>0);
     $1512 = $1395;
    } else {
     $1512 = 0;
    }
    if (!($1512)) {
     break;
    }
    $1396 = $pa;
    $1397 = (($1396) + -4|0);
    $pa = $1397;
    $1398 = HEAP32[$1397>>2]|0;
    $1399 = $a0;
    $1400 = (($1399) - ($1398))|0;
    $a0 = $1400;
   }
   $1401 = $a0;
   $1402 = $lastx;
   $1403 = ($1401|0)<($1402|0);
   if ($1403) {
    $1404 = $a0;
    $1405 = ($1404|0)<(0);
    if ($1405) {
     $a0 = 0;
    }
    $1406 = $pa;
    $1407 = $thisrun;
    $1408 = $1406;
    $1409 = $1407;
    $1410 = (($1408) - ($1409))|0;
    $1411 = (($1410|0) / 4)&-1;
    $1412 = $1411 & 1;
    $1413 = ($1412|0)!=(0);
    if ($1413) {
     $1414 = $RunLength;
     $1415 = (($1414) + 0)|0;
     $1416 = $pa;
     $1417 = (($1416) + 4|0);
     $pa = $1417;
     HEAP32[$1416>>2] = $1415;
     $1418 = $a0;
     $1419 = (($1418) + 0)|0;
     $a0 = $1419;
     $RunLength = 0;
    }
    $1420 = $RunLength;
    $1421 = $lastx;
    $1422 = $a0;
    $1423 = (($1421) - ($1422))|0;
    $1424 = (($1420) + ($1423))|0;
    $1425 = $pa;
    $1426 = (($1425) + 4|0);
    $pa = $1426;
    HEAP32[$1425>>2] = $1424;
    $1427 = $lastx;
    $1428 = $a0;
    $1429 = (($1427) - ($1428))|0;
    $1430 = $a0;
    $1431 = (($1430) + ($1429))|0;
    $a0 = $1431;
    $RunLength = 0;
   } else {
    $1432 = $a0;
    $1433 = $lastx;
    $1434 = ($1432|0)>($1433|0);
    if ($1434) {
     $1435 = $RunLength;
     $1436 = $lastx;
     $1437 = (($1435) + ($1436))|0;
     $1438 = $pa;
     $1439 = (($1438) + 4|0);
     $pa = $1439;
     HEAP32[$1438>>2] = $1437;
     $1440 = $lastx;
     $1441 = $a0;
     $1442 = (($1441) + ($1440))|0;
     $a0 = $1442;
     $RunLength = 0;
     $1443 = $RunLength;
     $1444 = (($1443) + 0)|0;
     $1445 = $pa;
     $1446 = (($1445) + 4|0);
     $pa = $1446;
     HEAP32[$1445>>2] = $1444;
     $1447 = $a0;
     $1448 = (($1447) + 0)|0;
     $a0 = $1448;
     $RunLength = 0;
    }
   }
  }
 }
 $1449 = $sp;
 $1450 = (($1449) + 60|0);
 $1451 = HEAP32[$1450>>2]|0;
 $1452 = $2;
 $1453 = $thisrun;
 $1454 = $pa;
 $1455 = $lastx;
 FUNCTION_TABLE_viiii[$1451 & 127]($1452,$1453,$1454,$1455);
 $1456 = $BitsAvail;
 $1457 = $sp;
 $1458 = (($1457) + 52|0);
 HEAP32[$1458>>2] = $1456;
 $1459 = $BitAcc;
 $1460 = $sp;
 $1461 = (($1460) + 48|0);
 HEAP32[$1461>>2] = $1459;
 $1462 = $EOLcnt;
 $1463 = $sp;
 $1464 = (($1463) + 56|0);
 HEAP32[$1464>>2] = $1462;
 $1465 = $cp;
 $1466 = $1;
 $1467 = (($1466) + 604|0);
 $1468 = HEAP32[$1467>>2]|0;
 $1469 = $1465;
 $1470 = $1468;
 $1471 = (($1469) - ($1470))|0;
 $1472 = $1;
 $1473 = (($1472) + 608|0);
 $1474 = HEAP32[$1473>>2]|0;
 $1475 = (($1474) - ($1471))|0;
 HEAP32[$1473>>2] = $1475;
 $1476 = $cp;
 $1477 = $1;
 $1478 = (($1477) + 604|0);
 HEAP32[$1478>>2] = $1476;
 $0 = -1;
 $1502 = $0;
 STACKTOP = sp;return ($1502|0);
}
function _Fax3PutEOL($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $align = 0, $bit = 0, $code = 0, $data = 0, $length = 0, $sp = 0, $tparm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 576|0);
 $3 = HEAP32[$2>>2]|0;
 $sp = $3;
 $4 = $sp;
 $5 = (($4) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $bit = $6;
 $7 = $sp;
 $8 = (($7) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $data = $9;
 $10 = $sp;
 $11 = (($10) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 4;
 $14 = ($13|0)!=(0);
 if ($14) {
  $align = 4;
  $15 = $align;
  $16 = $sp;
  $17 = (($16) + 52|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)!=($18|0);
  if ($19) {
   $20 = $align;
   $21 = $sp;
   $22 = (($21) + 52|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($20|0)>($23|0);
   if ($24) {
    $25 = $sp;
    $26 = (($25) + 52|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $align;
    $29 = (8 - ($28))|0;
    $30 = (($27) + ($29))|0;
    $align = $30;
   } else {
    $31 = $sp;
    $32 = (($31) + 52|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $align;
    $35 = (($33) - ($34))|0;
    $align = $35;
   }
   $code = 0;
   $36 = $align;
   $tparm = $36;
   while(1) {
    $37 = $tparm;
    $38 = $bit;
    $39 = ($37>>>0)>($38>>>0);
    if (!($39)) {
     break;
    }
    $40 = $tparm;
    $41 = $bit;
    $42 = (($40) - ($41))|0;
    $43 = 0 >> $42;
    $44 = $data;
    $45 = $44 | $43;
    $data = $45;
    $46 = $bit;
    $47 = $tparm;
    $48 = (($47) - ($46))|0;
    $tparm = $48;
    $49 = $0;
    $50 = (($49) + 608|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $0;
    $53 = (($52) + 592|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($51|0)>=($54|0);
    if ($55) {
     $56 = $0;
     (_TIFFFlushData1($56)|0);
    }
    $57 = $data;
    $58 = $57&255;
    $59 = $0;
    $60 = (($59) + 604|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + 1|0);
    HEAP32[$60>>2] = $62;
    HEAP8[$61>>0] = $58;
    $63 = $0;
    $64 = (($63) + 608|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + 1)|0;
    HEAP32[$64>>2] = $66;
    $data = 0;
    $bit = 8;
   }
   $67 = $tparm;
   $68 = ($67>>>0)<(9);
   if (!($68)) {
    ___assert_fail((27200|0),(25480|0),701,(27216|0));
    // unreachable;
   }
   $69 = $tparm;
   $70 = (26032 + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = 0 & $71;
   $73 = $bit;
   $74 = $tparm;
   $75 = (($73) - ($74))|0;
   $76 = $72 << $75;
   $77 = $data;
   $78 = $77 | $76;
   $data = $78;
   $79 = $tparm;
   $80 = $bit;
   $81 = (($80) - ($79))|0;
   $bit = $81;
   $82 = $bit;
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = $0;
    $85 = (($84) + 608|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $0;
    $88 = (($87) + 592|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($86|0)>=($89|0);
    if ($90) {
     $91 = $0;
     (_TIFFFlushData1($91)|0);
    }
    $92 = $data;
    $93 = $92&255;
    $94 = $0;
    $95 = (($94) + 604|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($96) + 1|0);
    HEAP32[$95>>2] = $97;
    HEAP8[$96>>0] = $93;
    $98 = $0;
    $99 = (($98) + 608|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($100) + 1)|0;
    HEAP32[$99>>2] = $101;
    $data = 0;
    $bit = 8;
   }
  }
 }
 $code = 1;
 $length = 12;
 $102 = $sp;
 $103 = (($102) + 28|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $104 & 1;
 $106 = ($105|0)!=(0);
 if ($106) {
  $107 = $code;
  $108 = $107 << 1;
  $109 = $sp;
  $110 = (($109) + 76|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)==(0);
  $113 = $112&1;
  $114 = $108 | $113;
  $code = $114;
  $115 = $length;
  $116 = (($115) + 1)|0;
  $length = $116;
 }
 while(1) {
  $117 = $length;
  $118 = $bit;
  $119 = ($117>>>0)>($118>>>0);
  if (!($119)) {
   break;
  }
  $120 = $code;
  $121 = $length;
  $122 = $bit;
  $123 = (($121) - ($122))|0;
  $124 = $120 >>> $123;
  $125 = $data;
  $126 = $125 | $124;
  $data = $126;
  $127 = $bit;
  $128 = $length;
  $129 = (($128) - ($127))|0;
  $length = $129;
  $130 = $0;
  $131 = (($130) + 608|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $0;
  $134 = (($133) + 592|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($132|0)>=($135|0);
  if ($136) {
   $137 = $0;
   (_TIFFFlushData1($137)|0);
  }
  $138 = $data;
  $139 = $138&255;
  $140 = $0;
  $141 = (($140) + 604|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (($142) + 1|0);
  HEAP32[$141>>2] = $143;
  HEAP8[$142>>0] = $139;
  $144 = $0;
  $145 = (($144) + 608|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + 1)|0;
  HEAP32[$145>>2] = $147;
  $data = 0;
  $bit = 8;
 }
 $148 = $length;
 $149 = ($148>>>0)<(9);
 if (!($149)) {
  ___assert_fail((26000|0),(25480|0),707,(27216|0));
  // unreachable;
 }
 $150 = $code;
 $151 = $length;
 $152 = (26032 + ($151<<2)|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $150 & $153;
 $155 = $bit;
 $156 = $length;
 $157 = (($155) - ($156))|0;
 $158 = $154 << $157;
 $159 = $data;
 $160 = $159 | $158;
 $data = $160;
 $161 = $length;
 $162 = $bit;
 $163 = (($162) - ($161))|0;
 $bit = $163;
 $164 = $bit;
 $165 = ($164|0)==(0);
 if (!($165)) {
  $184 = $data;
  $185 = $sp;
  $186 = (($185) + 48|0);
  HEAP32[$186>>2] = $184;
  $187 = $bit;
  $188 = $sp;
  $189 = (($188) + 52|0);
  HEAP32[$189>>2] = $187;
  STACKTOP = sp;return;
 }
 $166 = $0;
 $167 = (($166) + 608|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = $0;
 $170 = (($169) + 592|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ($168|0)>=($171|0);
 if ($172) {
  $173 = $0;
  (_TIFFFlushData1($173)|0);
 }
 $174 = $data;
 $175 = $174&255;
 $176 = $0;
 $177 = (($176) + 604|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = (($178) + 1|0);
 HEAP32[$177>>2] = $179;
 HEAP8[$178>>0] = $175;
 $180 = $0;
 $181 = (($180) + 608|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($182) + 1)|0;
 HEAP32[$181>>2] = $183;
 $data = 0;
 $bit = 8;
 $184 = $data;
 $185 = $sp;
 $186 = (($185) + 48|0);
 HEAP32[$186>>2] = $184;
 $187 = $bit;
 $188 = $sp;
 $189 = (($188) + 52|0);
 HEAP32[$189>>2] = $187;
 STACKTOP = sp;return;
}
function _Fax3Encode1DRow($tif,$bp,$bits) {
 $tif = $tif|0;
 $bp = $bp|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $bs = 0, $sp = 0;
 var $span = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $bp;
 $2 = $bits;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $sp = $5;
 $bs = 0;
 while(1) {
  $6 = $1;
  $7 = $bs;
  $8 = $2;
  $9 = (_find0span($6,$7,$8)|0);
  $span = $9;
  $10 = $0;
  $11 = $span;
  _putspan($10,$11,24136);
  $12 = $span;
  $13 = $bs;
  $14 = (($13) + ($12))|0;
  $bs = $14;
  $15 = $bs;
  $16 = $2;
  $17 = ($15>>>0)>=($16>>>0);
  if ($17) {
   label = 3;
   break;
  }
  $18 = $1;
  $19 = $bs;
  $20 = $2;
  $21 = (_find1span($18,$19,$20)|0);
  $span = $21;
  $22 = $0;
  $23 = $span;
  _putspan($22,$23,24792);
  $24 = $span;
  $25 = $bs;
  $26 = (($25) + ($24))|0;
  $bs = $26;
  $27 = $bs;
  $28 = $2;
  $29 = ($27>>>0)>=($28>>>0);
  if ($29) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
 }
 else if ((label|0) == 5) {
 }
 $30 = $sp;
 $31 = (($30) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & 12;
 $34 = ($33|0)!=(0);
 if (!($34)) {
  STACKTOP = sp;return 1;
 }
 $35 = $sp;
 $36 = (($35) + 52|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(8);
 if ($38) {
  $39 = $0;
  $40 = (($39) + 608|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $0;
  $43 = (($42) + 592|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)>=($44|0);
  if ($45) {
   $46 = $0;
   (_TIFFFlushData1($46)|0);
  }
  $47 = $sp;
  $48 = (($47) + 48|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $49&255;
  $51 = $0;
  $52 = (($51) + 604|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 1|0);
  HEAP32[$52>>2] = $54;
  HEAP8[$53>>0] = $50;
  $55 = $0;
  $56 = (($55) + 608|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$56>>2] = $58;
  $59 = $sp;
  $60 = (($59) + 48|0);
  HEAP32[$60>>2] = 0;
  $61 = $sp;
  $62 = (($61) + 52|0);
  HEAP32[$62>>2] = 8;
 }
 $63 = $sp;
 $64 = (($63) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $65 & 8;
 $67 = ($66|0)!=(0);
 if ($67) {
  $68 = $0;
  $69 = (($68) + 604|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $70;
  $72 = $71 & 1;
  $73 = ($72|0)==(0);
  if (!($73)) {
   $74 = $0;
   $75 = (($74) + 608|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $0;
   $78 = (($77) + 592|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76|0)>=($79|0);
   if ($80) {
    $81 = $0;
    (_TIFFFlushData1($81)|0);
   }
   $82 = $sp;
   $83 = (($82) + 48|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $84&255;
   $86 = $0;
   $87 = (($86) + 604|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + 1|0);
   HEAP32[$87>>2] = $89;
   HEAP8[$88>>0] = $85;
   $90 = $0;
   $91 = (($90) + 608|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($92) + 1)|0;
   HEAP32[$91>>2] = $93;
   $94 = $sp;
   $95 = (($94) + 48|0);
   HEAP32[$95>>2] = 0;
   $96 = $sp;
   $97 = (($96) + 52|0);
   HEAP32[$97>>2] = 8;
  }
 }
 STACKTOP = sp;return 1;
}
function _find0span($bp,$bs,$be) {
 $bp = $bp|0;
 $bs = $bs|0;
 $be = $be|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bits = 0, $lp = 0, $n = 0, $span = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $bp;
 $2 = $bs;
 $3 = $be;
 $4 = $3;
 $5 = $2;
 $6 = (($4) - ($5))|0;
 $bits = $6;
 $7 = $2;
 $8 = $7 >> 3;
 $9 = $1;
 $10 = (($9) + ($8)|0);
 $1 = $10;
 $11 = $bits;
 $12 = ($11|0)>(0);
 do {
  if ($12) {
   $13 = $2;
   $14 = $13 & 7;
   $n = $14;
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = $1;
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = $n;
    $20 = $18 << $19;
    $21 = $20 & 255;
    $22 = (26488 + ($21)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $span = $24;
    $25 = $span;
    $26 = $n;
    $27 = (8 - ($26))|0;
    $28 = ($25|0)>($27|0);
    if ($28) {
     $29 = $n;
     $30 = (8 - ($29))|0;
     $span = $30;
    }
    $31 = $span;
    $32 = $bits;
    $33 = ($31|0)>($32|0);
    if ($33) {
     $34 = $bits;
     $span = $34;
    }
    $35 = $n;
    $36 = $span;
    $37 = (($35) + ($36))|0;
    $38 = ($37|0)<(8);
    if (!($38)) {
     $40 = $span;
     $41 = $bits;
     $42 = (($41) - ($40))|0;
     $bits = $42;
     $43 = $1;
     $44 = (($43) + 1|0);
     $1 = $44;
     break;
    }
    $39 = $span;
    $0 = $39;
    $120 = $0;
    STACKTOP = sp;return ($120|0);
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $span = 0;
 }
 $45 = $bits;
 $46 = ($45|0)>=(64);
 if ($46) {
  while(1) {
   $47 = $1;
   $48 = $47;
   $49 = $48 & 3;
   $50 = ($49|0)==(0);
   $51 = $50 ^ 1;
   if (!($51)) {
    break;
   }
   $52 = $1;
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = ($54|0)!=(0);
   if ($55) {
    label = 15;
    break;
   }
   $64 = $span;
   $65 = (($64) + 8)|0;
   $span = $65;
   $66 = $bits;
   $67 = (($66) - 8)|0;
   $bits = $67;
   $68 = $1;
   $69 = (($68) + 1|0);
   $1 = $69;
  }
  if ((label|0) == 15) {
   $56 = $span;
   $57 = $1;
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = (26488 + ($59)|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = (($56) + ($62))|0;
   $0 = $63;
   $120 = $0;
   STACKTOP = sp;return ($120|0);
  }
  $70 = $1;
  $lp = $70;
  while(1) {
   $71 = $bits;
   $72 = ($71|0)>=(32);
   if ($72) {
    $73 = $lp;
    $74 = HEAP32[$73>>2]|0;
    $75 = (0)==($74|0);
    $121 = $75;
   } else {
    $121 = 0;
   }
   if (!($121)) {
    break;
   }
   $76 = $span;
   $77 = (($76) + 32)|0;
   $span = $77;
   $78 = $bits;
   $79 = (($78) - 32)|0;
   $bits = $79;
   $80 = $lp;
   $81 = (($80) + 4|0);
   $lp = $81;
  }
  $82 = $lp;
  $1 = $82;
 }
 while(1) {
  $83 = $bits;
  $84 = ($83|0)>=(8);
  if (!($84)) {
   break;
  }
  $85 = $1;
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = ($87|0)!=(0);
  if ($88) {
   label = 26;
   break;
  }
  $97 = $span;
  $98 = (($97) + 8)|0;
  $span = $98;
  $99 = $bits;
  $100 = (($99) - 8)|0;
  $bits = $100;
  $101 = $1;
  $102 = (($101) + 1|0);
  $1 = $102;
 }
 if ((label|0) == 26) {
  $89 = $span;
  $90 = $1;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = (26488 + ($92)|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = (($89) + ($95))|0;
  $0 = $96;
  $120 = $0;
  STACKTOP = sp;return ($120|0);
 }
 $103 = $bits;
 $104 = ($103|0)>(0);
 if ($104) {
  $105 = $1;
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  $108 = (26488 + ($107)|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $n = $110;
  $111 = $n;
  $112 = $bits;
  $113 = ($111|0)>($112|0);
  if ($113) {
   $114 = $bits;
   $118 = $114;
  } else {
   $115 = $n;
   $118 = $115;
  }
  $116 = $span;
  $117 = (($116) + ($118))|0;
  $span = $117;
 }
 $119 = $span;
 $0 = $119;
 $120 = $0;
 STACKTOP = sp;return ($120|0);
}
function _find1span($bp,$bs,$be) {
 $bp = $bp|0;
 $bs = $bs|0;
 $be = $be|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bits = 0, $lp = 0, $n = 0, $span = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $bp;
 $2 = $bs;
 $3 = $be;
 $4 = $3;
 $5 = $2;
 $6 = (($4) - ($5))|0;
 $bits = $6;
 $7 = $2;
 $8 = $7 >> 3;
 $9 = $1;
 $10 = (($9) + ($8)|0);
 $1 = $10;
 $11 = $bits;
 $12 = ($11|0)>(0);
 do {
  if ($12) {
   $13 = $2;
   $14 = $13 & 7;
   $n = $14;
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = $1;
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = $n;
    $20 = $18 << $19;
    $21 = $20 & 255;
    $22 = (26232 + ($21)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $span = $24;
    $25 = $span;
    $26 = $n;
    $27 = (8 - ($26))|0;
    $28 = ($25|0)>($27|0);
    if ($28) {
     $29 = $n;
     $30 = (8 - ($29))|0;
     $span = $30;
    }
    $31 = $span;
    $32 = $bits;
    $33 = ($31|0)>($32|0);
    if ($33) {
     $34 = $bits;
     $span = $34;
    }
    $35 = $n;
    $36 = $span;
    $37 = (($35) + ($36))|0;
    $38 = ($37|0)<(8);
    if (!($38)) {
     $40 = $span;
     $41 = $bits;
     $42 = (($41) - ($40))|0;
     $bits = $42;
     $43 = $1;
     $44 = (($43) + 1|0);
     $1 = $44;
     break;
    }
    $39 = $span;
    $0 = $39;
    $120 = $0;
    STACKTOP = sp;return ($120|0);
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $span = 0;
 }
 $45 = $bits;
 $46 = ($45|0)>=(64);
 if ($46) {
  while(1) {
   $47 = $1;
   $48 = $47;
   $49 = $48 & 3;
   $50 = ($49|0)==(0);
   $51 = $50 ^ 1;
   if (!($51)) {
    break;
   }
   $52 = $1;
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = ($54|0)!=(255);
   if ($55) {
    label = 15;
    break;
   }
   $64 = $span;
   $65 = (($64) + 8)|0;
   $span = $65;
   $66 = $bits;
   $67 = (($66) - 8)|0;
   $bits = $67;
   $68 = $1;
   $69 = (($68) + 1|0);
   $1 = $69;
  }
  if ((label|0) == 15) {
   $56 = $span;
   $57 = $1;
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = (26232 + ($59)|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = (($56) + ($62))|0;
   $0 = $63;
   $120 = $0;
   STACKTOP = sp;return ($120|0);
  }
  $70 = $1;
  $lp = $70;
  while(1) {
   $71 = $bits;
   $72 = ($71|0)>=(32);
   if ($72) {
    $73 = $lp;
    $74 = HEAP32[$73>>2]|0;
    $75 = (-1)==($74|0);
    $121 = $75;
   } else {
    $121 = 0;
   }
   if (!($121)) {
    break;
   }
   $76 = $span;
   $77 = (($76) + 32)|0;
   $span = $77;
   $78 = $bits;
   $79 = (($78) - 32)|0;
   $bits = $79;
   $80 = $lp;
   $81 = (($80) + 4|0);
   $lp = $81;
  }
  $82 = $lp;
  $1 = $82;
 }
 while(1) {
  $83 = $bits;
  $84 = ($83|0)>=(8);
  if (!($84)) {
   break;
  }
  $85 = $1;
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = ($87|0)!=(255);
  if ($88) {
   label = 26;
   break;
  }
  $97 = $span;
  $98 = (($97) + 8)|0;
  $span = $98;
  $99 = $bits;
  $100 = (($99) - 8)|0;
  $bits = $100;
  $101 = $1;
  $102 = (($101) + 1|0);
  $1 = $102;
 }
 if ((label|0) == 26) {
  $89 = $span;
  $90 = $1;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = (26232 + ($92)|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = (($89) + ($95))|0;
  $0 = $96;
  $120 = $0;
  STACKTOP = sp;return ($120|0);
 }
 $103 = $bits;
 $104 = ($103|0)>(0);
 if ($104) {
  $105 = $1;
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  $108 = (26232 + ($107)|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $n = $110;
  $111 = $n;
  $112 = $bits;
  $113 = ($111|0)>($112|0);
  if ($113) {
   $114 = $bits;
   $118 = $114;
  } else {
   $115 = $n;
   $118 = $115;
  }
  $116 = $span;
  $117 = (($116) + ($118))|0;
  $span = $117;
 }
 $119 = $span;
 $0 = $119;
 $120 = $0;
 STACKTOP = sp;return ($120|0);
}
function _putspan($tif,$span,$tab) {
 $tif = $tif|0;
 $span = $span|0;
 $tab = $tab|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit = 0, $code = 0, $data = 0, $length = 0, $sp = 0;
 var $te = 0, $te1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $span;
 $2 = $tab;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $sp = $5;
 $6 = $sp;
 $7 = (($6) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $bit = $8;
 $9 = $sp;
 $10 = (($9) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $data = $11;
 while(1) {
  $12 = $1;
  $13 = ($12|0)>=(2624);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = (($14) + 618|0);
  $te = $15;
  $16 = $te;
  $17 = (($16) + 2|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $code = $19;
  $20 = $te;
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $length = $22;
  while(1) {
   $23 = $length;
   $24 = $bit;
   $25 = ($23>>>0)>($24>>>0);
   if (!($25)) {
    break;
   }
   $26 = $code;
   $27 = $length;
   $28 = $bit;
   $29 = (($27) - ($28))|0;
   $30 = $26 >>> $29;
   $31 = $data;
   $32 = $31 | $30;
   $data = $32;
   $33 = $bit;
   $34 = $length;
   $35 = (($34) - ($33))|0;
   $length = $35;
   $36 = $0;
   $37 = (($36) + 608|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $0;
   $40 = (($39) + 592|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($38|0)>=($41|0);
   if ($42) {
    $43 = $0;
    (_TIFFFlushData1($43)|0);
   }
   $44 = $data;
   $45 = $44&255;
   $46 = $0;
   $47 = (($46) + 604|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 1|0);
   HEAP32[$47>>2] = $49;
   HEAP8[$48>>0] = $45;
   $50 = $0;
   $51 = (($50) + 608|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + 1)|0;
   HEAP32[$51>>2] = $53;
   $data = 0;
   $bit = 8;
  }
  $54 = $length;
  $55 = ($54>>>0)<(9);
  if (!($55)) {
   label = 9;
   break;
  }
  $56 = $code;
  $57 = $length;
  $58 = (26032 + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $56 & $59;
  $61 = $bit;
  $62 = $length;
  $63 = (($61) - ($62))|0;
  $64 = $60 << $63;
  $65 = $data;
  $66 = $65 | $64;
  $data = $66;
  $67 = $length;
  $68 = $bit;
  $69 = (($68) - ($67))|0;
  $bit = $69;
  $70 = $bit;
  $71 = ($70|0)==(0);
  if ($71) {
   $72 = $0;
   $73 = (($72) + 608|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $0;
   $76 = (($75) + 592|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($74|0)>=($77|0);
   if ($78) {
    $79 = $0;
    (_TIFFFlushData1($79)|0);
   }
   $80 = $data;
   $81 = $80&255;
   $82 = $0;
   $83 = (($82) + 604|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + 1|0);
   HEAP32[$83>>2] = $85;
   HEAP8[$84>>0] = $81;
   $86 = $0;
   $87 = (($86) + 608|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + 1)|0;
   HEAP32[$87>>2] = $89;
   $data = 0;
   $bit = 8;
  }
  $90 = $te;
  $91 = (($90) + 4|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92 << 16 >> 16;
  $94 = $1;
  $95 = (($94) - ($93))|0;
  $1 = $95;
 }
 if ((label|0) == 9) {
  ___assert_fail((26000|0),(25480|0),650,(26192|0));
  // unreachable;
 }
 $96 = $1;
 $97 = ($96|0)>=(64);
 if ($97) {
  $98 = $1;
  $99 = $98 >> 6;
  $100 = (63 + ($99))|0;
  $101 = $2;
  $102 = (($101) + (($100*6)|0)|0);
  $te1 = $102;
  $103 = $te1;
  $104 = (($103) + 4|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105 << 16 >> 16;
  $107 = $1;
  $108 = $107 >> 6;
  $109 = $108<<6;
  $110 = ($106|0)==($109|0);
  if (!($110)) {
   ___assert_fail((26200|0),(25480|0),655,(26192|0));
   // unreachable;
  }
  $111 = $te1;
  $112 = (($111) + 2|0);
  $113 = HEAP16[$112>>1]|0;
  $114 = $113&65535;
  $code = $114;
  $115 = $te1;
  $116 = HEAP16[$115>>1]|0;
  $117 = $116&65535;
  $length = $117;
  while(1) {
   $118 = $length;
   $119 = $bit;
   $120 = ($118>>>0)>($119>>>0);
   if (!($120)) {
    break;
   }
   $121 = $code;
   $122 = $length;
   $123 = $bit;
   $124 = (($122) - ($123))|0;
   $125 = $121 >>> $124;
   $126 = $data;
   $127 = $126 | $125;
   $data = $127;
   $128 = $bit;
   $129 = $length;
   $130 = (($129) - ($128))|0;
   $length = $130;
   $131 = $0;
   $132 = (($131) + 608|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $0;
   $135 = (($134) + 592|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($133|0)>=($136|0);
   if ($137) {
    $138 = $0;
    (_TIFFFlushData1($138)|0);
   }
   $139 = $data;
   $140 = $139&255;
   $141 = $0;
   $142 = (($141) + 604|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (($143) + 1|0);
   HEAP32[$142>>2] = $144;
   HEAP8[$143>>0] = $140;
   $145 = $0;
   $146 = (($145) + 608|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (($147) + 1)|0;
   HEAP32[$146>>2] = $148;
   $data = 0;
   $bit = 8;
  }
  $149 = $length;
  $150 = ($149>>>0)<(9);
  if (!($150)) {
   ___assert_fail((26000|0),(25480|0),660,(26192|0));
   // unreachable;
  }
  $151 = $code;
  $152 = $length;
  $153 = (26032 + ($152<<2)|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = $151 & $154;
  $156 = $bit;
  $157 = $length;
  $158 = (($156) - ($157))|0;
  $159 = $155 << $158;
  $160 = $data;
  $161 = $160 | $159;
  $data = $161;
  $162 = $length;
  $163 = $bit;
  $164 = (($163) - ($162))|0;
  $bit = $164;
  $165 = $bit;
  $166 = ($165|0)==(0);
  if ($166) {
   $167 = $0;
   $168 = (($167) + 608|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $0;
   $171 = (($170) + 592|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ($169|0)>=($172|0);
   if ($173) {
    $174 = $0;
    (_TIFFFlushData1($174)|0);
   }
   $175 = $data;
   $176 = $175&255;
   $177 = $0;
   $178 = (($177) + 604|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($179) + 1|0);
   HEAP32[$178>>2] = $180;
   HEAP8[$179>>0] = $176;
   $181 = $0;
   $182 = (($181) + 608|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = (($183) + 1)|0;
   HEAP32[$182>>2] = $184;
   $data = 0;
   $bit = 8;
  }
  $185 = $te1;
  $186 = (($185) + 4|0);
  $187 = HEAP16[$186>>1]|0;
  $188 = $187 << 16 >> 16;
  $189 = $1;
  $190 = (($189) - ($188))|0;
  $1 = $190;
 }
 $191 = $1;
 $192 = $2;
 $193 = (($192) + (($191*6)|0)|0);
 $194 = (($193) + 2|0);
 $195 = HEAP16[$194>>1]|0;
 $196 = $195&65535;
 $code = $196;
 $197 = $1;
 $198 = $2;
 $199 = (($198) + (($197*6)|0)|0);
 $200 = HEAP16[$199>>1]|0;
 $201 = $200&65535;
 $length = $201;
 while(1) {
  $202 = $length;
  $203 = $bit;
  $204 = ($202>>>0)>($203>>>0);
  if (!($204)) {
   break;
  }
  $205 = $code;
  $206 = $length;
  $207 = $bit;
  $208 = (($206) - ($207))|0;
  $209 = $205 >>> $208;
  $210 = $data;
  $211 = $210 | $209;
  $data = $211;
  $212 = $bit;
  $213 = $length;
  $214 = (($213) - ($212))|0;
  $length = $214;
  $215 = $0;
  $216 = (($215) + 608|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = $0;
  $219 = (($218) + 592|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = ($217|0)>=($220|0);
  if ($221) {
   $222 = $0;
   (_TIFFFlushData1($222)|0);
  }
  $223 = $data;
  $224 = $223&255;
  $225 = $0;
  $226 = (($225) + 604|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + 1|0);
  HEAP32[$226>>2] = $228;
  HEAP8[$227>>0] = $224;
  $229 = $0;
  $230 = (($229) + 608|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($231) + 1)|0;
  HEAP32[$230>>2] = $232;
  $data = 0;
  $bit = 8;
 }
 $233 = $length;
 $234 = ($233>>>0)<(9);
 if (!($234)) {
  ___assert_fail((26000|0),(25480|0),667,(26192|0));
  // unreachable;
 }
 $235 = $code;
 $236 = $length;
 $237 = (26032 + ($236<<2)|0);
 $238 = HEAP32[$237>>2]|0;
 $239 = $235 & $238;
 $240 = $bit;
 $241 = $length;
 $242 = (($240) - ($241))|0;
 $243 = $239 << $242;
 $244 = $data;
 $245 = $244 | $243;
 $data = $245;
 $246 = $length;
 $247 = $bit;
 $248 = (($247) - ($246))|0;
 $bit = $248;
 $249 = $bit;
 $250 = ($249|0)==(0);
 if (!($250)) {
  $269 = $data;
  $270 = $sp;
  $271 = (($270) + 48|0);
  HEAP32[$271>>2] = $269;
  $272 = $bit;
  $273 = $sp;
  $274 = (($273) + 52|0);
  HEAP32[$274>>2] = $272;
  STACKTOP = sp;return;
 }
 $251 = $0;
 $252 = (($251) + 608|0);
 $253 = HEAP32[$252>>2]|0;
 $254 = $0;
 $255 = (($254) + 592|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = ($253|0)>=($256|0);
 if ($257) {
  $258 = $0;
  (_TIFFFlushData1($258)|0);
 }
 $259 = $data;
 $260 = $259&255;
 $261 = $0;
 $262 = (($261) + 604|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = (($263) + 1|0);
 HEAP32[$262>>2] = $264;
 HEAP8[$263>>0] = $260;
 $265 = $0;
 $266 = (($265) + 608|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = (($267) + 1)|0;
 HEAP32[$266>>2] = $268;
 $data = 0;
 $bit = 8;
 $269 = $data;
 $270 = $sp;
 $271 = (($270) + 48|0);
 HEAP32[$271>>2] = $269;
 $272 = $bit;
 $273 = $sp;
 $274 = (($273) + 52|0);
 HEAP32[$274>>2] = $272;
 STACKTOP = sp;return;
}
function _LogL16toY($p16) {
 $p16 = $p16|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var $Le = 0, $Y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p16;
 $2 = $1;
 $3 = $2 & 32767;
 $Le = $3;
 $4 = $Le;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $0 = 0.0;
  $19 = $0;
  STACKTOP = sp;return (+$19);
 }
 $6 = $Le;
 $7 = (+($6|0));
 $8 = $7 + 0.5;
 $9 = 0.0027076061740622863 * $8;
 $10 = $9 - 44.361419555836498;
 $11 = (+Math_exp((+$10)));
 $Y = $11;
 $12 = $1;
 $13 = $12 & 32768;
 $14 = ($13|0)!=(0);
 if ($14) {
  $16 = $Y;
  $17 = -$16;
  $18 = $17;
 } else {
  $15 = $Y;
  $18 = $15;
 }
 $0 = $18;
 $19 = $0;
 STACKTOP = sp;return (+$19);
}
function _LogL16fromY($Y,$em) {
 $Y = +$Y;
 $em = $em|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $Y;
 $2 = $em;
 $3 = $1;
 $4 = $3 >= 1.8371976E+19;
 if ($4) {
  $0 = 32767;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $5 = $1;
 $6 = $5 <= -1.8371976E+19;
 if ($6) {
  $0 = 65535;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $7 = $1;
 $8 = $7 > 5.4136769000000003E-20;
 if ($8) {
  $9 = $2;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = $1;
   $12 = (+Math_log((+$11)));
   $13 = 1.4426950408889634 * $12;
   $14 = $13 + 64.0;
   $15 = 256.0 * $14;
   $16 = (~~(($15)));
   $28 = $16;
  } else {
   $17 = $1;
   $18 = (+Math_log((+$17)));
   $19 = 1.4426950408889634 * $18;
   $20 = $19 + 64.0;
   $21 = 256.0 * $20;
   $22 = (_rand()|0);
   $23 = (+($22|0));
   $24 = $23 * 4.6566128752457969E-10;
   $25 = $21 + $24;
   $26 = $25 - 0.5;
   $27 = (~~(($26)));
   $28 = $27;
  }
  $0 = $28;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $29 = $1;
 $30 = $29 < -5.4136769000000003E-20;
 if (!($30)) {
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $31 = $2;
 $32 = ($31|0)==(0);
 if ($32) {
  $33 = $1;
  $34 = -$33;
  $35 = (+Math_log((+$34)));
  $36 = 1.4426950408889634 * $35;
  $37 = $36 + 64.0;
  $38 = 256.0 * $37;
  $39 = (~~(($38)));
  $53 = $39;
 } else {
  $40 = $1;
  $41 = -$40;
  $42 = (+Math_log((+$41)));
  $43 = 1.4426950408889634 * $42;
  $44 = $43 + 64.0;
  $45 = 256.0 * $44;
  $46 = (_rand()|0);
  $47 = (+($46|0));
  $48 = $47 * 4.6566128752457969E-10;
  $49 = $45 + $48;
  $50 = $49 - 0.5;
  $51 = (~~(($50)));
  $53 = $51;
 }
 $52 = -32768 | $53;
 $0 = $52;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function _XYZtoRGB24($xyz,$rgb) {
 $xyz = $xyz|0;
 $rgb = $rgb|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0.0, $b = 0.0, $g = 0.0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xyz;
 $1 = $rgb;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $3;
 $5 = 2.6899999999999999 * $4;
 $6 = $0;
 $7 = (($6) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8;
 $10 = -1.276 * $9;
 $11 = $5 + $10;
 $12 = $0;
 $13 = (($12) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $14;
 $16 = -0.41399999999999998 * $15;
 $17 = $11 + $16;
 $r = $17;
 $18 = $0;
 $19 = +HEAPF32[$18>>2];
 $20 = $19;
 $21 = -1.022 * $20;
 $22 = $0;
 $23 = (($22) + 4|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $24;
 $26 = 1.978 * $25;
 $27 = $21 + $26;
 $28 = $0;
 $29 = (($28) + 8|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $30;
 $32 = 0.043999999999999997 * $31;
 $33 = $27 + $32;
 $g = $33;
 $34 = $0;
 $35 = +HEAPF32[$34>>2];
 $36 = $35;
 $37 = 0.060999999999999999 * $36;
 $38 = $0;
 $39 = (($38) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $40;
 $42 = -0.224 * $41;
 $43 = $37 + $42;
 $44 = $0;
 $45 = (($44) + 8|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $46;
 $48 = 1.163 * $47;
 $49 = $43 + $48;
 $b = $49;
 $50 = $r;
 $51 = $50 <= 0.0;
 if ($51) {
  $59 = 0;
 } else {
  $52 = $r;
  $53 = $52 >= 1.0;
  if ($53) {
   $85 = 255;
  } else {
   $54 = $r;
   $55 = (+Math_sqrt((+$54)));
   $56 = 256.0 * $55;
   $57 = (~~(($56)));
   $85 = $57;
  }
  $59 = $85;
 }
 $58 = $59&255;
 $60 = $1;
 HEAP8[$60>>0] = $58;
 $61 = $g;
 $62 = $61 <= 0.0;
 if ($62) {
  $70 = 0;
 } else {
  $63 = $g;
  $64 = $63 >= 1.0;
  if ($64) {
   $86 = 255;
  } else {
   $65 = $g;
   $66 = (+Math_sqrt((+$65)));
   $67 = 256.0 * $66;
   $68 = (~~(($67)));
   $86 = $68;
  }
  $70 = $86;
 }
 $69 = $70&255;
 $71 = $1;
 $72 = (($71) + 1|0);
 HEAP8[$72>>0] = $69;
 $73 = $b;
 $74 = $73 <= 0.0;
 if ($74) {
  $82 = 0;
  $81 = $82&255;
  $83 = $1;
  $84 = (($83) + 2|0);
  HEAP8[$84>>0] = $81;
  STACKTOP = sp;return;
 }
 $75 = $b;
 $76 = $75 >= 1.0;
 if ($76) {
  $87 = 255;
 } else {
  $77 = $b;
  $78 = (+Math_sqrt((+$77)));
  $79 = 256.0 * $78;
  $80 = (~~(($79)));
  $87 = $80;
 }
 $82 = $87;
 $81 = $82&255;
 $83 = $1;
 $84 = (($83) + 2|0);
 HEAP8[$84>>0] = $81;
 STACKTOP = sp;return;
}
function _LogL10toY($p10) {
 $p10 = $p10|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p10;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  $0 = 0.0;
  $10 = $0;
  STACKTOP = sp;return (+$10);
 } else {
  $4 = $1;
  $5 = (+($4|0));
  $6 = $5 + 0.5;
  $7 = 0.010830424696249145 * $6;
  $8 = $7 - 8.317766166719343;
  $9 = (+Math_exp((+$8)));
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return (+$10);
 }
 return +(0.0);
}
function _LogL10fromY($Y,$em) {
 $Y = +$Y;
 $em = $em|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $Y;
 $2 = $em;
 $3 = $1;
 $4 = $3 >= 15.742000000000001;
 if ($4) {
  $0 = 1023;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $5 = $1;
 $6 = $5 <= 2.4283E-4;
 if ($6) {
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $7 = $2;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $1;
  $10 = (+Math_log((+$9)));
  $11 = 1.4426950408889634 * $10;
  $12 = $11 + 12.0;
  $13 = 64.0 * $12;
  $14 = (~~(($13)));
  $26 = $14;
 } else {
  $15 = $1;
  $16 = (+Math_log((+$15)));
  $17 = 1.4426950408889634 * $16;
  $18 = $17 + 12.0;
  $19 = 64.0 * $18;
  $20 = (_rand()|0);
  $21 = (+($20|0));
  $22 = $21 * 4.6566128752457969E-10;
  $23 = $19 + $22;
  $24 = $23 - 0.5;
  $25 = (~~(($24)));
  $26 = $25;
 }
 $0 = $26;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _uv_encode($u,$v,$em) {
 $u = +$u;
 $v = +$v;
 $em = $em|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $ui = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $u;
 $2 = $v;
 $3 = $em;
 $4 = $2;
 $5 = $4 < 0.016939999535679817;
 if ($5) {
  $6 = $1;
  $7 = $2;
  $8 = (_oog_encode($6,$7)|0);
  $0 = $8;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 $9 = $3;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $2;
  $12 = $11 - 0.016939999535679817;
  $13 = $12 * 285.71427689523142;
  $14 = (~~(($13)));
  $24 = $14;
 } else {
  $15 = $2;
  $16 = $15 - 0.016939999535679817;
  $17 = $16 * 285.71427689523142;
  $18 = (_rand()|0);
  $19 = (+($18|0));
  $20 = $19 * 4.6566128752457969E-10;
  $21 = $17 + $20;
  $22 = $21 - 0.5;
  $23 = (~~(($22)));
  $24 = $23;
 }
 $vi = $24;
 $25 = $vi;
 $26 = ($25|0)>=(163);
 if ($26) {
  $27 = $1;
  $28 = $2;
  $29 = (_oog_encode($27,$28)|0);
  $0 = $29;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 $30 = $1;
 $31 = $vi;
 $32 = (127272 + ($31<<3)|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $33;
 $35 = $30 < $34;
 if ($35) {
  $36 = $1;
  $37 = $2;
  $38 = (_oog_encode($36,$37)|0);
  $0 = $38;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 $39 = $3;
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = $1;
  $42 = $vi;
  $43 = (127272 + ($42<<3)|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $44;
  $46 = $41 - $45;
  $47 = $46 * 285.71427689523142;
  $48 = (~~(($47)));
  $62 = $48;
 } else {
  $49 = $1;
  $50 = $vi;
  $51 = (127272 + ($50<<3)|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $52;
  $54 = $49 - $53;
  $55 = $54 * 285.71427689523142;
  $56 = (_rand()|0);
  $57 = (+($56|0));
  $58 = $57 * 4.6566128752457969E-10;
  $59 = $55 + $58;
  $60 = $59 - 0.5;
  $61 = (~~(($60)));
  $62 = $61;
 }
 $ui = $62;
 $63 = $ui;
 $64 = $vi;
 $65 = (127272 + ($64<<3)|0);
 $66 = (($65) + 4|0);
 $67 = HEAP16[$66>>1]|0;
 $68 = $67 << 16 >> 16;
 $69 = ($63|0)>=($68|0);
 if ($69) {
  $70 = $1;
  $71 = $2;
  $72 = (_oog_encode($70,$71)|0);
  $0 = $72;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 } else {
  $73 = $vi;
  $74 = (127272 + ($73<<3)|0);
  $75 = (($74) + 6|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $78 = $ui;
  $79 = (($77) + ($78))|0;
  $0 = $79;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 return (0)|0;
}
function _uv_decode($up,$vp,$c) {
 $up = $up|0;
 $vp = $vp|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lower = 0, $ui = 0, $upper = 0, $vi = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $up;
 $2 = $vp;
 $3 = $c;
 $4 = $3;
 $5 = ($4|0)<(0);
 if (!($5)) {
  $6 = $3;
  $7 = ($6|0)>=(16289);
  if (!($7)) {
   $lower = 0;
   $upper = 163;
   while(1) {
    $8 = $upper;
    $9 = $lower;
    $10 = (($8) - ($9))|0;
    $11 = ($10|0)>(1);
    if (!($11)) {
     break;
    }
    $12 = $lower;
    $13 = $upper;
    $14 = (($12) + ($13))|0;
    $15 = $14 >> 1;
    $vi = $15;
    $16 = $3;
    $17 = $vi;
    $18 = (127272 + ($17<<3)|0);
    $19 = (($18) + 6|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = $20 << 16 >> 16;
    $22 = (($16) - ($21))|0;
    $ui = $22;
    $23 = $ui;
    $24 = ($23|0)>(0);
    if ($24) {
     $25 = $vi;
     $lower = $25;
    } else {
     $26 = $ui;
     $27 = ($26|0)<(0);
     if (!($27)) {
      label = 10;
      break;
     }
     $28 = $vi;
     $upper = $28;
    }
   }
   if ((label|0) == 10) {
    $29 = $vi;
    $lower = $29;
   }
   $30 = $lower;
   $vi = $30;
   $31 = $3;
   $32 = $vi;
   $33 = (127272 + ($32<<3)|0);
   $34 = (($33) + 6|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35 << 16 >> 16;
   $37 = (($31) - ($36))|0;
   $ui = $37;
   $38 = $vi;
   $39 = (127272 + ($38<<3)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $40;
   $42 = $ui;
   $43 = (+($42|0));
   $44 = $43 + 0.5;
   $45 = $44 * 0.0035000001080334187;
   $46 = $41 + $45;
   $47 = $1;
   HEAPF64[$47>>3] = $46;
   $48 = $vi;
   $49 = (+($48|0));
   $50 = $49 + 0.5;
   $51 = $50 * 0.0035000001080334187;
   $52 = 0.016939999535679817 + $51;
   $53 = $2;
   HEAPF64[$53>>3] = $52;
   $0 = 0;
   $54 = $0;
   STACKTOP = sp;return ($54|0);
  }
 }
 $0 = -1;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function _LogLuv24toXYZ($p,$XYZ) {
 $p = $p|0;
 $XYZ = $XYZ|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $Ce = 0, $L = 0.0, $s = 0.0, $u = 0, $v = 0;
 var $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u = sp + 40|0;
 $v = sp + 32|0;
 $0 = $p;
 $1 = $XYZ;
 $2 = $0;
 $3 = $2 >>> 14;
 $4 = $3 & 1023;
 $5 = (+_LogL10toY($4));
 $L = $5;
 $6 = $L;
 $7 = $6 <= 0.0;
 if ($7) {
  $8 = $1;
  $9 = (($8) + 8|0);
  HEAPF32[$9>>2] = 0.0;
  $10 = $1;
  $11 = (($10) + 4|0);
  HEAPF32[$11>>2] = 0.0;
  $12 = $1;
  HEAPF32[$12>>2] = 0.0;
  STACKTOP = sp;return;
 }
 $13 = $0;
 $14 = $13 & 16383;
 $Ce = $14;
 $15 = $Ce;
 $16 = (_uv_decode($u,$v,$15)|0);
 $17 = ($16|0)<(0);
 if ($17) {
  HEAPF64[$u>>3] = 0.21052631599999999;
  HEAPF64[$v>>3] = 0.47368421100000002;
 }
 $18 = +HEAPF64[$u>>3];
 $19 = 6.0 * $18;
 $20 = +HEAPF64[$v>>3];
 $21 = 16.0 * $20;
 $22 = $19 - $21;
 $23 = $22 + 12.0;
 $24 = 1.0 / $23;
 $s = $24;
 $25 = +HEAPF64[$u>>3];
 $26 = 9.0 * $25;
 $27 = $s;
 $28 = $26 * $27;
 $x = $28;
 $29 = +HEAPF64[$v>>3];
 $30 = 4.0 * $29;
 $31 = $s;
 $32 = $30 * $31;
 $y = $32;
 $33 = $x;
 $34 = $y;
 $35 = $33 / $34;
 $36 = $L;
 $37 = $35 * $36;
 $38 = $37;
 $39 = $1;
 HEAPF32[$39>>2] = $38;
 $40 = $L;
 $41 = $40;
 $42 = $1;
 $43 = (($42) + 4|0);
 HEAPF32[$43>>2] = $41;
 $44 = $x;
 $45 = 1.0 - $44;
 $46 = $y;
 $47 = $45 - $46;
 $48 = $y;
 $49 = $47 / $48;
 $50 = $L;
 $51 = $49 * $50;
 $52 = $51;
 $53 = $1;
 $54 = (($53) + 8|0);
 HEAPF32[$54>>2] = $52;
 STACKTOP = sp;return;
}
function _LogLuv24fromXYZ($XYZ,$em) {
 $XYZ = $XYZ|0;
 $em = $em|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $Ce = 0, $Le = 0, $s = 0.0, $u = 0.0, $v = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $XYZ;
 $1 = $em;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = $1;
 $7 = (_LogL10fromY($5,$6)|0);
 $Le = $7;
 $8 = $0;
 $9 = +HEAPF32[$8>>2];
 $10 = $9;
 $11 = $0;
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $13;
 $15 = 15.0 * $14;
 $16 = $10 + $15;
 $17 = $0;
 $18 = (($17) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $19;
 $21 = 3.0 * $20;
 $22 = $16 + $21;
 $s = $22;
 $23 = $Le;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $s;
  $26 = $25 <= 0.0;
  if ($26) {
   label = 3;
  } else {
   $27 = $0;
   $28 = +HEAPF32[$27>>2];
   $29 = $28;
   $30 = 4.0 * $29;
   $31 = $s;
   $32 = $30 / $31;
   $u = $32;
   $33 = $0;
   $34 = (($33) + 4|0);
   $35 = +HEAPF32[$34>>2];
   $36 = $35;
   $37 = 9.0 * $36;
   $38 = $s;
   $39 = $37 / $38;
   $v = $39;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $u = 0.21052631599999999;
  $v = 0.47368421100000002;
 }
 $40 = $u;
 $41 = $v;
 $42 = $1;
 $43 = (_uv_encode($40,$41,$42)|0);
 $Ce = $43;
 $44 = $Ce;
 $45 = ($44|0)<(0);
 if (!($45)) {
  $47 = $Le;
  $48 = $47 << 14;
  $49 = $Ce;
  $50 = $48 | $49;
  STACKTOP = sp;return ($50|0);
 }
 $46 = (_uv_encode(0.21052631599999999,0.47368421100000002,0)|0);
 $Ce = $46;
 $47 = $Le;
 $48 = $47 << 14;
 $49 = $Ce;
 $50 = $48 | $49;
 STACKTOP = sp;return ($50|0);
}
function _LogLuv32toXYZ($p,$XYZ) {
 $p = $p|0;
 $XYZ = $XYZ|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $L = 0.0, $s = 0.0, $u = 0.0, $v = 0.0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $XYZ;
 $2 = $0;
 $3 = $2 >> 16;
 $4 = (+_LogL16toY($3));
 $L = $4;
 $5 = $L;
 $6 = $5 <= 0.0;
 if ($6) {
  $7 = $1;
  $8 = (($7) + 8|0);
  HEAPF32[$8>>2] = 0.0;
  $9 = $1;
  $10 = (($9) + 4|0);
  HEAPF32[$10>>2] = 0.0;
  $11 = $1;
  HEAPF32[$11>>2] = 0.0;
  STACKTOP = sp;return;
 } else {
  $12 = $0;
  $13 = $12 >>> 8;
  $14 = $13 & 255;
  $15 = (+($14>>>0));
  $16 = $15 + 0.5;
  $17 = 0.0024390243902439024 * $16;
  $u = $17;
  $18 = $0;
  $19 = $18 & 255;
  $20 = (+($19>>>0));
  $21 = $20 + 0.5;
  $22 = 0.0024390243902439024 * $21;
  $v = $22;
  $23 = $u;
  $24 = 6.0 * $23;
  $25 = $v;
  $26 = 16.0 * $25;
  $27 = $24 - $26;
  $28 = $27 + 12.0;
  $29 = 1.0 / $28;
  $s = $29;
  $30 = $u;
  $31 = 9.0 * $30;
  $32 = $s;
  $33 = $31 * $32;
  $x = $33;
  $34 = $v;
  $35 = 4.0 * $34;
  $36 = $s;
  $37 = $35 * $36;
  $y = $37;
  $38 = $x;
  $39 = $y;
  $40 = $38 / $39;
  $41 = $L;
  $42 = $40 * $41;
  $43 = $42;
  $44 = $1;
  HEAPF32[$44>>2] = $43;
  $45 = $L;
  $46 = $45;
  $47 = $1;
  $48 = (($47) + 4|0);
  HEAPF32[$48>>2] = $46;
  $49 = $x;
  $50 = 1.0 - $49;
  $51 = $y;
  $52 = $50 - $51;
  $53 = $y;
  $54 = $52 / $53;
  $55 = $L;
  $56 = $54 * $55;
  $57 = $56;
  $58 = $1;
  $59 = (($58) + 8|0);
  HEAPF32[$59>>2] = $57;
  STACKTOP = sp;return;
 }
}
function _LogLuv32fromXYZ($XYZ,$em) {
 $XYZ = $XYZ|0;
 $em = $em|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0.0, $Le = 0, $s = 0.0, $u = 0.0, $ue = 0, $v = 0.0, $ve = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $XYZ;
 $1 = $em;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4;
 $6 = $1;
 $7 = (_LogL16fromY($5,$6)|0);
 $Le = $7;
 $8 = $0;
 $9 = +HEAPF32[$8>>2];
 $10 = $9;
 $11 = $0;
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $13;
 $15 = 15.0 * $14;
 $16 = $10 + $15;
 $17 = $0;
 $18 = (($17) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $19;
 $21 = 3.0 * $20;
 $22 = $16 + $21;
 $s = $22;
 $23 = $Le;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $s;
  $26 = $25 <= 0.0;
  if ($26) {
   label = 3;
  } else {
   $27 = $0;
   $28 = +HEAPF32[$27>>2];
   $29 = $28;
   $30 = 4.0 * $29;
   $31 = $s;
   $32 = $30 / $31;
   $u = $32;
   $33 = $0;
   $34 = (($33) + 4|0);
   $35 = +HEAPF32[$34>>2];
   $36 = $35;
   $37 = 9.0 * $36;
   $38 = $s;
   $39 = $37 / $38;
   $v = $39;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $u = 0.21052631599999999;
  $v = 0.47368421100000002;
 }
 $40 = $u;
 $41 = $40 <= 0.0;
 if ($41) {
  $ue = 0;
 } else {
  $42 = $1;
  $43 = ($42|0)==(0);
  if ($43) {
   $44 = $u;
   $45 = 410.0 * $44;
   $46 = (~~(($45)));
   $55 = $46;
  } else {
   $47 = $u;
   $48 = 410.0 * $47;
   $49 = (_rand()|0);
   $50 = (+($49|0));
   $51 = $50 * 4.6566128752457969E-10;
   $52 = $48 + $51;
   $53 = $52 - 0.5;
   $54 = (~~(($53)));
   $55 = $54;
  }
  $ue = $55;
 }
 $56 = $ue;
 $57 = ($56>>>0)>(255);
 if ($57) {
  $ue = 255;
 }
 $58 = $v;
 $59 = $58 <= 0.0;
 if ($59) {
  $ve = 0;
 } else {
  $60 = $1;
  $61 = ($60|0)==(0);
  if ($61) {
   $62 = $v;
   $63 = 410.0 * $62;
   $64 = (~~(($63)));
   $73 = $64;
  } else {
   $65 = $v;
   $66 = 410.0 * $65;
   $67 = (_rand()|0);
   $68 = (+($67|0));
   $69 = $68 * 4.6566128752457969E-10;
   $70 = $66 + $69;
   $71 = $70 - 0.5;
   $72 = (~~(($71)));
   $73 = $72;
  }
  $ve = $73;
 }
 $74 = $ve;
 $75 = ($74>>>0)>(255);
 if (!($75)) {
  $76 = $Le;
  $77 = $76 << 16;
  $78 = $ue;
  $79 = $78 << 8;
  $80 = $77 | $79;
  $81 = $ve;
  $82 = $80 | $81;
  STACKTOP = sp;return ($82|0);
 }
 $ve = 255;
 $76 = $Le;
 $77 = $76 << 16;
 $78 = $ue;
 $79 = $78 << 8;
 $80 = $77 | $79;
 $81 = $ve;
 $82 = $80 | $81;
 STACKTOP = sp;return ($82|0);
}
function _TIFFInitSGILog($tif,$scheme) {
 $tif = $tif|0;
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $sp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $scheme;
 $3 = $2;
 $4 = ($3|0)==(34677);
 if (!($4)) {
  $5 = $2;
  $6 = ($5|0)==(34676);
  if (!($6)) {
   ___assert_fail((128592|0),(128656|0),1620,(128672|0));
   // unreachable;
  }
 }
 $7 = $1;
 $8 = (__TIFFMergeFields($7,128688,2)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $10 = $1;
  $11 = (($10) + 628|0);
  $12 = HEAP32[$11>>2]|0;
  _TIFFErrorExt($12,128576,128760,$vararg_buffer);
  $0 = 0;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $13 = (__TIFFmalloc(32)|0);
 $14 = $1;
 $15 = (($14) + 576|0);
 HEAP32[$15>>2] = $13;
 $16 = $1;
 $17 = (($16) + 576|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  $20 = $1;
  $21 = (($20) + 576|0);
  $22 = HEAP32[$21>>2]|0;
  $sp = $22;
  $23 = $sp;
  __TIFFmemset($23,0,32);
  $24 = $sp;
  HEAP32[$24>>2] = -1;
  $25 = $2;
  $26 = ($25|0)==(34677);
  $27 = $26 ? 1 : 0;
  $28 = $sp;
  $29 = (($28) + 4|0);
  HEAP32[$29>>2] = $27;
  $30 = $sp;
  $31 = (($30) + 20|0);
  HEAP32[$31>>2] = 106;
  $32 = $1;
  $33 = (($32) + 504|0);
  HEAP32[$33>>2] = 107;
  $34 = $1;
  $35 = (($34) + 508|0);
  HEAP32[$35>>2] = 108;
  $36 = $1;
  $37 = (($36) + 540|0);
  HEAP32[$37>>2] = 109;
  $38 = $1;
  $39 = (($38) + 548|0);
  HEAP32[$39>>2] = 110;
  $40 = $1;
  $41 = (($40) + 516|0);
  HEAP32[$41>>2] = 111;
  $42 = $1;
  $43 = (($42) + 544|0);
  HEAP32[$43>>2] = 112;
  $44 = $1;
  $45 = (($44) + 552|0);
  HEAP32[$45>>2] = 113;
  $46 = $1;
  $47 = (($46) + 556|0);
  HEAP32[$47>>2] = 114;
  $48 = $1;
  $49 = (($48) + 564|0);
  HEAP32[$49>>2] = 115;
  $50 = $1;
  $51 = (($50) + 668|0);
  $52 = (($51) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $sp;
  $55 = (($54) + 24|0);
  HEAP32[$55>>2] = $53;
  $56 = $1;
  $57 = (($56) + 668|0);
  $58 = (($57) + 4|0);
  HEAP32[$58>>2] = 116;
  $59 = $1;
  $60 = (($59) + 668|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $sp;
  $63 = (($62) + 28|0);
  HEAP32[$63>>2] = $61;
  $64 = $1;
  $65 = (($64) + 668|0);
  HEAP32[$65>>2] = 117;
  $0 = 1;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $66 = $1;
 $67 = (($66) + 628|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $1;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $70;
 _TIFFErrorExt($68,128576,128808,$vararg_buffer1);
 $0 = 0;
 $71 = $0;
 STACKTOP = sp;return ($71|0);
}
function _oog_encode($u,$v) {
 $u = +$u;
 $v = +$v;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ang = 0.0, $eps = 0, $epsa = 0.0, $i = 0, $i1 = 0, $i2 = 0, $ua = 0.0, $ui = 0, $ustep = 0, $va = 0.0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $eps = sp + 16|0;
 $0 = $u;
 $1 = $v;
 $2 = HEAP32[130360>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $131 = $1;
  $132 = $131 - 0.47368421100000002;
  $133 = $0;
  $134 = $133 - 0.21052631599999999;
  $135 = (+Math_atan2((+$132),(+$134)));
  $136 = 15.915494277358546 * $135;
  $137 = $136 + 50.0;
  $138 = (~~(($137)));
  $i = $138;
  $139 = $i;
  $140 = (129960 + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  STACKTOP = sp;return ($141|0);
 }
 $i = 100;
 while(1) {
  $4 = $i;
  $5 = (($4) + -1)|0;
  $i = $5;
  $6 = ($4|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = (($eps) + ($7<<3)|0);
  HEAPF64[$8>>3] = 2.0;
 }
 $vi = 163;
 while(1) {
  $9 = $vi;
  $10 = (($9) + -1)|0;
  $vi = $10;
  $11 = ($9|0)!=(0);
  if (!($11)) {
   break;
  }
  $12 = $vi;
  $13 = (+($12|0));
  $14 = $13 + 0.5;
  $15 = $14 * 0.0035000001080334187;
  $16 = 0.016939999535679817 + $15;
  $va = $16;
  $17 = $vi;
  $18 = (127272 + ($17<<3)|0);
  $19 = (($18) + 4|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = (($21) - 1)|0;
  $ustep = $22;
  $23 = $vi;
  $24 = ($23|0)==(162);
  if ($24) {
   label = 10;
  } else {
   $25 = $vi;
   $26 = ($25|0)==(0);
   if ($26) {
    label = 10;
   } else {
    $27 = $ustep;
    $28 = ($27|0)<=(0);
    if ($28) {
     label = 10;
    }
   }
  }
  if ((label|0) == 10) {
   label = 0;
   $ustep = 1;
  }
  $29 = $vi;
  $30 = (127272 + ($29<<3)|0);
  $31 = (($30) + 4|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 << 16 >> 16;
  $34 = (($33) - 1)|0;
  $ui = $34;
  while(1) {
   $35 = $ui;
   $36 = ($35|0)>=(0);
   if (!($36)) {
    break;
   }
   $37 = $vi;
   $38 = (127272 + ($37<<3)|0);
   $39 = +HEAPF32[$38>>2];
   $40 = $39;
   $41 = $ui;
   $42 = (+($41|0));
   $43 = $42 + 0.5;
   $44 = $43 * 0.0035000001080334187;
   $45 = $40 + $44;
   $ua = $45;
   $46 = $va;
   $47 = $46 - 0.47368421100000002;
   $48 = $ua;
   $49 = $48 - 0.21052631599999999;
   $50 = (+Math_atan2((+$47),(+$49)));
   $51 = 15.915494277358546 * $50;
   $52 = $51 + 50.0;
   $ang = $52;
   $53 = $ang;
   $54 = (~~(($53)));
   $i = $54;
   $55 = $ang;
   $56 = $i;
   $57 = (+($56|0));
   $58 = $57 + 0.5;
   $59 = $55 - $58;
   $60 = (+Math_abs((+$59)));
   $epsa = $60;
   $61 = $epsa;
   $62 = $i;
   $63 = (($eps) + ($62<<3)|0);
   $64 = +HEAPF64[$63>>3];
   $65 = $61 < $64;
   if ($65) {
    $66 = $vi;
    $67 = (127272 + ($66<<3)|0);
    $68 = (($67) + 6|0);
    $69 = HEAP16[$68>>1]|0;
    $70 = $69 << 16 >> 16;
    $71 = $ui;
    $72 = (($70) + ($71))|0;
    $73 = $i;
    $74 = (129960 + ($73<<2)|0);
    HEAP32[$74>>2] = $72;
    $75 = $epsa;
    $76 = $i;
    $77 = (($eps) + ($76<<3)|0);
    HEAPF64[$77>>3] = $75;
   }
   $78 = $ustep;
   $79 = $ui;
   $80 = (($79) - ($78))|0;
   $ui = $80;
  }
 }
 $i = 100;
 while(1) {
  $81 = $i;
  $82 = (($81) + -1)|0;
  $i = $82;
  $83 = ($81|0)!=(0);
  if (!($83)) {
   break;
  }
  $84 = $i;
  $85 = (($eps) + ($84<<3)|0);
  $86 = +HEAPF64[$85>>3];
  $87 = $86 > 1.5;
  if ($87) {
   $i1 = 1;
   while(1) {
    $88 = $i1;
    $89 = ($88|0)<(50);
    if (!($89)) {
     break;
    }
    $90 = $i;
    $91 = $i1;
    $92 = (($90) + ($91))|0;
    $93 = (($92|0) % 100)&-1;
    $94 = (($eps) + ($93<<3)|0);
    $95 = +HEAPF64[$94>>3];
    $96 = $95 < 1.5;
    if ($96) {
     label = 24;
     break;
    }
    $97 = $i1;
    $98 = (($97) + 1)|0;
    $i1 = $98;
   }
   if ((label|0) == 24) {
    label = 0;
   }
   $i2 = 1;
   while(1) {
    $99 = $i2;
    $100 = ($99|0)<(50);
    if (!($100)) {
     break;
    }
    $101 = $i;
    $102 = (($101) + 100)|0;
    $103 = $i2;
    $104 = (($102) - ($103))|0;
    $105 = (($104|0) % 100)&-1;
    $106 = (($eps) + ($105<<3)|0);
    $107 = +HEAPF64[$106>>3];
    $108 = $107 < 1.5;
    if ($108) {
     label = 30;
     break;
    }
    $109 = $i2;
    $110 = (($109) + 1)|0;
    $i2 = $110;
   }
   if ((label|0) == 30) {
    label = 0;
   }
   $111 = $i1;
   $112 = $i2;
   $113 = ($111|0)<($112|0);
   if ($113) {
    $114 = $i;
    $115 = $i1;
    $116 = (($114) + ($115))|0;
    $117 = (($116|0) % 100)&-1;
    $118 = (129960 + ($117<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $i;
    $121 = (129960 + ($120<<2)|0);
    HEAP32[$121>>2] = $119;
   } else {
    $122 = $i;
    $123 = (($122) + 100)|0;
    $124 = $i2;
    $125 = (($123) - ($124))|0;
    $126 = (($125|0) % 100)&-1;
    $127 = (129960 + ($126<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = $i;
    $130 = (129960 + ($129<<2)|0);
    HEAP32[$130>>2] = $128;
   }
  }
 }
 HEAP32[130360>>2] = 1;
 $131 = $1;
 $132 = $131 - 0.47368421100000002;
 $133 = $0;
 $134 = $133 - 0.21052631599999999;
 $135 = (+Math_atan2((+$132),(+$134)));
 $136 = 15.915494277358546 * $135;
 $137 = $136 + 50.0;
 $138 = (~~(($137)));
 $i = $138;
 $139 = $i;
 $140 = (129960 + ($139<<2)|0);
 $141 = HEAP32[$140>>2]|0;
 STACKTOP = sp;return ($141|0);
}
function __logLuvNop($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 STACKTOP = sp;return;
}
function _LogLuvFixupTags($tif) {
 $tif = $tif|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 STACKTOP = sp;return 1;
}
function _LogLuvSetupDecode($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $sp = 0, $td = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $sp = $4;
 $5 = $1;
 $6 = (($5) + 40|0);
 $td = $6;
 $7 = $1;
 $8 = (($7) + 652|0);
 HEAP32[$8>>2] = 15;
 $9 = $td;
 $10 = (($9) + 50|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 do {
  if ((($12|0) == 32845)) {
   $13 = $1;
   $14 = (_LogLuvInitState($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = $td;
   $17 = (($16) + 48|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $20 = ($19|0)==(34677);
   if ($20) {
    $21 = $1;
    $22 = (($21) + 532|0);
    HEAP32[$22>>2] = 118;
    $23 = $sp;
    $24 = HEAP32[$23>>2]|0;
    if ((($24|0) == 0)) {
     $25 = $sp;
     $26 = (($25) + 20|0);
     HEAP32[$26>>2] = 119;
    } else if ((($24|0) == 1)) {
     $27 = $sp;
     $28 = (($27) + 20|0);
     HEAP32[$28>>2] = 120;
    } else if ((($24|0) == 3)) {
     $29 = $sp;
     $30 = (($29) + 20|0);
     HEAP32[$30>>2] = 121;
    }
   } else {
    $31 = $1;
    $32 = (($31) + 532|0);
    HEAP32[$32>>2] = 122;
    $33 = $sp;
    $34 = HEAP32[$33>>2]|0;
    if ((($34|0) == 3)) {
     $39 = $sp;
     $40 = (($39) + 20|0);
     HEAP32[$40>>2] = 125;
    } else if ((($34|0) == 1)) {
     $37 = $sp;
     $38 = (($37) + 20|0);
     HEAP32[$38>>2] = 124;
    } else if ((($34|0) == 0)) {
     $35 = $sp;
     $36 = (($35) + 20|0);
     HEAP32[$36>>2] = 123;
    }
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else if ((($12|0) == 32844)) {
   $41 = $1;
   $42 = (_LogL16InitState($41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $44 = $1;
   $45 = (($44) + 532|0);
   HEAP32[$45>>2] = 126;
   $46 = $sp;
   $47 = HEAP32[$46>>2]|0;
   if ((($47|0) == 0)) {
    $48 = $sp;
    $49 = (($48) + 20|0);
    HEAP32[$49>>2] = 127;
   } else if ((($47|0) == 3)) {
    $50 = $sp;
    $51 = (($50) + 20|0);
    HEAP32[$51>>2] = 128;
   }
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  } else {
   $52 = $1;
   $53 = (($52) + 628|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $td;
   $56 = (($55) + 50|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $57&65535;
   HEAP32[$vararg_buffer>>2] = $58;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 129144;
   _TIFFErrorExt($54,129760,129072,$vararg_buffer);
  }
 } while(0);
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _LogLuvDecodeStrip($tif,$bp,$cc,$s) {
 $tif = $tif|0;
 $bp = $bp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rowlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $bp;
 $2 = $cc;
 $3 = $s;
 $4 = $0;
 $5 = (_TIFFScanlineSize($4)|0);
 $rowlen = $5;
 $6 = $2;
 $7 = $rowlen;
 $8 = (($6|0) % ($7|0))&-1;
 $9 = ($8|0)==(0);
 if (!($9)) {
  ___assert_fail((128984|0),(128656|0),382,(129736|0));
  // unreachable;
 }
 while(1) {
  $10 = $2;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $0;
   $13 = (($12) + 532|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $0;
   $16 = $1;
   $17 = $rowlen;
   $18 = $3;
   $19 = (FUNCTION_TABLE_iiiii[$14 & 255]($15,$16,$17,$18)|0);
   $20 = ($19|0)!=(0);
   $30 = $20;
  } else {
   $30 = 0;
  }
  if (!($30)) {
   break;
  }
  $21 = $rowlen;
  $22 = $1;
  $23 = (($22) + ($21)|0);
  $1 = $23;
  $24 = $rowlen;
  $25 = $2;
  $26 = (($25) - ($24))|0;
  $2 = $26;
 }
 $27 = $2;
 $28 = ($27|0)==(0);
 $29 = $28&1;
 STACKTOP = sp;return ($29|0);
}
function _LogLuvDecodeTile($tif,$bp,$cc,$s) {
 $tif = $tif|0;
 $bp = $bp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rowlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $bp;
 $2 = $cc;
 $3 = $s;
 $4 = $0;
 $5 = (_TIFFTileRowSize($4)|0);
 $rowlen = $5;
 $6 = $2;
 $7 = $rowlen;
 $8 = (($6|0) % ($7|0))&-1;
 $9 = ($8|0)==(0);
 if (!($9)) {
  ___assert_fail((128984|0),(128656|0),398,(129712|0));
  // unreachable;
 }
 while(1) {
  $10 = $2;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $0;
   $13 = (($12) + 532|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $0;
   $16 = $1;
   $17 = $rowlen;
   $18 = $3;
   $19 = (FUNCTION_TABLE_iiiii[$14 & 255]($15,$16,$17,$18)|0);
   $20 = ($19|0)!=(0);
   $30 = $20;
  } else {
   $30 = 0;
  }
  if (!($30)) {
   break;
  }
  $21 = $rowlen;
  $22 = $1;
  $23 = (($22) + ($21)|0);
  $1 = $23;
  $24 = $rowlen;
  $25 = $2;
  $26 = (($25) - ($24))|0;
  $2 = $26;
 }
 $27 = $2;
 $28 = ($27|0)==(0);
 $29 = $28&1;
 STACKTOP = sp;return ($29|0);
}
function _LogLuvSetupEncode($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $sp = 0, $td = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $sp = $4;
 $5 = $1;
 $6 = (($5) + 40|0);
 $td = $6;
 $7 = $td;
 $8 = (($7) + 50|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 do {
  if ((($10|0) == 32845)) {
   $11 = $1;
   $12 = (_LogLuvInitState($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    label = 26;
    break;
   }
   $14 = $td;
   $15 = (($14) + 48|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16&65535;
   $18 = ($17|0)==(34677);
   if ($18) {
    $19 = $1;
    $20 = (($19) + 536|0);
    HEAP32[$20>>2] = 129;
    $21 = $sp;
    $22 = HEAP32[$21>>2]|0;
    if ((($22|0) == 2)) {
    } else if ((($22|0) == 1)) {
     $25 = $sp;
     $26 = (($25) + 20|0);
     HEAP32[$26>>2] = 131;
    } else if ((($22|0) == 0)) {
     $23 = $sp;
     $24 = (($23) + 20|0);
     HEAP32[$24>>2] = 130;
    } else {
     label = 27;
     break;
    }
   } else {
    $27 = $1;
    $28 = (($27) + 536|0);
    HEAP32[$28>>2] = 132;
    $29 = $sp;
    $30 = HEAP32[$29>>2]|0;
    if ((($30|0) == 2)) {
    } else if ((($30|0) == 0)) {
     $31 = $sp;
     $32 = (($31) + 20|0);
     HEAP32[$32>>2] = 133;
    } else if ((($30|0) == 1)) {
     $33 = $sp;
     $34 = (($33) + 20|0);
     HEAP32[$34>>2] = 134;
    } else {
     label = 27;
     break;
    }
   }
   label = 26;
  } else if ((($10|0) == 32844)) {
   $35 = $1;
   $36 = (_LogL16InitState($35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    label = 26;
    break;
   }
   $38 = $1;
   $39 = (($38) + 536|0);
   HEAP32[$39>>2] = 135;
   $40 = $sp;
   $41 = HEAP32[$40>>2]|0;
   if ((($41|0) == 1)) {
   } else if ((($41|0) == 0)) {
    $42 = $sp;
    $43 = (($42) + 20|0);
    HEAP32[$43>>2] = 136;
   } else {
    label = 27;
    break;
   }
   label = 26;
  } else {
   $44 = $1;
   $45 = (($44) + 628|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $td;
   $48 = (($47) + 50|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = $49&65535;
   HEAP32[$vararg_buffer>>2] = $50;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 129144;
   _TIFFErrorExt($46,129048,129072,$vararg_buffer);
   label = 26;
  }
 } while(0);
 if ((label|0) == 26) {
  $0 = 1;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 else if ((label|0) == 27) {
  $51 = $1;
  $52 = (($51) + 628|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $td;
  $55 = (($54) + 50|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&65535;
  $58 = ($57|0)==(32844);
  $59 = $58 ? 129232 : 129240;
  HEAP32[$vararg_buffer2>>2] = $59;
  _TIFFErrorExt($53,129048,129176,$vararg_buffer2);
  $0 = 0;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 return (0)|0;
}
function _LogLuvEncodeStrip($tif,$bp,$cc,$s) {
 $tif = $tif|0;
 $bp = $bp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rowlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $bp;
 $2 = $cc;
 $3 = $s;
 $4 = $0;
 $5 = (_TIFFScanlineSize($4)|0);
 $rowlen = $5;
 $6 = $2;
 $7 = $rowlen;
 $8 = (($6|0) % ($7|0))&-1;
 $9 = ($8|0)==(0);
 if (!($9)) {
  ___assert_fail((128984|0),(128656|0),647,(129024|0));
  // unreachable;
 }
 while(1) {
  $10 = $2;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $0;
   $13 = (($12) + 536|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $0;
   $16 = $1;
   $17 = $rowlen;
   $18 = $3;
   $19 = (FUNCTION_TABLE_iiiii[$14 & 255]($15,$16,$17,$18)|0);
   $20 = ($19|0)==(1);
   $30 = $20;
  } else {
   $30 = 0;
  }
  if (!($30)) {
   break;
  }
  $21 = $rowlen;
  $22 = $1;
  $23 = (($22) + ($21)|0);
  $1 = $23;
  $24 = $rowlen;
  $25 = $2;
  $26 = (($25) - ($24))|0;
  $2 = $26;
 }
 $27 = $2;
 $28 = ($27|0)==(0);
 $29 = $28&1;
 STACKTOP = sp;return ($29|0);
}
function _LogLuvEncodeTile($tif,$bp,$cc,$s) {
 $tif = $tif|0;
 $bp = $bp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rowlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $bp;
 $2 = $cc;
 $3 = $s;
 $4 = $0;
 $5 = (_TIFFTileRowSize($4)|0);
 $rowlen = $5;
 $6 = $2;
 $7 = $rowlen;
 $8 = (($6|0) % ($7|0))&-1;
 $9 = ($8|0)==(0);
 if (!($9)) {
  ___assert_fail((128984|0),(128656|0),662,(129000|0));
  // unreachable;
 }
 while(1) {
  $10 = $2;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $0;
   $13 = (($12) + 536|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $0;
   $16 = $1;
   $17 = $rowlen;
   $18 = $3;
   $19 = (FUNCTION_TABLE_iiiii[$14 & 255]($15,$16,$17,$18)|0);
   $20 = ($19|0)==(1);
   $30 = $20;
  } else {
   $30 = 0;
  }
  if (!($30)) {
   break;
  }
  $21 = $rowlen;
  $22 = $1;
  $23 = (($22) + ($21)|0);
  $1 = $23;
  $24 = $rowlen;
  $25 = $2;
  $26 = (($25) - ($24))|0;
  $2 = $26;
 }
 $27 = $2;
 $28 = ($27|0)==(0);
 $29 = $28&1;
 STACKTOP = sp;return ($29|0);
}
function _LogLuvClose($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $td = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 40|0);
 $td = $2;
 $3 = $td;
 $4 = (($3) + 50|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($6|0)==(32844);
 $8 = $7 ? 1 : 3;
 $9 = $8&65535;
 $10 = $td;
 $11 = (($10) + 58|0);
 HEAP16[$11>>1] = $9;
 $12 = $td;
 $13 = (($12) + 44|0);
 HEAP16[$13>>1] = 16;
 $14 = $td;
 $15 = (($14) + 46|0);
 HEAP16[$15>>1] = 2;
 STACKTOP = sp;return;
}
function _LogLuvCleanup($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 576|0);
 $3 = HEAP32[$2>>2]|0;
 $sp = $3;
 $4 = $sp;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((128960|0),(128656|0),1523,(128968|0));
  // unreachable;
 }
 $6 = $sp;
 $7 = (($6) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = (($9) + 668|0);
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = $8;
 $12 = $sp;
 $13 = (($12) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (($15) + 668|0);
 HEAP32[$16>>2] = $14;
 $17 = $sp;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $sp;
  $22 = (($21) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  __TIFFfree($23);
 }
 $24 = $sp;
 __TIFFfree($24);
 $25 = $0;
 $26 = (($25) + 576|0);
 HEAP32[$26>>2] = 0;
 $27 = $0;
 __TIFFSetDefaultCompressionState($27);
 STACKTOP = sp;return;
}
function _LogLuvVGetField($tif,$tag,$ap) {
 $tif = $tif|0;
 $tag = $tag|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arglist_current = 0, $arglist_next = 0, $cond = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $tag;
 $3 = $ap;
 $4 = $1;
 $5 = (($4) + 576|0);
 $6 = HEAP32[$5>>2]|0;
 $sp = $6;
 $7 = $2;
 $cond = ($7|0)==(65560);
 if ($cond) {
  $8 = $sp;
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  $arglist_current = HEAP32[$10>>2]|0;
  $11 = HEAP32[$arglist_current>>2]|0;
  $arglist_next = (($arglist_current) + 4|0);
  HEAP32[$10>>2] = $arglist_next;
  HEAP32[$11>>2] = $9;
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $12 = $sp;
  $13 = (($12) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = $2;
  $17 = $3;
  $18 = (FUNCTION_TABLE_iiii[$14 & 255]($15,$16,$17)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _LogLuvVSetField($tif,$tag,$ap) {
 $tif = $tif|0;
 $tag = $tag|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_next = 0, $arglist_next12 = 0, $bps = 0, $fmt = 0, $sp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $tag;
 $3 = $ap;
 $4 = $1;
 $5 = (($4) + 576|0);
 $6 = HEAP32[$5>>2]|0;
 $sp = $6;
 $7 = $2;
 if ((($7|0) == 65560)) {
  $8 = $3;
  $arglist_current = HEAP32[$8>>2]|0;
  $9 = HEAP32[$arglist_current>>2]|0;
  $arglist_next = (($arglist_current) + 4|0);
  HEAP32[$8>>2] = $arglist_next;
  $10 = $sp;
  HEAP32[$10>>2] = $9;
  $11 = $sp;
  $12 = HEAP32[$11>>2]|0;
  if ((($12|0) == 3)) {
   $bps = 8;
   $fmt = 1;
  } else if ((($12|0) == 1)) {
   $bps = 16;
   $fmt = 2;
  } else if ((($12|0) == 2)) {
   $bps = 32;
   $fmt = 1;
   $13 = $1;
   HEAP32[$vararg_buffer>>2] = 1;
   (_TIFFSetField($13,277,$vararg_buffer)|0);
  } else if ((($12|0) == 0)) {
   $bps = 32;
   $fmt = 3;
  } else {
   $14 = $1;
   $15 = (($14) + 628|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = HEAP32[$17>>2]|0;
   $19 = $sp;
   $20 = HEAP32[$19>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $20;
   _TIFFErrorExt($16,$18,128864,$vararg_buffer1);
   $0 = 0;
   $64 = $0;
   STACKTOP = sp;return ($64|0);
  }
  $21 = $1;
  $22 = $bps;
  HEAP32[$vararg_buffer4>>2] = $22;
  (_TIFFSetField($21,258,$vararg_buffer4)|0);
  $23 = $1;
  $24 = $fmt;
  HEAP32[$vararg_buffer7>>2] = $24;
  (_TIFFSetField($23,339,$vararg_buffer7)|0);
  $25 = $1;
  $26 = (($25) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & 1024;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $1;
   $31 = (_TIFFTileSize($30)|0);
   $34 = $31;
  } else {
   $34 = -1;
  }
  $32 = $1;
  $33 = (($32) + 496|0);
  HEAP32[$33>>2] = $34;
  $35 = $1;
  $36 = (_TIFFScanlineSize($35)|0);
  $37 = $1;
  $38 = (($37) + 580|0);
  HEAP32[$38>>2] = $36;
  $0 = 1;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 } else if ((($7|0) == 65561)) {
  $39 = $3;
  $arglist_current11 = HEAP32[$39>>2]|0;
  $40 = HEAP32[$arglist_current11>>2]|0;
  $arglist_next12 = (($arglist_current11) + 4|0);
  HEAP32[$39>>2] = $arglist_next12;
  $41 = $sp;
  $42 = (($41) + 4|0);
  HEAP32[$42>>2] = $40;
  $43 = $sp;
  $44 = (($43) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(0);
  if ($46) {
   $47 = $sp;
   $48 = (($47) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)!=(1);
   if ($50) {
    $51 = $1;
    $52 = (($51) + 628|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $sp;
    $55 = (($54) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    HEAP32[$vararg_buffer13>>2] = $56;
    _TIFFErrorExt($53,128848,128912,$vararg_buffer13);
    $0 = 0;
    $64 = $0;
    STACKTOP = sp;return ($64|0);
   }
  }
  $0 = 1;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 } else {
  $57 = $sp;
  $58 = (($57) + 28|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $1;
  $61 = $2;
  $62 = $3;
  $63 = (FUNCTION_TABLE_iiii[$59 & 255]($60,$61,$62)|0);
  $0 = $63;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _LogLuvInitState($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $sp = 0, $td = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 40|0);
 $td = $3;
 $4 = $1;
 $5 = (($4) + 576|0);
 $6 = HEAP32[$5>>2]|0;
 $sp = $6;
 $7 = $sp;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((129280|0),(128656|0),1321,(129536|0));
  // unreachable;
 }
 $9 = $td;
 $10 = (($9) + 50|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ($12|0)==(32845);
 if (!($13)) {
  ___assert_fail((129552|0),(128656|0),1322,(129536|0));
  // unreachable;
 }
 $14 = $td;
 $15 = (($14) + 86|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = ($17|0)!=(1);
 if ($18) {
  $19 = $1;
  $20 = (($19) + 628|0);
  $21 = HEAP32[$20>>2]|0;
  _TIFFErrorExt($21,129520,129600,$vararg_buffer);
  $0 = 0;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 $22 = $sp;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(-1);
 if ($24) {
  $25 = $td;
  $26 = (_LogLuvGuessDataFmt($25)|0);
  $27 = $sp;
  HEAP32[$27>>2] = $26;
 }
 $28 = $sp;
 $29 = HEAP32[$28>>2]|0;
 if ((($29|0) == 3)) {
  $36 = $sp;
  $37 = (($36) + 8|0);
  HEAP32[$37>>2] = 3;
 } else if ((($29|0) == 1)) {
  $32 = $sp;
  $33 = (($32) + 8|0);
  HEAP32[$33>>2] = 6;
 } else if ((($29|0) == 0)) {
  $30 = $sp;
  $31 = (($30) + 8|0);
  HEAP32[$31>>2] = 12;
 } else if ((($29|0) == 2)) {
  $34 = $sp;
  $35 = (($34) + 8|0);
  HEAP32[$35>>2] = 4;
 } else {
  $38 = $1;
  $39 = (($38) + 628|0);
  $40 = HEAP32[$39>>2]|0;
  _TIFFErrorExt($40,129520,129656,$vararg_buffer1);
  $0 = 0;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 $41 = $1;
 $42 = (($41) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 1024;
 $45 = ($44|0)!=(0);
 if ($45) {
  $46 = $td;
  $47 = (($46) + 28|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $td;
  $50 = (($49) + 32|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (_multiply_ms($48,$51)|0);
  $53 = $sp;
  $54 = (($53) + 16|0);
  HEAP32[$54>>2] = $52;
 } else {
  $55 = $td;
  $56 = (($55) + 16|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $td;
  $59 = (($58) + 60|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (_multiply_ms($57,$60)|0);
  $62 = $sp;
  $63 = (($62) + 16|0);
  HEAP32[$63>>2] = $61;
 }
 $64 = $sp;
 $65 = (($64) + 16|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (_multiply_ms($66,4)|0);
 $68 = ($67|0)==(0);
 if (!($68)) {
  $69 = $sp;
  $70 = (($69) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $71<<2;
  $73 = (__TIFFmalloc($72)|0);
  $74 = $sp;
  $75 = (($74) + 12|0);
  HEAP32[$75>>2] = $73;
  $76 = ($73|0)==(0|0);
  if (!($76)) {
   $0 = 1;
   $80 = $0;
   STACKTOP = sp;return ($80|0);
  }
 }
 $77 = $1;
 $78 = (($77) + 628|0);
 $79 = HEAP32[$78>>2]|0;
 _TIFFErrorExt($79,129520,129448,$vararg_buffer3);
 $0 = 0;
 $80 = $0;
 STACKTOP = sp;return ($80|0);
}
function _LogLuvDecode24($tif,$op,$occ,$s) {
 $tif = $tif|0;
 $op = $op|0;
 $occ = $occ|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $bp = 0, $cc = 0, $i = 0, $npixels = 0;
 var $sp = 0, $tp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $op;
 $3 = $occ;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $4;
 $9 = $8&65535;
 $10 = ($9|0)==(0);
 if (!($10)) {
  ___assert_fail((129256|0),(128656|0),263,(129912|0));
  // unreachable;
 }
 $11 = $sp;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((129280|0),(128656|0),264,(129912|0));
  // unreachable;
 }
 $13 = $3;
 $14 = $sp;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13|0) / ($16|0))&-1;
 $npixels = $17;
 $18 = $sp;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(2);
 do {
  if ($20) {
   $21 = $2;
   $tp = $21;
  } else {
   $22 = $sp;
   $23 = (($22) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $npixels;
   $26 = ($24|0)>=($25|0);
   if ($26) {
    $27 = $sp;
    $28 = (($27) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $tp = $29;
    break;
   } else {
    ___assert_fail((129296|0),(128656|0),271,(129912|0));
    // unreachable;
   }
  }
 } while(0);
 $30 = $1;
 $31 = (($30) + 604|0);
 $32 = HEAP32[$31>>2]|0;
 $bp = $32;
 $33 = $1;
 $34 = (($33) + 608|0);
 $35 = HEAP32[$34>>2]|0;
 $cc = $35;
 $i = 0;
 while(1) {
  $36 = $i;
  $37 = $npixels;
  $38 = ($36|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $cc;
  $40 = ($39|0)>(0);
  if (!($40)) {
   break;
  }
  $41 = $bp;
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $43 << 16;
  $45 = $bp;
  $46 = (($45) + 1|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $48 << 8;
  $50 = $44 | $49;
  $51 = $bp;
  $52 = (($51) + 2|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $50 | $54;
  $56 = $i;
  $57 = $tp;
  $58 = (($57) + ($56<<2)|0);
  HEAP32[$58>>2] = $55;
  $59 = $bp;
  $60 = (($59) + 3|0);
  $bp = $60;
  $61 = $cc;
  $62 = (($61) - 3)|0;
  $cc = $62;
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 $65 = $bp;
 $66 = $1;
 $67 = (($66) + 604|0);
 HEAP32[$67>>2] = $65;
 $68 = $cc;
 $69 = $1;
 $70 = (($69) + 608|0);
 HEAP32[$70>>2] = $68;
 $71 = $i;
 $72 = $npixels;
 $73 = ($71|0)!=($72|0);
 if ($73) {
  $74 = $1;
  $75 = (($74) + 628|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $1;
  $78 = (($77) + 444|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $npixels;
  $81 = $i;
  $82 = (($80) - ($81))|0;
  $83 = ($82|0)<(0);
  $84 = $83 << 31 >> 31;
  HEAP32[$vararg_buffer>>2] = $79;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  $85 = $vararg_ptr1;
  $86 = $85;
  HEAP32[$86>>2] = $82;
  $87 = (($85) + 4)|0;
  $88 = $87;
  HEAP32[$88>>2] = $84;
  _TIFFErrorExt($76,129896,129816,$vararg_buffer);
  $0 = 0;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 } else {
  $89 = $sp;
  $90 = (($89) + 20|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $sp;
  $93 = $2;
  $94 = $npixels;
  FUNCTION_TABLE_viii[$91 & 255]($92,$93,$94);
  $0 = 1;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 return (0)|0;
}
function _Luv24toXYZ($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $luv = 0, $xyz = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $luv = $5;
 $6 = $1;
 $xyz = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $luv;
  $11 = HEAP32[$10>>2]|0;
  $12 = $xyz;
  _LogLuv24toXYZ($11,$12);
  $13 = $xyz;
  $14 = (($13) + 12|0);
  $xyz = $14;
  $15 = $luv;
  $16 = (($15) + 4|0);
  $luv = $16;
 }
 STACKTOP = sp;return;
}
function _Luv24toLuv48($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $luv = 0, $luv3 = 0, $u = 0, $v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u = sp;
 $v = sp + 8|0;
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $luv = $5;
 $6 = $1;
 $luv3 = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $luv;
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 >>> 12;
  $13 = $12 & 4093;
  $14 = (($13) + 13314)|0;
  $15 = $14&65535;
  $16 = $luv3;
  $17 = (($16) + 2|0);
  $luv3 = $17;
  HEAP16[$16>>1] = $15;
  $18 = $luv;
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 16383;
  $21 = (_uv_decode($u,$v,$20)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   HEAPF64[$u>>3] = 0.21052631599999999;
   HEAPF64[$v>>3] = 0.47368421100000002;
  }
  $23 = +HEAPF64[$u>>3];
  $24 = $23 * 32768.0;
  $25 = (~~(($24)));
  $26 = $luv3;
  $27 = (($26) + 2|0);
  $luv3 = $27;
  HEAP16[$26>>1] = $25;
  $28 = +HEAPF64[$v>>3];
  $29 = $28 * 32768.0;
  $30 = (~~(($29)));
  $31 = $luv3;
  $32 = (($31) + 2|0);
  $luv3 = $32;
  HEAP16[$31>>1] = $30;
  $33 = $luv;
  $34 = (($33) + 4|0);
  $luv = $34;
 }
 STACKTOP = sp;return;
}
function _Luv24toRGB($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $luv = 0, $rgb = 0, $xyz = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xyz = sp;
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $luv = $5;
 $6 = $1;
 $rgb = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $luv;
  $11 = (($10) + 4|0);
  $luv = $11;
  $12 = HEAP32[$10>>2]|0;
  _LogLuv24toXYZ($12,$xyz);
  $13 = $rgb;
  _XYZtoRGB24($xyz,$13);
  $14 = $rgb;
  $15 = (($14) + 3|0);
  $rgb = $15;
 }
 STACKTOP = sp;return;
}
function _LogLuvDecode32($tif,$op,$occ,$s) {
 $tif = $tif|0;
 $op = $op|0;
 $occ = $occ|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $b = 0, $bp = 0, $cc = 0, $i = 0, $npixels = 0, $rc = 0, $shft = 0, $sp = 0, $tp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $op;
 $3 = $occ;
 $4 = $s;
 $5 = $4;
 $6 = $5&65535;
 $7 = ($6|0)==(0);
 if (!($7)) {
  ___assert_fail((129256|0),(128656|0),319,(129880|0));
  // unreachable;
 }
 $8 = $1;
 $9 = (($8) + 576|0);
 $10 = HEAP32[$9>>2]|0;
 $sp = $10;
 $11 = $sp;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((129280|0),(128656|0),321,(129880|0));
  // unreachable;
 }
 $13 = $3;
 $14 = $sp;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13|0) / ($16|0))&-1;
 $npixels = $17;
 $18 = $sp;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(2);
 do {
  if ($20) {
   $21 = $2;
   $tp = $21;
  } else {
   $22 = $sp;
   $23 = (($22) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $npixels;
   $26 = ($24|0)>=($25|0);
   if ($26) {
    $27 = $sp;
    $28 = (($27) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $tp = $29;
    break;
   } else {
    ___assert_fail((129296|0),(128656|0),328,(129880|0));
    // unreachable;
   }
  }
 } while(0);
 $30 = $tp;
 $31 = $npixels;
 $32 = $31<<2;
 __TIFFmemset($30,0,$32);
 $33 = $1;
 $34 = (($33) + 604|0);
 $35 = HEAP32[$34>>2]|0;
 $bp = $35;
 $36 = $1;
 $37 = (($36) + 608|0);
 $38 = HEAP32[$37>>2]|0;
 $cc = $38;
 $shft = 32;
 while(1) {
  $39 = $shft;
  $40 = (($39) - 8)|0;
  $shft = $40;
  $41 = ($40|0)>=(0);
  if (!($41)) {
   label = 33;
   break;
  }
  $i = 0;
  while(1) {
   $42 = $i;
   $43 = $npixels;
   $44 = ($42|0)<($43|0);
   if (!($44)) {
    break;
   }
   $45 = $cc;
   $46 = ($45|0)>(0);
   if (!($46)) {
    break;
   }
   $47 = $bp;
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = ($49|0)>=(128);
   if ($50) {
    $51 = $bp;
    $52 = (($51) + 1|0);
    $bp = $52;
    $53 = HEAP8[$51>>0]|0;
    $54 = $53&255;
    $55 = (($54) + -126)|0;
    $rc = $55;
    $56 = $bp;
    $57 = (($56) + 1|0);
    $bp = $57;
    $58 = HEAP8[$56>>0]|0;
    $59 = $58&255;
    $60 = $shft;
    $61 = $59 << $60;
    $b = $61;
    $62 = $cc;
    $63 = (($62) - 2)|0;
    $cc = $63;
    while(1) {
     $64 = $rc;
     $65 = (($64) + -1)|0;
     $rc = $65;
     $66 = ($64|0)!=(0);
     if ($66) {
      $67 = $i;
      $68 = $npixels;
      $69 = ($67|0)<($68|0);
      $139 = $69;
     } else {
      $139 = 0;
     }
     if (!($139)) {
      break;
     }
     $70 = $b;
     $71 = $i;
     $72 = (($71) + 1)|0;
     $i = $72;
     $73 = $tp;
     $74 = (($73) + ($71<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $75 | $70;
     HEAP32[$74>>2] = $76;
    }
   } else {
    $77 = $bp;
    $78 = (($77) + 1|0);
    $bp = $78;
    $79 = HEAP8[$77>>0]|0;
    $80 = $79&255;
    $rc = $80;
    while(1) {
     $81 = $cc;
     $82 = (($81) + -1)|0;
     $cc = $82;
     $83 = ($82|0)!=(0);
     if ($83) {
      $84 = $rc;
      $85 = (($84) + -1)|0;
      $rc = $85;
      $86 = ($84|0)!=(0);
      if ($86) {
       $87 = $i;
       $88 = $npixels;
       $89 = ($87|0)<($88|0);
       $140 = $89;
      } else {
       $140 = 0;
      }
     } else {
      $140 = 0;
     }
     if (!($140)) {
      break;
     }
     $90 = $bp;
     $91 = (($90) + 1|0);
     $bp = $91;
     $92 = HEAP8[$90>>0]|0;
     $93 = $92&255;
     $94 = $shft;
     $95 = $93 << $94;
     $96 = $i;
     $97 = (($96) + 1)|0;
     $i = $97;
     $98 = $tp;
     $99 = (($98) + ($96<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $100 | $95;
     HEAP32[$99>>2] = $101;
    }
   }
  }
  $102 = $i;
  $103 = $npixels;
  $104 = ($102|0)!=($103|0);
  if ($104) {
   label = 31;
   break;
  }
 }
 if ((label|0) == 31) {
  $105 = $1;
  $106 = (($105) + 628|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $1;
  $109 = (($108) + 444|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $npixels;
  $112 = $i;
  $113 = (($111) - ($112))|0;
  $114 = ($113|0)<(0);
  $115 = $114 << 31 >> 31;
  HEAP32[$vararg_buffer>>2] = $110;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  $116 = $vararg_ptr1;
  $117 = $116;
  HEAP32[$117>>2] = $113;
  $118 = (($116) + 4)|0;
  $119 = $118;
  HEAP32[$119>>2] = $115;
  _TIFFErrorExt($107,129864,129816,$vararg_buffer);
  $120 = $bp;
  $121 = $1;
  $122 = (($121) + 604|0);
  HEAP32[$122>>2] = $120;
  $123 = $cc;
  $124 = $1;
  $125 = (($124) + 608|0);
  HEAP32[$125>>2] = $123;
  $0 = 0;
  $138 = $0;
  STACKTOP = sp;return ($138|0);
 }
 else if ((label|0) == 33) {
  $126 = $sp;
  $127 = (($126) + 20|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $sp;
  $130 = $2;
  $131 = $npixels;
  FUNCTION_TABLE_viii[$128 & 255]($129,$130,$131);
  $132 = $bp;
  $133 = $1;
  $134 = (($133) + 604|0);
  HEAP32[$134>>2] = $132;
  $135 = $cc;
  $136 = $1;
  $137 = (($136) + 608|0);
  HEAP32[$137>>2] = $135;
  $0 = 1;
  $138 = $0;
  STACKTOP = sp;return ($138|0);
 }
 return (0)|0;
}
function _Luv32toXYZ($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $luv = 0, $xyz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $luv = $5;
 $6 = $1;
 $xyz = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $luv;
  $11 = (($10) + 4|0);
  $luv = $11;
  $12 = HEAP32[$10>>2]|0;
  $13 = $xyz;
  _LogLuv32toXYZ($12,$13);
  $14 = $xyz;
  $15 = (($14) + 12|0);
  $xyz = $15;
 }
 STACKTOP = sp;return;
}
function _Luv32toLuv48($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $luv = 0, $luv3 = 0, $u = 0.0, $v = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $luv = $5;
 $6 = $1;
 $luv3 = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $luv;
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 >>> 16;
  $13 = $12&65535;
  $14 = $luv3;
  $15 = (($14) + 2|0);
  $luv3 = $15;
  HEAP16[$14>>1] = $13;
  $16 = $luv;
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 >>> 8;
  $19 = $18 & 255;
  $20 = (+($19>>>0));
  $21 = $20 + 0.5;
  $22 = 0.0024390243902439024 * $21;
  $u = $22;
  $23 = $luv;
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 & 255;
  $26 = (+($25>>>0));
  $27 = $26 + 0.5;
  $28 = 0.0024390243902439024 * $27;
  $v = $28;
  $29 = $u;
  $30 = $29 * 32768.0;
  $31 = (~~(($30)));
  $32 = $luv3;
  $33 = (($32) + 2|0);
  $luv3 = $33;
  HEAP16[$32>>1] = $31;
  $34 = $v;
  $35 = $34 * 32768.0;
  $36 = (~~(($35)));
  $37 = $luv3;
  $38 = (($37) + 2|0);
  $luv3 = $38;
  HEAP16[$37>>1] = $36;
  $39 = $luv;
  $40 = (($39) + 4|0);
  $luv = $40;
 }
 STACKTOP = sp;return;
}
function _Luv32toRGB($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $luv = 0, $rgb = 0, $xyz = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xyz = sp;
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $luv = $5;
 $6 = $1;
 $rgb = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $luv;
  $11 = (($10) + 4|0);
  $luv = $11;
  $12 = HEAP32[$10>>2]|0;
  _LogLuv32toXYZ($12,$xyz);
  $13 = $rgb;
  _XYZtoRGB24($xyz,$13);
  $14 = $rgb;
  $15 = (($14) + 3|0);
  $rgb = $15;
 }
 STACKTOP = sp;return;
}
function _LogL16InitState($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $sp = 0, $td = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 40|0);
 $td = $3;
 $4 = $1;
 $5 = (($4) + 576|0);
 $6 = HEAP32[$5>>2]|0;
 $sp = $6;
 $7 = $sp;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((129280|0),(128656|0),1229,(129336|0));
  // unreachable;
 }
 $9 = $td;
 $10 = (($9) + 50|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ($12|0)==(32844);
 if (!($13)) {
  ___assert_fail((129352|0),(128656|0),1230,(129336|0));
  // unreachable;
 }
 $14 = $sp;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(-1);
 if ($16) {
  $17 = $td;
  $18 = (_LogL16GuessDataFmt($17)|0);
  $19 = $sp;
  HEAP32[$19>>2] = $18;
 }
 $20 = $sp;
 $21 = HEAP32[$20>>2]|0;
 if ((($21|0) == 0)) {
  $22 = $sp;
  $23 = (($22) + 8|0);
  HEAP32[$23>>2] = 4;
 } else if ((($21|0) == 3)) {
  $26 = $sp;
  $27 = (($26) + 8|0);
  HEAP32[$27>>2] = 1;
 } else if ((($21|0) == 1)) {
  $24 = $sp;
  $25 = (($24) + 8|0);
  HEAP32[$25>>2] = 2;
 } else {
  $28 = $1;
  $29 = (($28) + 628|0);
  $30 = HEAP32[$29>>2]|0;
  _TIFFErrorExt($30,129320,129392,$vararg_buffer);
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $31 = $1;
 $32 = (($31) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 & 1024;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $td;
  $37 = (($36) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $td;
  $40 = (($39) + 32|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_multiply_ms($38,$41)|0);
  $43 = $sp;
  $44 = (($43) + 16|0);
  HEAP32[$44>>2] = $42;
 } else {
  $45 = $td;
  $46 = (($45) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $td;
  $49 = (($48) + 60|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (_multiply_ms($47,$50)|0);
  $52 = $sp;
  $53 = (($52) + 16|0);
  HEAP32[$53>>2] = $51;
 }
 $54 = $sp;
 $55 = (($54) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (_multiply_ms($56,2)|0);
 $58 = ($57|0)==(0);
 if (!($58)) {
  $59 = $sp;
  $60 = (($59) + 16|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $61<<1;
  $63 = (__TIFFmalloc($62)|0);
  $64 = $sp;
  $65 = (($64) + 12|0);
  HEAP32[$65>>2] = $63;
  $66 = ($63|0)==(0|0);
  if (!($66)) {
   $0 = 1;
   $70 = $0;
   STACKTOP = sp;return ($70|0);
  }
 }
 $67 = $1;
 $68 = (($67) + 628|0);
 $69 = HEAP32[$68>>2]|0;
 _TIFFErrorExt($69,129320,129448,$vararg_buffer1);
 $0 = 0;
 $70 = $0;
 STACKTOP = sp;return ($70|0);
}
function _LogL16Decode($tif,$op,$occ,$s) {
 $tif = $tif|0;
 $op = $op|0;
 $occ = $occ|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $bp = 0, $cc = 0, $i = 0, $npixels = 0, $rc = 0, $shft = 0, $sp = 0, $tp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $op;
 $3 = $occ;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $4;
 $9 = $8&65535;
 $10 = ($9|0)==(0);
 if (!($10)) {
  ___assert_fail((129256|0),(128656|0),197,(129800|0));
  // unreachable;
 }
 $11 = $sp;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((129280|0),(128656|0),198,(129800|0));
  // unreachable;
 }
 $13 = $3;
 $14 = $sp;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13|0) / ($16|0))&-1;
 $npixels = $17;
 $18 = $sp;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(1);
 do {
  if ($20) {
   $21 = $2;
   $tp = $21;
  } else {
   $22 = $sp;
   $23 = (($22) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $npixels;
   $26 = ($24|0)>=($25|0);
   if ($26) {
    $27 = $sp;
    $28 = (($27) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $tp = $29;
    break;
   } else {
    ___assert_fail((129296|0),(128656|0),205,(129800|0));
    // unreachable;
   }
  }
 } while(0);
 $30 = $tp;
 $31 = $npixels;
 $32 = $31<<1;
 __TIFFmemset($30,0,$32);
 $33 = $1;
 $34 = (($33) + 604|0);
 $35 = HEAP32[$34>>2]|0;
 $bp = $35;
 $36 = $1;
 $37 = (($36) + 608|0);
 $38 = HEAP32[$37>>2]|0;
 $cc = $38;
 $shft = 16;
 while(1) {
  $39 = $shft;
  $40 = (($39) - 8)|0;
  $shft = $40;
  $41 = ($40|0)>=(0);
  if (!($41)) {
   label = 33;
   break;
  }
  $i = 0;
  while(1) {
   $42 = $i;
   $43 = $npixels;
   $44 = ($42|0)<($43|0);
   if (!($44)) {
    break;
   }
   $45 = $cc;
   $46 = ($45|0)>(0);
   if (!($46)) {
    break;
   }
   $47 = $bp;
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = ($49|0)>=(128);
   if ($50) {
    $51 = $bp;
    $52 = (($51) + 1|0);
    $bp = $52;
    $53 = HEAP8[$51>>0]|0;
    $54 = $53&255;
    $55 = (($54) + -126)|0;
    $rc = $55;
    $56 = $bp;
    $57 = (($56) + 1|0);
    $bp = $57;
    $58 = HEAP8[$56>>0]|0;
    $59 = $58&255;
    $60 = $shft;
    $61 = $59 << $60;
    $62 = $61&65535;
    $b = $62;
    $63 = $cc;
    $64 = (($63) - 2)|0;
    $cc = $64;
    while(1) {
     $65 = $rc;
     $66 = (($65) + -1)|0;
     $rc = $66;
     $67 = ($65|0)!=(0);
     if ($67) {
      $68 = $i;
      $69 = $npixels;
      $70 = ($68|0)<($69|0);
      $146 = $70;
     } else {
      $146 = 0;
     }
     if (!($146)) {
      break;
     }
     $71 = $b;
     $72 = $71 << 16 >> 16;
     $73 = $i;
     $74 = (($73) + 1)|0;
     $i = $74;
     $75 = $tp;
     $76 = (($75) + ($73<<1)|0);
     $77 = HEAP16[$76>>1]|0;
     $78 = $77 << 16 >> 16;
     $79 = $78 | $72;
     $80 = $79&65535;
     HEAP16[$76>>1] = $80;
    }
   } else {
    $81 = $bp;
    $82 = (($81) + 1|0);
    $bp = $82;
    $83 = HEAP8[$81>>0]|0;
    $84 = $83&255;
    $rc = $84;
    while(1) {
     $85 = $cc;
     $86 = (($85) + -1)|0;
     $cc = $86;
     $87 = ($86|0)!=(0);
     if ($87) {
      $88 = $rc;
      $89 = (($88) + -1)|0;
      $rc = $89;
      $90 = ($88|0)!=(0);
      if ($90) {
       $91 = $i;
       $92 = $npixels;
       $93 = ($91|0)<($92|0);
       $147 = $93;
      } else {
       $147 = 0;
      }
     } else {
      $147 = 0;
     }
     if (!($147)) {
      break;
     }
     $94 = $bp;
     $95 = (($94) + 1|0);
     $bp = $95;
     $96 = HEAP8[$94>>0]|0;
     $97 = $96&255;
     $98 = $97 << 16 >> 16;
     $99 = $shft;
     $100 = $98 << $99;
     $101 = $i;
     $102 = (($101) + 1)|0;
     $i = $102;
     $103 = $tp;
     $104 = (($103) + ($101<<1)|0);
     $105 = HEAP16[$104>>1]|0;
     $106 = $105 << 16 >> 16;
     $107 = $106 | $100;
     $108 = $107&65535;
     HEAP16[$104>>1] = $108;
    }
   }
  }
  $109 = $i;
  $110 = $npixels;
  $111 = ($109|0)!=($110|0);
  if ($111) {
   label = 31;
   break;
  }
 }
 if ((label|0) == 31) {
  $112 = $1;
  $113 = (($112) + 628|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $1;
  $116 = (($115) + 444|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $npixels;
  $119 = $i;
  $120 = (($118) - ($119))|0;
  $121 = ($120|0)<(0);
  $122 = $121 << 31 >> 31;
  HEAP32[$vararg_buffer>>2] = $117;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  $123 = $vararg_ptr1;
  $124 = $123;
  HEAP32[$124>>2] = $120;
  $125 = (($123) + 4)|0;
  $126 = $125;
  HEAP32[$126>>2] = $122;
  _TIFFErrorExt($114,129784,129816,$vararg_buffer);
  $127 = $bp;
  $128 = $1;
  $129 = (($128) + 604|0);
  HEAP32[$129>>2] = $127;
  $130 = $cc;
  $131 = $1;
  $132 = (($131) + 608|0);
  HEAP32[$132>>2] = $130;
  $0 = 0;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 else if ((label|0) == 33) {
  $133 = $sp;
  $134 = (($133) + 20|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $sp;
  $137 = $2;
  $138 = $npixels;
  FUNCTION_TABLE_viii[$135 & 255]($136,$137,$138);
  $139 = $bp;
  $140 = $1;
  $141 = (($140) + 604|0);
  HEAP32[$141>>2] = $139;
  $142 = $cc;
  $143 = $1;
  $144 = (($143) + 608|0);
  HEAP32[$144>>2] = $142;
  $0 = 1;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 return (0)|0;
}
function _L16toY($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l16 = 0, $yp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $l16 = $5;
 $6 = $1;
 $yp = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $l16;
  $11 = (($10) + 2|0);
  $l16 = $11;
  $12 = HEAP16[$10>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = (+_LogL16toY($13));
  $15 = $14;
  $16 = $yp;
  $17 = (($16) + 4|0);
  $yp = $17;
  HEAPF32[$16>>2] = $15;
 }
 STACKTOP = sp;return;
}
function _L16toGry($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Y = 0.0, $gp = 0, $l16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $l16 = $5;
 $6 = $1;
 $gp = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $l16;
  $11 = (($10) + 2|0);
  $l16 = $11;
  $12 = HEAP16[$10>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = (+_LogL16toY($13));
  $Y = $14;
  $15 = $Y;
  $16 = $15 <= 0.0;
  if ($16) {
   $24 = 0;
  } else {
   $17 = $Y;
   $18 = $17 >= 1.0;
   if ($18) {
    $27 = 255;
   } else {
    $19 = $Y;
    $20 = (+Math_sqrt((+$19)));
    $21 = 256.0 * $20;
    $22 = (~~(($21)));
    $27 = $22;
   }
   $24 = $27;
  }
  $23 = $24&255;
  $25 = $gp;
  $26 = (($25) + 1|0);
  $gp = $26;
  HEAP8[$25>>0] = $23;
 }
 STACKTOP = sp;return;
}
function _LogLuvEncode24($tif,$bp,$cc,$s) {
 $tif = $tif|0;
 $bp = $bp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $npixels = 0, $occ = 0, $op = 0, $sp = 0, $tp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $bp;
 $3 = $cc;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $4;
 $9 = $8&65535;
 $10 = ($9|0)==(0);
 if (!($10)) {
  ___assert_fail((129256|0),(128656|0),510,(129504|0));
  // unreachable;
 }
 $11 = $sp;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((129280|0),(128656|0),511,(129504|0));
  // unreachable;
 }
 $13 = $3;
 $14 = $sp;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13|0) / ($16|0))&-1;
 $npixels = $17;
 $18 = $sp;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(2);
 do {
  if ($20) {
   $21 = $2;
   $tp = $21;
  } else {
   $22 = $sp;
   $23 = (($22) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $tp = $24;
   $25 = $sp;
   $26 = (($25) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $npixels;
   $29 = ($27|0)>=($28|0);
   if ($29) {
    $30 = $sp;
    $31 = (($30) + 20|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $sp;
    $34 = $2;
    $35 = $npixels;
    FUNCTION_TABLE_viii[$32 & 255]($33,$34,$35);
    break;
   } else {
    ___assert_fail((129296|0),(128656|0),518,(129504|0));
    // unreachable;
   }
  }
 } while(0);
 $36 = $1;
 $37 = (($36) + 604|0);
 $38 = HEAP32[$37>>2]|0;
 $op = $38;
 $39 = $1;
 $40 = (($39) + 592|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = (($42) + 608|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($41) - ($44))|0;
 $occ = $45;
 $46 = $npixels;
 $i = $46;
 while(1) {
  $47 = $i;
  $48 = (($47) + -1)|0;
  $i = $48;
  $49 = ($47|0)!=(0);
  if (!($49)) {
   label = 17;
   break;
  }
  $50 = $occ;
  $51 = ($50|0)<(3);
  if ($51) {
   $52 = $op;
   $53 = $1;
   $54 = (($53) + 604|0);
   HEAP32[$54>>2] = $52;
   $55 = $1;
   $56 = (($55) + 592|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $occ;
   $59 = (($57) - ($58))|0;
   $60 = $1;
   $61 = (($60) + 608|0);
   HEAP32[$61>>2] = $59;
   $62 = $1;
   $63 = (_TIFFFlushData1($62)|0);
   $64 = ($63|0)!=(0);
   if (!($64)) {
    label = 14;
    break;
   }
   $65 = $1;
   $66 = (($65) + 604|0);
   $67 = HEAP32[$66>>2]|0;
   $op = $67;
   $68 = $1;
   $69 = (($68) + 592|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $1;
   $72 = (($71) + 608|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($70) - ($73))|0;
   $occ = $74;
  }
  $75 = $tp;
  $76 = HEAP32[$75>>2]|0;
  $77 = $76 >>> 16;
  $78 = $77&255;
  $79 = $op;
  $80 = (($79) + 1|0);
  $op = $80;
  HEAP8[$79>>0] = $78;
  $81 = $tp;
  $82 = HEAP32[$81>>2]|0;
  $83 = $82 >>> 8;
  $84 = $83 & 255;
  $85 = $84&255;
  $86 = $op;
  $87 = (($86) + 1|0);
  $op = $87;
  HEAP8[$86>>0] = $85;
  $88 = $tp;
  $89 = (($88) + 4|0);
  $tp = $89;
  $90 = HEAP32[$88>>2]|0;
  $91 = $90 & 255;
  $92 = $91&255;
  $93 = $op;
  $94 = (($93) + 1|0);
  $op = $94;
  HEAP8[$93>>0] = $92;
  $95 = $occ;
  $96 = (($95) - 3)|0;
  $occ = $96;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 else if ((label|0) == 17) {
  $97 = $op;
  $98 = $1;
  $99 = (($98) + 604|0);
  HEAP32[$99>>2] = $97;
  $100 = $1;
  $101 = (($100) + 592|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $occ;
  $104 = (($102) - ($103))|0;
  $105 = $1;
  $106 = (($105) + 608|0);
  HEAP32[$106>>2] = $104;
  $0 = 1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 return (0)|0;
}
function _Luv24fromXYZ($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $luv = 0;
 var $xyz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $luv = $5;
 $6 = $1;
 $xyz = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $xyz;
  $11 = $0;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_LogLuv24fromXYZ($10,$13)|0);
  $15 = $luv;
  $16 = (($15) + 4|0);
  $luv = $16;
  HEAP32[$15>>2] = $14;
  $17 = $xyz;
  $18 = (($17) + 12|0);
  $xyz = $18;
 }
 STACKTOP = sp;return;
}
function _Luv24fromLuv48($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $Ce = 0, $Le = 0, $luv = 0, $luv3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $luv = $5;
 $6 = $1;
 $luv3 = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $luv3;
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 << 16 >> 16;
  $13 = ($12|0)<=(0);
  if ($13) {
   $Le = 0;
  } else {
   $14 = $luv3;
   $15 = HEAP16[$14>>1]|0;
   $16 = $15 << 16 >> 16;
   $17 = ($16|0)>=(7410);
   if ($17) {
    $Le = 1023;
   } else {
    $18 = $0;
    $19 = (($18) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $luv3;
     $23 = HEAP16[$22>>1]|0;
     $24 = $23 << 16 >> 16;
     $25 = (($24) - 3314)|0;
     $26 = $25 >> 2;
     $Le = $26;
    } else {
     $27 = $0;
     $28 = (($27) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(0);
     if ($30) {
      $31 = $luv3;
      $32 = HEAP16[$31>>1]|0;
      $33 = $32 << 16 >> 16;
      $34 = (+($33|0));
      $35 = $34 - 3314.0;
      $36 = 0.25 * $35;
      $37 = (~~(($36)));
      $50 = $37;
     } else {
      $38 = $luv3;
      $39 = HEAP16[$38>>1]|0;
      $40 = $39 << 16 >> 16;
      $41 = (+($40|0));
      $42 = $41 - 3314.0;
      $43 = 0.25 * $42;
      $44 = (_rand()|0);
      $45 = (+($44|0));
      $46 = $45 * 4.6566128752457969E-10;
      $47 = $43 + $46;
      $48 = $47 - 0.5;
      $49 = (~~(($48)));
      $50 = $49;
     }
     $Le = $50;
    }
   }
  }
  $51 = $luv3;
  $52 = (($51) + 2|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = (+($54|0));
  $56 = $55 + 0.5;
  $57 = $56 / 32768.0;
  $58 = $luv3;
  $59 = (($58) + 4|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = (+($61|0));
  $63 = $62 + 0.5;
  $64 = $63 / 32768.0;
  $65 = $0;
  $66 = (($65) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (_uv_encode($57,$64,$67)|0);
  $Ce = $68;
  $69 = $Ce;
  $70 = ($69|0)<(0);
  if ($70) {
   $71 = (_uv_encode(0.21052631599999999,0.47368421100000002,0)|0);
   $Ce = $71;
  }
  $72 = $Le;
  $73 = $72 << 14;
  $74 = $Ce;
  $75 = $73 | $74;
  $76 = $luv;
  $77 = (($76) + 4|0);
  $luv = $77;
  HEAP32[$76>>2] = $75;
  $78 = $luv3;
  $79 = (($78) + 6|0);
  $luv3 = $79;
 }
 STACKTOP = sp;return;
}
function _LogLuvEncode32($tif,$bp,$cc,$s) {
 $tif = $tif|0;
 $bp = $bp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $beg = 0, $i = 0, $j = 0, $mask = 0, $npixels = 0, $occ = 0, $op = 0, $rc = 0, $shft = 0, $sp = 0, $tp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $bp;
 $3 = $cc;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $rc = 0;
 $8 = $4;
 $9 = $8&65535;
 $10 = ($9|0)==(0);
 if (!($10)) {
  ___assert_fail((129256|0),(128656|0),562,(129488|0));
  // unreachable;
 }
 $11 = $sp;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((129280|0),(128656|0),563,(129488|0));
  // unreachable;
 }
 $13 = $3;
 $14 = $sp;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13|0) / ($16|0))&-1;
 $npixels = $17;
 $18 = $sp;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(2);
 do {
  if ($20) {
   $21 = $2;
   $tp = $21;
  } else {
   $22 = $sp;
   $23 = (($22) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $tp = $24;
   $25 = $sp;
   $26 = (($25) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $npixels;
   $29 = ($27|0)>=($28|0);
   if ($29) {
    $30 = $sp;
    $31 = (($30) + 20|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $sp;
    $34 = $2;
    $35 = $npixels;
    FUNCTION_TABLE_viii[$32 & 255]($33,$34,$35);
    break;
   } else {
    ___assert_fail((129296|0),(128656|0),571,(129488|0));
    // unreachable;
   }
  }
 } while(0);
 $36 = $1;
 $37 = (($36) + 604|0);
 $38 = HEAP32[$37>>2]|0;
 $op = $38;
 $39 = $1;
 $40 = (($39) + 592|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = (($42) + 608|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($41) - ($44))|0;
 $occ = $45;
 $shft = 32;
 L14: while(1) {
  $46 = $shft;
  $47 = (($46) - 8)|0;
  $shft = $47;
  $48 = ($47|0)>=(0);
  if (!($48)) {
   label = 56;
   break;
  }
  $i = 0;
  while(1) {
   $49 = $i;
   $50 = $npixels;
   $51 = ($49|0)<($50|0);
   if (!($51)) {
    break;
   }
   $52 = $occ;
   $53 = ($52|0)<(4);
   if ($53) {
    $54 = $op;
    $55 = $1;
    $56 = (($55) + 604|0);
    HEAP32[$56>>2] = $54;
    $57 = $1;
    $58 = (($57) + 592|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $occ;
    $61 = (($59) - ($60))|0;
    $62 = $1;
    $63 = (($62) + 608|0);
    HEAP32[$63>>2] = $61;
    $64 = $1;
    $65 = (_TIFFFlushData1($64)|0);
    $66 = ($65|0)!=(0);
    if (!($66)) {
     label = 16;
     break L14;
    }
    $67 = $1;
    $68 = (($67) + 604|0);
    $69 = HEAP32[$68>>2]|0;
    $op = $69;
    $70 = $1;
    $71 = (($70) + 592|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $1;
    $74 = (($73) + 608|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($72) - ($75))|0;
    $occ = $76;
   }
   $77 = $shft;
   $78 = 255 << $77;
   $mask = $78;
   $79 = $i;
   $beg = $79;
   while(1) {
    $80 = $beg;
    $81 = $npixels;
    $82 = ($80|0)<($81|0);
    if (!($82)) {
     break;
    }
    $83 = $beg;
    $84 = $tp;
    $85 = (($84) + ($83<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $mask;
    $88 = $86 & $87;
    $b = $88;
    $rc = 1;
    while(1) {
     $89 = $rc;
     $90 = ($89|0)<(129);
     if ($90) {
      $91 = $beg;
      $92 = $rc;
      $93 = (($91) + ($92))|0;
      $94 = $npixels;
      $95 = ($93|0)<($94|0);
      if ($95) {
       $96 = $beg;
       $97 = $rc;
       $98 = (($96) + ($97))|0;
       $99 = $tp;
       $100 = (($99) + ($98<<2)|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = $mask;
       $103 = $101 & $102;
       $104 = $b;
       $105 = ($103|0)==($104|0);
       $246 = $105;
      } else {
       $246 = 0;
      }
     } else {
      $246 = 0;
     }
     if (!($246)) {
      break;
     }
     $106 = $rc;
     $107 = (($106) + 1)|0;
     $rc = $107;
    }
    $108 = $rc;
    $109 = ($108|0)>=(4);
    if ($109) {
     label = 27;
     break;
    }
    $110 = $rc;
    $111 = $beg;
    $112 = (($111) + ($110))|0;
    $beg = $112;
   }
   if ((label|0) == 27) {
    label = 0;
   }
   $113 = $beg;
   $114 = $i;
   $115 = (($113) - ($114))|0;
   $116 = ($115|0)>(1);
   if ($116) {
    $117 = $beg;
    $118 = $i;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(4);
    if ($120) {
     $121 = $i;
     $122 = $tp;
     $123 = (($122) + ($121<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = $mask;
     $126 = $124 & $125;
     $b = $126;
     $127 = $i;
     $128 = (($127) + 1)|0;
     $j = $128;
     while(1) {
      $129 = $j;
      $130 = (($129) + 1)|0;
      $j = $130;
      $131 = $tp;
      $132 = (($131) + ($129<<2)|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = $mask;
      $135 = $133 & $134;
      $136 = $b;
      $137 = ($135|0)==($136|0);
      if (!($137)) {
       break;
      }
      $138 = $j;
      $139 = $beg;
      $140 = ($138|0)==($139|0);
      if ($140) {
       label = 35;
       break;
      }
     }
     if ((label|0) == 35) {
      label = 0;
      $141 = $j;
      $142 = (126 + ($141))|0;
      $143 = $i;
      $144 = (($142) - ($143))|0;
      $145 = $144&255;
      $146 = $op;
      $147 = (($146) + 1|0);
      $op = $147;
      HEAP8[$146>>0] = $145;
      $148 = $b;
      $149 = $shft;
      $150 = $148 >>> $149;
      $151 = $150&255;
      $152 = $op;
      $153 = (($152) + 1|0);
      $op = $153;
      HEAP8[$152>>0] = $151;
      $154 = $occ;
      $155 = (($154) - 2)|0;
      $occ = $155;
      $156 = $beg;
      $i = $156;
     }
    }
   }
   while(1) {
    $157 = $i;
    $158 = $beg;
    $159 = ($157|0)<($158|0);
    if (!($159)) {
     break;
    }
    $160 = $beg;
    $161 = $i;
    $162 = (($160) - ($161))|0;
    $j = $162;
    $163 = ($162|0)>(127);
    if ($163) {
     $j = 127;
    }
    $164 = $occ;
    $165 = $j;
    $166 = (($165) + 3)|0;
    $167 = ($164|0)<($166|0);
    if ($167) {
     $168 = $op;
     $169 = $1;
     $170 = (($169) + 604|0);
     HEAP32[$170>>2] = $168;
     $171 = $1;
     $172 = (($171) + 592|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $occ;
     $175 = (($173) - ($174))|0;
     $176 = $1;
     $177 = (($176) + 608|0);
     HEAP32[$177>>2] = $175;
     $178 = $1;
     $179 = (_TIFFFlushData1($178)|0);
     $180 = ($179|0)!=(0);
     if (!($180)) {
      label = 44;
      break L14;
     }
     $181 = $1;
     $182 = (($181) + 604|0);
     $183 = HEAP32[$182>>2]|0;
     $op = $183;
     $184 = $1;
     $185 = (($184) + 592|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = $1;
     $188 = (($187) + 608|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = (($186) - ($189))|0;
     $occ = $190;
    }
    $191 = $j;
    $192 = $191&255;
    $193 = $op;
    $194 = (($193) + 1|0);
    $op = $194;
    HEAP8[$193>>0] = $192;
    $195 = $occ;
    $196 = (($195) + -1)|0;
    $occ = $196;
    while(1) {
     $197 = $j;
     $198 = (($197) + -1)|0;
     $j = $198;
     $199 = ($197|0)!=(0);
     if (!($199)) {
      break;
     }
     $200 = $i;
     $201 = (($200) + 1)|0;
     $i = $201;
     $202 = $tp;
     $203 = (($202) + ($200<<2)|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = $shft;
     $206 = $204 >>> $205;
     $207 = $206 & 255;
     $208 = $207&255;
     $209 = $op;
     $210 = (($209) + 1|0);
     $op = $210;
     HEAP8[$209>>0] = $208;
     $211 = $occ;
     $212 = (($211) + -1)|0;
     $occ = $212;
    }
   }
   $213 = $rc;
   $214 = ($213|0)>=(4);
   if ($214) {
    $215 = $rc;
    $216 = (126 + ($215))|0;
    $217 = $216&255;
    $218 = $op;
    $219 = (($218) + 1|0);
    $op = $219;
    HEAP8[$218>>0] = $217;
    $220 = $beg;
    $221 = $tp;
    $222 = (($221) + ($220<<2)|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = $shft;
    $225 = $223 >>> $224;
    $226 = $225 & 255;
    $227 = $226&255;
    $228 = $op;
    $229 = (($228) + 1|0);
    $op = $229;
    HEAP8[$228>>0] = $227;
    $230 = $occ;
    $231 = (($230) - 2)|0;
    $occ = $231;
   } else {
    $rc = 0;
   }
   $232 = $rc;
   $233 = $i;
   $234 = (($233) + ($232))|0;
   $i = $234;
  }
 }
 if ((label|0) == 16) {
  $0 = -1;
  $245 = $0;
  STACKTOP = sp;return ($245|0);
 }
 else if ((label|0) == 44) {
  $0 = -1;
  $245 = $0;
  STACKTOP = sp;return ($245|0);
 }
 else if ((label|0) == 56) {
  $235 = $op;
  $236 = $1;
  $237 = (($236) + 604|0);
  HEAP32[$237>>2] = $235;
  $238 = $1;
  $239 = (($238) + 592|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $occ;
  $242 = (($240) - ($241))|0;
  $243 = $1;
  $244 = (($243) + 608|0);
  HEAP32[$244>>2] = $242;
  $0 = 1;
  $245 = $0;
  STACKTOP = sp;return ($245|0);
 }
 return (0)|0;
}
function _Luv32fromXYZ($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $luv = 0;
 var $xyz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $luv = $5;
 $6 = $1;
 $xyz = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $xyz;
  $11 = $0;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_LogLuv32fromXYZ($10,$13)|0);
  $15 = $luv;
  $16 = (($15) + 4|0);
  $luv = $16;
  HEAP32[$15>>2] = $14;
  $17 = $xyz;
  $18 = (($17) + 12|0);
  $xyz = $18;
 }
 STACKTOP = sp;return;
}
function _Luv32fromLuv48($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $luv = 0, $luv3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $luv = $5;
 $6 = $1;
 $luv3 = $6;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  while(1) {
   $11 = $2;
   $12 = (($11) + -1)|0;
   $2 = $12;
   $13 = ($11|0)>(0);
   if (!($13)) {
    break;
   }
   $14 = $luv3;
   $15 = HEAP16[$14>>1]|0;
   $16 = $15 << 16 >> 16;
   $17 = $16 << 16;
   $18 = $luv3;
   $19 = (($18) + 2|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20 << 16 >> 16;
   $22 = ($21*410)|0;
   $23 = $22 >>> 7;
   $24 = $23 & 65280;
   $25 = $17 | $24;
   $26 = $luv3;
   $27 = (($26) + 4|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28 << 16 >> 16;
   $30 = ($29*410)|0;
   $31 = $30 >>> 15;
   $32 = $31 & 255;
   $33 = $25 | $32;
   $34 = $luv;
   $35 = (($34) + 4|0);
   $luv = $35;
   HEAP32[$34>>2] = $33;
   $36 = $luv3;
   $37 = (($36) + 6|0);
   $luv3 = $37;
  }
  STACKTOP = sp;return;
 }
 while(1) {
  $38 = $2;
  $39 = (($38) + -1)|0;
  $2 = $39;
  $40 = ($38|0)>(0);
  if (!($40)) {
   break;
  }
  $41 = $luv3;
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = $43 << 16;
  $45 = $0;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = $luv3;
   $50 = (($49) + 2|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51 << 16 >> 16;
   $53 = (+($52|0));
   $54 = $53 * 0.01251220703125;
   $55 = (~~(($54)));
   $69 = $55;
  } else {
   $56 = $luv3;
   $57 = (($56) + 2|0);
   $58 = HEAP16[$57>>1]|0;
   $59 = $58 << 16 >> 16;
   $60 = (+($59|0));
   $61 = $60 * 0.01251220703125;
   $62 = (_rand()|0);
   $63 = (+($62|0));
   $64 = $63 * 4.6566128752457969E-10;
   $65 = $61 + $64;
   $66 = $65 - 0.5;
   $67 = (~~(($66)));
   $69 = $67;
  }
  $68 = $69 << 8;
  $70 = $68 & 65280;
  $71 = $44 | $70;
  $72 = $0;
  $73 = (($72) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)==(0);
  if ($75) {
   $76 = $luv3;
   $77 = (($76) + 4|0);
   $78 = HEAP16[$77>>1]|0;
   $79 = $78 << 16 >> 16;
   $80 = (+($79|0));
   $81 = $80 * 0.01251220703125;
   $82 = (~~(($81)));
   $96 = $82;
  } else {
   $83 = $luv3;
   $84 = (($83) + 4|0);
   $85 = HEAP16[$84>>1]|0;
   $86 = $85 << 16 >> 16;
   $87 = (+($86|0));
   $88 = $87 * 0.01251220703125;
   $89 = (_rand()|0);
   $90 = (+($89|0));
   $91 = $90 * 4.6566128752457969E-10;
   $92 = $88 + $91;
   $93 = $92 - 0.5;
   $94 = (~~(($93)));
   $96 = $94;
  }
  $95 = $96 & 255;
  $97 = $71 | $95;
  $98 = $luv;
  $99 = (($98) + 4|0);
  $luv = $99;
  HEAP32[$98>>2] = $97;
  $100 = $luv3;
  $101 = (($100) + 6|0);
  $luv3 = $101;
 }
 STACKTOP = sp;return;
}
function _LogL16Encode($tif,$bp,$cc,$s) {
 $tif = $tif|0;
 $bp = $bp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $beg = 0;
 var $i = 0, $j = 0, $mask = 0, $npixels = 0, $occ = 0, $op = 0, $rc = 0, $shft = 0, $sp = 0, $tp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $bp;
 $3 = $cc;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $rc = 0;
 $8 = $4;
 $9 = $8&65535;
 $10 = ($9|0)==(0);
 if (!($10)) {
  ___assert_fail((129256|0),(128656|0),422,(129264|0));
  // unreachable;
 }
 $11 = $sp;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((129280|0),(128656|0),423,(129264|0));
  // unreachable;
 }
 $13 = $3;
 $14 = $sp;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13|0) / ($16|0))&-1;
 $npixels = $17;
 $18 = $sp;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(1);
 do {
  if ($20) {
   $21 = $2;
   $tp = $21;
  } else {
   $22 = $sp;
   $23 = (($22) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $tp = $24;
   $25 = $sp;
   $26 = (($25) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $npixels;
   $29 = ($27|0)>=($28|0);
   if ($29) {
    $30 = $sp;
    $31 = (($30) + 20|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $sp;
    $34 = $2;
    $35 = $npixels;
    FUNCTION_TABLE_viii[$32 & 255]($33,$34,$35);
    break;
   } else {
    ___assert_fail((129296|0),(128656|0),430,(129264|0));
    // unreachable;
   }
  }
 } while(0);
 $36 = $1;
 $37 = (($36) + 604|0);
 $38 = HEAP32[$37>>2]|0;
 $op = $38;
 $39 = $1;
 $40 = (($39) + 592|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = (($42) + 608|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($41) - ($44))|0;
 $occ = $45;
 $shft = 16;
 L14: while(1) {
  $46 = $shft;
  $47 = (($46) - 8)|0;
  $shft = $47;
  $48 = ($47|0)>=(0);
  if (!($48)) {
   label = 56;
   break;
  }
  $i = 0;
  while(1) {
   $49 = $i;
   $50 = $npixels;
   $51 = ($49|0)<($50|0);
   if (!($51)) {
    break;
   }
   $52 = $occ;
   $53 = ($52|0)<(4);
   if ($53) {
    $54 = $op;
    $55 = $1;
    $56 = (($55) + 604|0);
    HEAP32[$56>>2] = $54;
    $57 = $1;
    $58 = (($57) + 592|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $occ;
    $61 = (($59) - ($60))|0;
    $62 = $1;
    $63 = (($62) + 608|0);
    HEAP32[$63>>2] = $61;
    $64 = $1;
    $65 = (_TIFFFlushData1($64)|0);
    $66 = ($65|0)!=(0);
    if (!($66)) {
     label = 16;
     break L14;
    }
    $67 = $1;
    $68 = (($67) + 604|0);
    $69 = HEAP32[$68>>2]|0;
    $op = $69;
    $70 = $1;
    $71 = (($70) + 592|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $1;
    $74 = (($73) + 608|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($72) - ($75))|0;
    $occ = $76;
   }
   $77 = $shft;
   $78 = 255 << $77;
   $mask = $78;
   $79 = $i;
   $beg = $79;
   while(1) {
    $80 = $beg;
    $81 = $npixels;
    $82 = ($80|0)<($81|0);
    if (!($82)) {
     break;
    }
    $83 = $beg;
    $84 = $tp;
    $85 = (($84) + ($83<<1)|0);
    $86 = HEAP16[$85>>1]|0;
    $87 = $86 << 16 >> 16;
    $88 = $mask;
    $89 = $87 & $88;
    $90 = $89&65535;
    $b = $90;
    $rc = 1;
    while(1) {
     $91 = $rc;
     $92 = ($91|0)<(129);
     if ($92) {
      $93 = $beg;
      $94 = $rc;
      $95 = (($93) + ($94))|0;
      $96 = $npixels;
      $97 = ($95|0)<($96|0);
      if ($97) {
       $98 = $beg;
       $99 = $rc;
       $100 = (($98) + ($99))|0;
       $101 = $tp;
       $102 = (($101) + ($100<<1)|0);
       $103 = HEAP16[$102>>1]|0;
       $104 = $103 << 16 >> 16;
       $105 = $mask;
       $106 = $104 & $105;
       $107 = $b;
       $108 = $107 << 16 >> 16;
       $109 = ($106|0)==($108|0);
       $257 = $109;
      } else {
       $257 = 0;
      }
     } else {
      $257 = 0;
     }
     if (!($257)) {
      break;
     }
     $110 = $rc;
     $111 = (($110) + 1)|0;
     $rc = $111;
    }
    $112 = $rc;
    $113 = ($112|0)>=(4);
    if ($113) {
     label = 27;
     break;
    }
    $114 = $rc;
    $115 = $beg;
    $116 = (($115) + ($114))|0;
    $beg = $116;
   }
   if ((label|0) == 27) {
    label = 0;
   }
   $117 = $beg;
   $118 = $i;
   $119 = (($117) - ($118))|0;
   $120 = ($119|0)>(1);
   if ($120) {
    $121 = $beg;
    $122 = $i;
    $123 = (($121) - ($122))|0;
    $124 = ($123|0)<(4);
    if ($124) {
     $125 = $i;
     $126 = $tp;
     $127 = (($126) + ($125<<1)|0);
     $128 = HEAP16[$127>>1]|0;
     $129 = $128 << 16 >> 16;
     $130 = $mask;
     $131 = $129 & $130;
     $132 = $131&65535;
     $b = $132;
     $133 = $i;
     $134 = (($133) + 1)|0;
     $j = $134;
     while(1) {
      $135 = $j;
      $136 = (($135) + 1)|0;
      $j = $136;
      $137 = $tp;
      $138 = (($137) + ($135<<1)|0);
      $139 = HEAP16[$138>>1]|0;
      $140 = $139 << 16 >> 16;
      $141 = $mask;
      $142 = $140 & $141;
      $143 = $b;
      $144 = $143 << 16 >> 16;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       break;
      }
      $146 = $j;
      $147 = $beg;
      $148 = ($146|0)==($147|0);
      if ($148) {
       label = 35;
       break;
      }
     }
     if ((label|0) == 35) {
      label = 0;
      $149 = $j;
      $150 = (126 + ($149))|0;
      $151 = $i;
      $152 = (($150) - ($151))|0;
      $153 = $152&255;
      $154 = $op;
      $155 = (($154) + 1|0);
      $op = $155;
      HEAP8[$154>>0] = $153;
      $156 = $b;
      $157 = $156 << 16 >> 16;
      $158 = $shft;
      $159 = $157 >> $158;
      $160 = $159&255;
      $161 = $op;
      $162 = (($161) + 1|0);
      $op = $162;
      HEAP8[$161>>0] = $160;
      $163 = $occ;
      $164 = (($163) - 2)|0;
      $occ = $164;
      $165 = $beg;
      $i = $165;
     }
    }
   }
   while(1) {
    $166 = $i;
    $167 = $beg;
    $168 = ($166|0)<($167|0);
    if (!($168)) {
     break;
    }
    $169 = $beg;
    $170 = $i;
    $171 = (($169) - ($170))|0;
    $j = $171;
    $172 = ($171|0)>(127);
    if ($172) {
     $j = 127;
    }
    $173 = $occ;
    $174 = $j;
    $175 = (($174) + 3)|0;
    $176 = ($173|0)<($175|0);
    if ($176) {
     $177 = $op;
     $178 = $1;
     $179 = (($178) + 604|0);
     HEAP32[$179>>2] = $177;
     $180 = $1;
     $181 = (($180) + 592|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $occ;
     $184 = (($182) - ($183))|0;
     $185 = $1;
     $186 = (($185) + 608|0);
     HEAP32[$186>>2] = $184;
     $187 = $1;
     $188 = (_TIFFFlushData1($187)|0);
     $189 = ($188|0)!=(0);
     if (!($189)) {
      label = 44;
      break L14;
     }
     $190 = $1;
     $191 = (($190) + 604|0);
     $192 = HEAP32[$191>>2]|0;
     $op = $192;
     $193 = $1;
     $194 = (($193) + 592|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = $1;
     $197 = (($196) + 608|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = (($195) - ($198))|0;
     $occ = $199;
    }
    $200 = $j;
    $201 = $200&255;
    $202 = $op;
    $203 = (($202) + 1|0);
    $op = $203;
    HEAP8[$202>>0] = $201;
    $204 = $occ;
    $205 = (($204) + -1)|0;
    $occ = $205;
    while(1) {
     $206 = $j;
     $207 = (($206) + -1)|0;
     $j = $207;
     $208 = ($206|0)!=(0);
     if (!($208)) {
      break;
     }
     $209 = $i;
     $210 = (($209) + 1)|0;
     $i = $210;
     $211 = $tp;
     $212 = (($211) + ($209<<1)|0);
     $213 = HEAP16[$212>>1]|0;
     $214 = $213 << 16 >> 16;
     $215 = $shft;
     $216 = $214 >> $215;
     $217 = $216 & 255;
     $218 = $217&255;
     $219 = $op;
     $220 = (($219) + 1|0);
     $op = $220;
     HEAP8[$219>>0] = $218;
     $221 = $occ;
     $222 = (($221) + -1)|0;
     $occ = $222;
    }
   }
   $223 = $rc;
   $224 = ($223|0)>=(4);
   if ($224) {
    $225 = $rc;
    $226 = (126 + ($225))|0;
    $227 = $226&255;
    $228 = $op;
    $229 = (($228) + 1|0);
    $op = $229;
    HEAP8[$228>>0] = $227;
    $230 = $beg;
    $231 = $tp;
    $232 = (($231) + ($230<<1)|0);
    $233 = HEAP16[$232>>1]|0;
    $234 = $233 << 16 >> 16;
    $235 = $shft;
    $236 = $234 >> $235;
    $237 = $236 & 255;
    $238 = $237&255;
    $239 = $op;
    $240 = (($239) + 1|0);
    $op = $240;
    HEAP8[$239>>0] = $238;
    $241 = $occ;
    $242 = (($241) - 2)|0;
    $occ = $242;
   } else {
    $rc = 0;
   }
   $243 = $rc;
   $244 = $i;
   $245 = (($244) + ($243))|0;
   $i = $245;
  }
 }
 if ((label|0) == 16) {
  $0 = -1;
  $256 = $0;
  STACKTOP = sp;return ($256|0);
 }
 else if ((label|0) == 44) {
  $0 = -1;
  $256 = $0;
  STACKTOP = sp;return ($256|0);
 }
 else if ((label|0) == 56) {
  $246 = $op;
  $247 = $1;
  $248 = (($247) + 604|0);
  HEAP32[$248>>2] = $246;
  $249 = $1;
  $250 = (($249) + 592|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = $occ;
  $253 = (($251) - ($252))|0;
  $254 = $1;
  $255 = (($254) + 608|0);
  HEAP32[$255>>2] = $253;
  $0 = 1;
  $256 = $0;
  STACKTOP = sp;return ($256|0);
 }
 return (0)|0;
}
function _L16fromY($sp,$op,$n) {
 $sp = $sp|0;
 $op = $op|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $l16 = 0, $yp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $op;
 $2 = $n;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $l16 = $5;
 $6 = $1;
 $yp = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $yp;
  $11 = (($10) + 4|0);
  $yp = $11;
  $12 = +HEAPF32[$10>>2];
  $13 = $12;
  $14 = $0;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_LogL16fromY($13,$16)|0);
  $18 = $17&65535;
  $19 = $l16;
  $20 = (($19) + 2|0);
  $l16 = $20;
  HEAP16[$19>>1] = $18;
 }
 STACKTOP = sp;return;
}
function _LogLuvGuessDataFmt($td) {
 $td = $td|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $guess = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $td;
 $1 = $0;
 $2 = (($1) + 44|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 << 3;
 $6 = $0;
 $7 = (($6) + 46|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = $5 | $9;
 switch ($10|0) {
 case 259:  {
  $guess = 0;
  break;
 }
 case 129: case 130: case 132:  {
  $guess = 1;
  break;
 }
 case 65: case 68:  {
  $guess = 3;
  break;
 }
 case 258: case 257: case 260:  {
  $guess = 2;
  break;
 }
 default: {
  $guess = -1;
 }
 }
 $11 = $0;
 $12 = (($11) + 58|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 if ((($14|0) == 3)) {
  $17 = $guess;
  $18 = ($17|0)==(2);
  if ($18) {
   $guess = -1;
  }
  $19 = $guess;
  STACKTOP = sp;return ($19|0);
 } else if ((($14|0) == 1)) {
  $15 = $guess;
  $16 = ($15|0)!=(2);
  if ($16) {
   $guess = -1;
  }
  $19 = $guess;
  STACKTOP = sp;return ($19|0);
 } else {
  $guess = -1;
  $19 = $guess;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _multiply_ms($m1,$m2) {
 $m1 = $m1|0;
 $m2 = $m2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m1;
 $1 = $m2;
 $2 = $0;
 $3 = $1;
 $4 = Math_imul($2, $3)|0;
 $bytes = $4;
 $5 = $0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $bytes;
  $8 = $0;
  $9 = (($7|0) / ($8|0))&-1;
  $10 = $1;
  $11 = ($9|0)!=($10|0);
  if ($11) {
   $bytes = 0;
  }
 }
 $12 = $bytes;
 STACKTOP = sp;return ($12|0);
}
function _LogL16GuessDataFmt($td) {
 $td = $td|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $td;
 $2 = $1;
 $3 = (($2) + 44|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $5 << 6;
 $7 = $1;
 $8 = (($7) + 58|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 << 3;
 $12 = $6 | $11;
 $13 = $1;
 $14 = (($13) + 46|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $12 | $16;
 switch ($17|0) {
 case 521: case 524:  {
  $0 = 3;
  break;
 }
 case 2059:  {
  $0 = 0;
  break;
 }
 case 1033: case 1034: case 1036:  {
  $0 = 1;
  break;
 }
 default: {
  $0 = -1;
 }
 }
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _TIFFInitLZW($tif,$scheme) {
 $tif = $tif|0;
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $scheme;
 $3 = $2;
 $4 = ($3|0)==(5);
 if (!($4)) {
  ___assert_fail((130384|0),(130416|0),1099,(130432|0));
  // unreachable;
 }
 $5 = (__TIFFmalloc(160)|0);
 $6 = $1;
 $7 = (($6) + 576|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = (($8) + 576|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = $1;
  $13 = (($12) + 576|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 124|0);
  HEAP32[$15>>2] = 0;
  $16 = $1;
  $17 = (($16) + 576|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 104|0);
  HEAP32[$19>>2] = 0;
  $20 = $1;
  $21 = (($20) + 576|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 152|0);
  HEAP32[$23>>2] = 0;
  $24 = $1;
  $25 = (($24) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = (($27) + 576|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 80|0);
  HEAP32[$30>>2] = $26;
  $31 = $1;
  $32 = (($31) + 504|0);
  HEAP32[$32>>2] = 137;
  $33 = $1;
  $34 = (($33) + 508|0);
  HEAP32[$34>>2] = 138;
  $35 = $1;
  $36 = (($35) + 512|0);
  HEAP32[$36>>2] = 139;
  $37 = $1;
  $38 = (($37) + 532|0);
  HEAP32[$38>>2] = 140;
  $39 = $1;
  $40 = (($39) + 540|0);
  HEAP32[$40>>2] = 140;
  $41 = $1;
  $42 = (($41) + 548|0);
  HEAP32[$42>>2] = 140;
  $43 = $1;
  $44 = (($43) + 516|0);
  HEAP32[$44>>2] = 141;
  $45 = $1;
  $46 = (($45) + 524|0);
  HEAP32[$46>>2] = 142;
  $47 = $1;
  $48 = (($47) + 528|0);
  HEAP32[$48>>2] = 143;
  $49 = $1;
  $50 = (($49) + 536|0);
  HEAP32[$50>>2] = 144;
  $51 = $1;
  $52 = (($51) + 544|0);
  HEAP32[$52>>2] = 144;
  $53 = $1;
  $54 = (($53) + 552|0);
  HEAP32[$54>>2] = 144;
  $55 = $1;
  $56 = (($55) + 564|0);
  HEAP32[$56>>2] = 145;
  $57 = $1;
  (_TIFFPredictorInit($57)|0);
  $0 = 1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $58 = $1;
 $59 = (($58) + 628|0);
 $60 = HEAP32[$59>>2]|0;
 _TIFFErrorExt($60,130368,130448,$vararg_buffer);
 $0 = 0;
 $61 = $0;
 STACKTOP = sp;return ($61|0);
}
function _LZWFixupTags($tif) {
 $tif = $tif|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 STACKTOP = sp;return 1;
}
function _LZWSetupDecode($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $code = 0, $sp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $sp = $4;
 $5 = $sp;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $7 = (__TIFFmalloc(160)|0);
   $8 = $1;
   $9 = (($8) + 576|0);
   HEAP32[$9>>2] = $7;
   $10 = $1;
   $11 = (($10) + 576|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $17 = $1;
    $18 = (($17) + 576|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + 124|0);
    HEAP32[$20>>2] = 0;
    $21 = $1;
    $22 = (($21) + 576|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + 104|0);
    HEAP32[$24>>2] = 0;
    $25 = $1;
    (_TIFFPredictorInit($25)|0);
    $26 = $1;
    $27 = (($26) + 576|0);
    $28 = HEAP32[$27>>2]|0;
    $sp = $28;
    break;
   }
   $14 = $1;
   $15 = (($14) + 628|0);
   $16 = HEAP32[$15>>2]|0;
   _TIFFErrorExt($16,131208,130448,$vararg_buffer);
   $0 = 0;
   $79 = $0;
   STACKTOP = sp;return ($79|0);
  }
 } while(0);
 $29 = $sp;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  ___assert_fail((130584|0),(130416|0),229,(131224|0));
  // unreachable;
 }
 $31 = $sp;
 $32 = (($31) + 124|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $35 = (__TIFFmalloc(40952)|0);
  $36 = $sp;
  $37 = (($36) + 124|0);
  HEAP32[$37>>2] = $35;
  $38 = $sp;
  $39 = (($38) + 124|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if ($41) {
   $42 = $1;
   $43 = (($42) + 628|0);
   $44 = HEAP32[$43>>2]|0;
   _TIFFErrorExt($44,131208,131240,$vararg_buffer1);
   $0 = 0;
   $79 = $0;
   STACKTOP = sp;return ($79|0);
  }
  $code = 255;
  while(1) {
   $45 = $code;
   $46 = $45&255;
   $47 = $code;
   $48 = $sp;
   $49 = (($48) + 124|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($47<<3)|0);
   $52 = (($51) + 6|0);
   HEAP8[$52>>0] = $46;
   $53 = $code;
   $54 = $53&255;
   $55 = $code;
   $56 = $sp;
   $57 = (($56) + 124|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + ($55<<3)|0);
   $60 = (($59) + 7|0);
   HEAP8[$60>>0] = $54;
   $61 = $code;
   $62 = $sp;
   $63 = (($62) + 124|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + ($61<<3)|0);
   $66 = (($65) + 4|0);
   HEAP16[$66>>1] = 1;
   $67 = $code;
   $68 = $sp;
   $69 = (($68) + 124|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + ($67<<3)|0);
   HEAP32[$71>>2] = 0;
   $72 = $code;
   $73 = (($72) + -1)|0;
   $code = $73;
   $74 = ($72|0)!=(0);
   if (!($74)) {
    break;
   }
  }
  $75 = $sp;
  $76 = (($75) + 124|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + 2048|0);
  __TIFFmemset($78,0,16);
 }
 $0 = 1;
 $79 = $0;
 STACKTOP = sp;return ($79|0);
}
function _LZWPreDecode($tif,$s) {
 $tif = $tif|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $sp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $s;
 $2 = $0;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $sp = $4;
 $5 = $sp;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((130584|0),(130416|0),267,(131096|0));
  // unreachable;
 }
 $7 = $sp;
 $8 = (($7) + 124|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = $0;
  $12 = (($11) + 508|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  (FUNCTION_TABLE_ii[$13 & 255]($14)|0);
 }
 $15 = $0;
 $16 = (($15) + 588|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = $0;
  $22 = (($21) + 588|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 1|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 & 1;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $sp;
   $30 = (($29) + 104|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0|0);
   if (!($32)) {
    $33 = $0;
    $34 = (($33) + 628|0);
    $35 = HEAP32[$34>>2]|0;
    _TIFFWarningExt($35,131080,131112,$vararg_buffer);
    $36 = $0;
    $37 = (($36) + 532|0);
    HEAP32[$37>>2] = 146;
    $38 = $0;
    $39 = (($38) + 540|0);
    HEAP32[$39>>2] = 146;
    $40 = $0;
    $41 = (($40) + 548|0);
    HEAP32[$41>>2] = 146;
    $42 = $0;
    $43 = (($42) + 508|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $0;
    (FUNCTION_TABLE_ii[$44 & 255]($45)|0);
    $46 = $sp;
    $47 = (($46) + 104|0);
    HEAP32[$47>>2] = 146;
   }
   $48 = $sp;
   $49 = (($48) + 66|0);
   HEAP16[$49>>1] = 511;
  } else {
   label = 10;
  }
 } else {
  label = 10;
 }
 if ((label|0) == 10) {
  $50 = $sp;
  $51 = (($50) + 66|0);
  HEAP16[$51>>1] = 510;
  $52 = $sp;
  $53 = (($52) + 104|0);
  HEAP32[$53>>2] = 140;
 }
 $54 = $sp;
 $55 = (($54) + 64|0);
 HEAP16[$55>>1] = 9;
 $56 = $sp;
 $57 = (($56) + 76|0);
 HEAP32[$57>>2] = 0;
 $58 = $sp;
 $59 = (($58) + 72|0);
 HEAP32[$59>>2] = 0;
 $60 = $sp;
 $61 = (($60) + 88|0);
 HEAP32[$61>>2] = 0;
 $62 = $sp;
 $63 = (($62) + 84|0);
 HEAP32[$63>>2] = 511;
 $64 = $0;
 $65 = (($64) + 608|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)<(0);
 $68 = $67 << 31 >> 31;
 $69 = (_bitshift64Shl(($66|0),($68|0),3)|0);
 $70 = tempRet0;
 $71 = $sp;
 $72 = (($71) + 96|0);
 $73 = $72;
 $74 = $73;
 HEAP32[$74>>2] = $69;
 $75 = (($73) + 4)|0;
 $76 = $75;
 HEAP32[$76>>2] = $70;
 $77 = $sp;
 $78 = (($77) + 124|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + 2064|0);
 $81 = $sp;
 $82 = (($81) + 116|0);
 HEAP32[$82>>2] = $80;
 $83 = $sp;
 $84 = (($83) + 116|0);
 $85 = HEAP32[$84>>2]|0;
 __TIFFmemset($85,0,38888);
 $86 = $sp;
 $87 = (($86) + 124|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + -8|0);
 $90 = $sp;
 $91 = (($90) + 112|0);
 HEAP32[$91>>2] = $89;
 $92 = $sp;
 $93 = (($92) + 84|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) - 1)|0;
 $96 = $sp;
 $97 = (($96) + 124|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (($98) + ($95<<3)|0);
 $100 = $sp;
 $101 = (($100) + 120|0);
 HEAP32[$101>>2] = $99;
 STACKTOP = sp;return 1;
}
function _LZWDecode($tif,$op0,$occ0,$s) {
 $tif = $tif|0;
 $op0 = $op0|0;
 $occ0 = $occ0|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bp = 0;
 var $code = 0, $codep = 0, $free_entp = 0, $len = 0, $maxcodep = 0, $nbits = 0, $nbitsmask = 0, $nextbits = 0, $nextdata = 0, $occ = 0, $oldcodep = 0, $op = 0, $residue = 0, $sp = 0, $t = 0, $t1 = 0, $tp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer4 = sp + 56|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 48|0;
 $1 = $tif;
 $2 = $op0;
 $3 = $occ0;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $2;
 $op = $8;
 $9 = $3;
 $occ = $9;
 $10 = $sp;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((130584|0),(130416|0),372,(130696|0));
  // unreachable;
 }
 $12 = $sp;
 $13 = (($12) + 124|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((130712|0),(130416|0),373,(130696|0));
  // unreachable;
 }
 $16 = $occ;
 $17 = $3;
 $18 = ($16|0)!=($17|0);
 if ($18) {
  $0 = 0;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 }
 $19 = $sp;
 $20 = (($19) + 88|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0);
 do {
  if ($22) {
   $23 = $sp;
   $24 = (($23) + 108|0);
   $25 = HEAP32[$24>>2]|0;
   $codep = $25;
   $26 = $codep;
   $27 = (($26) + 4|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28&65535;
   $30 = $sp;
   $31 = (($30) + 88|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($29) - ($32))|0;
   $residue = $33;
   $34 = $residue;
   $35 = $occ;
   $36 = ($34|0)>($35|0);
   if (!($36)) {
    $67 = $residue;
    $68 = $op;
    $69 = (($68) + ($67)|0);
    $op = $69;
    $70 = $residue;
    $71 = $occ;
    $72 = (($71) - ($70))|0;
    $occ = $72;
    $73 = $op;
    $tp = $73;
    while(1) {
     $74 = $tp;
     $75 = (($74) + -1|0);
     $tp = $75;
     $76 = $codep;
     $77 = (($76) + 6|0);
     $78 = HEAP8[$77>>0]|0;
     $79 = $78&255;
     $t = $79;
     $80 = $codep;
     $81 = HEAP32[$80>>2]|0;
     $codep = $81;
     $82 = $t;
     $83 = $82&255;
     $84 = $tp;
     HEAP8[$84>>0] = $83;
     $85 = $residue;
     $86 = (($85) + -1)|0;
     $residue = $86;
     $87 = ($86|0)!=(0);
     if ($87) {
      $88 = $codep;
      $89 = ($88|0)!=(0|0);
      $535 = $89;
     } else {
      $535 = 0;
     }
     if (!($535)) {
      break;
     }
    }
    $90 = $sp;
    $91 = (($90) + 88|0);
    HEAP32[$91>>2] = 0;
    break;
   }
   $37 = $occ;
   $38 = $sp;
   $39 = (($38) + 88|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + ($37))|0;
   HEAP32[$39>>2] = $41;
   while(1) {
    $42 = $codep;
    $43 = HEAP32[$42>>2]|0;
    $codep = $43;
    $44 = $residue;
    $45 = (($44) + -1)|0;
    $residue = $45;
    $46 = $occ;
    $47 = ($45|0)>($46|0);
    if ($47) {
     $48 = $codep;
     $49 = ($48|0)!=(0|0);
     $533 = $49;
    } else {
     $533 = 0;
    }
    if (!($533)) {
     break;
    }
   }
   $50 = $codep;
   $51 = ($50|0)!=(0|0);
   if ($51) {
    $52 = $op;
    $53 = $occ;
    $54 = (($52) + ($53)|0);
    $tp = $54;
    while(1) {
     $55 = $codep;
     $56 = (($55) + 6|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $tp;
     $59 = (($58) + -1|0);
     $tp = $59;
     HEAP8[$59>>0] = $57;
     $60 = $codep;
     $61 = HEAP32[$60>>2]|0;
     $codep = $61;
     $62 = $occ;
     $63 = (($62) + -1)|0;
     $occ = $63;
     $64 = ($63|0)!=(0);
     if ($64) {
      $65 = $codep;
      $66 = ($65|0)!=(0|0);
      $534 = $66;
     } else {
      $534 = 0;
     }
     if (!($534)) {
      break;
     }
    }
   }
   $0 = 1;
   $532 = $0;
   STACKTOP = sp;return ($532|0);
  }
 } while(0);
 $92 = $1;
 $93 = (($92) + 604|0);
 $94 = HEAP32[$93>>2]|0;
 $bp = $94;
 $95 = $sp;
 $96 = (($95) + 64|0);
 $97 = HEAP16[$96>>1]|0;
 $98 = $97&65535;
 $nbits = $98;
 $99 = $sp;
 $100 = (($99) + 72|0);
 $101 = HEAP32[$100>>2]|0;
 $nextdata = $101;
 $102 = $sp;
 $103 = (($102) + 76|0);
 $104 = HEAP32[$103>>2]|0;
 $nextbits = $104;
 $105 = $sp;
 $106 = (($105) + 84|0);
 $107 = HEAP32[$106>>2]|0;
 $nbitsmask = $107;
 $108 = $sp;
 $109 = (($108) + 112|0);
 $110 = HEAP32[$109>>2]|0;
 $oldcodep = $110;
 $111 = $sp;
 $112 = (($111) + 116|0);
 $113 = HEAP32[$112>>2]|0;
 $free_entp = $113;
 $114 = $sp;
 $115 = (($114) + 120|0);
 $116 = HEAP32[$115>>2]|0;
 $maxcodep = $116;
 while(1) {
  $117 = $occ;
  $118 = ($117|0)>(0);
  if (!($118)) {
   break;
  }
  $119 = $sp;
  $120 = (($119) + 96|0);
  $121 = $120;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = (($121) + 4)|0;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = $nbits;
  $128 = ($127|0)<(0);
  $129 = $128 << 31 >> 31;
  $130 = ($126>>>0)<($129>>>0);
  $131 = ($123>>>0)<($127>>>0);
  $132 = ($126|0)==($129|0);
  $133 = $132 & $131;
  $134 = $130 | $133;
  if ($134) {
   $135 = $1;
   $136 = (($135) + 628|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $1;
   $139 = (($138) + 452|0);
   $140 = HEAP32[$139>>2]|0;
   HEAP32[$vararg_buffer>>2] = $140;
   _TIFFWarningExt($137,130680,130736,$vararg_buffer);
   $code = 257;
  } else {
   $141 = $nextdata;
   $142 = $141 << 8;
   $143 = $bp;
   $144 = (($143) + 1|0);
   $bp = $144;
   $145 = HEAP8[$143>>0]|0;
   $146 = $145&255;
   $147 = $142 | $146;
   $nextdata = $147;
   $148 = $nextbits;
   $149 = (($148) + 8)|0;
   $nextbits = $149;
   $150 = $nextbits;
   $151 = $nbits;
   $152 = ($150|0)<($151|0);
   if ($152) {
    $153 = $nextdata;
    $154 = $153 << 8;
    $155 = $bp;
    $156 = (($155) + 1|0);
    $bp = $156;
    $157 = HEAP8[$155>>0]|0;
    $158 = $157&255;
    $159 = $154 | $158;
    $nextdata = $159;
    $160 = $nextbits;
    $161 = (($160) + 8)|0;
    $nextbits = $161;
   }
   $162 = $nextdata;
   $163 = $nextbits;
   $164 = $nbits;
   $165 = (($163) - ($164))|0;
   $166 = $162 >> $165;
   $167 = $nbitsmask;
   $168 = $166 & $167;
   $169 = $168&65535;
   $code = $169;
   $170 = $nbits;
   $171 = $nextbits;
   $172 = (($171) - ($170))|0;
   $nextbits = $172;
   $173 = $nbits;
   $174 = ($173|0)<(0);
   $175 = $174 << 31 >> 31;
   $176 = $sp;
   $177 = (($176) + 96|0);
   $178 = $177;
   $179 = $178;
   $180 = HEAP32[$179>>2]|0;
   $181 = (($178) + 4)|0;
   $182 = $181;
   $183 = HEAP32[$182>>2]|0;
   $184 = (_i64Subtract(($180|0),($183|0),($173|0),($175|0))|0);
   $185 = tempRet0;
   $186 = $177;
   $187 = $186;
   HEAP32[$187>>2] = $184;
   $188 = (($186) + 4)|0;
   $189 = $188;
   HEAP32[$189>>2] = $185;
  }
  $190 = $code;
  $191 = $190&65535;
  $192 = ($191|0)==(257);
  if ($192) {
   label = 36;
   break;
  }
  $193 = $code;
  $194 = $193&65535;
  $195 = ($194|0)==(256);
  if ($195) {
   $196 = $sp;
   $197 = (($196) + 124|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (($198) + 2064|0);
   $free_entp = $199;
   $200 = $free_entp;
   __TIFFmemset($200,0,38888);
   $nbits = 9;
   $nbitsmask = 511;
   $201 = $sp;
   $202 = (($201) + 124|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = $nbitsmask;
   $205 = (($203) + ($204<<3)|0);
   $206 = (($205) + -8|0);
   $maxcodep = $206;
   $207 = $sp;
   $208 = (($207) + 96|0);
   $209 = $208;
   $210 = $209;
   $211 = HEAP32[$210>>2]|0;
   $212 = (($209) + 4)|0;
   $213 = $212;
   $214 = HEAP32[$213>>2]|0;
   $215 = $nbits;
   $216 = ($215|0)<(0);
   $217 = $216 << 31 >> 31;
   $218 = ($214>>>0)<($217>>>0);
   $219 = ($211>>>0)<($215>>>0);
   $220 = ($214|0)==($217|0);
   $221 = $220 & $219;
   $222 = $218 | $221;
   if ($222) {
    $223 = $1;
    $224 = (($223) + 628|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = $1;
    $227 = (($226) + 452|0);
    $228 = HEAP32[$227>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $228;
    _TIFFWarningExt($225,130680,130736,$vararg_buffer1);
    $code = 257;
   } else {
    $229 = $nextdata;
    $230 = $229 << 8;
    $231 = $bp;
    $232 = (($231) + 1|0);
    $bp = $232;
    $233 = HEAP8[$231>>0]|0;
    $234 = $233&255;
    $235 = $230 | $234;
    $nextdata = $235;
    $236 = $nextbits;
    $237 = (($236) + 8)|0;
    $nextbits = $237;
    $238 = $nextbits;
    $239 = $nbits;
    $240 = ($238|0)<($239|0);
    if ($240) {
     $241 = $nextdata;
     $242 = $241 << 8;
     $243 = $bp;
     $244 = (($243) + 1|0);
     $bp = $244;
     $245 = HEAP8[$243>>0]|0;
     $246 = $245&255;
     $247 = $242 | $246;
     $nextdata = $247;
     $248 = $nextbits;
     $249 = (($248) + 8)|0;
     $nextbits = $249;
    }
    $250 = $nextdata;
    $251 = $nextbits;
    $252 = $nbits;
    $253 = (($251) - ($252))|0;
    $254 = $250 >> $253;
    $255 = $nbitsmask;
    $256 = $254 & $255;
    $257 = $256&65535;
    $code = $257;
    $258 = $nbits;
    $259 = $nextbits;
    $260 = (($259) - ($258))|0;
    $nextbits = $260;
    $261 = $nbits;
    $262 = ($261|0)<(0);
    $263 = $262 << 31 >> 31;
    $264 = $sp;
    $265 = (($264) + 96|0);
    $266 = $265;
    $267 = $266;
    $268 = HEAP32[$267>>2]|0;
    $269 = (($266) + 4)|0;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (_i64Subtract(($268|0),($271|0),($261|0),($263|0))|0);
    $273 = tempRet0;
    $274 = $265;
    $275 = $274;
    HEAP32[$275>>2] = $272;
    $276 = (($274) + 4)|0;
    $277 = $276;
    HEAP32[$277>>2] = $273;
   }
   $278 = $code;
   $279 = $278&65535;
   $280 = ($279|0)==(257);
   if ($280) {
    label = 44;
    break;
   }
   $281 = $code;
   $282 = $281&65535;
   $283 = ($282|0)>=(256);
   if ($283) {
    label = 46;
    break;
   }
   $292 = $code;
   $293 = $292&255;
   $294 = $op;
   $295 = (($294) + 1|0);
   $op = $295;
   HEAP8[$294>>0] = $293;
   $296 = $occ;
   $297 = (($296) + -1)|0;
   $occ = $297;
   $298 = $sp;
   $299 = (($298) + 124|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = $code;
   $302 = $301&65535;
   $303 = (($300) + ($302<<3)|0);
   $oldcodep = $303;
   continue;
  }
  $304 = $sp;
  $305 = (($304) + 124|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = $code;
  $308 = $307&65535;
  $309 = (($306) + ($308<<3)|0);
  $codep = $309;
  $310 = $free_entp;
  $311 = $sp;
  $312 = (($311) + 124|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = ($310>>>0)<($313>>>0);
  if ($314) {
   label = 50;
   break;
  }
  $315 = $free_entp;
  $316 = $sp;
  $317 = (($316) + 124|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = (($318) + 40952|0);
  $320 = ($315>>>0)>=($319>>>0);
  if ($320) {
   label = 50;
   break;
  }
  $327 = $oldcodep;
  $328 = $free_entp;
  HEAP32[$328>>2] = $327;
  $329 = $free_entp;
  $330 = HEAP32[$329>>2]|0;
  $331 = $sp;
  $332 = (($331) + 124|0);
  $333 = HEAP32[$332>>2]|0;
  $334 = ($330>>>0)<($333>>>0);
  if ($334) {
   label = 53;
   break;
  }
  $335 = $free_entp;
  $336 = HEAP32[$335>>2]|0;
  $337 = $sp;
  $338 = (($337) + 124|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = (($339) + 40952|0);
  $341 = ($336>>>0)>=($340>>>0);
  if ($341) {
   label = 53;
   break;
  }
  $348 = $free_entp;
  $349 = HEAP32[$348>>2]|0;
  $350 = (($349) + 7|0);
  $351 = HEAP8[$350>>0]|0;
  $352 = $free_entp;
  $353 = (($352) + 7|0);
  HEAP8[$353>>0] = $351;
  $354 = $free_entp;
  $355 = HEAP32[$354>>2]|0;
  $356 = (($355) + 4|0);
  $357 = HEAP16[$356>>1]|0;
  $358 = $357&65535;
  $359 = (($358) + 1)|0;
  $360 = $359&65535;
  $361 = $free_entp;
  $362 = (($361) + 4|0);
  HEAP16[$362>>1] = $360;
  $363 = $codep;
  $364 = $free_entp;
  $365 = ($363>>>0)<($364>>>0);
  if ($365) {
   $366 = $codep;
   $367 = (($366) + 7|0);
   $368 = HEAP8[$367>>0]|0;
   $369 = $368&255;
   $375 = $369;
  } else {
   $370 = $free_entp;
   $371 = (($370) + 7|0);
   $372 = HEAP8[$371>>0]|0;
   $373 = $372&255;
   $375 = $373;
  }
  $374 = $375&255;
  $376 = $free_entp;
  $377 = (($376) + 6|0);
  HEAP8[$377>>0] = $374;
  $378 = $free_entp;
  $379 = (($378) + 8|0);
  $free_entp = $379;
  $380 = $maxcodep;
  $381 = ($379>>>0)>($380>>>0);
  if ($381) {
   $382 = $nbits;
   $383 = (($382) + 1)|0;
   $nbits = $383;
   $384 = ($383|0)>(12);
   if ($384) {
    $nbits = 12;
   }
   $385 = $nbits;
   $386 = 1 << $385;
   $387 = (($386) - 1)|0;
   $nbitsmask = $387;
   $388 = $sp;
   $389 = (($388) + 124|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = $nbitsmask;
   $392 = (($390) + ($391<<3)|0);
   $393 = (($392) + -8|0);
   $maxcodep = $393;
  }
  $394 = $codep;
  $oldcodep = $394;
  $395 = $code;
  $396 = $395&65535;
  $397 = ($396|0)>=(256);
  if ($397) {
   $398 = $codep;
   $399 = (($398) + 4|0);
   $400 = HEAP16[$399>>1]|0;
   $401 = $400&65535;
   $402 = ($401|0)==(0);
   if ($402) {
    label = 63;
    break;
   }
   $409 = $codep;
   $410 = (($409) + 4|0);
   $411 = HEAP16[$410>>1]|0;
   $412 = $411&65535;
   $413 = $occ;
   $414 = ($412|0)>($413|0);
   if ($414) {
    label = 65;
    break;
   }
   $451 = $codep;
   $452 = (($451) + 4|0);
   $453 = HEAP16[$452>>1]|0;
   $454 = $453&65535;
   $len = $454;
   $455 = $op;
   $456 = $len;
   $457 = (($455) + ($456)|0);
   $tp = $457;
   while(1) {
    $458 = $tp;
    $459 = (($458) + -1|0);
    $tp = $459;
    $460 = $codep;
    $461 = (($460) + 6|0);
    $462 = HEAP8[$461>>0]|0;
    $463 = $462&255;
    $t1 = $463;
    $464 = $codep;
    $465 = HEAP32[$464>>2]|0;
    $codep = $465;
    $466 = $t1;
    $467 = $466&255;
    $468 = $tp;
    HEAP8[$468>>0] = $467;
    $469 = $codep;
    $470 = ($469|0)!=(0|0);
    if ($470) {
     $471 = $tp;
     $472 = $op;
     $473 = ($471>>>0)>($472>>>0);
     $538 = $473;
    } else {
     $538 = 0;
    }
    if (!($538)) {
     break;
    }
   }
   $474 = $codep;
   $475 = ($474|0)!=(0|0);
   if ($475) {
    label = 86;
    break;
   }
   $477 = $occ;
   $478 = $len;
   $479 = ($477|0)>=($478|0);
   if (!($479)) {
    label = 88;
    break;
   }
   $480 = $len;
   $481 = $op;
   $482 = (($481) + ($480)|0);
   $op = $482;
   $483 = $len;
   $484 = $occ;
   $485 = (($484) - ($483))|0;
   $occ = $485;
  } else {
   $486 = $code;
   $487 = $486&255;
   $488 = $op;
   $489 = (($488) + 1|0);
   $op = $489;
   HEAP8[$488>>0] = $487;
   $490 = $occ;
   $491 = (($490) + -1)|0;
   $occ = $491;
  }
 }
 if ((label|0) == 36) {
 }
 else if ((label|0) == 44) {
 }
 else if ((label|0) == 46) {
  $284 = $1;
  $285 = (($284) + 628|0);
  $286 = HEAP32[$285>>2]|0;
  $287 = $1;
  $288 = HEAP32[$287>>2]|0;
  $289 = $1;
  $290 = (($289) + 444|0);
  $291 = HEAP32[$290>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $291;
  _TIFFErrorExt($286,$288,130792,$vararg_buffer4);
  $0 = 0;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 }
 else if ((label|0) == 50) {
  $321 = $1;
  $322 = (($321) + 628|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = $1;
  $325 = (($324) + 444|0);
  $326 = HEAP32[$325>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $326;
  _TIFFErrorExt($323,130680,130840,$vararg_buffer7);
  $0 = 0;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 }
 else if ((label|0) == 53) {
  $342 = $1;
  $343 = (($342) + 628|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = $1;
  $346 = (($345) + 444|0);
  $347 = HEAP32[$346>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $347;
  _TIFFErrorExt($344,130680,130840,$vararg_buffer10);
  $0 = 0;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 }
 else if ((label|0) == 63) {
  $403 = $1;
  $404 = (($403) + 628|0);
  $405 = HEAP32[$404>>2]|0;
  $406 = $1;
  $407 = (($406) + 444|0);
  $408 = HEAP32[$407>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $408;
  _TIFFErrorExt($405,130680,130880,$vararg_buffer13);
  $0 = 0;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 }
 else if ((label|0) == 65) {
  $415 = $codep;
  $416 = $sp;
  $417 = (($416) + 108|0);
  HEAP32[$417>>2] = $415;
  while(1) {
   $418 = $codep;
   $419 = HEAP32[$418>>2]|0;
   $codep = $419;
   $420 = $codep;
   $421 = ($420|0)!=(0|0);
   if ($421) {
    $422 = $codep;
    $423 = (($422) + 4|0);
    $424 = HEAP16[$423>>1]|0;
    $425 = $424&65535;
    $426 = $occ;
    $427 = ($425|0)>($426|0);
    $536 = $427;
   } else {
    $536 = 0;
   }
   if (!($536)) {
    break;
   }
  }
  $428 = $codep;
  $429 = ($428|0)!=(0|0);
  if ($429) {
   $430 = $occ;
   $431 = $sp;
   $432 = (($431) + 88|0);
   HEAP32[$432>>2] = $430;
   $433 = $op;
   $434 = $occ;
   $435 = (($433) + ($434)|0);
   $tp = $435;
   while(1) {
    $436 = $codep;
    $437 = (($436) + 6|0);
    $438 = HEAP8[$437>>0]|0;
    $439 = $tp;
    $440 = (($439) + -1|0);
    $tp = $440;
    HEAP8[$440>>0] = $438;
    $441 = $codep;
    $442 = HEAP32[$441>>2]|0;
    $codep = $442;
    $443 = $occ;
    $444 = (($443) + -1)|0;
    $occ = $444;
    $445 = ($444|0)!=(0);
    if ($445) {
     $446 = $codep;
     $447 = ($446|0)!=(0|0);
     $537 = $447;
    } else {
     $537 = 0;
    }
    if (!($537)) {
     break;
    }
   }
   $448 = $codep;
   $449 = ($448|0)!=(0|0);
   if ($449) {
    $450 = $1;
    _codeLoop($450,130680);
   }
  }
 }
 else if ((label|0) == 86) {
  $476 = $1;
  _codeLoop($476,130680);
 }
 else if ((label|0) == 88) {
  ___assert_fail((130952|0),(130416|0),536,(130696|0));
  // unreachable;
 }
 $492 = $bp;
 $493 = $1;
 $494 = (($493) + 604|0);
 HEAP32[$494>>2] = $492;
 $495 = $nbits;
 $496 = $495&65535;
 $497 = $sp;
 $498 = (($497) + 64|0);
 HEAP16[$498>>1] = $496;
 $499 = $nextdata;
 $500 = $sp;
 $501 = (($500) + 72|0);
 HEAP32[$501>>2] = $499;
 $502 = $nextbits;
 $503 = $sp;
 $504 = (($503) + 76|0);
 HEAP32[$504>>2] = $502;
 $505 = $nbitsmask;
 $506 = $sp;
 $507 = (($506) + 84|0);
 HEAP32[$507>>2] = $505;
 $508 = $oldcodep;
 $509 = $sp;
 $510 = (($509) + 112|0);
 HEAP32[$510>>2] = $508;
 $511 = $free_entp;
 $512 = $sp;
 $513 = (($512) + 116|0);
 HEAP32[$513>>2] = $511;
 $514 = $maxcodep;
 $515 = $sp;
 $516 = (($515) + 120|0);
 HEAP32[$516>>2] = $514;
 $517 = $occ;
 $518 = ($517|0)>(0);
 if ($518) {
  $519 = $1;
  $520 = (($519) + 628|0);
  $521 = HEAP32[$520>>2]|0;
  $522 = $1;
  $523 = (($522) + 444|0);
  $524 = HEAP32[$523>>2]|0;
  $525 = $occ;
  $526 = ($525|0)<(0);
  $527 = $526 << 31 >> 31;
  HEAP32[$vararg_buffer16>>2] = $524;
  $vararg_ptr19 = (($vararg_buffer16) + 4|0);
  $528 = $vararg_ptr19;
  $529 = $528;
  HEAP32[$529>>2] = $525;
  $530 = (($528) + 4)|0;
  $531 = $530;
  HEAP32[$531>>2] = $527;
  _TIFFErrorExt($521,130680,130968,$vararg_buffer16);
  $0 = 0;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 } else {
  $0 = 1;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 }
 return (0)|0;
}
function _LZWSetupEncode($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $sp = $4;
 $5 = $sp;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((130584|0),(130416|0),781,(130632|0));
  // unreachable;
 }
 $7 = (__TIFFmalloc(72008)|0);
 $8 = $sp;
 $9 = (($8) + 152|0);
 HEAP32[$9>>2] = $7;
 $10 = $sp;
 $11 = (($10) + 152|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $1;
  $15 = (($14) + 628|0);
  $16 = HEAP32[$15>>2]|0;
  _TIFFErrorExt($16,130616,130648,$vararg_buffer);
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _LZWPreEncode($tif,$s) {
 $tif = $tif|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $s;
 $2 = $0;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $sp = $4;
 $5 = $sp;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((130584|0),(130416|0),800,(130600|0));
  // unreachable;
 }
 $7 = $sp;
 $8 = (($7) + 152|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = $0;
  $12 = (($11) + 516|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  (FUNCTION_TABLE_ii[$13 & 255]($14)|0);
 }
 $15 = $sp;
 $16 = (($15) + 64|0);
 HEAP16[$16>>1] = 9;
 $17 = $sp;
 $18 = (($17) + 66|0);
 HEAP16[$18>>1] = 511;
 $19 = $sp;
 $20 = (($19) + 68|0);
 HEAP16[$20>>1] = 258;
 $21 = $sp;
 $22 = (($21) + 76|0);
 HEAP32[$22>>2] = 0;
 $23 = $sp;
 $24 = (($23) + 72|0);
 HEAP32[$24>>2] = 0;
 $25 = $sp;
 $26 = (($25) + 132|0);
 HEAP32[$26>>2] = 10000;
 $27 = $sp;
 $28 = (($27) + 136|0);
 HEAP32[$28>>2] = 0;
 $29 = $sp;
 $30 = (($29) + 140|0);
 HEAP32[$30>>2] = 0;
 $31 = $sp;
 $32 = (($31) + 144|0);
 HEAP32[$32>>2] = 0;
 $33 = $0;
 $34 = (($33) + 588|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $0;
 $37 = (($36) + 592|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38)|0);
 $40 = (($39) + -1|0);
 $41 = (($40) + -4|0);
 $42 = $sp;
 $43 = (($42) + 148|0);
 HEAP32[$43>>2] = $41;
 $44 = $sp;
 _cl_hash($44);
 $45 = $sp;
 $46 = (($45) + 128|0);
 HEAP32[$46>>2] = 65535;
 STACKTOP = sp;return 1;
}
function _LZWPostEncode($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $nbits = 0, $nextbits = 0, $nextdata = 0, $op = 0, $outcount = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 576|0);
 $3 = HEAP32[$2>>2]|0;
 $sp = $3;
 $4 = $0;
 $5 = (($4) + 604|0);
 $6 = HEAP32[$5>>2]|0;
 $op = $6;
 $7 = $sp;
 $8 = (($7) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $nextbits = $9;
 $10 = $sp;
 $11 = (($10) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $nextdata = $12;
 $13 = $sp;
 $14 = (($13) + 144|0);
 $15 = HEAP32[$14>>2]|0;
 $outcount = $15;
 $16 = $sp;
 $17 = (($16) + 64|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $nbits = $19;
 $20 = $op;
 $21 = $sp;
 $22 = (($21) + 148|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20>>>0)>($23>>>0);
 if ($24) {
  $25 = $op;
  $26 = $0;
  $27 = (($26) + 588|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $25;
  $30 = $28;
  $31 = (($29) - ($30))|0;
  $32 = $0;
  $33 = (($32) + 608|0);
  HEAP32[$33>>2] = $31;
  $34 = $0;
  (_TIFFFlushData1($34)|0);
  $35 = $0;
  $36 = (($35) + 588|0);
  $37 = HEAP32[$36>>2]|0;
  $op = $37;
 }
 $38 = $sp;
 $39 = (($38) + 128|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(65535);
 if ($41) {
  $42 = $nextdata;
  $43 = $nbits;
  $44 = $42 << $43;
  $45 = $sp;
  $46 = (($45) + 128|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $44 | $47;
  $nextdata = $48;
  $49 = $nbits;
  $50 = $nextbits;
  $51 = (($50) + ($49))|0;
  $nextbits = $51;
  $52 = $nextdata;
  $53 = $nextbits;
  $54 = (($53) - 8)|0;
  $55 = $52 >> $54;
  $56 = $55&255;
  $57 = $op;
  $58 = (($57) + 1|0);
  $op = $58;
  HEAP8[$57>>0] = $56;
  $59 = $nextbits;
  $60 = (($59) - 8)|0;
  $nextbits = $60;
  $61 = $nextbits;
  $62 = ($61|0)>=(8);
  if ($62) {
   $63 = $nextdata;
   $64 = $nextbits;
   $65 = (($64) - 8)|0;
   $66 = $63 >> $65;
   $67 = $66&255;
   $68 = $op;
   $69 = (($68) + 1|0);
   $op = $69;
   HEAP8[$68>>0] = $67;
   $70 = $nextbits;
   $71 = (($70) - 8)|0;
   $nextbits = $71;
  }
  $72 = $nbits;
  $73 = $outcount;
  $74 = (($73) + ($72))|0;
  $outcount = $74;
  $75 = $sp;
  $76 = (($75) + 128|0);
  HEAP32[$76>>2] = 65535;
 }
 $77 = $nextdata;
 $78 = $nbits;
 $79 = $77 << $78;
 $80 = $79 | 257;
 $nextdata = $80;
 $81 = $nbits;
 $82 = $nextbits;
 $83 = (($82) + ($81))|0;
 $nextbits = $83;
 $84 = $nextdata;
 $85 = $nextbits;
 $86 = (($85) - 8)|0;
 $87 = $84 >> $86;
 $88 = $87&255;
 $89 = $op;
 $90 = (($89) + 1|0);
 $op = $90;
 HEAP8[$89>>0] = $88;
 $91 = $nextbits;
 $92 = (($91) - 8)|0;
 $nextbits = $92;
 $93 = $nextbits;
 $94 = ($93|0)>=(8);
 if ($94) {
  $95 = $nextdata;
  $96 = $nextbits;
  $97 = (($96) - 8)|0;
  $98 = $95 >> $97;
  $99 = $98&255;
  $100 = $op;
  $101 = (($100) + 1|0);
  $op = $101;
  HEAP8[$100>>0] = $99;
  $102 = $nextbits;
  $103 = (($102) - 8)|0;
  $nextbits = $103;
 }
 $104 = $nbits;
 $105 = $outcount;
 $106 = (($105) + ($104))|0;
 $outcount = $106;
 $107 = $nextbits;
 $108 = ($107|0)>(0);
 if (!($108)) {
  $116 = $op;
  $117 = $0;
  $118 = (($117) + 588|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $116;
  $121 = $119;
  $122 = (($120) - ($121))|0;
  $123 = $0;
  $124 = (($123) + 608|0);
  HEAP32[$124>>2] = $122;
  STACKTOP = sp;return 1;
 }
 $109 = $nextdata;
 $110 = $nextbits;
 $111 = (8 - ($110))|0;
 $112 = $109 << $111;
 $113 = $112&255;
 $114 = $op;
 $115 = (($114) + 1|0);
 $op = $115;
 HEAP8[$114>>0] = $113;
 $116 = $op;
 $117 = $0;
 $118 = (($117) + 588|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $116;
 $121 = $119;
 $122 = (($120) - ($121))|0;
 $123 = $0;
 $124 = (($123) + 608|0);
 HEAP32[$124>>2] = $122;
 STACKTOP = sp;return 1;
}
function _LZWEncode($tif,$bp,$cc,$s) {
 $tif = $tif|0;
 $bp = $bp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $checkpoint = 0, $disp = 0, $ent = 0, $fcode = 0, $free_ent = 0, $h = 0, $hp = 0, $incount = 0;
 var $limit = 0, $maxcode = 0, $nbits = 0, $nextbits = 0, $nextdata = 0, $op = 0, $outcount = 0, $rat = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $bp;
 $3 = $cc;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $sp;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = 0;
  $350 = $0;
  STACKTOP = sp;return ($350|0);
 }
 $10 = $sp;
 $11 = (($10) + 152|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((130520|0),(130416|0),878,(130544|0));
  // unreachable;
 }
 $14 = $sp;
 $15 = (($14) + 140|0);
 $16 = HEAP32[$15>>2]|0;
 $incount = $16;
 $17 = $sp;
 $18 = (($17) + 144|0);
 $19 = HEAP32[$18>>2]|0;
 $outcount = $19;
 $20 = $sp;
 $21 = (($20) + 132|0);
 $22 = HEAP32[$21>>2]|0;
 $checkpoint = $22;
 $23 = $sp;
 $24 = (($23) + 72|0);
 $25 = HEAP32[$24>>2]|0;
 $nextdata = $25;
 $26 = $sp;
 $27 = (($26) + 76|0);
 $28 = HEAP32[$27>>2]|0;
 $nextbits = $28;
 $29 = $sp;
 $30 = (($29) + 68|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $free_ent = $32;
 $33 = $sp;
 $34 = (($33) + 66|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $maxcode = $36;
 $37 = $sp;
 $38 = (($37) + 64|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 $nbits = $40;
 $41 = $1;
 $42 = (($41) + 604|0);
 $43 = HEAP32[$42>>2]|0;
 $op = $43;
 $44 = $sp;
 $45 = (($44) + 148|0);
 $46 = HEAP32[$45>>2]|0;
 $limit = $46;
 $47 = $sp;
 $48 = (($47) + 128|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49&65535;
 $ent = $50;
 $51 = $ent;
 $52 = $51&65535;
 $53 = ($52|0)==(65535);
 if ($53) {
  $54 = $3;
  $55 = ($54|0)>(0);
  if ($55) {
   $56 = $nextdata;
   $57 = $nbits;
   $58 = $56 << $57;
   $59 = $58 | 256;
   $nextdata = $59;
   $60 = $nbits;
   $61 = $nextbits;
   $62 = (($61) + ($60))|0;
   $nextbits = $62;
   $63 = $nextdata;
   $64 = $nextbits;
   $65 = (($64) - 8)|0;
   $66 = $63 >> $65;
   $67 = $66&255;
   $68 = $op;
   $69 = (($68) + 1|0);
   $op = $69;
   HEAP8[$68>>0] = $67;
   $70 = $nextbits;
   $71 = (($70) - 8)|0;
   $nextbits = $71;
   $72 = $nextbits;
   $73 = ($72|0)>=(8);
   if ($73) {
    $74 = $nextdata;
    $75 = $nextbits;
    $76 = (($75) - 8)|0;
    $77 = $74 >> $76;
    $78 = $77&255;
    $79 = $op;
    $80 = (($79) + 1|0);
    $op = $80;
    HEAP8[$79>>0] = $78;
    $81 = $nextbits;
    $82 = (($81) - 8)|0;
    $nextbits = $82;
   }
   $83 = $nbits;
   $84 = $outcount;
   $85 = (($84) + ($83))|0;
   $outcount = $85;
   $86 = $2;
   $87 = (($86) + 1|0);
   $2 = $87;
   $88 = HEAP8[$86>>0]|0;
   $89 = $88&255;
   $ent = $89;
   $90 = $3;
   $91 = (($90) + -1)|0;
   $3 = $91;
   $92 = $incount;
   $93 = (($92) + 1)|0;
   $incount = $93;
  }
 }
 while(1) {
  $94 = $3;
  $95 = ($94|0)>(0);
  if (!($95)) {
   break;
  }
  $96 = $2;
  $97 = (($96) + 1|0);
  $2 = $97;
  $98 = HEAP8[$96>>0]|0;
  $99 = $98&255;
  $c = $99;
  $100 = $3;
  $101 = (($100) + -1)|0;
  $3 = $101;
  $102 = $incount;
  $103 = (($102) + 1)|0;
  $incount = $103;
  $104 = $c;
  $105 = $104 << 12;
  $106 = $ent;
  $107 = $106&65535;
  $108 = (($105) + ($107))|0;
  $fcode = $108;
  $109 = $c;
  $110 = $109 << 5;
  $111 = $ent;
  $112 = $111&65535;
  $113 = $110 ^ $112;
  $h = $113;
  $114 = $h;
  $115 = $sp;
  $116 = (($115) + 152|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (($117) + ($114<<3)|0);
  $hp = $118;
  $119 = $hp;
  $120 = HEAP32[$119>>2]|0;
  $121 = $fcode;
  $122 = ($120|0)==($121|0);
  if ($122) {
   $123 = $hp;
   $124 = (($123) + 4|0);
   $125 = HEAP16[$124>>1]|0;
   $ent = $125;
   continue;
  }
  $126 = $hp;
  $127 = HEAP32[$126>>2]|0;
  $128 = ($127|0)>=(0);
  do {
   if ($128) {
    $129 = $h;
    $130 = (9001 - ($129))|0;
    $disp = $130;
    $131 = $h;
    $132 = ($131|0)==(0);
    if ($132) {
     $disp = 1;
    }
    while(1) {
     $133 = $disp;
     $134 = $h;
     $135 = (($134) - ($133))|0;
     $h = $135;
     $136 = ($135|0)<(0);
     if ($136) {
      $137 = $h;
      $138 = (($137) + 9001)|0;
      $h = $138;
     }
     $139 = $h;
     $140 = $sp;
     $141 = (($140) + 152|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = (($142) + ($139<<3)|0);
     $hp = $143;
     $144 = $hp;
     $145 = HEAP32[$144>>2]|0;
     $146 = $fcode;
     $147 = ($145|0)==($146|0);
     if ($147) {
      label = 21;
      break;
     }
     $151 = $hp;
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)>=(0);
     if (!($153)) {
      label = 24;
      break;
     }
    }
    if ((label|0) == 21) {
     label = 0;
     $148 = $hp;
     $149 = (($148) + 4|0);
     $150 = HEAP16[$149>>1]|0;
     $ent = $150;
     break;
    }
    else if ((label|0) == 24) {
     label = 0;
     label = 25;
     break;
    }
   } else {
    label = 25;
   }
  } while(0);
  if ((label|0) == 25) {
   label = 0;
   $154 = $op;
   $155 = $limit;
   $156 = ($154>>>0)>($155>>>0);
   if ($156) {
    $157 = $op;
    $158 = $1;
    $159 = (($158) + 588|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = $157;
    $162 = $160;
    $163 = (($161) - ($162))|0;
    $164 = $1;
    $165 = (($164) + 608|0);
    HEAP32[$165>>2] = $163;
    $166 = $1;
    (_TIFFFlushData1($166)|0);
    $167 = $1;
    $168 = (($167) + 588|0);
    $169 = HEAP32[$168>>2]|0;
    $op = $169;
   }
   $170 = $nextdata;
   $171 = $nbits;
   $172 = $170 << $171;
   $173 = $ent;
   $174 = $173&65535;
   $175 = $172 | $174;
   $nextdata = $175;
   $176 = $nbits;
   $177 = $nextbits;
   $178 = (($177) + ($176))|0;
   $nextbits = $178;
   $179 = $nextdata;
   $180 = $nextbits;
   $181 = (($180) - 8)|0;
   $182 = $179 >> $181;
   $183 = $182&255;
   $184 = $op;
   $185 = (($184) + 1|0);
   $op = $185;
   HEAP8[$184>>0] = $183;
   $186 = $nextbits;
   $187 = (($186) - 8)|0;
   $nextbits = $187;
   $188 = $nextbits;
   $189 = ($188|0)>=(8);
   if ($189) {
    $190 = $nextdata;
    $191 = $nextbits;
    $192 = (($191) - 8)|0;
    $193 = $190 >> $192;
    $194 = $193&255;
    $195 = $op;
    $196 = (($195) + 1|0);
    $op = $196;
    HEAP8[$195>>0] = $194;
    $197 = $nextbits;
    $198 = (($197) - 8)|0;
    $nextbits = $198;
   }
   $199 = $nbits;
   $200 = $outcount;
   $201 = (($200) + ($199))|0;
   $outcount = $201;
   $202 = $c;
   $203 = $202&65535;
   $ent = $203;
   $204 = $free_ent;
   $205 = (($204) + 1)|0;
   $free_ent = $205;
   $206 = $204&65535;
   $207 = $hp;
   $208 = (($207) + 4|0);
   HEAP16[$208>>1] = $206;
   $209 = $fcode;
   $210 = $hp;
   HEAP32[$210>>2] = $209;
   $211 = $free_ent;
   $212 = ($211|0)==(4094);
   if ($212) {
    $213 = $sp;
    _cl_hash($213);
    $214 = $sp;
    $215 = (($214) + 136|0);
    HEAP32[$215>>2] = 0;
    $incount = 0;
    $outcount = 0;
    $free_ent = 258;
    $216 = $nextdata;
    $217 = $nbits;
    $218 = $216 << $217;
    $219 = $218 | 256;
    $nextdata = $219;
    $220 = $nbits;
    $221 = $nextbits;
    $222 = (($221) + ($220))|0;
    $nextbits = $222;
    $223 = $nextdata;
    $224 = $nextbits;
    $225 = (($224) - 8)|0;
    $226 = $223 >> $225;
    $227 = $226&255;
    $228 = $op;
    $229 = (($228) + 1|0);
    $op = $229;
    HEAP8[$228>>0] = $227;
    $230 = $nextbits;
    $231 = (($230) - 8)|0;
    $nextbits = $231;
    $232 = $nextbits;
    $233 = ($232|0)>=(8);
    if ($233) {
     $234 = $nextdata;
     $235 = $nextbits;
     $236 = (($235) - 8)|0;
     $237 = $234 >> $236;
     $238 = $237&255;
     $239 = $op;
     $240 = (($239) + 1|0);
     $op = $240;
     HEAP8[$239>>0] = $238;
     $241 = $nextbits;
     $242 = (($241) - 8)|0;
     $nextbits = $242;
    }
    $243 = $nbits;
    $244 = $outcount;
    $245 = (($244) + ($243))|0;
    $outcount = $245;
    $nbits = 9;
    $maxcode = 511;
   } else {
    $246 = $free_ent;
    $247 = $maxcode;
    $248 = ($246|0)>($247|0);
    if ($248) {
     $249 = $nbits;
     $250 = (($249) + 1)|0;
     $nbits = $250;
     $251 = $nbits;
     $252 = ($251|0)<=(12);
     if (!($252)) {
      label = 35;
      break;
     }
     $253 = $nbits;
     $254 = 1 << $253;
     $255 = (($254) - 1)|0;
     $maxcode = $255;
    } else {
     $256 = $incount;
     $257 = $checkpoint;
     $258 = ($256|0)>=($257|0);
     if ($258) {
      $259 = $incount;
      $260 = (($259) + 10000)|0;
      $checkpoint = $260;
      $261 = $incount;
      $262 = ($261|0)>(8388607);
      if ($262) {
       $263 = $outcount;
       $264 = $263 >> 8;
       $rat = $264;
       $265 = $rat;
       $266 = ($265|0)==(0);
       if ($266) {
        $270 = 2147483647;
       } else {
        $267 = $incount;
        $268 = $rat;
        $269 = (($267|0) / ($268|0))&-1;
        $270 = $269;
       }
       $rat = $270;
      } else {
       $271 = $incount;
       $272 = $271 << 8;
       $273 = $outcount;
       $274 = (($272|0) / ($273|0))&-1;
       $rat = $274;
      }
      $275 = $rat;
      $276 = $sp;
      $277 = (($276) + 136|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = ($275|0)<=($278|0);
      if ($279) {
       $280 = $sp;
       _cl_hash($280);
       $281 = $sp;
       $282 = (($281) + 136|0);
       HEAP32[$282>>2] = 0;
       $incount = 0;
       $outcount = 0;
       $free_ent = 258;
       $283 = $nextdata;
       $284 = $nbits;
       $285 = $283 << $284;
       $286 = $285 | 256;
       $nextdata = $286;
       $287 = $nbits;
       $288 = $nextbits;
       $289 = (($288) + ($287))|0;
       $nextbits = $289;
       $290 = $nextdata;
       $291 = $nextbits;
       $292 = (($291) - 8)|0;
       $293 = $290 >> $292;
       $294 = $293&255;
       $295 = $op;
       $296 = (($295) + 1|0);
       $op = $296;
       HEAP8[$295>>0] = $294;
       $297 = $nextbits;
       $298 = (($297) - 8)|0;
       $nextbits = $298;
       $299 = $nextbits;
       $300 = ($299|0)>=(8);
       if ($300) {
        $301 = $nextdata;
        $302 = $nextbits;
        $303 = (($302) - 8)|0;
        $304 = $301 >> $303;
        $305 = $304&255;
        $306 = $op;
        $307 = (($306) + 1|0);
        $op = $307;
        HEAP8[$306>>0] = $305;
        $308 = $nextbits;
        $309 = (($308) - 8)|0;
        $nextbits = $309;
       }
       $310 = $nbits;
       $311 = $outcount;
       $312 = (($311) + ($310))|0;
       $outcount = $312;
       $nbits = 9;
       $maxcode = 511;
      } else {
       $313 = $rat;
       $314 = $sp;
       $315 = (($314) + 136|0);
       HEAP32[$315>>2] = $313;
      }
     }
    }
   }
  }
 }
 if ((label|0) == 35) {
  ___assert_fail((130560|0),(130416|0),976,(130544|0));
  // unreachable;
 }
 $316 = $incount;
 $317 = $sp;
 $318 = (($317) + 140|0);
 HEAP32[$318>>2] = $316;
 $319 = $outcount;
 $320 = $sp;
 $321 = (($320) + 144|0);
 HEAP32[$321>>2] = $319;
 $322 = $checkpoint;
 $323 = $sp;
 $324 = (($323) + 132|0);
 HEAP32[$324>>2] = $322;
 $325 = $ent;
 $326 = $325&65535;
 $327 = $sp;
 $328 = (($327) + 128|0);
 HEAP32[$328>>2] = $326;
 $329 = $nextdata;
 $330 = $sp;
 $331 = (($330) + 72|0);
 HEAP32[$331>>2] = $329;
 $332 = $nextbits;
 $333 = $sp;
 $334 = (($333) + 76|0);
 HEAP32[$334>>2] = $332;
 $335 = $free_ent;
 $336 = $335&65535;
 $337 = $sp;
 $338 = (($337) + 68|0);
 HEAP16[$338>>1] = $336;
 $339 = $maxcode;
 $340 = $339&65535;
 $341 = $sp;
 $342 = (($341) + 66|0);
 HEAP16[$342>>1] = $340;
 $343 = $nbits;
 $344 = $343&65535;
 $345 = $sp;
 $346 = (($345) + 64|0);
 HEAP16[$346>>1] = $344;
 $347 = $op;
 $348 = $1;
 $349 = (($348) + 604|0);
 HEAP32[$349>>2] = $347;
 $0 = 1;
 $350 = $0;
 STACKTOP = sp;return ($350|0);
}
function _LZWCleanup($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 (_TIFFPredictorCleanup($1)|0);
 $2 = $0;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((130480|0),(130416|0),1081,(130504|0));
  // unreachable;
 }
 $6 = $0;
 $7 = (($6) + 576|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 124|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $0;
  $13 = (($12) + 576|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 124|0);
  $16 = HEAP32[$15>>2]|0;
  __TIFFfree($16);
 }
 $17 = $0;
 $18 = (($17) + 576|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 152|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $0;
  $24 = (($23) + 576|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 152|0);
  $27 = HEAP32[$26>>2]|0;
  __TIFFfree($27);
 }
 $28 = $0;
 $29 = (($28) + 576|0);
 $30 = HEAP32[$29>>2]|0;
 __TIFFfree($30);
 $31 = $0;
 $32 = (($31) + 576|0);
 HEAP32[$32>>2] = 0;
 $33 = $0;
 __TIFFSetDefaultCompressionState($33);
 STACKTOP = sp;return;
}
function _LZWDecodeCompat($tif,$op0,$occ0,$s) {
 $tif = $tif|0;
 $op0 = $op0|0;
 $occ0 = $occ0|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bp = 0, $code = 0, $codep = 0, $free_entp = 0, $maxcodep = 0;
 var $nbits = 0, $nbitsmask = 0, $nextbits = 0, $nextdata = 0, $occ = 0, $oldcodep = 0, $op = 0, $residue = 0, $sp = 0, $tp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 40|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 48|0;
 $1 = $tif;
 $2 = $op0;
 $3 = $occ0;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $2;
 $op = $8;
 $9 = $3;
 $occ = $9;
 $10 = $sp;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((130584|0),(130416|0),596,(131168|0));
  // unreachable;
 }
 $12 = $occ;
 $13 = $3;
 $14 = ($12|0)!=($13|0);
 if ($14) {
  $0 = 0;
  $494 = $0;
  STACKTOP = sp;return ($494|0);
 }
 $15 = $sp;
 $16 = (($15) + 88|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 do {
  if ($18) {
   $19 = $sp;
   $20 = (($19) + 108|0);
   $21 = HEAP32[$20>>2]|0;
   $codep = $21;
   $22 = $codep;
   $23 = (($22) + 4|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $24&65535;
   $26 = $sp;
   $27 = (($26) + 88|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($25) - ($28))|0;
   $residue = $29;
   $30 = $residue;
   $31 = $occ;
   $32 = ($30|0)>($31|0);
   if (!($32)) {
    $57 = $residue;
    $58 = $op;
    $59 = (($58) + ($57)|0);
    $op = $59;
    $60 = $residue;
    $61 = $occ;
    $62 = (($61) - ($60))|0;
    $occ = $62;
    $63 = $op;
    $tp = $63;
    while(1) {
     $64 = $codep;
     $65 = (($64) + 6|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $tp;
     $68 = (($67) + -1|0);
     $tp = $68;
     HEAP8[$68>>0] = $66;
     $69 = $codep;
     $70 = HEAP32[$69>>2]|0;
     $codep = $70;
     $71 = $residue;
     $72 = (($71) + -1)|0;
     $residue = $72;
     $73 = ($72|0)!=(0);
     if (!($73)) {
      break;
     }
    }
    $74 = $sp;
    $75 = (($74) + 88|0);
    HEAP32[$75>>2] = 0;
    break;
   }
   $33 = $occ;
   $34 = $sp;
   $35 = (($34) + 88|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + ($33))|0;
   HEAP32[$35>>2] = $37;
   while(1) {
    $38 = $codep;
    $39 = HEAP32[$38>>2]|0;
    $codep = $39;
    $40 = $residue;
    $41 = (($40) + -1)|0;
    $residue = $41;
    $42 = $occ;
    $43 = ($41|0)>($42|0);
    if (!($43)) {
     break;
    }
   }
   $44 = $op;
   $45 = $occ;
   $46 = (($44) + ($45)|0);
   $tp = $46;
   while(1) {
    $47 = $codep;
    $48 = (($47) + 6|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $tp;
    $51 = (($50) + -1|0);
    $tp = $51;
    HEAP8[$51>>0] = $49;
    $52 = $codep;
    $53 = HEAP32[$52>>2]|0;
    $codep = $53;
    $54 = $occ;
    $55 = (($54) + -1)|0;
    $occ = $55;
    $56 = ($55|0)!=(0);
    if (!($56)) {
     break;
    }
   }
   $0 = 1;
   $494 = $0;
   STACKTOP = sp;return ($494|0);
  }
 } while(0);
 $76 = $1;
 $77 = (($76) + 604|0);
 $78 = HEAP32[$77>>2]|0;
 $bp = $78;
 $79 = $sp;
 $80 = (($79) + 64|0);
 $81 = HEAP16[$80>>1]|0;
 $82 = $81&65535;
 $nbits = $82;
 $83 = $sp;
 $84 = (($83) + 72|0);
 $85 = HEAP32[$84>>2]|0;
 $nextdata = $85;
 $86 = $sp;
 $87 = (($86) + 76|0);
 $88 = HEAP32[$87>>2]|0;
 $nextbits = $88;
 $89 = $sp;
 $90 = (($89) + 84|0);
 $91 = HEAP32[$90>>2]|0;
 $nbitsmask = $91;
 $92 = $sp;
 $93 = (($92) + 112|0);
 $94 = HEAP32[$93>>2]|0;
 $oldcodep = $94;
 $95 = $sp;
 $96 = (($95) + 116|0);
 $97 = HEAP32[$96>>2]|0;
 $free_entp = $97;
 $98 = $sp;
 $99 = (($98) + 120|0);
 $100 = HEAP32[$99>>2]|0;
 $maxcodep = $100;
 while(1) {
  $101 = $occ;
  $102 = ($101|0)>(0);
  if (!($102)) {
   break;
  }
  $103 = $sp;
  $104 = (($103) + 96|0);
  $105 = $104;
  $106 = $105;
  $107 = HEAP32[$106>>2]|0;
  $108 = (($105) + 4)|0;
  $109 = $108;
  $110 = HEAP32[$109>>2]|0;
  $111 = $nbits;
  $112 = ($111|0)<(0);
  $113 = $112 << 31 >> 31;
  $114 = ($110>>>0)<($113>>>0);
  $115 = ($107>>>0)<($111>>>0);
  $116 = ($110|0)==($113|0);
  $117 = $116 & $115;
  $118 = $114 | $117;
  if ($118) {
   $119 = $1;
   $120 = (($119) + 628|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $1;
   $123 = (($122) + 452|0);
   $124 = HEAP32[$123>>2]|0;
   HEAP32[$vararg_buffer>>2] = $124;
   _TIFFWarningExt($121,131152,130736,$vararg_buffer);
   $code = 257;
  } else {
   $125 = $bp;
   $126 = (($125) + 1|0);
   $bp = $126;
   $127 = HEAP8[$125>>0]|0;
   $128 = $127&255;
   $129 = $nextbits;
   $130 = $128 << $129;
   $131 = $nextdata;
   $132 = $131 | $130;
   $nextdata = $132;
   $133 = $nextbits;
   $134 = (($133) + 8)|0;
   $nextbits = $134;
   $135 = $nextbits;
   $136 = $nbits;
   $137 = ($135|0)<($136|0);
   if ($137) {
    $138 = $bp;
    $139 = (($138) + 1|0);
    $bp = $139;
    $140 = HEAP8[$138>>0]|0;
    $141 = $140&255;
    $142 = $nextbits;
    $143 = $141 << $142;
    $144 = $nextdata;
    $145 = $144 | $143;
    $nextdata = $145;
    $146 = $nextbits;
    $147 = (($146) + 8)|0;
    $nextbits = $147;
   }
   $148 = $nextdata;
   $149 = $nbitsmask;
   $150 = $148 & $149;
   $151 = $150&65535;
   $152 = $151&65535;
   $code = $152;
   $153 = $nbits;
   $154 = $nextdata;
   $155 = $154 >> $153;
   $nextdata = $155;
   $156 = $nbits;
   $157 = $nextbits;
   $158 = (($157) - ($156))|0;
   $nextbits = $158;
   $159 = $nbits;
   $160 = ($159|0)<(0);
   $161 = $160 << 31 >> 31;
   $162 = $sp;
   $163 = (($162) + 96|0);
   $164 = $163;
   $165 = $164;
   $166 = HEAP32[$165>>2]|0;
   $167 = (($164) + 4)|0;
   $168 = $167;
   $169 = HEAP32[$168>>2]|0;
   $170 = (_i64Subtract(($166|0),($169|0),($159|0),($161|0))|0);
   $171 = tempRet0;
   $172 = $163;
   $173 = $172;
   HEAP32[$173>>2] = $170;
   $174 = (($172) + 4)|0;
   $175 = $174;
   HEAP32[$175>>2] = $171;
  }
  $176 = $code;
  $177 = ($176|0)==(257);
  if ($177) {
   label = 26;
   break;
  }
  $178 = $code;
  $179 = ($178|0)==(256);
  if ($179) {
   $180 = $sp;
   $181 = (($180) + 124|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (($182) + 2064|0);
   $free_entp = $183;
   $184 = $free_entp;
   __TIFFmemset($184,0,38888);
   $nbits = 9;
   $nbitsmask = 511;
   $185 = $sp;
   $186 = (($185) + 124|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = $nbitsmask;
   $189 = (($187) + ($188<<3)|0);
   $maxcodep = $189;
   $190 = $sp;
   $191 = (($190) + 96|0);
   $192 = $191;
   $193 = $192;
   $194 = HEAP32[$193>>2]|0;
   $195 = (($192) + 4)|0;
   $196 = $195;
   $197 = HEAP32[$196>>2]|0;
   $198 = $nbits;
   $199 = ($198|0)<(0);
   $200 = $199 << 31 >> 31;
   $201 = ($197>>>0)<($200>>>0);
   $202 = ($194>>>0)<($198>>>0);
   $203 = ($197|0)==($200|0);
   $204 = $203 & $202;
   $205 = $201 | $204;
   if ($205) {
    $206 = $1;
    $207 = (($206) + 628|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = $1;
    $210 = (($209) + 452|0);
    $211 = HEAP32[$210>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $211;
    _TIFFWarningExt($208,131152,130736,$vararg_buffer1);
    $code = 257;
   } else {
    $212 = $bp;
    $213 = (($212) + 1|0);
    $bp = $213;
    $214 = HEAP8[$212>>0]|0;
    $215 = $214&255;
    $216 = $nextbits;
    $217 = $215 << $216;
    $218 = $nextdata;
    $219 = $218 | $217;
    $nextdata = $219;
    $220 = $nextbits;
    $221 = (($220) + 8)|0;
    $nextbits = $221;
    $222 = $nextbits;
    $223 = $nbits;
    $224 = ($222|0)<($223|0);
    if ($224) {
     $225 = $bp;
     $226 = (($225) + 1|0);
     $bp = $226;
     $227 = HEAP8[$225>>0]|0;
     $228 = $227&255;
     $229 = $nextbits;
     $230 = $228 << $229;
     $231 = $nextdata;
     $232 = $231 | $230;
     $nextdata = $232;
     $233 = $nextbits;
     $234 = (($233) + 8)|0;
     $nextbits = $234;
    }
    $235 = $nextdata;
    $236 = $nbitsmask;
    $237 = $235 & $236;
    $238 = $237&65535;
    $239 = $238&65535;
    $code = $239;
    $240 = $nbits;
    $241 = $nextdata;
    $242 = $241 >> $240;
    $nextdata = $242;
    $243 = $nbits;
    $244 = $nextbits;
    $245 = (($244) - ($243))|0;
    $nextbits = $245;
    $246 = $nbits;
    $247 = ($246|0)<(0);
    $248 = $247 << 31 >> 31;
    $249 = $sp;
    $250 = (($249) + 96|0);
    $251 = $250;
    $252 = $251;
    $253 = HEAP32[$252>>2]|0;
    $254 = (($251) + 4)|0;
    $255 = $254;
    $256 = HEAP32[$255>>2]|0;
    $257 = (_i64Subtract(($253|0),($256|0),($246|0),($248|0))|0);
    $258 = tempRet0;
    $259 = $250;
    $260 = $259;
    HEAP32[$260>>2] = $257;
    $261 = (($259) + 4)|0;
    $262 = $261;
    HEAP32[$262>>2] = $258;
   }
   $263 = $code;
   $264 = ($263|0)==(257);
   if ($264) {
    label = 34;
    break;
   }
   $265 = $code;
   $266 = ($265|0)>=(256);
   if ($266) {
    label = 36;
    break;
   }
   $275 = $code;
   $276 = $275&255;
   $277 = $op;
   $278 = (($277) + 1|0);
   $op = $278;
   HEAP8[$277>>0] = $276;
   $279 = $occ;
   $280 = (($279) + -1)|0;
   $occ = $280;
   $281 = $sp;
   $282 = (($281) + 124|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $code;
   $285 = (($283) + ($284<<3)|0);
   $oldcodep = $285;
   continue;
  }
  $286 = $sp;
  $287 = (($286) + 124|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = $code;
  $290 = (($288) + ($289<<3)|0);
  $codep = $290;
  $291 = $free_entp;
  $292 = $sp;
  $293 = (($292) + 124|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = ($291>>>0)<($294>>>0);
  if ($295) {
   label = 40;
   break;
  }
  $296 = $free_entp;
  $297 = $sp;
  $298 = (($297) + 124|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = (($299) + 40952|0);
  $301 = ($296>>>0)>=($300>>>0);
  if ($301) {
   label = 40;
   break;
  }
  $308 = $oldcodep;
  $309 = $free_entp;
  HEAP32[$309>>2] = $308;
  $310 = $free_entp;
  $311 = HEAP32[$310>>2]|0;
  $312 = $sp;
  $313 = (($312) + 124|0);
  $314 = HEAP32[$313>>2]|0;
  $315 = ($311>>>0)<($314>>>0);
  if ($315) {
   label = 43;
   break;
  }
  $316 = $free_entp;
  $317 = HEAP32[$316>>2]|0;
  $318 = $sp;
  $319 = (($318) + 124|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = (($320) + 40952|0);
  $322 = ($317>>>0)>=($321>>>0);
  if ($322) {
   label = 43;
   break;
  }
  $329 = $free_entp;
  $330 = HEAP32[$329>>2]|0;
  $331 = (($330) + 7|0);
  $332 = HEAP8[$331>>0]|0;
  $333 = $free_entp;
  $334 = (($333) + 7|0);
  HEAP8[$334>>0] = $332;
  $335 = $free_entp;
  $336 = HEAP32[$335>>2]|0;
  $337 = (($336) + 4|0);
  $338 = HEAP16[$337>>1]|0;
  $339 = $338&65535;
  $340 = (($339) + 1)|0;
  $341 = $340&65535;
  $342 = $free_entp;
  $343 = (($342) + 4|0);
  HEAP16[$343>>1] = $341;
  $344 = $codep;
  $345 = $free_entp;
  $346 = ($344>>>0)<($345>>>0);
  if ($346) {
   $347 = $codep;
   $348 = (($347) + 7|0);
   $349 = HEAP8[$348>>0]|0;
   $350 = $349&255;
   $356 = $350;
  } else {
   $351 = $free_entp;
   $352 = (($351) + 7|0);
   $353 = HEAP8[$352>>0]|0;
   $354 = $353&255;
   $356 = $354;
  }
  $355 = $356&255;
  $357 = $free_entp;
  $358 = (($357) + 6|0);
  HEAP8[$358>>0] = $355;
  $359 = $free_entp;
  $360 = (($359) + 8|0);
  $free_entp = $360;
  $361 = $maxcodep;
  $362 = ($360>>>0)>($361>>>0);
  if ($362) {
   $363 = $nbits;
   $364 = (($363) + 1)|0;
   $nbits = $364;
   $365 = ($364|0)>(12);
   if ($365) {
    $nbits = 12;
   }
   $366 = $nbits;
   $367 = 1 << $366;
   $368 = (($367) - 1)|0;
   $nbitsmask = $368;
   $369 = $sp;
   $370 = (($369) + 124|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = $nbitsmask;
   $373 = (($371) + ($372<<3)|0);
   $maxcodep = $373;
  }
  $374 = $codep;
  $oldcodep = $374;
  $375 = $code;
  $376 = ($375|0)>=(256);
  if ($376) {
   $377 = $codep;
   $378 = (($377) + 4|0);
   $379 = HEAP16[$378>>1]|0;
   $380 = $379&65535;
   $381 = ($380|0)==(0);
   if ($381) {
    label = 53;
    break;
   }
   $388 = $codep;
   $389 = (($388) + 4|0);
   $390 = HEAP16[$389>>1]|0;
   $391 = $390&65535;
   $392 = $occ;
   $393 = ($391|0)>($392|0);
   if ($393) {
    label = 55;
    break;
   }
   $421 = $occ;
   $422 = $codep;
   $423 = (($422) + 4|0);
   $424 = HEAP16[$423>>1]|0;
   $425 = $424&65535;
   $426 = ($421|0)>=($425|0);
   if (!($426)) {
    label = 63;
    break;
   }
   $427 = $codep;
   $428 = (($427) + 4|0);
   $429 = HEAP16[$428>>1]|0;
   $430 = $429&65535;
   $431 = $op;
   $432 = (($431) + ($430)|0);
   $op = $432;
   $433 = $codep;
   $434 = (($433) + 4|0);
   $435 = HEAP16[$434>>1]|0;
   $436 = $435&65535;
   $437 = $occ;
   $438 = (($437) - ($436))|0;
   $occ = $438;
   $439 = $op;
   $tp = $439;
   while(1) {
    $440 = $codep;
    $441 = (($440) + 6|0);
    $442 = HEAP8[$441>>0]|0;
    $443 = $tp;
    $444 = (($443) + -1|0);
    $tp = $444;
    HEAP8[$444>>0] = $442;
    $445 = $codep;
    $446 = HEAP32[$445>>2]|0;
    $codep = $446;
    $447 = ($446|0)!=(0|0);
    if (!($447)) {
     break;
    }
   }
  } else {
   $448 = $code;
   $449 = $448&255;
   $450 = $op;
   $451 = (($450) + 1|0);
   $op = $451;
   HEAP8[$450>>0] = $449;
   $452 = $occ;
   $453 = (($452) + -1)|0;
   $occ = $453;
  }
 }
 if ((label|0) == 26) {
 }
 else if ((label|0) == 34) {
 }
 else if ((label|0) == 36) {
  $267 = $1;
  $268 = (($267) + 628|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = $1;
  $271 = HEAP32[$270>>2]|0;
  $272 = $1;
  $273 = (($272) + 444|0);
  $274 = HEAP32[$273>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $274;
  _TIFFErrorExt($269,$271,130792,$vararg_buffer4);
  $0 = 0;
  $494 = $0;
  STACKTOP = sp;return ($494|0);
 }
 else if ((label|0) == 40) {
  $302 = $1;
  $303 = (($302) + 628|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = $1;
  $306 = (($305) + 444|0);
  $307 = HEAP32[$306>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $307;
  _TIFFErrorExt($304,131152,130840,$vararg_buffer7);
  $0 = 0;
  $494 = $0;
  STACKTOP = sp;return ($494|0);
 }
 else if ((label|0) == 43) {
  $323 = $1;
  $324 = (($323) + 628|0);
  $325 = HEAP32[$324>>2]|0;
  $326 = $1;
  $327 = (($326) + 444|0);
  $328 = HEAP32[$327>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $328;
  _TIFFErrorExt($325,131152,130840,$vararg_buffer10);
  $0 = 0;
  $494 = $0;
  STACKTOP = sp;return ($494|0);
 }
 else if ((label|0) == 53) {
  $382 = $1;
  $383 = (($382) + 628|0);
  $384 = HEAP32[$383>>2]|0;
  $385 = $1;
  $386 = (($385) + 444|0);
  $387 = HEAP32[$386>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $387;
  _TIFFErrorExt($384,131152,130880,$vararg_buffer13);
  $0 = 0;
  $494 = $0;
  STACKTOP = sp;return ($494|0);
 }
 else if ((label|0) == 55) {
  $394 = $codep;
  $395 = $sp;
  $396 = (($395) + 108|0);
  HEAP32[$396>>2] = $394;
  while(1) {
   $397 = $codep;
   $398 = HEAP32[$397>>2]|0;
   $codep = $398;
   $399 = $codep;
   $400 = (($399) + 4|0);
   $401 = HEAP16[$400>>1]|0;
   $402 = $401&65535;
   $403 = $occ;
   $404 = ($402|0)>($403|0);
   if (!($404)) {
    break;
   }
  }
  $405 = $occ;
  $406 = $sp;
  $407 = (($406) + 88|0);
  HEAP32[$407>>2] = $405;
  $408 = $op;
  $409 = $occ;
  $410 = (($408) + ($409)|0);
  $tp = $410;
  while(1) {
   $411 = $codep;
   $412 = (($411) + 6|0);
   $413 = HEAP8[$412>>0]|0;
   $414 = $tp;
   $415 = (($414) + -1|0);
   $tp = $415;
   HEAP8[$415>>0] = $413;
   $416 = $codep;
   $417 = HEAP32[$416>>2]|0;
   $codep = $417;
   $418 = $occ;
   $419 = (($418) + -1)|0;
   $occ = $419;
   $420 = ($419|0)!=(0);
   if (!($420)) {
    break;
   }
  }
 }
 else if ((label|0) == 63) {
  ___assert_fail((131184|0),(130416|0),736,(131168|0));
  // unreachable;
 }
 $454 = $bp;
 $455 = $1;
 $456 = (($455) + 604|0);
 HEAP32[$456>>2] = $454;
 $457 = $nbits;
 $458 = $457&65535;
 $459 = $sp;
 $460 = (($459) + 64|0);
 HEAP16[$460>>1] = $458;
 $461 = $nextdata;
 $462 = $sp;
 $463 = (($462) + 72|0);
 HEAP32[$463>>2] = $461;
 $464 = $nextbits;
 $465 = $sp;
 $466 = (($465) + 76|0);
 HEAP32[$466>>2] = $464;
 $467 = $nbitsmask;
 $468 = $sp;
 $469 = (($468) + 84|0);
 HEAP32[$469>>2] = $467;
 $470 = $oldcodep;
 $471 = $sp;
 $472 = (($471) + 112|0);
 HEAP32[$472>>2] = $470;
 $473 = $free_entp;
 $474 = $sp;
 $475 = (($474) + 116|0);
 HEAP32[$475>>2] = $473;
 $476 = $maxcodep;
 $477 = $sp;
 $478 = (($477) + 120|0);
 HEAP32[$478>>2] = $476;
 $479 = $occ;
 $480 = ($479|0)>(0);
 if ($480) {
  $481 = $1;
  $482 = (($481) + 628|0);
  $483 = HEAP32[$482>>2]|0;
  $484 = $1;
  $485 = (($484) + 444|0);
  $486 = HEAP32[$485>>2]|0;
  $487 = $occ;
  $488 = ($487|0)<(0);
  $489 = $488 << 31 >> 31;
  HEAP32[$vararg_buffer16>>2] = $486;
  $vararg_ptr19 = (($vararg_buffer16) + 4|0);
  $490 = $vararg_ptr19;
  $491 = $490;
  HEAP32[$491>>2] = $487;
  $492 = (($490) + 4)|0;
  $493 = $492;
  HEAP32[$493>>2] = $489;
  _TIFFErrorExt($483,131152,130968,$vararg_buffer16);
  $0 = 0;
  $494 = $0;
  STACKTOP = sp;return ($494|0);
 } else {
  $0 = 1;
  $494 = $0;
  STACKTOP = sp;return ($494|0);
 }
 return (0)|0;
}
function _codeLoop($tif,$module) {
 $tif = $tif|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $module;
 $2 = $0;
 $3 = (($2) + 628|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = $0;
 $7 = (($6) + 444|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$vararg_buffer>>2] = $8;
 _TIFFErrorExt($4,$5,131024,$vararg_buffer);
 STACKTOP = sp;return;
}
function _cl_hash($sp) {
 $sp = $sp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hp = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $0;
 $2 = (($1) + 152|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 72000|0);
 $hp = $4;
 $i = 8993;
 while(1) {
  $5 = $i;
  $6 = (($5) - 8)|0;
  $i = $6;
  $7 = $hp;
  $8 = (($7) + -56|0);
  HEAP32[$8>>2] = -1;
  $9 = $hp;
  $10 = (($9) + -48|0);
  HEAP32[$10>>2] = -1;
  $11 = $hp;
  $12 = (($11) + -40|0);
  HEAP32[$12>>2] = -1;
  $13 = $hp;
  $14 = (($13) + -32|0);
  HEAP32[$14>>2] = -1;
  $15 = $hp;
  $16 = (($15) + -24|0);
  HEAP32[$16>>2] = -1;
  $17 = $hp;
  $18 = (($17) + -16|0);
  HEAP32[$18>>2] = -1;
  $19 = $hp;
  $20 = (($19) + -8|0);
  HEAP32[$20>>2] = -1;
  $21 = $hp;
  HEAP32[$21>>2] = -1;
  $22 = $hp;
  $23 = (($22) + -64|0);
  $hp = $23;
  $24 = $i;
  $25 = ($24|0)>=(0);
  if (!($25)) {
   break;
  }
 }
 $26 = $i;
 $27 = (($26) + 8)|0;
 $i = $27;
 while(1) {
  $28 = $i;
  $29 = ($28|0)>(0);
  if (!($29)) {
   break;
  }
  $30 = $hp;
  HEAP32[$30>>2] = -1;
  $31 = $i;
  $32 = (($31) + -1)|0;
  $i = $32;
  $33 = $hp;
  $34 = (($33) + -8|0);
  $hp = $34;
 }
 STACKTOP = sp;return;
}
function _TIFFInitNeXT($tif,$scheme) {
 $tif = $tif|0;
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $scheme;
 $2 = $0;
 $3 = (($2) + 532|0);
 HEAP32[$3>>2] = 147;
 $4 = $0;
 $5 = (($4) + 540|0);
 HEAP32[$5>>2] = 147;
 $6 = $0;
 $7 = (($6) + 548|0);
 HEAP32[$7>>2] = 147;
 STACKTOP = sp;return 1;
}
function _NeXTDecode($tif,$buf,$occ,$s) {
 $tif = $tif|0;
 $buf = $buf|0;
 $occ = $occ|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bp = 0, $cc = 0, $grey = 0, $imagewidth = 0, $n = 0, $npixels = 0, $off = 0, $op = 0, $row = 0, $scanline = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $1 = $tif;
 $2 = $buf;
 $3 = $occ;
 $4 = $s;
 $5 = $2;
 $op = $5;
 $6 = $3;
 $cc = $6;
 while(1) {
  $7 = $cc;
  $8 = (($7) + -1)|0;
  $cc = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $op;
  $11 = (($10) + 1|0);
  $op = $11;
  HEAP8[$10>>0] = -1;
 }
 $12 = $1;
 $13 = (($12) + 604|0);
 $14 = HEAP32[$13>>2]|0;
 $bp = $14;
 $15 = $1;
 $16 = (($15) + 608|0);
 $17 = HEAP32[$16>>2]|0;
 $cc = $17;
 $18 = $1;
 $19 = (($18) + 580|0);
 $20 = HEAP32[$19>>2]|0;
 $scanline = $20;
 $21 = $3;
 $22 = $scanline;
 $23 = (($21|0) % ($22|0))&-1;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $1;
  $26 = (($25) + 628|0);
  $27 = HEAP32[$26>>2]|0;
  _TIFFErrorExt($27,131272,131288,$vararg_buffer);
  $0 = 0;
  $165 = $0;
  STACKTOP = sp;return ($165|0);
 }
 $28 = $2;
 $row = $28;
 L9: while(1) {
  $29 = $3;
  $30 = ($29|0)>(0);
  if (!($30)) {
   label = 35;
   break;
  }
  $31 = $bp;
  $32 = (($31) + 1|0);
  $bp = $32;
  $33 = HEAP8[$31>>0]|0;
  $34 = $33&255;
  $n = $34;
  $35 = $cc;
  $36 = (($35) + -1)|0;
  $cc = $36;
  $37 = $n;
  if ((($37|0) == 64)) {
   $50 = $bp;
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = $52<<8;
   $54 = $bp;
   $55 = (($54) + 1|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = (($53) + ($57))|0;
   $off = $58;
   $59 = $bp;
   $60 = (($59) + 2|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = $62<<8;
   $64 = $bp;
   $65 = (($64) + 3|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = (($63) + ($67))|0;
   $n = $68;
   $69 = $cc;
   $70 = $n;
   $71 = (4 + ($70))|0;
   $72 = ($69|0)<($71|0);
   if ($72) {
    label = 14;
    break;
   }
   $73 = $off;
   $74 = $n;
   $75 = (($73) + ($74))|0;
   $76 = $scanline;
   $77 = ($75|0)>($76|0);
   if ($77) {
    label = 14;
    break;
   }
   $78 = $row;
   $79 = $off;
   $80 = (($78) + ($79)|0);
   $81 = $bp;
   $82 = (($81) + 4|0);
   $83 = $n;
   __TIFFmemcpy($80,$82,$83);
   $84 = $n;
   $85 = (4 + ($84))|0;
   $86 = $bp;
   $87 = (($86) + ($85)|0);
   $bp = $87;
   $88 = $n;
   $89 = (4 + ($88))|0;
   $90 = $cc;
   $91 = (($90) - ($89))|0;
   $cc = $91;
  } else if ((($37|0) == 0)) {
   $38 = $cc;
   $39 = $scanline;
   $40 = ($38|0)<($39|0);
   if ($40) {
    label = 10;
    break;
   }
   $41 = $row;
   $42 = $bp;
   $43 = $scanline;
   __TIFFmemcpy($41,$42,$43);
   $44 = $scanline;
   $45 = $bp;
   $46 = (($45) + ($44)|0);
   $bp = $46;
   $47 = $scanline;
   $48 = $cc;
   $49 = (($48) - ($47))|0;
   $cc = $49;
  } else {
   $npixels = 0;
   $92 = $1;
   $93 = (($92) + 40|0);
   $94 = (($93) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $imagewidth = $95;
   $96 = $row;
   $op = $96;
   while(1) {
    $97 = $n;
    $98 = $97 >> 6;
    $99 = $98 & 3;
    $grey = $99;
    $100 = $n;
    $101 = $100 & 63;
    $n = $101;
    while(1) {
     $102 = $n;
     $103 = (($102) + -1)|0;
     $n = $103;
     $104 = ($102|0)>(0);
     if ($104) {
      $105 = $npixels;
      $106 = $imagewidth;
      $107 = ($105>>>0)<($106>>>0);
      $166 = $107;
     } else {
      $166 = 0;
     }
     if (!($166)) {
      break;
     }
     $108 = $npixels;
     $109 = (($108) + 1)|0;
     $npixels = $109;
     $110 = $108 & 3;
     if ((($110|0) == 2)) {
      $122 = $grey;
      $123 = $122 << 2;
      $124 = $op;
      $125 = HEAP8[$124>>0]|0;
      $126 = $125&255;
      $127 = $126 | $123;
      $128 = $127&255;
      HEAP8[$124>>0] = $128;
     } else if ((($110|0) == 0)) {
      $111 = $grey;
      $112 = $111 << 6;
      $113 = $112&255;
      $114 = $op;
      HEAP8[$114>>0] = $113;
     } else if ((($110|0) == 1)) {
      $115 = $grey;
      $116 = $115 << 4;
      $117 = $op;
      $118 = HEAP8[$117>>0]|0;
      $119 = $118&255;
      $120 = $119 | $116;
      $121 = $120&255;
      HEAP8[$117>>0] = $121;
     } else if ((($110|0) == 3)) {
      $129 = $grey;
      $130 = $op;
      $131 = (($130) + 1|0);
      $op = $131;
      $132 = HEAP8[$130>>0]|0;
      $133 = $132&255;
      $134 = $133 | $129;
      $135 = $134&255;
      HEAP8[$130>>0] = $135;
     }
    }
    $136 = $npixels;
    $137 = $imagewidth;
    $138 = ($136>>>0)>=($137>>>0);
    if ($138) {
     break;
    }
    $139 = $cc;
    $140 = ($139|0)==(0);
    if ($140) {
     label = 30;
     break L9;
    }
    $141 = $bp;
    $142 = (($141) + 1|0);
    $bp = $142;
    $143 = HEAP8[$141>>0]|0;
    $144 = $143&255;
    $n = $144;
    $145 = $cc;
    $146 = (($145) + -1)|0;
    $cc = $146;
   }
  }
  $147 = $scanline;
  $148 = $3;
  $149 = (($148) - ($147))|0;
  $3 = $149;
  $150 = $scanline;
  $151 = $row;
  $152 = (($151) + ($150)|0);
  $row = $152;
 }
 if ((label|0) == 10) {
 }
 else if ((label|0) == 14) {
 }
 else if ((label|0) == 30) {
 }
 else if ((label|0) == 35) {
  $153 = $bp;
  $154 = $1;
  $155 = (($154) + 604|0);
  HEAP32[$155>>2] = $153;
  $156 = $cc;
  $157 = $1;
  $158 = (($157) + 608|0);
  HEAP32[$158>>2] = $156;
  $0 = 1;
  $165 = $0;
  STACKTOP = sp;return ($165|0);
 }
 $159 = $1;
 $160 = (($159) + 628|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = $1;
 $163 = (($162) + 444|0);
 $164 = HEAP32[$163>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $164;
 _TIFFErrorExt($161,131272,131328,$vararg_buffer1);
 $0 = 0;
 $165 = $0;
 STACKTOP = sp;return ($165|0);
}
function _TIFFInitPackBits($tif,$scheme) {
 $tif = $tif|0;
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $scheme;
 $2 = $0;
 $3 = (($2) + 532|0);
 HEAP32[$3>>2] = 148;
 $4 = $0;
 $5 = (($4) + 540|0);
 HEAP32[$5>>2] = 148;
 $6 = $0;
 $7 = (($6) + 548|0);
 HEAP32[$7>>2] = 148;
 $8 = $0;
 $9 = (($8) + 524|0);
 HEAP32[$9>>2] = 149;
 $10 = $0;
 $11 = (($10) + 528|0);
 HEAP32[$11>>2] = 150;
 $12 = $0;
 $13 = (($12) + 536|0);
 HEAP32[$13>>2] = 151;
 $14 = $0;
 $15 = (($14) + 544|0);
 HEAP32[$15>>2] = 152;
 $16 = $0;
 $17 = (($16) + 552|0);
 HEAP32[$17>>2] = 152;
 STACKTOP = sp;return 1;
}
function _PackBitsDecode($tif,$op,$occ,$s) {
 $tif = $tif|0;
 $op = $op|0;
 $occ = $occ|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $bp = 0, $cc = 0, $n = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 24|0;
 $1 = $tif;
 $2 = $op;
 $3 = $occ;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 604|0);
 $7 = HEAP32[$6>>2]|0;
 $bp = $7;
 $8 = $1;
 $9 = (($8) + 608|0);
 $10 = HEAP32[$9>>2]|0;
 $cc = $10;
 while(1) {
  $11 = $cc;
  $12 = ($11|0)>(0);
  if ($12) {
   $13 = $3;
   $14 = ($13|0)>(0);
   $109 = $14;
  } else {
   $109 = 0;
  }
  if (!($109)) {
   break;
  }
  $15 = $bp;
  $16 = (($15) + 1|0);
  $bp = $16;
  $17 = HEAP8[$15>>0]|0;
  $18 = $17 << 24 >> 24;
  $n = $18;
  $19 = $cc;
  $20 = (($19) + -1)|0;
  $cc = $20;
  $21 = $n;
  $22 = ($21|0)>=(128);
  if ($22) {
   $23 = $n;
   $24 = (($23) - 256)|0;
   $n = $24;
  }
  $25 = $n;
  $26 = ($25|0)<(0);
  if ($26) {
   $27 = $n;
   $28 = ($27|0)==(-128);
   if ($28) {
    continue;
   }
   $29 = $n;
   $30 = (0 - ($29))|0;
   $31 = (($30) + 1)|0;
   $n = $31;
   $32 = $3;
   $33 = $n;
   $34 = ($32|0)<($33|0);
   if ($34) {
    $35 = $1;
    $36 = (($35) + 628|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $n;
    $39 = $3;
    $40 = (($38) - ($39))|0;
    HEAP32[$vararg_buffer>>2] = $40;
    _TIFFWarningExt($37,131368,131384,$vararg_buffer);
    $41 = $3;
    $n = $41;
   }
   $42 = $n;
   $43 = $3;
   $44 = (($43) - ($42))|0;
   $3 = $44;
   $45 = $bp;
   $46 = (($45) + 1|0);
   $bp = $46;
   $47 = HEAP8[$45>>0]|0;
   $48 = $47 << 24 >> 24;
   $b = $48;
   $49 = $cc;
   $50 = (($49) + -1)|0;
   $cc = $50;
   while(1) {
    $51 = $n;
    $52 = (($51) + -1)|0;
    $n = $52;
    $53 = ($51|0)>(0);
    if (!($53)) {
     break;
    }
    $54 = $b;
    $55 = $54&255;
    $56 = $2;
    $57 = (($56) + 1|0);
    $2 = $57;
    HEAP8[$56>>0] = $55;
   }
  } else {
   $58 = $3;
   $59 = $n;
   $60 = (($59) + 1)|0;
   $61 = ($58|0)<($60|0);
   if ($61) {
    $62 = $1;
    $63 = (($62) + 628|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $n;
    $66 = $3;
    $67 = (($65) - ($66))|0;
    $68 = (($67) + 1)|0;
    HEAP32[$vararg_buffer1>>2] = $68;
    _TIFFWarningExt($64,131368,131384,$vararg_buffer1);
    $69 = $3;
    $70 = (($69) - 1)|0;
    $n = $70;
   }
   $71 = $cc;
   $72 = $n;
   $73 = (($72) + 1)|0;
   $74 = ($71|0)<($73|0);
   if ($74) {
    label = 19;
    break;
   }
   $78 = $2;
   $79 = $bp;
   $80 = $n;
   $81 = (($80) + 1)|0;
   $n = $81;
   __TIFFmemcpy($78,$79,$81);
   $82 = $n;
   $83 = $2;
   $84 = (($83) + ($82)|0);
   $2 = $84;
   $85 = $n;
   $86 = $3;
   $87 = (($86) - ($85))|0;
   $3 = $87;
   $88 = $n;
   $89 = $bp;
   $90 = (($89) + ($88)|0);
   $bp = $90;
   $91 = $n;
   $92 = $cc;
   $93 = (($92) - ($91))|0;
   $cc = $93;
  }
 }
 if ((label|0) == 19) {
  $75 = $1;
  $76 = (($75) + 628|0);
  $77 = HEAP32[$76>>2]|0;
  _TIFFWarningExt($77,131368,131432,$vararg_buffer4);
 }
 $94 = $bp;
 $95 = $1;
 $96 = (($95) + 604|0);
 HEAP32[$96>>2] = $94;
 $97 = $cc;
 $98 = $1;
 $99 = (($98) + 608|0);
 HEAP32[$99>>2] = $97;
 $100 = $3;
 $101 = ($100|0)>(0);
 if ($101) {
  $102 = $1;
  $103 = (($102) + 628|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = $1;
  $106 = (($105) + 444|0);
  $107 = HEAP32[$106>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $107;
  _TIFFErrorExt($104,131368,131480,$vararg_buffer6);
  $0 = 0;
  $108 = $0;
  STACKTOP = sp;return ($108|0);
 } else {
  $0 = 1;
  $108 = $0;
  STACKTOP = sp;return ($108|0);
 }
 return (0)|0;
}
function _PackBitsPreEncode($tif,$s) {
 $tif = $tif|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $s;
 $3 = (__TIFFmalloc(4)|0);
 $4 = $1;
 $5 = (($4) + 576|0);
 HEAP32[$5>>2] = $3;
 $6 = ($3|0)!=(0|0);
 if (!($6)) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $7 = $1;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1024;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $1;
  $13 = (_TIFFTileRowSize($12)|0);
  $14 = $1;
  $15 = (($14) + 576|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$16>>2] = $13;
 } else {
  $17 = $1;
  $18 = (_TIFFScanlineSize($17)|0);
  $19 = $1;
  $20 = (($19) + 576|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$21>>2] = $18;
 }
 $0 = 1;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function _PackBitsPostEncode($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 576|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return 1;
 }
 $5 = $0;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 __TIFFfree($7);
 STACKTOP = sp;return 1;
}
function _PackBitsEncode($tif,$buf,$cc,$s) {
 $tif = $tif|0;
 $buf = $buf|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $bp = 0, $ep = 0, $lastliteral = 0, $n = 0, $op = 0, $slop = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $buf;
 $3 = $cc;
 $4 = $s;
 $5 = $2;
 $bp = $5;
 $6 = $1;
 $7 = (($6) + 604|0);
 $8 = HEAP32[$7>>2]|0;
 $op = $8;
 $9 = $1;
 $10 = (($9) + 588|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 592|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) + ($14)|0);
 $ep = $15;
 $state = 0;
 $lastliteral = 0;
 L1: while(1) {
  $16 = $3;
  $17 = ($16|0)>(0);
  if (!($17)) {
   label = 50;
   break;
  }
  $18 = $bp;
  $19 = (($18) + 1|0);
  $bp = $19;
  $20 = HEAP8[$18>>0]|0;
  $21 = $20&255;
  $b = $21;
  $22 = $3;
  $23 = (($22) + -1)|0;
  $3 = $23;
  $n = 1;
  while(1) {
   $24 = $3;
   $25 = ($24|0)>(0);
   if (!($25)) {
    break;
   }
   $26 = $b;
   $27 = $bp;
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = ($26|0)==($29|0);
   if (!($30)) {
    break;
   }
   $31 = $n;
   $32 = (($31) + 1)|0;
   $n = $32;
   $33 = $3;
   $34 = (($33) + -1)|0;
   $3 = $34;
   $35 = $bp;
   $36 = (($35) + 1|0);
   $bp = $36;
  }
  while(1) {
   $37 = $op;
   $38 = (($37) + 2|0);
   $39 = $ep;
   $40 = ($38>>>0)>=($39>>>0);
   if ($40) {
    $41 = $state;
    $42 = ($41|0)==(1);
    if ($42) {
     label = 12;
    } else {
     $43 = $state;
     $44 = ($43|0)==(3);
     if ($44) {
      label = 12;
     } else {
      $78 = $op;
      $79 = $1;
      $80 = (($79) + 604|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = $78;
      $83 = $81;
      $84 = (($82) - ($83))|0;
      $85 = $1;
      $86 = (($85) + 608|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = (($87) + ($84))|0;
      HEAP32[$86>>2] = $88;
      $89 = $1;
      $90 = (_TIFFFlushData1($89)|0);
      $91 = ($90|0)!=(0);
      if (!($91)) {
       label = 19;
       break L1;
      }
      $92 = $1;
      $93 = (($92) + 604|0);
      $94 = HEAP32[$93>>2]|0;
      $op = $94;
     }
    }
    if ((label|0) == 12) {
     label = 0;
     $45 = $op;
     $46 = $lastliteral;
     $47 = $45;
     $48 = $46;
     $49 = (($47) - ($48))|0;
     $slop = $49;
     $50 = $lastliteral;
     $51 = $1;
     $52 = (($51) + 604|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $50;
     $55 = $53;
     $56 = (($54) - ($55))|0;
     $57 = $1;
     $58 = (($57) + 608|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($59) + ($56))|0;
     HEAP32[$58>>2] = $60;
     $61 = $1;
     $62 = (_TIFFFlushData1($61)|0);
     $63 = ($62|0)!=(0);
     if (!($63)) {
      label = 13;
      break L1;
     }
     $64 = $1;
     $65 = (($64) + 604|0);
     $66 = HEAP32[$65>>2]|0;
     $op = $66;
     while(1) {
      $67 = $slop;
      $68 = (($67) + -1)|0;
      $slop = $68;
      $69 = ($67|0)>(0);
      if (!($69)) {
       break;
      }
      $70 = $lastliteral;
      $71 = (($70) + 1|0);
      $lastliteral = $71;
      $72 = HEAP8[$70>>0]|0;
      $73 = $op;
      $74 = (($73) + 1|0);
      $op = $74;
      HEAP8[$73>>0] = $72;
     }
     $75 = $1;
     $76 = (($75) + 604|0);
     $77 = HEAP32[$76>>2]|0;
     $lastliteral = $77;
    }
   }
   $95 = $state;
   if ((($95|0) == 3)) {
    $185 = $n;
    $186 = ($185|0)==(1);
    if ($186) {
     $187 = $op;
     $188 = (($187) + -2|0);
     $189 = HEAP8[$188>>0]|0;
     $190 = $189&255;
     $191 = ($190|0)==(255);
     if ($191) {
      $192 = $lastliteral;
      $193 = HEAP8[$192>>0]|0;
      $194 = $193&255;
      $195 = ($194|0)<(126);
      if ($195) {
       $196 = $lastliteral;
       $197 = HEAP8[$196>>0]|0;
       $198 = $197&255;
       $199 = (($198) + 2)|0;
       $200 = $199&255;
       HEAP8[$196>>0] = $200;
       $201 = $200&255;
       $202 = ($201|0)==(127);
       $203 = $202 ? 0 : 1;
       $state = $203;
       $204 = $op;
       $205 = (($204) + -1|0);
       $206 = HEAP8[$205>>0]|0;
       $207 = $op;
       $208 = (($207) + -2|0);
       HEAP8[$208>>0] = $206;
      } else {
       label = 47;
      }
     } else {
      label = 47;
     }
    } else {
     label = 47;
    }
    if ((label|0) == 47) {
     label = 0;
     $state = 2;
    }
    continue;
   } else if ((($95|0) == 2)) {
    $156 = $n;
    $157 = ($156|0)>(1);
    if (!($157)) {
     label = 41;
     break;
    }
    $158 = $n;
    $159 = ($158|0)>(128);
    if (!($159)) {
     label = 40;
     break;
    }
    $160 = $op;
    $161 = (($160) + 1|0);
    $op = $161;
    HEAP8[$160>>0] = -127;
    $162 = $b;
    $163 = $162&255;
    $164 = $op;
    $165 = (($164) + 1|0);
    $op = $165;
    HEAP8[$164>>0] = $163;
    $166 = $n;
    $167 = (($166) - 128)|0;
    $n = $167;
    continue;
   } else if ((($95|0) == 1)) {
    $125 = $n;
    $126 = ($125|0)>(1);
    if (!($126)) {
     label = 33;
     break;
    }
    $state = 3;
    $127 = $n;
    $128 = ($127|0)>(128);
    if (!($128)) {
     label = 32;
     break;
    }
    $129 = $op;
    $130 = (($129) + 1|0);
    $op = $130;
    HEAP8[$129>>0] = -127;
    $131 = $b;
    $132 = $131&255;
    $133 = $op;
    $134 = (($133) + 1|0);
    $op = $134;
    HEAP8[$133>>0] = $132;
    $135 = $n;
    $136 = (($135) - 128)|0;
    $n = $136;
    continue;
   } else if ((($95|0) == 0)) {
    $96 = $n;
    $97 = ($96|0)>(1);
    if (!($97)) {
     label = 27;
     break;
    }
    $state = 2;
    $98 = $n;
    $99 = ($98|0)>(128);
    if (!($99)) {
     label = 26;
     break;
    }
    $100 = $op;
    $101 = (($100) + 1|0);
    $op = $101;
    HEAP8[$100>>0] = -127;
    $102 = $b;
    $103 = $102&255;
    $104 = $op;
    $105 = (($104) + 1|0);
    $op = $105;
    HEAP8[$104>>0] = $103;
    $106 = $n;
    $107 = (($106) - 128)|0;
    $n = $107;
    continue;
   } else {
    break;
   }
  }
  if ((label|0) == 26) {
   label = 0;
   $108 = $n;
   $109 = (($108) - 1)|0;
   $110 = (0 - ($109))|0;
   $111 = $110&255;
   $112 = $op;
   $113 = (($112) + 1|0);
   $op = $113;
   HEAP8[$112>>0] = $111;
   $114 = $b;
   $115 = $114&255;
   $116 = $op;
   $117 = (($116) + 1|0);
   $op = $117;
   HEAP8[$116>>0] = $115;
   label = 28;
  }
  else if ((label|0) == 27) {
   label = 0;
   $118 = $op;
   $lastliteral = $118;
   $119 = $op;
   $120 = (($119) + 1|0);
   $op = $120;
   HEAP8[$119>>0] = 0;
   $121 = $b;
   $122 = $121&255;
   $123 = $op;
   $124 = (($123) + 1|0);
   $op = $124;
   HEAP8[$123>>0] = $122;
   $state = 1;
   label = 28;
  }
  else if ((label|0) == 32) {
   label = 0;
   $137 = $n;
   $138 = (($137) - 1)|0;
   $139 = (0 - ($138))|0;
   $140 = $139&255;
   $141 = $op;
   $142 = (($141) + 1|0);
   $op = $142;
   HEAP8[$141>>0] = $140;
   $143 = $b;
   $144 = $143&255;
   $145 = $op;
   $146 = (($145) + 1|0);
   $op = $146;
   HEAP8[$145>>0] = $144;
   label = 36;
  }
  else if ((label|0) == 33) {
   label = 0;
   $147 = $lastliteral;
   $148 = HEAP8[$147>>0]|0;
   $149 = (($148) + 1)<<24>>24;
   HEAP8[$147>>0] = $149;
   $150 = $149&255;
   $151 = ($150|0)==(127);
   if ($151) {
    $state = 0;
   }
   $152 = $b;
   $153 = $152&255;
   $154 = $op;
   $155 = (($154) + 1|0);
   $op = $155;
   HEAP8[$154>>0] = $153;
   label = 36;
  }
  else if ((label|0) == 40) {
   label = 0;
   $168 = $n;
   $169 = (($168) - 1)|0;
   $170 = (0 - ($169))|0;
   $171 = $170&255;
   $172 = $op;
   $173 = (($172) + 1|0);
   $op = $173;
   HEAP8[$172>>0] = $171;
   $174 = $b;
   $175 = $174&255;
   $176 = $op;
   $177 = (($176) + 1|0);
   $op = $177;
   HEAP8[$176>>0] = $175;
   label = 42;
  }
  else if ((label|0) == 41) {
   label = 0;
   $178 = $op;
   $lastliteral = $178;
   $179 = $op;
   $180 = (($179) + 1|0);
   $op = $180;
   HEAP8[$179>>0] = 0;
   $181 = $b;
   $182 = $181&255;
   $183 = $op;
   $184 = (($183) + 1|0);
   $op = $184;
   HEAP8[$183>>0] = $182;
   $state = 1;
   label = 42;
  }
  if ((label|0) == 28) {
   label = 0;
  }
  else if ((label|0) == 36) {
   label = 0;
  }
  else if ((label|0) == 42) {
   label = 0;
  }
 }
 if ((label|0) == 13) {
  $0 = -1;
  $223 = $0;
  STACKTOP = sp;return ($223|0);
 }
 else if ((label|0) == 19) {
  $0 = -1;
  $223 = $0;
  STACKTOP = sp;return ($223|0);
 }
 else if ((label|0) == 50) {
  $209 = $op;
  $210 = $1;
  $211 = (($210) + 604|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = $209;
  $214 = $212;
  $215 = (($213) - ($214))|0;
  $216 = $1;
  $217 = (($216) + 608|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (($218) + ($215))|0;
  HEAP32[$217>>2] = $219;
  $220 = $op;
  $221 = $1;
  $222 = (($221) + 604|0);
  HEAP32[$222>>2] = $220;
  $0 = 1;
  $223 = $0;
  STACKTOP = sp;return ($223|0);
 }
 return (0)|0;
}
function _PackBitsEncodeChunk($tif,$bp,$cc,$s) {
 $tif = $tif|0;
 $bp = $bp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, $rowsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $bp;
 $3 = $cc;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $rowsize = $8;
 while(1) {
  $9 = $3;
  $10 = ($9|0)>(0);
  if (!($10)) {
   label = 8;
   break;
  }
  $11 = $rowsize;
  $chunk = $11;
  $12 = $3;
  $13 = $chunk;
  $14 = ($12|0)<($13|0);
  if ($14) {
   $15 = $3;
   $chunk = $15;
  }
  $16 = $1;
  $17 = $2;
  $18 = $chunk;
  $19 = $4;
  $20 = (_PackBitsEncode($16,$17,$18,$19)|0);
  $21 = ($20|0)<(0);
  if ($21) {
   label = 6;
   break;
  }
  $22 = $chunk;
  $23 = $2;
  $24 = (($23) + ($22)|0);
  $2 = $24;
  $25 = $chunk;
  $26 = $3;
  $27 = (($26) - ($25))|0;
  $3 = $27;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 8) {
  $0 = 1;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _TIFFPredictorInit($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $sp = $4;
 $5 = $sp;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((131520|0),(131528|0),705,(131544|0));
  // unreachable;
 }
 $7 = $1;
 $8 = (__TIFFMergeFields($7,131568,1)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $13 = $1;
  $14 = (($13) + 668|0);
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $sp;
  $18 = (($17) + 44|0);
  HEAP32[$18>>2] = $16;
  $19 = $1;
  $20 = (($19) + 668|0);
  $21 = (($20) + 4|0);
  HEAP32[$21>>2] = 153;
  $22 = $1;
  $23 = (($22) + 668|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $sp;
  $26 = (($25) + 48|0);
  HEAP32[$26>>2] = $24;
  $27 = $1;
  $28 = (($27) + 668|0);
  HEAP32[$28>>2] = 154;
  $29 = $1;
  $30 = (($29) + 668|0);
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $sp;
  $34 = (($33) + 52|0);
  HEAP32[$34>>2] = $32;
  $35 = $1;
  $36 = (($35) + 668|0);
  $37 = (($36) + 8|0);
  HEAP32[$37>>2] = 155;
  $38 = $1;
  $39 = (($38) + 508|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $sp;
  $42 = (($41) + 56|0);
  HEAP32[$42>>2] = $40;
  $43 = $1;
  $44 = (($43) + 508|0);
  HEAP32[$44>>2] = 156;
  $45 = $1;
  $46 = (($45) + 516|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $sp;
  $49 = (($48) + 60|0);
  HEAP32[$49>>2] = $47;
  $50 = $1;
  $51 = (($50) + 516|0);
  HEAP32[$51>>2] = 157;
  $52 = $sp;
  HEAP32[$52>>2] = 1;
  $53 = $sp;
  $54 = (($53) + 24|0);
  HEAP32[$54>>2] = 0;
  $55 = $sp;
  $56 = (($55) + 40|0);
  HEAP32[$56>>2] = 0;
  $0 = 1;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 } else {
  $10 = $1;
  $11 = (($10) + 628|0);
  $12 = HEAP32[$11>>2]|0;
  _TIFFErrorExt($12,131544,131608,$vararg_buffer);
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _TIFFPredictorCleanup($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $0;
 $2 = (($1) + 576|0);
 $3 = HEAP32[$2>>2]|0;
 $sp = $3;
 $4 = $sp;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $sp;
  $7 = (($6) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $0;
  $10 = (($9) + 668|0);
  $11 = (($10) + 4|0);
  HEAP32[$11>>2] = $8;
  $12 = $sp;
  $13 = (($12) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  $16 = (($15) + 668|0);
  HEAP32[$16>>2] = $14;
  $17 = $sp;
  $18 = (($17) + 52|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  $21 = (($20) + 668|0);
  $22 = (($21) + 8|0);
  HEAP32[$22>>2] = $19;
  $23 = $sp;
  $24 = (($23) + 56|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $0;
  $27 = (($26) + 508|0);
  HEAP32[$27>>2] = $25;
  $28 = $sp;
  $29 = (($28) + 60|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $0;
  $32 = (($31) + 516|0);
  HEAP32[$32>>2] = $30;
  STACKTOP = sp;return 1;
 } else {
  ___assert_fail((131520|0),(131528|0),746,(131656|0));
  // unreachable;
 }
 return (0)|0;
}
function _PredictorVGetField($tif,$tag,$ap) {
 $tif = $tif|0;
 $tag = $tag|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $cond = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $tag;
 $3 = $ap;
 $4 = $1;
 $5 = (($4) + 576|0);
 $6 = HEAP32[$5>>2]|0;
 $sp = $6;
 $7 = $sp;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((131736|0),(131528|0),668,(132640|0));
  // unreachable;
 }
 $9 = $sp;
 $10 = (($9) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((132664|0),(131528|0),669,(132640|0));
  // unreachable;
 }
 $13 = $2;
 $cond = ($13|0)==(317);
 if (!($cond)) {
  $19 = $sp;
  $20 = (($19) + 44|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  $23 = $2;
  $24 = $3;
  $25 = (FUNCTION_TABLE_iiii[$21 & 255]($22,$23,$24)|0);
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $14 = $sp;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15&65535;
 $17 = $3;
 $arglist_current = HEAP32[$17>>2]|0;
 $18 = HEAP32[$arglist_current>>2]|0;
 $arglist_next = (($arglist_current) + 4|0);
 HEAP32[$17>>2] = $arglist_next;
 HEAP16[$18>>1] = $16;
 $0 = 1;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _PredictorVSetField($tif,$tag,$ap) {
 $tif = $tif|0;
 $tag = $tag|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $cond = 0, $sp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $tag;
 $3 = $ap;
 $4 = $1;
 $5 = (($4) + 576|0);
 $6 = HEAP32[$5>>2]|0;
 $sp = $6;
 $7 = $sp;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((131736|0),(131528|0),648,(132592|0));
  // unreachable;
 }
 $9 = $sp;
 $10 = (($9) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((132616|0),(131528|0),649,(132592|0));
  // unreachable;
 }
 $13 = $2;
 $cond = ($13|0)==(317);
 if (!($cond)) {
  $24 = $sp;
  $25 = (($24) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = $2;
  $29 = $3;
  $30 = (FUNCTION_TABLE_iiii[$26 & 255]($27,$28,$29)|0);
  $0 = $30;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $14 = $3;
 $arglist_current = HEAP32[$14>>2]|0;
 $15 = HEAP32[$arglist_current>>2]|0;
 $arglist_next = (($arglist_current) + 4|0);
 HEAP32[$14>>2] = $arglist_next;
 $16 = $15&65535;
 $17 = $16&65535;
 $18 = $sp;
 HEAP32[$18>>2] = $17;
 $19 = $1;
 $20 = (($19) + 40|0);
 $21 = (($20) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 | 4;
 HEAP32[$21>>2] = $23;
 $31 = $1;
 $32 = (($31) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 | 8;
 HEAP32[$32>>2] = $34;
 $0 = 1;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _PredictorPrintDir($tif,$fd,$flags) {
 $tif = $tif|0;
 $fd = $fd|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $tif;
 $1 = $fd;
 $2 = $flags;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $sp = $5;
 $6 = $0;
 $7 = (($6) + 40|0);
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $1;
  (_fprintf(($12|0),(132488|0),($vararg_buffer|0))|0);
  $13 = $sp;
  $14 = HEAP32[$13>>2]|0;
  if ((($14|0) == 3)) {
   $17 = $1;
   (_fprintf(($17|0),(132544|0),($vararg_buffer5|0))|0);
  } else if ((($14|0) == 2)) {
   $16 = $1;
   (_fprintf(($16|0),(132512|0),($vararg_buffer3|0))|0);
  } else if ((($14|0) == 1)) {
   $15 = $1;
   (_fprintf(($15|0),(132504|0),($vararg_buffer1|0))|0);
  }
  $18 = $1;
  $19 = $sp;
  $20 = HEAP32[$19>>2]|0;
  $21 = $sp;
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $20;
  $vararg_ptr9 = (($vararg_buffer7) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $22;
  (_fprintf(($18|0),(132576|0),($vararg_buffer7|0))|0);
 }
 $23 = $sp;
 $24 = (($23) + 52|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $sp;
 $28 = (($27) + 52|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $0;
 $31 = $1;
 $32 = $2;
 FUNCTION_TABLE_viii[$29 & 255]($30,$31,$32);
 STACKTOP = sp;return;
}
function _PredictorSetupDecode($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sp = 0, $td = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $sp = $4;
 $5 = $1;
 $6 = (($5) + 40|0);
 $td = $6;
 $7 = $sp;
 $8 = (($7) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (FUNCTION_TABLE_ii[$9 & 255]($10)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $1;
  $14 = (_PredictorSetup($13)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $sp;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    $19 = $td;
    $20 = (($19) + 44|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21&65535;
    if ((($22|0) == 16)) {
     $25 = $sp;
     $26 = (($25) + 40|0);
     HEAP32[$26>>2] = 159;
    } else if ((($22|0) == 8)) {
     $23 = $sp;
     $24 = (($23) + 40|0);
     HEAP32[$24>>2] = 158;
    } else if ((($22|0) == 32)) {
     $27 = $sp;
     $28 = (($27) + 40|0);
     HEAP32[$28>>2] = 160;
    }
    $29 = $1;
    $30 = (($29) + 532|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)!=(161|0);
    if ($32) {
     $33 = $1;
     $34 = (($33) + 532|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = $sp;
     $37 = (($36) + 28|0);
     HEAP32[$37>>2] = $35;
     $38 = $1;
     $39 = (($38) + 532|0);
     HEAP32[$39>>2] = 161;
     $40 = $1;
     $41 = (($40) + 540|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $sp;
     $44 = (($43) + 32|0);
     HEAP32[$44>>2] = $42;
     $45 = $1;
     $46 = (($45) + 540|0);
     HEAP32[$46>>2] = 162;
     $47 = $1;
     $48 = (($47) + 548|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $sp;
     $51 = (($50) + 36|0);
     HEAP32[$51>>2] = $49;
     $52 = $1;
     $53 = (($52) + 548|0);
     HEAP32[$53>>2] = 162;
    }
    $54 = $1;
    $55 = (($54) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $56 & 128;
    $58 = ($57|0)!=(0);
    if ($58) {
     $59 = $sp;
     $60 = (($59) + 40|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(159|0);
     if ($62) {
      $63 = $sp;
      $64 = (($63) + 40|0);
      HEAP32[$64>>2] = 163;
      $65 = $1;
      $66 = (($65) + 652|0);
      HEAP32[$66>>2] = 15;
     } else {
      $67 = $sp;
      $68 = (($67) + 40|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(160|0);
      if ($70) {
       $71 = $sp;
       $72 = (($71) + 40|0);
       HEAP32[$72>>2] = 164;
       $73 = $1;
       $74 = (($73) + 652|0);
       HEAP32[$74>>2] = 15;
      }
     }
    }
   } else {
    $75 = $sp;
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==(3);
    if ($77) {
     $78 = $sp;
     $79 = (($78) + 40|0);
     HEAP32[$79>>2] = 165;
     $80 = $1;
     $81 = (($80) + 532|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)!=(161|0);
     if ($83) {
      $84 = $1;
      $85 = (($84) + 532|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $sp;
      $88 = (($87) + 28|0);
      HEAP32[$88>>2] = $86;
      $89 = $1;
      $90 = (($89) + 532|0);
      HEAP32[$90>>2] = 161;
      $91 = $1;
      $92 = (($91) + 540|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = $sp;
      $95 = (($94) + 32|0);
      HEAP32[$95>>2] = $93;
      $96 = $1;
      $97 = (($96) + 540|0);
      HEAP32[$97>>2] = 162;
      $98 = $1;
      $99 = (($98) + 548|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = $sp;
      $102 = (($101) + 36|0);
      HEAP32[$102>>2] = $100;
      $103 = $1;
      $104 = (($103) + 548|0);
      HEAP32[$104>>2] = 162;
     }
     $105 = $1;
     $106 = (($105) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $107 & 128;
     $109 = ($108|0)!=(0);
     if ($109) {
      $110 = $1;
      $111 = (($110) + 652|0);
      HEAP32[$111>>2] = 15;
     }
    }
   }
   $0 = 1;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  }
 }
 $0 = 0;
 $112 = $0;
 STACKTOP = sp;return ($112|0);
}
function _PredictorSetupEncode($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $sp = 0, $td = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $sp = $4;
 $5 = $1;
 $6 = (($5) + 40|0);
 $td = $6;
 $7 = $sp;
 $8 = (($7) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (FUNCTION_TABLE_ii[$9 & 255]($10)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $1;
  $14 = (_PredictorSetup($13)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $sp;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    $19 = $td;
    $20 = (($19) + 44|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21&65535;
    if ((($22|0) == 16)) {
     $25 = $sp;
     $26 = (($25) + 24|0);
     HEAP32[$26>>2] = 167;
    } else if ((($22|0) == 32)) {
     $27 = $sp;
     $28 = (($27) + 24|0);
     HEAP32[$28>>2] = 168;
    } else if ((($22|0) == 8)) {
     $23 = $sp;
     $24 = (($23) + 24|0);
     HEAP32[$24>>2] = 166;
    }
    $29 = $1;
    $30 = (($29) + 536|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)!=(169|0);
    if ($32) {
     $33 = $1;
     $34 = (($33) + 536|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = $sp;
     $37 = (($36) + 12|0);
     HEAP32[$37>>2] = $35;
     $38 = $1;
     $39 = (($38) + 536|0);
     HEAP32[$39>>2] = 169;
     $40 = $1;
     $41 = (($40) + 544|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $sp;
     $44 = (($43) + 16|0);
     HEAP32[$44>>2] = $42;
     $45 = $1;
     $46 = (($45) + 544|0);
     HEAP32[$46>>2] = 170;
     $47 = $1;
     $48 = (($47) + 552|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $sp;
     $51 = (($50) + 20|0);
     HEAP32[$51>>2] = $49;
     $52 = $1;
     $53 = (($52) + 552|0);
     HEAP32[$53>>2] = 170;
    }
   } else {
    $54 = $sp;
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)==(3);
    if ($56) {
     $57 = $sp;
     $58 = (($57) + 24|0);
     HEAP32[$58>>2] = 171;
     $59 = $1;
     $60 = (($59) + 536|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)!=(169|0);
     if ($62) {
      $63 = $1;
      $64 = (($63) + 536|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = $sp;
      $67 = (($66) + 12|0);
      HEAP32[$67>>2] = $65;
      $68 = $1;
      $69 = (($68) + 536|0);
      HEAP32[$69>>2] = 169;
      $70 = $1;
      $71 = (($70) + 544|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = $sp;
      $74 = (($73) + 16|0);
      HEAP32[$74>>2] = $72;
      $75 = $1;
      $76 = (($75) + 544|0);
      HEAP32[$76>>2] = 170;
      $77 = $1;
      $78 = (($77) + 552|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = $sp;
      $81 = (($80) + 20|0);
      HEAP32[$81>>2] = $79;
      $82 = $1;
      $83 = (($82) + 552|0);
      HEAP32[$83>>2] = 170;
     }
    }
   }
   $0 = 1;
   $84 = $0;
   STACKTOP = sp;return ($84|0);
  }
 }
 $0 = 0;
 $84 = $0;
 STACKTOP = sp;return ($84|0);
}
function _PredictorSetup($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $sp = 0, $td = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 576|0);
 $4 = HEAP32[$3>>2]|0;
 $sp = $4;
 $5 = $1;
 $6 = (($5) + 40|0);
 $td = $6;
 $7 = $sp;
 $8 = HEAP32[$7>>2]|0;
 do {
  if ((($8|0) == 1)) {
   $0 = 1;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  } else if ((($8|0) == 3)) {
   $31 = $td;
   $32 = (($31) + 46|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33&65535;
   $35 = ($34|0)!=(3);
   if (!($35)) {
    break;
   }
   $36 = $1;
   $37 = (($36) + 628|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $td;
   $40 = (($39) + 46|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41&65535;
   HEAP32[$vararg_buffer1>>2] = $42;
   _TIFFErrorExt($38,132072,132160,$vararg_buffer1);
   $0 = 0;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  } else if ((($8|0) == 2)) {
   $9 = $td;
   $10 = (($9) + 44|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = $11&65535;
   $13 = ($12|0)!=(8);
   if ($13) {
    $14 = $td;
    $15 = (($14) + 44|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = $16&65535;
    $18 = ($17|0)!=(16);
    if ($18) {
     $19 = $td;
     $20 = (($19) + 44|0);
     $21 = HEAP16[$20>>1]|0;
     $22 = $21&65535;
     $23 = ($22|0)!=(32);
     if ($23) {
      $24 = $1;
      $25 = (($24) + 628|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $td;
      $28 = (($27) + 44|0);
      $29 = HEAP16[$28>>1]|0;
      $30 = $29&65535;
      HEAP32[$vararg_buffer>>2] = $30;
      _TIFFErrorExt($26,132072,132088,$vararg_buffer);
      $0 = 0;
      $77 = $0;
      STACKTOP = sp;return ($77|0);
     }
    }
   }
  } else {
   $43 = $1;
   $44 = (($43) + 628|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $sp;
   $47 = HEAP32[$46>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $47;
   _TIFFErrorExt($45,132072,132224,$vararg_buffer4);
   $0 = 0;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  }
 } while(0);
 $48 = $td;
 $49 = (($48) + 86|0);
 $50 = HEAP16[$49>>1]|0;
 $51 = $50&65535;
 $52 = ($51|0)==(1);
 if ($52) {
  $53 = $td;
  $54 = (($53) + 58|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $59 = $56;
 } else {
  $59 = 1;
 }
 $57 = $sp;
 $58 = (($57) + 4|0);
 HEAP32[$58>>2] = $59;
 $60 = $1;
 $61 = (($60) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 & 1024;
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = $1;
  $66 = (_TIFFTileRowSize($65)|0);
  $67 = $sp;
  $68 = (($67) + 8|0);
  HEAP32[$68>>2] = $66;
 } else {
  $69 = $1;
  $70 = (_TIFFScanlineSize($69)|0);
  $71 = $sp;
  $72 = (($71) + 8|0);
  HEAP32[$72>>2] = $70;
 }
 $73 = $sp;
 $74 = (($73) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)==(0);
 if ($76) {
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 } else {
  $0 = 1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 return (0)|0;
}
function _horAcc8($tif,$cp0,$cc) {
 $tif = $tif|0;
 $cp0 = $cp0|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ca = 0, $cb = 0, $cb3 = 0, $cg = 0, $cg2 = 0;
 var $cp = 0, $cr = 0, $cr1 = 0, $i = 0, $stride = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $cp0;
 $2 = $cc;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $stride = $7;
 $8 = $1;
 $cp = $8;
 $9 = $2;
 $10 = $stride;
 $11 = (($9|0) % ($10|0))&-1;
 $12 = ($11|0)==(0);
 if (!($12)) {
  ___assert_fail((132040|0),(131528|0),248,(132480|0));
  // unreachable;
 }
 $13 = $2;
 $14 = $stride;
 $15 = ($13|0)>($14|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $stride;
 $17 = ($16|0)==(3);
 if ($17) {
  $18 = $cp;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $cr = $20;
  $21 = $cp;
  $22 = (($21) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $cg = $24;
  $25 = $cp;
  $26 = (($25) + 2|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $cb = $28;
  $29 = $2;
  $30 = (($29) - 3)|0;
  $2 = $30;
  $31 = $cp;
  $32 = (($31) + 3|0);
  $cp = $32;
  while(1) {
   $33 = $2;
   $34 = ($33|0)>(0);
   if (!($34)) {
    break;
   }
   $35 = $cp;
   $36 = HEAP8[$35>>0]|0;
   $37 = $36 << 24 >> 24;
   $38 = $cr;
   $39 = (($38) + ($37))|0;
   $cr = $39;
   $40 = $39&255;
   $41 = $cp;
   HEAP8[$41>>0] = $40;
   $42 = $cp;
   $43 = (($42) + 1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 << 24 >> 24;
   $46 = $cg;
   $47 = (($46) + ($45))|0;
   $cg = $47;
   $48 = $47&255;
   $49 = $cp;
   $50 = (($49) + 1|0);
   HEAP8[$50>>0] = $48;
   $51 = $cp;
   $52 = (($51) + 2|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53 << 24 >> 24;
   $55 = $cb;
   $56 = (($55) + ($54))|0;
   $cb = $56;
   $57 = $56&255;
   $58 = $cp;
   $59 = (($58) + 2|0);
   HEAP8[$59>>0] = $57;
   $60 = $2;
   $61 = (($60) - 3)|0;
   $2 = $61;
   $62 = $cp;
   $63 = (($62) + 3|0);
   $cp = $63;
  }
 } else {
  $64 = $stride;
  $65 = ($64|0)==(4);
  if ($65) {
   $66 = $cp;
   $67 = HEAP8[$66>>0]|0;
   $68 = $67 << 24 >> 24;
   $cr1 = $68;
   $69 = $cp;
   $70 = (($69) + 1|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71 << 24 >> 24;
   $cg2 = $72;
   $73 = $cp;
   $74 = (($73) + 2|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75 << 24 >> 24;
   $cb3 = $76;
   $77 = $cp;
   $78 = (($77) + 3|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79 << 24 >> 24;
   $ca = $80;
   $81 = $2;
   $82 = (($81) - 4)|0;
   $2 = $82;
   $83 = $cp;
   $84 = (($83) + 4|0);
   $cp = $84;
   while(1) {
    $85 = $2;
    $86 = ($85|0)>(0);
    if (!($86)) {
     break;
    }
    $87 = $cp;
    $88 = HEAP8[$87>>0]|0;
    $89 = $88 << 24 >> 24;
    $90 = $cr1;
    $91 = (($90) + ($89))|0;
    $cr1 = $91;
    $92 = $91&255;
    $93 = $cp;
    HEAP8[$93>>0] = $92;
    $94 = $cp;
    $95 = (($94) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96 << 24 >> 24;
    $98 = $cg2;
    $99 = (($98) + ($97))|0;
    $cg2 = $99;
    $100 = $99&255;
    $101 = $cp;
    $102 = (($101) + 1|0);
    HEAP8[$102>>0] = $100;
    $103 = $cp;
    $104 = (($103) + 2|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $105 << 24 >> 24;
    $107 = $cb3;
    $108 = (($107) + ($106))|0;
    $cb3 = $108;
    $109 = $108&255;
    $110 = $cp;
    $111 = (($110) + 2|0);
    HEAP8[$111>>0] = $109;
    $112 = $cp;
    $113 = (($112) + 3|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114 << 24 >> 24;
    $116 = $ca;
    $117 = (($116) + ($115))|0;
    $ca = $117;
    $118 = $117&255;
    $119 = $cp;
    $120 = (($119) + 3|0);
    HEAP8[$120>>0] = $118;
    $121 = $2;
    $122 = (($121) - 4)|0;
    $2 = $122;
    $123 = $cp;
    $124 = (($123) + 4|0);
    $cp = $124;
   }
  } else {
   $125 = $stride;
   $126 = $2;
   $127 = (($126) - ($125))|0;
   $2 = $127;
   while(1) {
    $128 = $stride;
    switch ($128|0) {
    case 0:  {
     break;
    }
    case 1:  {
     label = 24;
     break;
    }
    case 4:  {
     label = 21;
     break;
    }
    case 3:  {
     label = 22;
     break;
    }
    case 2:  {
     label = 23;
     break;
    }
    default: {
     $129 = $stride;
     $130 = (($129) - 4)|0;
     $i = $130;
     while(1) {
      $131 = $i;
      $132 = ($131|0)>(0);
      if (!($132)) {
       break;
      }
      $133 = $stride;
      $134 = $cp;
      $135 = (($134) + ($133)|0);
      $136 = HEAP8[$135>>0]|0;
      $137 = $136 << 24 >> 24;
      $138 = $cp;
      $139 = HEAP8[$138>>0]|0;
      $140 = $139 << 24 >> 24;
      $141 = (($137) + ($140))|0;
      $142 = $141&255;
      $143 = $stride;
      $144 = $cp;
      $145 = (($144) + ($143)|0);
      HEAP8[$145>>0] = $142;
      $146 = $cp;
      $147 = (($146) + 1|0);
      $cp = $147;
      $148 = $i;
      $149 = (($148) + -1)|0;
      $i = $149;
     }
     label = 21;
    }
    }
    if ((label|0) == 21) {
     label = 0;
     $150 = $stride;
     $151 = $cp;
     $152 = (($151) + ($150)|0);
     $153 = HEAP8[$152>>0]|0;
     $154 = $153 << 24 >> 24;
     $155 = $cp;
     $156 = HEAP8[$155>>0]|0;
     $157 = $156 << 24 >> 24;
     $158 = (($154) + ($157))|0;
     $159 = $158&255;
     $160 = $stride;
     $161 = $cp;
     $162 = (($161) + ($160)|0);
     HEAP8[$162>>0] = $159;
     $163 = $cp;
     $164 = (($163) + 1|0);
     $cp = $164;
     label = 22;
    }
    if ((label|0) == 22) {
     label = 0;
     $165 = $stride;
     $166 = $cp;
     $167 = (($166) + ($165)|0);
     $168 = HEAP8[$167>>0]|0;
     $169 = $168 << 24 >> 24;
     $170 = $cp;
     $171 = HEAP8[$170>>0]|0;
     $172 = $171 << 24 >> 24;
     $173 = (($169) + ($172))|0;
     $174 = $173&255;
     $175 = $stride;
     $176 = $cp;
     $177 = (($176) + ($175)|0);
     HEAP8[$177>>0] = $174;
     $178 = $cp;
     $179 = (($178) + 1|0);
     $cp = $179;
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $180 = $stride;
     $181 = $cp;
     $182 = (($181) + ($180)|0);
     $183 = HEAP8[$182>>0]|0;
     $184 = $183 << 24 >> 24;
     $185 = $cp;
     $186 = HEAP8[$185>>0]|0;
     $187 = $186 << 24 >> 24;
     $188 = (($184) + ($187))|0;
     $189 = $188&255;
     $190 = $stride;
     $191 = $cp;
     $192 = (($191) + ($190)|0);
     HEAP8[$192>>0] = $189;
     $193 = $cp;
     $194 = (($193) + 1|0);
     $cp = $194;
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $195 = $stride;
     $196 = $cp;
     $197 = (($196) + ($195)|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = $198 << 24 >> 24;
     $200 = $cp;
     $201 = HEAP8[$200>>0]|0;
     $202 = $201 << 24 >> 24;
     $203 = (($199) + ($202))|0;
     $204 = $203&255;
     $205 = $stride;
     $206 = $cp;
     $207 = (($206) + ($205)|0);
     HEAP8[$207>>0] = $204;
     $208 = $cp;
     $209 = (($208) + 1|0);
     $cp = $209;
    }
    $210 = $stride;
    $211 = $2;
    $212 = (($211) - ($210))|0;
    $2 = $212;
    $213 = $2;
    $214 = ($213|0)>(0);
    if (!($214)) {
     break;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _horAcc16($tif,$cp0,$cc) {
 $tif = $tif|0;
 $cp0 = $cp0|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $i = 0, $stride = 0, $wc = 0, $wp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $cp0;
 $2 = $cc;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $stride = $7;
 $8 = $1;
 $wp = $8;
 $9 = $2;
 $10 = (($9|0) / 2)&-1;
 $wc = $10;
 $11 = $2;
 $12 = $stride;
 $13 = $12<<1;
 $14 = (($11|0) % ($13|0))&-1;
 $15 = ($14|0)==(0);
 if (!($15)) {
  ___assert_fail((132000|0),(131528|0),318,(132464|0));
  // unreachable;
 }
 $16 = $wc;
 $17 = $stride;
 $18 = ($16|0)>($17|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $stride;
 $20 = $wc;
 $21 = (($20) - ($19))|0;
 $wc = $21;
 while(1) {
  $22 = $stride;
  switch ($22|0) {
  case 3:  {
   label = 12;
   break;
  }
  case 4:  {
   label = 11;
   break;
  }
  case 0:  {
   break;
  }
  case 1:  {
   label = 14;
   break;
  }
  case 2:  {
   label = 13;
   break;
  }
  default: {
   $23 = $stride;
   $24 = (($23) - 4)|0;
   $i = $24;
   while(1) {
    $25 = $i;
    $26 = ($25|0)>(0);
    if (!($26)) {
     break;
    }
    $27 = $wp;
    $28 = HEAP16[$27>>1]|0;
    $29 = $28&65535;
    $30 = $stride;
    $31 = $wp;
    $32 = (($31) + ($30<<1)|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = $33&65535;
    $35 = (($34) + ($29))|0;
    $36 = $35&65535;
    HEAP16[$32>>1] = $36;
    $37 = $wp;
    $38 = (($37) + 2|0);
    $wp = $38;
    $39 = $i;
    $40 = (($39) + -1)|0;
    $i = $40;
   }
   label = 11;
  }
  }
  if ((label|0) == 11) {
   label = 0;
   $41 = $wp;
   $42 = HEAP16[$41>>1]|0;
   $43 = $42&65535;
   $44 = $stride;
   $45 = $wp;
   $46 = (($45) + ($44<<1)|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47&65535;
   $49 = (($48) + ($43))|0;
   $50 = $49&65535;
   HEAP16[$46>>1] = $50;
   $51 = $wp;
   $52 = (($51) + 2|0);
   $wp = $52;
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $53 = $wp;
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   $56 = $stride;
   $57 = $wp;
   $58 = (($57) + ($56<<1)|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59&65535;
   $61 = (($60) + ($55))|0;
   $62 = $61&65535;
   HEAP16[$58>>1] = $62;
   $63 = $wp;
   $64 = (($63) + 2|0);
   $wp = $64;
   label = 13;
  }
  if ((label|0) == 13) {
   label = 0;
   $65 = $wp;
   $66 = HEAP16[$65>>1]|0;
   $67 = $66&65535;
   $68 = $stride;
   $69 = $wp;
   $70 = (($69) + ($68<<1)|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71&65535;
   $73 = (($72) + ($67))|0;
   $74 = $73&65535;
   HEAP16[$70>>1] = $74;
   $75 = $wp;
   $76 = (($75) + 2|0);
   $wp = $76;
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   $77 = $wp;
   $78 = HEAP16[$77>>1]|0;
   $79 = $78&65535;
   $80 = $stride;
   $81 = $wp;
   $82 = (($81) + ($80<<1)|0);
   $83 = HEAP16[$82>>1]|0;
   $84 = $83&65535;
   $85 = (($84) + ($79))|0;
   $86 = $85&65535;
   HEAP16[$82>>1] = $86;
   $87 = $wp;
   $88 = (($87) + 2|0);
   $wp = $88;
  }
  $89 = $stride;
  $90 = $wc;
  $91 = (($90) - ($89))|0;
  $wc = $91;
  $92 = $wc;
  $93 = ($92|0)>(0);
  if (!($93)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _horAcc32($tif,$cp0,$cc) {
 $tif = $tif|0;
 $cp0 = $cp0|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $i = 0;
 var $stride = 0, $wc = 0, $wp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $cp0;
 $2 = $cc;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $stride = $7;
 $8 = $1;
 $wp = $8;
 $9 = $2;
 $10 = (($9|0) / 4)&-1;
 $wc = $10;
 $11 = $2;
 $12 = $stride;
 $13 = $12<<2;
 $14 = (($11|0) % ($13|0))&-1;
 $15 = ($14|0)==(0);
 if (!($15)) {
  ___assert_fail((131960|0),(131528|0),355,(132448|0));
  // unreachable;
 }
 $16 = $wc;
 $17 = $stride;
 $18 = ($16|0)>($17|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $stride;
 $20 = $wc;
 $21 = (($20) - ($19))|0;
 $wc = $21;
 while(1) {
  $22 = $stride;
  switch ($22|0) {
  case 1:  {
   label = 14;
   break;
  }
  case 2:  {
   label = 13;
   break;
  }
  case 0:  {
   break;
  }
  case 4:  {
   label = 11;
   break;
  }
  case 3:  {
   label = 12;
   break;
  }
  default: {
   $23 = $stride;
   $24 = (($23) - 4)|0;
   $i = $24;
   while(1) {
    $25 = $i;
    $26 = ($25|0)>(0);
    if (!($26)) {
     break;
    }
    $27 = $wp;
    $28 = HEAP32[$27>>2]|0;
    $29 = $stride;
    $30 = $wp;
    $31 = (($30) + ($29<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + ($28))|0;
    HEAP32[$31>>2] = $33;
    $34 = $wp;
    $35 = (($34) + 4|0);
    $wp = $35;
    $36 = $i;
    $37 = (($36) + -1)|0;
    $i = $37;
   }
   label = 11;
  }
  }
  if ((label|0) == 11) {
   label = 0;
   $38 = $wp;
   $39 = HEAP32[$38>>2]|0;
   $40 = $stride;
   $41 = $wp;
   $42 = (($41) + ($40<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($39))|0;
   HEAP32[$42>>2] = $44;
   $45 = $wp;
   $46 = (($45) + 4|0);
   $wp = $46;
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $47 = $wp;
   $48 = HEAP32[$47>>2]|0;
   $49 = $stride;
   $50 = $wp;
   $51 = (($50) + ($49<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + ($48))|0;
   HEAP32[$51>>2] = $53;
   $54 = $wp;
   $55 = (($54) + 4|0);
   $wp = $55;
   label = 13;
  }
  if ((label|0) == 13) {
   label = 0;
   $56 = $wp;
   $57 = HEAP32[$56>>2]|0;
   $58 = $stride;
   $59 = $wp;
   $60 = (($59) + ($58<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + ($57))|0;
   HEAP32[$60>>2] = $62;
   $63 = $wp;
   $64 = (($63) + 4|0);
   $wp = $64;
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   $65 = $wp;
   $66 = HEAP32[$65>>2]|0;
   $67 = $stride;
   $68 = $wp;
   $69 = (($68) + ($67<<2)|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + ($66))|0;
   HEAP32[$69>>2] = $71;
   $72 = $wp;
   $73 = (($72) + 4|0);
   $wp = $73;
  }
  $74 = $stride;
  $75 = $wc;
  $76 = (($75) - ($74))|0;
  $wc = $76;
  $77 = $wc;
  $78 = ($77|0)>(0);
  if (!($78)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _PredictorDecodeRow($tif,$op0,$occ0,$s) {
 $tif = $tif|0;
 $op0 = $op0|0;
 $occ0 = $occ0|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $op0;
 $3 = $occ0;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $sp;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((131736|0),(131528|0),413,(132400|0));
  // unreachable;
 }
 $10 = $sp;
 $11 = (($10) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((132424|0),(131528|0),414,(132400|0));
  // unreachable;
 }
 $14 = $sp;
 $15 = (($14) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((132376|0),(131528|0),415,(132400|0));
  // unreachable;
 }
 $18 = $sp;
 $19 = (($18) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $1;
 $22 = $2;
 $23 = $3;
 $24 = $4;
 $25 = (FUNCTION_TABLE_iiiii[$20 & 255]($21,$22,$23,$24)|0);
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $sp;
  $28 = (($27) + 40|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $1;
  $31 = $2;
  $32 = $3;
  FUNCTION_TABLE_viii[$29 & 255]($30,$31,$32);
  $0 = 1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 } else {
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _PredictorDecodeTile($tif,$op0,$occ0,$s) {
 $tif = $tif|0;
 $op0 = $op0|0;
 $occ0 = $occ0|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rowsize = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tif;
 $2 = $op0;
 $3 = $occ0;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $sp;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((131736|0),(131528|0),436,(132304|0));
  // unreachable;
 }
 $10 = $sp;
 $11 = (($10) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((132328|0),(131528|0),437,(132304|0));
  // unreachable;
 }
 $14 = $sp;
 $15 = (($14) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 $21 = (FUNCTION_TABLE_iiiii[$16 & 255]($17,$18,$19,$20)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $0 = 0;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $23 = $sp;
 $24 = (($23) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $rowsize = $25;
 $26 = $rowsize;
 $27 = ($26|0)>(0);
 if (!($27)) {
  ___assert_fail((131872|0),(131528|0),441,(132304|0));
  // unreachable;
 }
 $28 = $3;
 $29 = $rowsize;
 $30 = (($28|0) % ($29|0))&-1;
 $31 = ($30|0)==(0);
 if (!($31)) {
  ___assert_fail((132352|0),(131528|0),442,(132304|0));
  // unreachable;
 }
 $32 = $sp;
 $33 = (($32) + 40|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  ___assert_fail((132376|0),(131528|0),443,(132304|0));
  // unreachable;
 }
 while(1) {
  $36 = $3;
  $37 = ($36|0)>(0);
  if (!($37)) {
   break;
  }
  $38 = $sp;
  $39 = (($38) + 40|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $1;
  $42 = $2;
  $43 = $rowsize;
  FUNCTION_TABLE_viii[$40 & 255]($41,$42,$43);
  $44 = $rowsize;
  $45 = $3;
  $46 = (($45) - ($44))|0;
  $3 = $46;
  $47 = $rowsize;
  $48 = $2;
  $49 = (($48) + ($47)|0);
  $2 = $49;
 }
 $0 = 1;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _swabHorAcc16($tif,$cp0,$cc) {
 $tif = $tif|0;
 $cp0 = $cp0|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $i = 0, $stride = 0, $wc = 0, $wp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $cp0;
 $2 = $cc;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $stride = $7;
 $8 = $1;
 $wp = $8;
 $9 = $2;
 $10 = (($9|0) / 2)&-1;
 $wc = $10;
 $11 = $2;
 $12 = $stride;
 $13 = $12<<1;
 $14 = (($11|0) % ($13|0))&-1;
 $15 = ($14|0)==(0);
 if (!($15)) {
  ___assert_fail((132000|0),(131528|0),299,(132288|0));
  // unreachable;
 }
 $16 = $wc;
 $17 = $stride;
 $18 = ($16|0)>($17|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $wp;
 $20 = $wc;
 _TIFFSwabArrayOfShort($19,$20);
 $21 = $stride;
 $22 = $wc;
 $23 = (($22) - ($21))|0;
 $wc = $23;
 while(1) {
  $24 = $stride;
  switch ($24|0) {
  case 4:  {
   label = 11;
   break;
  }
  case 3:  {
   label = 12;
   break;
  }
  case 1:  {
   label = 14;
   break;
  }
  case 0:  {
   break;
  }
  case 2:  {
   label = 13;
   break;
  }
  default: {
   $25 = $stride;
   $26 = (($25) - 4)|0;
   $i = $26;
   while(1) {
    $27 = $i;
    $28 = ($27|0)>(0);
    if (!($28)) {
     break;
    }
    $29 = $wp;
    $30 = HEAP16[$29>>1]|0;
    $31 = $30&65535;
    $32 = $stride;
    $33 = $wp;
    $34 = (($33) + ($32<<1)|0);
    $35 = HEAP16[$34>>1]|0;
    $36 = $35&65535;
    $37 = (($36) + ($31))|0;
    $38 = $37&65535;
    HEAP16[$34>>1] = $38;
    $39 = $wp;
    $40 = (($39) + 2|0);
    $wp = $40;
    $41 = $i;
    $42 = (($41) + -1)|0;
    $i = $42;
   }
   label = 11;
  }
  }
  if ((label|0) == 11) {
   label = 0;
   $43 = $wp;
   $44 = HEAP16[$43>>1]|0;
   $45 = $44&65535;
   $46 = $stride;
   $47 = $wp;
   $48 = (($47) + ($46<<1)|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = $49&65535;
   $51 = (($50) + ($45))|0;
   $52 = $51&65535;
   HEAP16[$48>>1] = $52;
   $53 = $wp;
   $54 = (($53) + 2|0);
   $wp = $54;
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $55 = $wp;
   $56 = HEAP16[$55>>1]|0;
   $57 = $56&65535;
   $58 = $stride;
   $59 = $wp;
   $60 = (($59) + ($58<<1)|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   $63 = (($62) + ($57))|0;
   $64 = $63&65535;
   HEAP16[$60>>1] = $64;
   $65 = $wp;
   $66 = (($65) + 2|0);
   $wp = $66;
   label = 13;
  }
  if ((label|0) == 13) {
   label = 0;
   $67 = $wp;
   $68 = HEAP16[$67>>1]|0;
   $69 = $68&65535;
   $70 = $stride;
   $71 = $wp;
   $72 = (($71) + ($70<<1)|0);
   $73 = HEAP16[$72>>1]|0;
   $74 = $73&65535;
   $75 = (($74) + ($69))|0;
   $76 = $75&65535;
   HEAP16[$72>>1] = $76;
   $77 = $wp;
   $78 = (($77) + 2|0);
   $wp = $78;
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   $79 = $wp;
   $80 = HEAP16[$79>>1]|0;
   $81 = $80&65535;
   $82 = $stride;
   $83 = $wp;
   $84 = (($83) + ($82<<1)|0);
   $85 = HEAP16[$84>>1]|0;
   $86 = $85&65535;
   $87 = (($86) + ($81))|0;
   $88 = $87&65535;
   HEAP16[$84>>1] = $88;
   $89 = $wp;
   $90 = (($89) + 2|0);
   $wp = $90;
  }
  $91 = $stride;
  $92 = $wc;
  $93 = (($92) - ($91))|0;
  $wc = $93;
  $94 = $wc;
  $95 = ($94|0)>(0);
  if (!($95)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _swabHorAcc32($tif,$cp0,$cc) {
 $tif = $tif|0;
 $cp0 = $cp0|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $i = 0, $stride = 0, $wc = 0, $wp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $cp0;
 $2 = $cc;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $stride = $7;
 $8 = $1;
 $wp = $8;
 $9 = $2;
 $10 = (($9|0) / 4)&-1;
 $wc = $10;
 $11 = $2;
 $12 = $stride;
 $13 = $12<<2;
 $14 = (($11|0) % ($13|0))&-1;
 $15 = ($14|0)==(0);
 if (!($15)) {
  ___assert_fail((131960|0),(131528|0),336,(132272|0));
  // unreachable;
 }
 $16 = $wc;
 $17 = $stride;
 $18 = ($16|0)>($17|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $wp;
 $20 = $wc;
 _TIFFSwabArrayOfLong($19,$20);
 $21 = $stride;
 $22 = $wc;
 $23 = (($22) - ($21))|0;
 $wc = $23;
 while(1) {
  $24 = $stride;
  switch ($24|0) {
  case 2:  {
   label = 13;
   break;
  }
  case 1:  {
   label = 14;
   break;
  }
  case 3:  {
   label = 12;
   break;
  }
  case 4:  {
   label = 11;
   break;
  }
  case 0:  {
   break;
  }
  default: {
   $25 = $stride;
   $26 = (($25) - 4)|0;
   $i = $26;
   while(1) {
    $27 = $i;
    $28 = ($27|0)>(0);
    if (!($28)) {
     break;
    }
    $29 = $wp;
    $30 = HEAP32[$29>>2]|0;
    $31 = $stride;
    $32 = $wp;
    $33 = (($32) + ($31<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + ($30))|0;
    HEAP32[$33>>2] = $35;
    $36 = $wp;
    $37 = (($36) + 4|0);
    $wp = $37;
    $38 = $i;
    $39 = (($38) + -1)|0;
    $i = $39;
   }
   label = 11;
  }
  }
  if ((label|0) == 11) {
   label = 0;
   $40 = $wp;
   $41 = HEAP32[$40>>2]|0;
   $42 = $stride;
   $43 = $wp;
   $44 = (($43) + ($42<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($41))|0;
   HEAP32[$44>>2] = $46;
   $47 = $wp;
   $48 = (($47) + 4|0);
   $wp = $48;
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $49 = $wp;
   $50 = HEAP32[$49>>2]|0;
   $51 = $stride;
   $52 = $wp;
   $53 = (($52) + ($51<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + ($50))|0;
   HEAP32[$53>>2] = $55;
   $56 = $wp;
   $57 = (($56) + 4|0);
   $wp = $57;
   label = 13;
  }
  if ((label|0) == 13) {
   label = 0;
   $58 = $wp;
   $59 = HEAP32[$58>>2]|0;
   $60 = $stride;
   $61 = $wp;
   $62 = (($61) + ($60<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($59))|0;
   HEAP32[$62>>2] = $64;
   $65 = $wp;
   $66 = (($65) + 4|0);
   $wp = $66;
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   $67 = $wp;
   $68 = HEAP32[$67>>2]|0;
   $69 = $stride;
   $70 = $wp;
   $71 = (($70) + ($69<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + ($68))|0;
   HEAP32[$71>>2] = $73;
   $74 = $wp;
   $75 = (($74) + 4|0);
   $wp = $75;
  }
  $76 = $stride;
  $77 = $wc;
  $78 = (($77) - ($76))|0;
  $wc = $78;
  $79 = $wc;
  $80 = ($79|0)>(0);
  if (!($80)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _fpAcc($tif,$cp0,$cc) {
 $tif = $tif|0;
 $cp0 = $cp0|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bps = 0, $byte = 0, $count = 0, $cp = 0, $i = 0;
 var $stride = 0, $tmp = 0, $wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $cp0;
 $2 = $cc;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $stride = $7;
 $8 = $0;
 $9 = (($8) + 40|0);
 $10 = (($9) + 44|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($12|0) / 8)&-1;
 $bps = $13;
 $14 = $2;
 $15 = $bps;
 $16 = (($14>>>0) / ($15>>>0))&-1;
 $wc = $16;
 $17 = $2;
 $count = $17;
 $18 = $1;
 $cp = $18;
 $19 = $2;
 $20 = (__TIFFmalloc($19)|0);
 $tmp = $20;
 $21 = $2;
 $22 = $bps;
 $23 = $stride;
 $24 = Math_imul($22, $23)|0;
 $25 = (($21>>>0) % ($24>>>0))&-1;
 $26 = ($25|0)==(0);
 if (!($26)) {
  ___assert_fail((131680|0),(131528|0),379,(132264|0));
  // unreachable;
 }
 $27 = $tmp;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $29 = $count;
  $30 = $stride;
  $31 = ($29|0)>($30|0);
  if (!($31)) {
   break;
  }
  $32 = $stride;
  switch ($32|0) {
  case 3:  {
   label = 14;
   break;
  }
  case 2:  {
   label = 15;
   break;
  }
  case 1:  {
   label = 16;
   break;
  }
  case 0:  {
   break;
  }
  case 4:  {
   label = 13;
   break;
  }
  default: {
   $33 = $stride;
   $34 = (($33) - 4)|0;
   $i = $34;
   while(1) {
    $35 = $i;
    $36 = ($35|0)>(0);
    if (!($36)) {
     break;
    }
    $37 = $cp;
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = $stride;
    $41 = $cp;
    $42 = (($41) + ($40)|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = (($44) + ($39))|0;
    $46 = $45&255;
    HEAP8[$42>>0] = $46;
    $47 = $cp;
    $48 = (($47) + 1|0);
    $cp = $48;
    $49 = $i;
    $50 = (($49) + -1)|0;
    $i = $50;
   }
   label = 13;
  }
  }
  if ((label|0) == 13) {
   label = 0;
   $51 = $cp;
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $stride;
   $55 = $cp;
   $56 = (($55) + ($54)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = (($58) + ($53))|0;
   $60 = $59&255;
   HEAP8[$56>>0] = $60;
   $61 = $cp;
   $62 = (($61) + 1|0);
   $cp = $62;
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   $63 = $cp;
   $64 = HEAP8[$63>>0]|0;
   $65 = $64&255;
   $66 = $stride;
   $67 = $cp;
   $68 = (($67) + ($66)|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = (($70) + ($65))|0;
   $72 = $71&255;
   HEAP8[$68>>0] = $72;
   $73 = $cp;
   $74 = (($73) + 1|0);
   $cp = $74;
   label = 15;
  }
  if ((label|0) == 15) {
   label = 0;
   $75 = $cp;
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = $stride;
   $79 = $cp;
   $80 = (($79) + ($78)|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = (($82) + ($77))|0;
   $84 = $83&255;
   HEAP8[$80>>0] = $84;
   $85 = $cp;
   $86 = (($85) + 1|0);
   $cp = $86;
   label = 16;
  }
  if ((label|0) == 16) {
   label = 0;
   $87 = $cp;
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $stride;
   $91 = $cp;
   $92 = (($91) + ($90)|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = (($94) + ($89))|0;
   $96 = $95&255;
   HEAP8[$92>>0] = $96;
   $97 = $cp;
   $98 = (($97) + 1|0);
   $cp = $98;
  }
  $99 = $stride;
  $100 = $count;
  $101 = (($100) - ($99))|0;
  $count = $101;
 }
 $102 = $tmp;
 $103 = $1;
 $104 = $2;
 __TIFFmemcpy($102,$103,$104);
 $105 = $1;
 $cp = $105;
 $count = 0;
 while(1) {
  $106 = $count;
  $107 = $wc;
  $108 = ($106|0)<($107|0);
  if (!($108)) {
   break;
  }
  $byte = 0;
  while(1) {
   $109 = $byte;
   $110 = $bps;
   $111 = ($109>>>0)<($110>>>0);
   if (!($111)) {
    break;
   }
   $112 = $bps;
   $113 = $byte;
   $114 = (($112) - ($113))|0;
   $115 = (($114) - 1)|0;
   $116 = $wc;
   $117 = Math_imul($115, $116)|0;
   $118 = $count;
   $119 = (($117) + ($118))|0;
   $120 = $tmp;
   $121 = (($120) + ($119)|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $bps;
   $124 = $count;
   $125 = Math_imul($123, $124)|0;
   $126 = $byte;
   $127 = (($125) + ($126))|0;
   $128 = $cp;
   $129 = (($128) + ($127)|0);
   HEAP8[$129>>0] = $122;
   $130 = $byte;
   $131 = (($130) + 1)|0;
   $byte = $131;
  }
  $132 = $count;
  $133 = (($132) + 1)|0;
  $count = $133;
 }
 $134 = $tmp;
 __TIFFfree($134);
 STACKTOP = sp;return;
}
function _horDiff8($tif,$cp0,$cc) {
 $tif = $tif|0;
 $cp0 = $cp0|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a1 = 0, $a2 = 0, $b1 = 0, $b13 = 0, $b2 = 0, $b26 = 0, $cp = 0, $g1 = 0;
 var $g12 = 0, $g2 = 0, $g25 = 0, $i = 0, $r1 = 0, $r11 = 0, $r2 = 0, $r24 = 0, $sp = 0, $stride = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $cp0;
 $2 = $cc;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $sp = $5;
 $6 = $sp;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $stride = $8;
 $9 = $1;
 $cp = $9;
 $10 = $2;
 $11 = $stride;
 $12 = (($10|0) % ($11|0))&-1;
 $13 = ($12|0)==(0);
 if (!($13)) {
  ___assert_fail((132040|0),(131528|0),461,(132056|0));
  // unreachable;
 }
 $14 = $2;
 $15 = $stride;
 $16 = ($14|0)>($15|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $stride;
 $18 = $2;
 $19 = (($18) - ($17))|0;
 $2 = $19;
 $20 = $stride;
 $21 = ($20|0)==(3);
 if ($21) {
  $22 = $cp;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $r2 = $24;
  $25 = $cp;
  $26 = (($25) + 1|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $g2 = $28;
  $29 = $cp;
  $30 = (($29) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $b2 = $32;
  while(1) {
   $33 = $cp;
   $34 = (($33) + 3|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 << 24 >> 24;
   $r1 = $36;
   $37 = $r1;
   $38 = $r2;
   $39 = (($37) - ($38))|0;
   $40 = $39&255;
   $41 = $cp;
   $42 = (($41) + 3|0);
   HEAP8[$42>>0] = $40;
   $43 = $r1;
   $r2 = $43;
   $44 = $cp;
   $45 = (($44) + 4|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46 << 24 >> 24;
   $g1 = $47;
   $48 = $g1;
   $49 = $g2;
   $50 = (($48) - ($49))|0;
   $51 = $50&255;
   $52 = $cp;
   $53 = (($52) + 4|0);
   HEAP8[$53>>0] = $51;
   $54 = $g1;
   $g2 = $54;
   $55 = $cp;
   $56 = (($55) + 5|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57 << 24 >> 24;
   $b1 = $58;
   $59 = $b1;
   $60 = $b2;
   $61 = (($59) - ($60))|0;
   $62 = $61&255;
   $63 = $cp;
   $64 = (($63) + 5|0);
   HEAP8[$64>>0] = $62;
   $65 = $b1;
   $b2 = $65;
   $66 = $cp;
   $67 = (($66) + 3|0);
   $cp = $67;
   $68 = $2;
   $69 = (($68) - 3)|0;
   $2 = $69;
   $70 = ($69|0)>(0);
   if (!($70)) {
    break;
   }
  }
 } else {
  $71 = $stride;
  $72 = ($71|0)==(4);
  if ($72) {
   $73 = $cp;
   $74 = HEAP8[$73>>0]|0;
   $75 = $74 << 24 >> 24;
   $r24 = $75;
   $76 = $cp;
   $77 = (($76) + 1|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78 << 24 >> 24;
   $g25 = $79;
   $80 = $cp;
   $81 = (($80) + 2|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82 << 24 >> 24;
   $b26 = $83;
   $84 = $cp;
   $85 = (($84) + 3|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86 << 24 >> 24;
   $a2 = $87;
   while(1) {
    $88 = $cp;
    $89 = (($88) + 4|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90 << 24 >> 24;
    $r11 = $91;
    $92 = $r11;
    $93 = $r24;
    $94 = (($92) - ($93))|0;
    $95 = $94&255;
    $96 = $cp;
    $97 = (($96) + 4|0);
    HEAP8[$97>>0] = $95;
    $98 = $r11;
    $r24 = $98;
    $99 = $cp;
    $100 = (($99) + 5|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101 << 24 >> 24;
    $g12 = $102;
    $103 = $g12;
    $104 = $g25;
    $105 = (($103) - ($104))|0;
    $106 = $105&255;
    $107 = $cp;
    $108 = (($107) + 5|0);
    HEAP8[$108>>0] = $106;
    $109 = $g12;
    $g25 = $109;
    $110 = $cp;
    $111 = (($110) + 6|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = $112 << 24 >> 24;
    $b13 = $113;
    $114 = $b13;
    $115 = $b26;
    $116 = (($114) - ($115))|0;
    $117 = $116&255;
    $118 = $cp;
    $119 = (($118) + 6|0);
    HEAP8[$119>>0] = $117;
    $120 = $b13;
    $b26 = $120;
    $121 = $cp;
    $122 = (($121) + 7|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123 << 24 >> 24;
    $a1 = $124;
    $125 = $a1;
    $126 = $a2;
    $127 = (($125) - ($126))|0;
    $128 = $127&255;
    $129 = $cp;
    $130 = (($129) + 7|0);
    HEAP8[$130>>0] = $128;
    $131 = $a1;
    $a2 = $131;
    $132 = $cp;
    $133 = (($132) + 4|0);
    $cp = $133;
    $134 = $2;
    $135 = (($134) - 4)|0;
    $2 = $135;
    $136 = ($135|0)>(0);
    if (!($136)) {
     break;
    }
   }
  } else {
   $137 = $2;
   $138 = (($137) - 1)|0;
   $139 = $cp;
   $140 = (($139) + ($138)|0);
   $cp = $140;
   while(1) {
    $141 = $stride;
    switch ($141|0) {
    case 1:  {
     label = 24;
     break;
    }
    case 0:  {
     break;
    }
    case 4:  {
     label = 21;
     break;
    }
    case 2:  {
     label = 23;
     break;
    }
    case 3:  {
     label = 22;
     break;
    }
    default: {
     $142 = $stride;
     $143 = (($142) - 4)|0;
     $i = $143;
     while(1) {
      $144 = $i;
      $145 = ($144|0)>(0);
      if (!($145)) {
       break;
      }
      $146 = $cp;
      $147 = HEAP8[$146>>0]|0;
      $148 = $147 << 24 >> 24;
      $149 = $stride;
      $150 = $cp;
      $151 = (($150) + ($149)|0);
      $152 = HEAP8[$151>>0]|0;
      $153 = $152 << 24 >> 24;
      $154 = (($153) - ($148))|0;
      $155 = $154&255;
      HEAP8[$151>>0] = $155;
      $156 = $cp;
      $157 = (($156) + -1|0);
      $cp = $157;
      $158 = $i;
      $159 = (($158) + -1)|0;
      $i = $159;
     }
     label = 21;
    }
    }
    if ((label|0) == 21) {
     label = 0;
     $160 = $cp;
     $161 = HEAP8[$160>>0]|0;
     $162 = $161 << 24 >> 24;
     $163 = $stride;
     $164 = $cp;
     $165 = (($164) + ($163)|0);
     $166 = HEAP8[$165>>0]|0;
     $167 = $166 << 24 >> 24;
     $168 = (($167) - ($162))|0;
     $169 = $168&255;
     HEAP8[$165>>0] = $169;
     $170 = $cp;
     $171 = (($170) + -1|0);
     $cp = $171;
     label = 22;
    }
    if ((label|0) == 22) {
     label = 0;
     $172 = $cp;
     $173 = HEAP8[$172>>0]|0;
     $174 = $173 << 24 >> 24;
     $175 = $stride;
     $176 = $cp;
     $177 = (($176) + ($175)|0);
     $178 = HEAP8[$177>>0]|0;
     $179 = $178 << 24 >> 24;
     $180 = (($179) - ($174))|0;
     $181 = $180&255;
     HEAP8[$177>>0] = $181;
     $182 = $cp;
     $183 = (($182) + -1|0);
     $cp = $183;
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $184 = $cp;
     $185 = HEAP8[$184>>0]|0;
     $186 = $185 << 24 >> 24;
     $187 = $stride;
     $188 = $cp;
     $189 = (($188) + ($187)|0);
     $190 = HEAP8[$189>>0]|0;
     $191 = $190 << 24 >> 24;
     $192 = (($191) - ($186))|0;
     $193 = $192&255;
     HEAP8[$189>>0] = $193;
     $194 = $cp;
     $195 = (($194) + -1|0);
     $cp = $195;
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $196 = $cp;
     $197 = HEAP8[$196>>0]|0;
     $198 = $197 << 24 >> 24;
     $199 = $stride;
     $200 = $cp;
     $201 = (($200) + ($199)|0);
     $202 = HEAP8[$201>>0]|0;
     $203 = $202 << 24 >> 24;
     $204 = (($203) - ($198))|0;
     $205 = $204&255;
     HEAP8[$201>>0] = $205;
     $206 = $cp;
     $207 = (($206) + -1|0);
     $cp = $207;
    }
    $208 = $stride;
    $209 = $2;
    $210 = (($209) - ($208))|0;
    $2 = $210;
    $211 = ($210|0)>(0);
    if (!($211)) {
     break;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _horDiff16($tif,$cp0,$cc) {
 $tif = $tif|0;
 $cp0 = $cp0|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $i = 0;
 var $sp = 0, $stride = 0, $wc = 0, $wp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $cp0;
 $2 = $cc;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $sp = $5;
 $6 = $sp;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $stride = $8;
 $9 = $1;
 $wp = $9;
 $10 = $2;
 $11 = (($10|0) / 2)&-1;
 $wc = $11;
 $12 = $2;
 $13 = $stride;
 $14 = $13<<1;
 $15 = (($12|0) % ($14|0))&-1;
 $16 = ($15|0)==(0);
 if (!($16)) {
  ___assert_fail((132000|0),(131528|0),509,(132024|0));
  // unreachable;
 }
 $17 = $wc;
 $18 = $stride;
 $19 = ($17|0)>($18|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $stride;
 $21 = $wc;
 $22 = (($21) - ($20))|0;
 $wc = $22;
 $23 = $wc;
 $24 = (($23) - 1)|0;
 $25 = $wp;
 $26 = (($25) + ($24<<1)|0);
 $wp = $26;
 while(1) {
  $27 = $stride;
  switch ($27|0) {
  case 2:  {
   label = 13;
   break;
  }
  case 0:  {
   break;
  }
  case 3:  {
   label = 12;
   break;
  }
  case 1:  {
   label = 14;
   break;
  }
  case 4:  {
   label = 11;
   break;
  }
  default: {
   $28 = $stride;
   $29 = (($28) - 4)|0;
   $i = $29;
   while(1) {
    $30 = $i;
    $31 = ($30|0)>(0);
    if (!($31)) {
     break;
    }
    $32 = $wp;
    $33 = HEAP16[$32>>1]|0;
    $34 = $33 << 16 >> 16;
    $35 = $stride;
    $36 = $wp;
    $37 = (($36) + ($35<<1)|0);
    $38 = HEAP16[$37>>1]|0;
    $39 = $38 << 16 >> 16;
    $40 = (($39) - ($34))|0;
    $41 = $40&65535;
    HEAP16[$37>>1] = $41;
    $42 = $wp;
    $43 = (($42) + -2|0);
    $wp = $43;
    $44 = $i;
    $45 = (($44) + -1)|0;
    $i = $45;
   }
   label = 11;
  }
  }
  if ((label|0) == 11) {
   label = 0;
   $46 = $wp;
   $47 = HEAP16[$46>>1]|0;
   $48 = $47 << 16 >> 16;
   $49 = $stride;
   $50 = $wp;
   $51 = (($50) + ($49<<1)|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $52 << 16 >> 16;
   $54 = (($53) - ($48))|0;
   $55 = $54&65535;
   HEAP16[$51>>1] = $55;
   $56 = $wp;
   $57 = (($56) + -2|0);
   $wp = $57;
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $58 = $wp;
   $59 = HEAP16[$58>>1]|0;
   $60 = $59 << 16 >> 16;
   $61 = $stride;
   $62 = $wp;
   $63 = (($62) + ($61<<1)|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $64 << 16 >> 16;
   $66 = (($65) - ($60))|0;
   $67 = $66&65535;
   HEAP16[$63>>1] = $67;
   $68 = $wp;
   $69 = (($68) + -2|0);
   $wp = $69;
   label = 13;
  }
  if ((label|0) == 13) {
   label = 0;
   $70 = $wp;
   $71 = HEAP16[$70>>1]|0;
   $72 = $71 << 16 >> 16;
   $73 = $stride;
   $74 = $wp;
   $75 = (($74) + ($73<<1)|0);
   $76 = HEAP16[$75>>1]|0;
   $77 = $76 << 16 >> 16;
   $78 = (($77) - ($72))|0;
   $79 = $78&65535;
   HEAP16[$75>>1] = $79;
   $80 = $wp;
   $81 = (($80) + -2|0);
   $wp = $81;
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   $82 = $wp;
   $83 = HEAP16[$82>>1]|0;
   $84 = $83 << 16 >> 16;
   $85 = $stride;
   $86 = $wp;
   $87 = (($86) + ($85<<1)|0);
   $88 = HEAP16[$87>>1]|0;
   $89 = $88 << 16 >> 16;
   $90 = (($89) - ($84))|0;
   $91 = $90&65535;
   HEAP16[$87>>1] = $91;
   $92 = $wp;
   $93 = (($92) + -2|0);
   $wp = $93;
  }
  $94 = $stride;
  $95 = $wc;
  $96 = (($95) - ($94))|0;
  $wc = $96;
  $97 = $wc;
  $98 = ($97|0)>(0);
  if (!($98)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _horDiff32($tif,$cp0,$cc) {
 $tif = $tif|0;
 $cp0 = $cp0|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $i = 0, $sp = 0, $stride = 0, $wc = 0, $wp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $cp0;
 $2 = $cc;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $sp = $5;
 $6 = $sp;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $stride = $8;
 $9 = $1;
 $wp = $9;
 $10 = $2;
 $11 = (($10|0) / 4)&-1;
 $wc = $11;
 $12 = $2;
 $13 = $stride;
 $14 = $13<<2;
 $15 = (($12|0) % ($14|0))&-1;
 $16 = ($15|0)==(0);
 if (!($16)) {
  ___assert_fail((131960|0),(131528|0),529,(131984|0));
  // unreachable;
 }
 $17 = $wc;
 $18 = $stride;
 $19 = ($17|0)>($18|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $stride;
 $21 = $wc;
 $22 = (($21) - ($20))|0;
 $wc = $22;
 $23 = $wc;
 $24 = (($23) - 1)|0;
 $25 = $wp;
 $26 = (($25) + ($24<<2)|0);
 $wp = $26;
 while(1) {
  $27 = $stride;
  switch ($27|0) {
  case 0:  {
   break;
  }
  case 2:  {
   label = 13;
   break;
  }
  case 1:  {
   label = 14;
   break;
  }
  case 3:  {
   label = 12;
   break;
  }
  case 4:  {
   label = 11;
   break;
  }
  default: {
   $28 = $stride;
   $29 = (($28) - 4)|0;
   $i = $29;
   while(1) {
    $30 = $i;
    $31 = ($30|0)>(0);
    if (!($31)) {
     break;
    }
    $32 = $wp;
    $33 = HEAP32[$32>>2]|0;
    $34 = $stride;
    $35 = $wp;
    $36 = (($35) + ($34<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) - ($33))|0;
    HEAP32[$36>>2] = $38;
    $39 = $wp;
    $40 = (($39) + -4|0);
    $wp = $40;
    $41 = $i;
    $42 = (($41) + -1)|0;
    $i = $42;
   }
   label = 11;
  }
  }
  if ((label|0) == 11) {
   label = 0;
   $43 = $wp;
   $44 = HEAP32[$43>>2]|0;
   $45 = $stride;
   $46 = $wp;
   $47 = (($46) + ($45<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) - ($44))|0;
   HEAP32[$47>>2] = $49;
   $50 = $wp;
   $51 = (($50) + -4|0);
   $wp = $51;
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $52 = $wp;
   $53 = HEAP32[$52>>2]|0;
   $54 = $stride;
   $55 = $wp;
   $56 = (($55) + ($54<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) - ($53))|0;
   HEAP32[$56>>2] = $58;
   $59 = $wp;
   $60 = (($59) + -4|0);
   $wp = $60;
   label = 13;
  }
  if ((label|0) == 13) {
   label = 0;
   $61 = $wp;
   $62 = HEAP32[$61>>2]|0;
   $63 = $stride;
   $64 = $wp;
   $65 = (($64) + ($63<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($66) - ($62))|0;
   HEAP32[$65>>2] = $67;
   $68 = $wp;
   $69 = (($68) + -4|0);
   $wp = $69;
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   $70 = $wp;
   $71 = HEAP32[$70>>2]|0;
   $72 = $stride;
   $73 = $wp;
   $74 = (($73) + ($72<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) - ($71))|0;
   HEAP32[$74>>2] = $76;
   $77 = $wp;
   $78 = (($77) + -4|0);
   $wp = $78;
  }
  $79 = $stride;
  $80 = $wc;
  $81 = (($80) - ($79))|0;
  $wc = $81;
  $82 = $wc;
  $83 = ($82|0)>(0);
  if (!($83)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _PredictorEncodeRow($tif,$bp,$cc,$s) {
 $tif = $tif|0;
 $bp = $bp|0;
 $cc = $cc|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $bp;
 $2 = $cc;
 $3 = $s;
 $4 = $0;
 $5 = (($4) + 576|0);
 $6 = HEAP32[$5>>2]|0;
 $sp = $6;
 $7 = $sp;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((131736|0),(131528|0),584,(131912|0));
  // unreachable;
 }
 $9 = $sp;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((131776|0),(131528|0),585,(131912|0));
  // unreachable;
 }
 $13 = $sp;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $sp;
  $18 = (($17) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  $21 = $1;
  $22 = $2;
  FUNCTION_TABLE_viii[$19 & 255]($20,$21,$22);
  $23 = $sp;
  $24 = (($23) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $0;
  $27 = $1;
  $28 = $2;
  $29 = $3;
  $30 = (FUNCTION_TABLE_iiiii[$25 & 255]($26,$27,$28,$29)|0);
  STACKTOP = sp;return ($30|0);
 } else {
  ___assert_fail((131936|0),(131528|0),586,(131912|0));
  // unreachable;
 }
 return (0)|0;
}
function _PredictorEncodeTile($tif,$bp0,$cc0,$s) {
 $tif = $tif|0;
 $bp0 = $bp0|0;
 $cc0 = $cc0|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $bp = 0, $cc = 0, $result_code = 0, $rowsize = 0, $sp = 0, $vararg_buffer = 0, $working_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $bp0;
 $3 = $cc0;
 $4 = $s;
 $5 = $1;
 $6 = (($5) + 576|0);
 $7 = HEAP32[$6>>2]|0;
 $sp = $7;
 $8 = $3;
 $cc = $8;
 $9 = $sp;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((131736|0),(131528|0),603,(131752|0));
  // unreachable;
 }
 $11 = $sp;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((131776|0),(131528|0),604,(131752|0));
  // unreachable;
 }
 $15 = $sp;
 $16 = (($15) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((131800|0),(131528|0),605,(131752|0));
  // unreachable;
 }
 $19 = $3;
 $20 = (__TIFFmalloc($19)|0);
 $working_copy = $20;
 $21 = $working_copy;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = $1;
  $24 = (($23) + 628|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $3;
  HEAP32[$vararg_buffer>>2] = $26;
  _TIFFErrorExt($25,131712,131824,$vararg_buffer);
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $27 = $working_copy;
 $28 = $2;
 $29 = $3;
 _memcpy(($27|0),($28|0),($29|0))|0;
 $30 = $working_copy;
 $bp = $30;
 $31 = $sp;
 $32 = (($31) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $rowsize = $33;
 $34 = $rowsize;
 $35 = ($34|0)>(0);
 if (!($35)) {
  ___assert_fail((131872|0),(131528|0),623,(131752|0));
  // unreachable;
 }
 $36 = $3;
 $37 = $rowsize;
 $38 = (($36|0) % ($37|0))&-1;
 $39 = ($38|0)==(0);
 if (!($39)) {
  ___assert_fail((131888|0),(131528|0),624,(131752|0));
  // unreachable;
 }
 while(1) {
  $40 = $cc;
  $41 = ($40|0)>(0);
  if (!($41)) {
   break;
  }
  $42 = $sp;
  $43 = (($42) + 24|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $1;
  $46 = $bp;
  $47 = $rowsize;
  FUNCTION_TABLE_viii[$44 & 255]($45,$46,$47);
  $48 = $rowsize;
  $49 = $cc;
  $50 = (($49) - ($48))|0;
  $cc = $50;
  $51 = $rowsize;
  $52 = $bp;
  $53 = (($52) + ($51)|0);
  $bp = $53;
 }
 $54 = $sp;
 $55 = (($54) + 20|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $1;
 $58 = $working_copy;
 $59 = $3;
 $60 = $4;
 $61 = (FUNCTION_TABLE_iiiii[$56 & 255]($57,$58,$59,$60)|0);
 $result_code = $61;
 $62 = $working_copy;
 __TIFFfree($62);
 $63 = $result_code;
 $0 = $63;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function _fpDiff($tif,$cp0,$cc) {
 $tif = $tif|0;
 $cp0 = $cp0|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bps = 0, $byte = 0, $count = 0, $cp = 0, $i = 0, $stride = 0, $tmp = 0, $wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $cp0;
 $2 = $cc;
 $3 = $0;
 $4 = (($3) + 576|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $stride = $7;
 $8 = $0;
 $9 = (($8) + 40|0);
 $10 = (($9) + 44|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($12|0) / 8)&-1;
 $bps = $13;
 $14 = $2;
 $15 = $bps;
 $16 = (($14>>>0) / ($15>>>0))&-1;
 $wc = $16;
 $17 = $1;
 $cp = $17;
 $18 = $2;
 $19 = (__TIFFmalloc($18)|0);
 $tmp = $19;
 $20 = $2;
 $21 = $bps;
 $22 = $stride;
 $23 = Math_imul($21, $22)|0;
 $24 = (($20>>>0) % ($23>>>0))&-1;
 $25 = ($24|0)==(0);
 if (!($25)) {
  ___assert_fail((131680|0),(131528|0),554,(131704|0));
  // unreachable;
 }
 $26 = $tmp;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $tmp;
 $29 = $1;
 $30 = $2;
 __TIFFmemcpy($28,$29,$30);
 $count = 0;
 while(1) {
  $31 = $count;
  $32 = $wc;
  $33 = ($31|0)<($32|0);
  if (!($33)) {
   break;
  }
  $byte = 0;
  while(1) {
   $34 = $byte;
   $35 = $bps;
   $36 = ($34>>>0)<($35>>>0);
   if (!($36)) {
    break;
   }
   $37 = $bps;
   $38 = $count;
   $39 = Math_imul($37, $38)|0;
   $40 = $byte;
   $41 = (($39) + ($40))|0;
   $42 = $tmp;
   $43 = (($42) + ($41)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $bps;
   $46 = $byte;
   $47 = (($45) - ($46))|0;
   $48 = (($47) - 1)|0;
   $49 = $wc;
   $50 = Math_imul($48, $49)|0;
   $51 = $count;
   $52 = (($50) + ($51))|0;
   $53 = $cp;
   $54 = (($53) + ($52)|0);
   HEAP8[$54>>0] = $44;
   $55 = $byte;
   $56 = (($55) + 1)|0;
   $byte = $56;
  }
  $57 = $count;
  $58 = (($57) + 1)|0;
  $count = $58;
 }
 $59 = $tmp;
 __TIFFfree($59);
 $60 = $1;
 $cp = $60;
 $61 = $2;
 $62 = $stride;
 $63 = (($61) - ($62))|0;
 $64 = (($63) - 1)|0;
 $65 = $cp;
 $66 = (($65) + ($64)|0);
 $cp = $66;
 $67 = $2;
 $count = $67;
 while(1) {
  $68 = $count;
  $69 = $stride;
  $70 = ($68|0)>($69|0);
  if (!($70)) {
   break;
  }
  $71 = $stride;
  switch ($71|0) {
  case 3:  {
   label = 22;
   break;
  }
  case 2:  {
   label = 23;
   break;
  }
  case 4:  {
   label = 21;
   break;
  }
  case 1:  {
   label = 24;
   break;
  }
  case 0:  {
   break;
  }
  default: {
   $72 = $stride;
   $73 = (($72) - 4)|0;
   $i = $73;
   while(1) {
    $74 = $i;
    $75 = ($74|0)>(0);
    if (!($75)) {
     break;
    }
    $76 = $cp;
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = $stride;
    $80 = $cp;
    $81 = (($80) + ($79)|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = (($83) - ($78))|0;
    $85 = $84&255;
    HEAP8[$81>>0] = $85;
    $86 = $cp;
    $87 = (($86) + -1|0);
    $cp = $87;
    $88 = $i;
    $89 = (($88) + -1)|0;
    $i = $89;
   }
   label = 21;
  }
  }
  if ((label|0) == 21) {
   label = 0;
   $90 = $cp;
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = $stride;
   $94 = $cp;
   $95 = (($94) + ($93)|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = (($97) - ($92))|0;
   $99 = $98&255;
   HEAP8[$95>>0] = $99;
   $100 = $cp;
   $101 = (($100) + -1|0);
   $cp = $101;
   label = 22;
  }
  if ((label|0) == 22) {
   label = 0;
   $102 = $cp;
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = $stride;
   $106 = $cp;
   $107 = (($106) + ($105)|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = (($109) - ($104))|0;
   $111 = $110&255;
   HEAP8[$107>>0] = $111;
   $112 = $cp;
   $113 = (($112) + -1|0);
   $cp = $113;
   label = 23;
  }
  if ((label|0) == 23) {
   label = 0;
   $114 = $cp;
   $115 = HEAP8[$114>>0]|0;
   $116 = $115&255;
   $117 = $stride;
   $118 = $cp;
   $119 = (($118) + ($117)|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = (($121) - ($116))|0;
   $123 = $122&255;
   HEAP8[$119>>0] = $123;
   $124 = $cp;
   $125 = (($124) + -1|0);
   $cp = $125;
   label = 24;
  }
  if ((label|0) == 24) {
   label = 0;
   $126 = $cp;
   $127 = HEAP8[$126>>0]|0;
   $128 = $127&255;
   $129 = $stride;
   $130 = $cp;
   $131 = (($130) + ($129)|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = (($133) - ($128))|0;
   $135 = $134&255;
   HEAP8[$131>>0] = $135;
   $136 = $cp;
   $137 = (($136) + -1|0);
   $cp = $137;
  }
  $138 = $stride;
  $139 = $count;
  $140 = (($139) - ($138))|0;
  $count = $140;
 }
 STACKTOP = sp;return;
}
function _TIFFInitThunderScan($tif,$scheme) {
 $tif = $tif|0;
 $scheme = $scheme|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tif;
 $1 = $scheme;
 $2 = $0;
 $3 = (($2) + 508|0);
 HEAP32[$3>>2] = 172;
 $4 = $0;
 $5 = (($4) + 532|0);
 HEAP32[$5>>2] = 173;
 $6 = $0;
 $7 = (($6) + 540|0);
 HEAP32[$7>>2] = 173;
 STACKTOP = sp;return 1;
}
function _ThunderSetupDecode($tif) {
 $tif = $tif|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $1;
 $3 = (($2) + 40|0);
 $4 = (($3) + 44|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($6|0)!=(4);
 if ($7) {
  $8 = $1;
  $9 = (($8) + 628|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = (($11) + 40|0);
  $13 = (($12) + 44|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  HEAP32[$vararg_buffer>>2] = $15;
  _TIFFErrorExt($10,132904,132928,$vararg_buffer);
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $0 = 1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _ThunderDecodeRow($tif,$buf,$occ,$s) {
 $tif = $tif|0;
 $buf = $buf|0;
 $occ = $occ|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $row = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $buf;
 $3 = $occ;
 $4 = $s;
 $5 = $2;
 $row = $5;
 $6 = $3;
 $7 = $1;
 $8 = (($7) + 580|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6|0) % ($9|0))&-1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $1;
  $13 = (($12) + 628|0);
  $14 = HEAP32[$13>>2]|0;
  _TIFFErrorExt($14,132704,132728,$vararg_buffer);
  $0 = 0;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 while(1) {
  $15 = $3;
  $16 = ($15|0)>(0);
  if (!($16)) {
   label = 8;
   break;
  }
  $17 = $1;
  $18 = $row;
  $19 = $1;
  $20 = (($19) + 40|0);
  $21 = (($20) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_ThunderDecode($17,$18,$22)|0);
  $24 = ($23|0)!=(0);
  if (!($24)) {
   label = 6;
   break;
  }
  $25 = $1;
  $26 = (($25) + 580|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $3;
  $29 = (($28) - ($27))|0;
  $3 = $29;
  $30 = $1;
  $31 = (($30) + 580|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $row;
  $34 = (($33) + ($32)|0);
  $row = $34;
 }
 if ((label|0) == 6) {
  $0 = 0;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 else if ((label|0) == 8) {
  $0 = 1;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _ThunderDecode($tif,$op,$maxpixels) {
 $tif = $tif|0;
 $op = $op|0;
 $maxpixels = $maxpixels|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bp = 0, $cc = 0, $delta = 0, $lastpixel = 0, $n = 0, $npixels = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $tif;
 $2 = $op;
 $3 = $maxpixels;
 $4 = $1;
 $5 = (($4) + 604|0);
 $6 = HEAP32[$5>>2]|0;
 $bp = $6;
 $7 = $1;
 $8 = (($7) + 608|0);
 $9 = HEAP32[$8>>2]|0;
 $cc = $9;
 $lastpixel = 0;
 $npixels = 0;
 while(1) {
  $10 = $cc;
  $11 = ($10|0)>(0);
  if ($11) {
   $12 = $npixels;
   $13 = $3;
   $14 = ($12|0)<($13|0);
   $260 = $14;
  } else {
   $260 = 0;
  }
  if (!($260)) {
   break;
  }
  $15 = $bp;
  $16 = (($15) + 1|0);
  $bp = $16;
  $17 = HEAP8[$15>>0]|0;
  $18 = $17&255;
  $n = $18;
  $19 = $cc;
  $20 = (($19) + -1)|0;
  $cc = $20;
  $21 = $n;
  $22 = $21 & 192;
  if ((($22|0) == 128)) {
   $151 = $n;
   $152 = $151 >> 3;
   $153 = $152 & 7;
   $delta = $153;
   $154 = ($153|0)!=(4);
   if ($154) {
    $155 = $lastpixel;
    $156 = $delta;
    $157 = (132800 + ($156<<2)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = (($155) + ($158))|0;
    $160 = $159 & 15;
    $lastpixel = $160;
    $161 = $npixels;
    $162 = $3;
    $163 = ($161|0)<($162|0);
    if ($163) {
     $164 = $npixels;
     $165 = (($164) + 1)|0;
     $npixels = $165;
     $166 = $164 & 1;
     $167 = ($166|0)!=(0);
     if ($167) {
      $168 = $lastpixel;
      $169 = $2;
      $170 = (($169) + 1|0);
      $2 = $170;
      $171 = HEAP8[$169>>0]|0;
      $172 = $171&255;
      $173 = $172 | $168;
      $174 = $173&255;
      HEAP8[$169>>0] = $174;
     } else {
      $175 = $lastpixel;
      $176 = $175 << 4;
      $177 = $176&255;
      $178 = $2;
      HEAP8[$178>>0] = $177;
     }
    }
   }
   $179 = $n;
   $180 = $179 & 7;
   $delta = $180;
   $181 = ($180|0)!=(4);
   if ($181) {
    $182 = $lastpixel;
    $183 = $delta;
    $184 = (132800 + ($183<<2)|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (($182) + ($185))|0;
    $187 = $186 & 15;
    $lastpixel = $187;
    $188 = $npixels;
    $189 = $3;
    $190 = ($188|0)<($189|0);
    if ($190) {
     $191 = $npixels;
     $192 = (($191) + 1)|0;
     $npixels = $192;
     $193 = $191 & 1;
     $194 = ($193|0)!=(0);
     if ($194) {
      $195 = $lastpixel;
      $196 = $2;
      $197 = (($196) + 1|0);
      $2 = $197;
      $198 = HEAP8[$196>>0]|0;
      $199 = $198&255;
      $200 = $199 | $195;
      $201 = $200&255;
      HEAP8[$196>>0] = $201;
     } else {
      $202 = $lastpixel;
      $203 = $202 << 4;
      $204 = $203&255;
      $205 = $2;
      HEAP8[$205>>0] = $204;
     }
    }
   }
  } else if ((($22|0) == 0)) {
   $23 = $npixels;
   $24 = $23 & 1;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $lastpixel;
    $27 = $2;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = $29 | $26;
    $31 = $30&255;
    HEAP8[$27>>0] = $31;
    $32 = $2;
    $33 = (($32) + 1|0);
    $2 = $33;
    $34 = HEAP8[$32>>0]|0;
    $35 = $34&255;
    $lastpixel = $35;
    $36 = $npixels;
    $37 = (($36) + 1)|0;
    $npixels = $37;
    $38 = $n;
    $39 = (($38) + -1)|0;
    $n = $39;
   } else {
    $40 = $lastpixel;
    $41 = $40 << 4;
    $42 = $lastpixel;
    $43 = $42 | $41;
    $lastpixel = $43;
   }
   $44 = $n;
   $45 = $npixels;
   $46 = (($45) + ($44))|0;
   $npixels = $46;
   $47 = $npixels;
   $48 = $3;
   $49 = ($47|0)<($48|0);
   if ($49) {
    while(1) {
     $50 = $n;
     $51 = ($50|0)>(0);
     if (!($51)) {
      break;
     }
     $52 = $lastpixel;
     $53 = $52&255;
     $54 = $2;
     $55 = (($54) + 1|0);
     $2 = $55;
     HEAP8[$54>>0] = $53;
     $56 = $n;
     $57 = (($56) - 2)|0;
     $n = $57;
    }
   }
   $58 = $n;
   $59 = ($58|0)==(-1);
   if ($59) {
    $60 = $2;
    $61 = (($60) + -1|0);
    $2 = $61;
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = $63 & 240;
    $65 = $64&255;
    HEAP8[$61>>0] = $65;
   }
   $66 = $lastpixel;
   $67 = $66 & 15;
   $lastpixel = $67;
  } else if ((($22|0) == 192)) {
   $206 = $n;
   $207 = $206 & 15;
   $lastpixel = $207;
   $208 = $npixels;
   $209 = $3;
   $210 = ($208|0)<($209|0);
   if ($210) {
    $211 = $npixels;
    $212 = (($211) + 1)|0;
    $npixels = $212;
    $213 = $211 & 1;
    $214 = ($213|0)!=(0);
    if ($214) {
     $215 = $lastpixel;
     $216 = $2;
     $217 = (($216) + 1|0);
     $2 = $217;
     $218 = HEAP8[$216>>0]|0;
     $219 = $218&255;
     $220 = $219 | $215;
     $221 = $220&255;
     HEAP8[$216>>0] = $221;
    } else {
     $222 = $lastpixel;
     $223 = $222 << 4;
     $224 = $223&255;
     $225 = $2;
     HEAP8[$225>>0] = $224;
    }
   }
  } else if ((($22|0) == 64)) {
   $68 = $n;
   $69 = $68 >> 4;
   $70 = $69 & 3;
   $delta = $70;
   $71 = ($70|0)!=(2);
   if ($71) {
    $72 = $lastpixel;
    $73 = $delta;
    $74 = (132784 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($72) + ($75))|0;
    $77 = $76 & 15;
    $lastpixel = $77;
    $78 = $npixels;
    $79 = $3;
    $80 = ($78|0)<($79|0);
    if ($80) {
     $81 = $npixels;
     $82 = (($81) + 1)|0;
     $npixels = $82;
     $83 = $81 & 1;
     $84 = ($83|0)!=(0);
     if ($84) {
      $85 = $lastpixel;
      $86 = $2;
      $87 = (($86) + 1|0);
      $2 = $87;
      $88 = HEAP8[$86>>0]|0;
      $89 = $88&255;
      $90 = $89 | $85;
      $91 = $90&255;
      HEAP8[$86>>0] = $91;
     } else {
      $92 = $lastpixel;
      $93 = $92 << 4;
      $94 = $93&255;
      $95 = $2;
      HEAP8[$95>>0] = $94;
     }
    }
   }
   $96 = $n;
   $97 = $96 >> 2;
   $98 = $97 & 3;
   $delta = $98;
   $99 = ($98|0)!=(2);
   if ($99) {
    $100 = $lastpixel;
    $101 = $delta;
    $102 = (132784 + ($101<<2)|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (($100) + ($103))|0;
    $105 = $104 & 15;
    $lastpixel = $105;
    $106 = $npixels;
    $107 = $3;
    $108 = ($106|0)<($107|0);
    if ($108) {
     $109 = $npixels;
     $110 = (($109) + 1)|0;
     $npixels = $110;
     $111 = $109 & 1;
     $112 = ($111|0)!=(0);
     if ($112) {
      $113 = $lastpixel;
      $114 = $2;
      $115 = (($114) + 1|0);
      $2 = $115;
      $116 = HEAP8[$114>>0]|0;
      $117 = $116&255;
      $118 = $117 | $113;
      $119 = $118&255;
      HEAP8[$114>>0] = $119;
     } else {
      $120 = $lastpixel;
      $121 = $120 << 4;
      $122 = $121&255;
      $123 = $2;
      HEAP8[$123>>0] = $122;
     }
    }
   }
   $124 = $n;
   $125 = $124 & 3;
   $delta = $125;
   $126 = ($125|0)!=(2);
   if ($126) {
    $127 = $lastpixel;
    $128 = $delta;
    $129 = (132784 + ($128<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = (($127) + ($130))|0;
    $132 = $131 & 15;
    $lastpixel = $132;
    $133 = $npixels;
    $134 = $3;
    $135 = ($133|0)<($134|0);
    if ($135) {
     $136 = $npixels;
     $137 = (($136) + 1)|0;
     $npixels = $137;
     $138 = $136 & 1;
     $139 = ($138|0)!=(0);
     if ($139) {
      $140 = $lastpixel;
      $141 = $2;
      $142 = (($141) + 1|0);
      $2 = $142;
      $143 = HEAP8[$141>>0]|0;
      $144 = $143&255;
      $145 = $144 | $140;
      $146 = $145&255;
      HEAP8[$141>>0] = $146;
     } else {
      $147 = $lastpixel;
      $148 = $147 << 4;
      $149 = $148&255;
      $150 = $2;
      HEAP8[$150>>0] = $149;
     }
    }
   }
  }
 }
 $226 = $bp;
 $227 = $1;
 $228 = (($227) + 604|0);
 HEAP32[$228>>2] = $226;
 $229 = $cc;
 $230 = $1;
 $231 = (($230) + 608|0);
 HEAP32[$231>>2] = $229;
 $232 = $npixels;
 $233 = $3;
 $234 = ($232|0)!=($233|0);
 if ($234) {
  $235 = $1;
  $236 = (($235) + 628|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = $npixels;
  $239 = $3;
  $240 = ($238|0)<($239|0);
  $241 = $240 ? 132872 : 132888;
  $242 = $1;
  $243 = (($242) + 444|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = $npixels;
  $246 = ($245|0)<(0);
  $247 = $246 << 31 >> 31;
  $248 = $3;
  $249 = ($248|0)<(0);
  $250 = $249 << 31 >> 31;
  HEAP32[$vararg_buffer>>2] = $241;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $244;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  $251 = $vararg_ptr2;
  $252 = $251;
  HEAP32[$252>>2] = $245;
  $253 = (($251) + 4)|0;
  $254 = $253;
  HEAP32[$254>>2] = $247;
  $vararg_ptr3 = (($vararg_buffer) + 16|0);
  $255 = $vararg_ptr3;
  $256 = $255;
  HEAP32[$256>>2] = $248;
  $257 = (($255) + 4)|0;
  $258 = $257;
  HEAP32[$258>>2] = $250;
  _TIFFErrorExt($237,132768,132832,$vararg_buffer);
  $0 = 0;
  $259 = $0;
  STACKTOP = sp;return ($259|0);
 } else {
  $0 = 1;
  $259 = $0;
  STACKTOP = sp;return ($259|0);
 }
 return (0)|0;
}
function _bsearch($key,$base,$nel,$width,$cmp) {
 $key = $key|0;
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0 = 0, $$01$ = 0, $$014 = 0, $$023 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nel|0)==(0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $$014 = $base;$$023 = $nel;
   while(1) {
    $1 = $$023 >>> 1;
    $2 = Math_imul($1, $width)|0;
    $3 = (($$014) + ($2)|0);
    $4 = (FUNCTION_TABLE_iii[$cmp & 255]($key,$3)|0);
    $5 = ($4|0)==(0);
    if ($5) {
     $$0 = $3;
     break L1;
    }
    $6 = ($$023|0)==(1);
    if ($6) {
     $$0 = 0;
     break L1;
    }
    $7 = ($4|0)<(0);
    $8 = (($$023) - ($1))|0;
    $$ = $7 ? $1 : $8;
    $$01$ = $7 ? $$014 : $3;
    $9 = ($$|0)==(0);
    if ($9) {
     $$0 = 0;
     break;
    } else {
     $$014 = $$01$;$$023 = $$;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0$be$i = 0, $$0$be$i20 = 0, $$0$i50 = 0, $$01$be$i = 0, $$01$be$i19 = 0, $$012$i = 0, $$012$i16 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$i3472 = 0, $$02$i75 = 0, $$02$us$i = 0, $$02$us$i32 = 0, $$03$i = 0, $$03$i15 = 0, $$69 = 0, $$70 = 0, $$lcssa78 = 0, $$lcssa79 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i22 = 0, $$pre$i28 = 0, $$pre$i9 = 0, $$sum = 0, $$sum$i = 0, $$sum$i18 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i31 = 0, $head$0$lcssa = 0, $head$080 = 0, $head$1 = 0, $i$0 = 0;
 var $i$0$lcssa$i = 0, $i$0$lcssa$i24 = 0, $i$01$us$i = 0, $i$01$us$i30 = 0, $i$04$i = 0, $i$04$i14 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $pshift$0$lcssa = 0, $pshift$081 = 0, $pshift$1 = 0, $pshift$2 = 0, $sum = 0, $sum$i = 0, $sum$i17 = 0, $tmp$i = 0, $tmp$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i26 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp + 192|0;
 $lp = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = (($lp) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = ($width>>>0)>(256);
  $15 = $14 ? 256 : $width;
  $16 = ($15|0)==($width|0);
  $17 = $11;
  $19 = 1;$61 = 0;$head$080 = $base;$pshift$081 = 1;
  while(1) {
   $18 = $19 & 3;
   $20 = ($18|0)==(3);
   do {
    if ($20) {
     HEAP32[$ar$i>>2] = $head$080;
     $21 = ($pshift$081|0)>(1);
     L13: do {
      if ($21) {
       $$012$i = $pshift$081;$$03$i = $head$080;$27 = $head$080;$i$04$i = 1;
       while(1) {
        $22 = (($$03$i) + ($10)|0);
        $23 = (($$012$i) + -2)|0;
        $24 = (($lp) + ($23<<2)|0);
        $25 = HEAP32[$24>>2]|0;
        $sum$i = (($25) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $26 = (($$03$i) + ($$sum$i)|0);
        $28 = (FUNCTION_TABLE_iii[$cmp & 255]($27,$26)|0);
        $29 = ($28|0)>(-1);
        if ($29) {
         $30 = (FUNCTION_TABLE_iii[$cmp & 255]($27,$22)|0);
         $31 = ($30|0)>(-1);
         if ($31) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $32 = (FUNCTION_TABLE_iii[$cmp & 255]($26,$22)|0);
        $33 = ($32|0)>(-1);
        $34 = (($i$04$i) + 1)|0;
        $35 = (($ar$i) + ($i$04$i<<2)|0);
        if ($33) {
         HEAP32[$35>>2] = $26;
         $36 = (($$012$i) + -1)|0;
         $$0$be$i = $26;$$01$be$i = $36;
        } else {
         HEAP32[$35>>2] = $22;
         $$0$be$i = $22;$$01$be$i = $23;
        }
        $37 = ($$01$be$i|0)>(1);
        if (!($37)) {
         $i$0$lcssa$i = $34;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$27 = $$pre$i;$i$04$i = $34;
       }
       $38 = ($i$0$lcssa$i|0)<(2);
       if (!($38)) {
        $39 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$39>>2] = $tmp$i;
        if (!($13)) {
         $40 = ($i$0$lcssa$i|0)>(0);
         if ($40) {
          $$02$us$i = $width;$53 = $tmp$i;
         } else {
          $41 = HEAP32[$ar$i>>2]|0;
          _memcpy(($tmp$i|0),($41|0),($15|0))|0;
          if ($16) {
           break;
          } else {
           $$02$i75 = $width;$55 = $15;
          }
          while(1) {
           $54 = (($$02$i75) - ($55))|0;
           $56 = ($54>>>0)>(256);
           $57 = $56 ? 256 : $54;
           _memcpy(($tmp$i|0),($41|0),($57|0))|0;
           $58 = ($54|0)==($57|0);
           if ($58) {
            break L13;
           } else {
            $$02$i75 = $54;$55 = $57;
           }
          }
         }
         while(1) {
          $51 = ($$02$us$i>>>0)>(256);
          $43 = $51 ? 256 : $$02$us$i;
          $52 = HEAP32[$ar$i>>2]|0;
          _memcpy(($53|0),($52|0),($43|0))|0;
          $49 = $52;$i$01$us$i = 0;
          while(1) {
           $45 = (($ar$i) + ($i$01$us$i<<2)|0);
           $46 = (($i$01$us$i) + 1)|0;
           $47 = (($ar$i) + ($46<<2)|0);
           $48 = HEAP32[$47>>2]|0;
           _memcpy(($49|0),($48|0),($43|0))|0;
           $50 = (($49) + ($43)|0);
           HEAP32[$45>>2] = $50;
           $exitcond$i = ($46|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $49 = $48;$i$01$us$i = $46;
           }
          }
          $42 = ($$02$us$i|0)==($43|0);
          if ($42) {
           break L13;
          }
          $44 = (($$02$us$i) - ($43))|0;
          $$pre$i9 = HEAP32[$39>>2]|0;
          $$02$us$i = $44;$53 = $$pre$i9;
         }
        }
       }
      }
     } while(0);
     $59 = $19 >>> 2;
     $60 = $61 << 30;
     $62 = $59 | $60;
     $63 = $61 >>> 2;
     $64 = (($pshift$081) + 2)|0;
     $122 = $62;$182 = $63;$pshift$1 = $64;
    } else {
     $65 = (($pshift$081) + -1)|0;
     $66 = (($lp) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $head$080;
     $69 = (($17) - ($68))|0;
     $70 = ($67>>>0)<($69>>>0);
     L39: do {
      if ($70) {
       HEAP32[$ar$i>>2] = $head$080;
       $71 = ($pshift$081|0)>(1);
       if ($71) {
        $$012$i16 = $pshift$081;$$03$i15 = $head$080;$77 = $head$080;$i$04$i14 = 1;
        while(1) {
         $72 = (($$03$i15) + ($10)|0);
         $73 = (($$012$i16) + -2)|0;
         $74 = (($lp) + ($73<<2)|0);
         $75 = HEAP32[$74>>2]|0;
         $sum$i17 = (($75) + ($width))|0;
         $$sum$i18 = (0 - ($sum$i17))|0;
         $76 = (($$03$i15) + ($$sum$i18)|0);
         $78 = (FUNCTION_TABLE_iii[$cmp & 255]($77,$76)|0);
         $79 = ($78|0)>(-1);
         if ($79) {
          $80 = (FUNCTION_TABLE_iii[$cmp & 255]($77,$72)|0);
          $81 = ($80|0)>(-1);
          if ($81) {
           $i$0$lcssa$i24 = $i$04$i14;
           break;
          }
         }
         $82 = (FUNCTION_TABLE_iii[$cmp & 255]($76,$72)|0);
         $83 = ($82|0)>(-1);
         $84 = (($i$04$i14) + 1)|0;
         $85 = (($ar$i) + ($i$04$i14<<2)|0);
         if ($83) {
          HEAP32[$85>>2] = $76;
          $86 = (($$012$i16) + -1)|0;
          $$0$be$i20 = $76;$$01$be$i19 = $86;
         } else {
          HEAP32[$85>>2] = $72;
          $$0$be$i20 = $72;$$01$be$i19 = $73;
         }
         $87 = ($$01$be$i19|0)>(1);
         if (!($87)) {
          $i$0$lcssa$i24 = $84;
          break;
         }
         $$pre$i22 = HEAP32[$ar$i>>2]|0;
         $$012$i16 = $$01$be$i19;$$03$i15 = $$0$be$i20;$77 = $$pre$i22;$i$04$i14 = $84;
        }
        $88 = ($i$0$lcssa$i24|0)<(2);
        if (!($88)) {
         $89 = (($ar$i) + ($i$0$lcssa$i24<<2)|0);
         HEAP32[$89>>2] = $tmp$i26;
         if (!($13)) {
          $90 = ($i$0$lcssa$i24|0)>(0);
          if ($90) {
           $$02$us$i32 = $width;$103 = $tmp$i26;
          } else {
           $91 = HEAP32[$ar$i>>2]|0;
           _memcpy(($tmp$i26|0),($91|0),($15|0))|0;
           if ($16) {
            break;
           } else {
            $$02$i3472 = $width;$105 = $15;
           }
           while(1) {
            $104 = (($$02$i3472) - ($105))|0;
            $106 = ($104>>>0)>(256);
            $107 = $106 ? 256 : $104;
            _memcpy(($tmp$i26|0),($91|0),($107|0))|0;
            $108 = ($104|0)==($107|0);
            if ($108) {
             break L39;
            } else {
             $$02$i3472 = $104;$105 = $107;
            }
           }
          }
          while(1) {
           $101 = ($$02$us$i32>>>0)>(256);
           $93 = $101 ? 256 : $$02$us$i32;
           $102 = HEAP32[$ar$i>>2]|0;
           _memcpy(($103|0),($102|0),($93|0))|0;
           $99 = $102;$i$01$us$i30 = 0;
           while(1) {
            $95 = (($ar$i) + ($i$01$us$i30<<2)|0);
            $96 = (($i$01$us$i30) + 1)|0;
            $97 = (($ar$i) + ($96<<2)|0);
            $98 = HEAP32[$97>>2]|0;
            _memcpy(($99|0),($98|0),($93|0))|0;
            $100 = (($99) + ($93)|0);
            HEAP32[$95>>2] = $100;
            $exitcond$i31 = ($96|0)==($i$0$lcssa$i24|0);
            if ($exitcond$i31) {
             break;
            } else {
             $99 = $98;$i$01$us$i30 = $96;
            }
           }
           $92 = ($$02$us$i32|0)==($93|0);
           if ($92) {
            break L39;
           }
           $94 = (($$02$us$i32) - ($93))|0;
           $$pre$i28 = HEAP32[$89>>2]|0;
           $$02$us$i32 = $94;$103 = $$pre$i28;
          }
         }
        }
       }
      } else {
       _trinkle($head$080,$width,$cmp,$19,$61,$pshift$081,0,$lp);
      }
     } while(0);
     $109 = ($pshift$081|0)==(1);
     if ($109) {
      $110 = $61 << 1;
      $111 = $19 >>> 31;
      $112 = $111 | $110;
      $113 = $19 << 1;
      $122 = $113;$182 = $112;$pshift$1 = 0;
      break;
     } else {
      $114 = ($65>>>0)>(31);
      $115 = (($pshift$081) + -33)|0;
      $$ = $114 ? 0 : $19;
      $$69 = $114 ? $19 : $61;
      $$70 = $114 ? $115 : $65;
      $116 = $$69 << $$70;
      $117 = (32 - ($$70))|0;
      $118 = $$ >>> $117;
      $119 = $118 | $116;
      $120 = $$ << $$70;
      $122 = $120;$182 = $119;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $121 = $122 | 1;
   $123 = (($head$080) + ($width)|0);
   $124 = ($123>>>0)<($11>>>0);
   if ($124) {
    $19 = $121;$61 = $182;$head$080 = $123;$pshift$081 = $pshift$1;
   } else {
    $$lcssa78 = $182;$$lcssa79 = $121;$head$0$lcssa = $123;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa78 = 0;$$lcssa79 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa79,$$lcssa78,$pshift$0$lcssa,0,$lp);
 $127 = $$lcssa79;$129 = $$lcssa78;$head$1 = $head$0$lcssa;$pshift$2 = $pshift$0$lcssa;
 while(1) {
  $125 = ($pshift$2|0)==(1);
  if ($125) {
   $126 = ($127|0)==(1);
   if ($126) {
    $128 = ($129|0)==(0);
    if ($128) {
     break;
    } else {
     label = 52;
    }
   }
  } else {
   label = 52;
  }
  if ((label|0) == 52) {
   label = 0;
   $130 = ($pshift$2|0)<(2);
   if (!($130)) {
    $162 = $129 << 2;
    $163 = $127 >>> 30;
    $164 = $163 | $162;
    $165 = (($pshift$2) + -2)|0;
    $166 = $127 << 1;
    $167 = $166 & 2147483646;
    $168 = $163 << 31;
    $169 = $167 | $168;
    $170 = $169 ^ 3;
    $171 = $164 >>> 1;
    $172 = (($lp) + ($165<<2)|0);
    $173 = HEAP32[$172>>2]|0;
    $sum = (($173) + ($width))|0;
    $$sum2 = (0 - ($sum))|0;
    $174 = (($head$1) + ($$sum2)|0);
    $175 = (($pshift$2) + -1)|0;
    _trinkle($174,$width,$cmp,$170,$171,$175,1,$lp);
    $176 = $171 << 1;
    $177 = $163 & 1;
    $178 = $176 | $177;
    $179 = $170 << 1;
    $180 = $179 | 1;
    $181 = (($head$1) + ($10)|0);
    _trinkle($181,$width,$cmp,$180,$178,$165,1,$lp);
    $127 = $180;$129 = $178;$head$1 = $181;$pshift$2 = $165;
    continue;
   }
  }
  $131 = (($127) + -1)|0;
  $132 = ($131|0)==(0);
  do {
   if ($132) {
    $152 = 32;
    label = 62;
   } else {
    $133 = $131 & 1;
    $134 = ($133|0)==(0);
    if ($134) {
     $$02$i$i = $131;$nTrailingZeros$03$i$i = 0;
     while(1) {
      $135 = (($nTrailingZeros$03$i$i) + 1)|0;
      $136 = $$02$i$i >>> 1;
      $137 = $136 & 1;
      $138 = ($137|0)==(0);
      if ($138) {
       $$02$i$i = $136;$nTrailingZeros$03$i$i = $135;
      } else {
       break;
      }
     }
     $139 = ($135|0)==(0);
     if ($139) {
      label = 57;
     } else {
      $150 = $135;
     }
    } else {
     label = 57;
    }
    if ((label|0) == 57) {
     label = 0;
     $140 = ($129|0)==(0);
     if ($140) {
      $152 = 64;
      label = 62;
      break;
     }
     $141 = $129 & 1;
     $142 = ($141|0)==(0);
     if ($142) {
      $$02$i3$i = $129;$nTrailingZeros$03$i2$i = 0;
     } else {
      $$0$i50 = 0;$154 = $127;$157 = $129;$161 = 0;
      break;
     }
     while(1) {
      $143 = (($nTrailingZeros$03$i2$i) + 1)|0;
      $144 = $$02$i3$i >>> 1;
      $145 = $144 & 1;
      $146 = ($145|0)==(0);
      if ($146) {
       $$02$i3$i = $144;$nTrailingZeros$03$i2$i = $143;
      } else {
       break;
      }
     }
     $147 = (($nTrailingZeros$03$i2$i) + 33)|0;
     $148 = ($143|0)==(0);
     if ($148) {
      $$0$i50 = 0;$154 = $127;$157 = $129;$161 = 0;
      break;
     } else {
      $150 = $147;
     }
    }
    $149 = ($150>>>0)>(31);
    if ($149) {
     $152 = $150;
     label = 62;
    } else {
     $$0$i50 = $150;$154 = $127;$157 = $129;$161 = $150;
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   $151 = (($152) + -32)|0;
   $$0$i50 = $151;$154 = $129;$157 = 0;$161 = $152;
  }
  $153 = $154 >>> $$0$i50;
  $155 = (32 - ($$0$i50))|0;
  $156 = $157 << $155;
  $158 = $156 | $153;
  $159 = $157 >>> $$0$i50;
  $160 = (($161) + ($pshift$2))|0;
  $$pre = (($head$1) + ($10)|0);
  $127 = $158;$129 = $159;$head$1 = $$pre;$pshift$2 = $160;
 }
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa31 = 0, $$01$be$i = 0, $$012$i = 0, $$017 = 0, $$02$i$i = 0, $$02$i179 = 0, $$02$i3$i = 0, $$02$i6 = 0, $$02$lcssa = 0, $$02$lcssa33 = 0, $$02$us$i = 0, $$02$us$i15 = 0, $$0215 = 0, $$03$i = 0, $$03$lcssa = 0, $$0314 = 0, $$pre = 0;
 var $$pre$i = 0, $$pre$i11 = 0, $$pre$i6 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i14 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa32 = 0, $i$01$us$i = 0, $i$01$us$i13 = 0;
 var $i$016 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $or$cond5 = 0, $or$cond511 = 0, $pp$val112 = 0, $sum = 0, $sum$i = 0, $tmp$i = 0, $tmp$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i9 = sp + 712|0;
 $tmp$i = sp + 456|0;
 $ar$i = sp + 228|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)==(1);
 $2 = ($pp$1$val|0)==(0);
 $or$cond511 = $1 & $2;
 L1: do {
  if ($or$cond511) {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  } else {
   $$017 = $head;$$0215 = $pshift;$$0314 = $trusty;$124 = $2;$33 = $pp$1$val;$7 = $head;$i$016 = 1;$pp$val112 = $pp$val;
   while(1) {
    $3 = (($lp) + ($$0215<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (0 - ($4))|0;
    $6 = (($$017) + ($5)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 255]($6,$7)|0);
    $9 = ($8|0)<(1);
    if ($9) {
     $$0$lcssa = $$017;$$02$lcssa = $$0215;$$03$lcssa = $$0314;$i$0$lcssa = $i$016;
     label = 18;
     break L1;
    }
    $10 = ($$0314|0)==(0);
    $11 = ($$0215|0)>(1);
    $or$cond = $10 & $11;
    if ($or$cond) {
     $12 = (($$017) + ($0)|0);
     $13 = (($$0215) + -2)|0;
     $14 = (($lp) + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_iii[$cmp & 255]($12,$6)|0);
     $17 = ($16|0)>(-1);
     if ($17) {
      $$0$lcssa31 = $$017;$$02$lcssa33 = $$0215;$i$0$lcssa32 = $i$016;
      break L1;
     }
     $sum = (($15) + ($width))|0;
     $$sum = (0 - ($sum))|0;
     $18 = (($$017) + ($$sum)|0);
     $19 = (FUNCTION_TABLE_iii[$cmp & 255]($18,$6)|0);
     $20 = ($19|0)>(-1);
     if ($20) {
      $$0$lcssa31 = $$017;$$02$lcssa33 = $$0215;$i$0$lcssa32 = $i$016;
      break L1;
     }
    }
    $21 = (($i$016) + 1)|0;
    $22 = (($ar) + ($i$016<<2)|0);
    HEAP32[$22>>2] = $6;
    $23 = (($pp$val112) + -1)|0;
    $24 = ($23|0)==(0);
    do {
     if ($24) {
      $44 = 32;
      label = 15;
     } else {
      $25 = $23 & 1;
      $26 = ($25|0)==(0);
      if ($26) {
       $$02$i$i = $23;$nTrailingZeros$03$i$i = 0;
       while(1) {
        $27 = (($nTrailingZeros$03$i$i) + 1)|0;
        $28 = $$02$i$i >>> 1;
        $29 = $28 & 1;
        $30 = ($29|0)==(0);
        if ($30) {
         $$02$i$i = $28;$nTrailingZeros$03$i$i = $27;
        } else {
         break;
        }
       }
       $31 = ($27|0)==(0);
       if ($31) {
        label = 10;
       } else {
        $42 = $27;
       }
      } else {
       label = 10;
      }
      if ((label|0) == 10) {
       label = 0;
       if ($124) {
        $44 = 64;
        label = 15;
        break;
       }
       $32 = $33 & 1;
       $34 = ($32|0)==(0);
       if ($34) {
        $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
       } else {
        $$0$i = 0;$46 = $pp$val112;$49 = $33;$53 = 0;
        break;
       }
       while(1) {
        $35 = (($nTrailingZeros$03$i2$i) + 1)|0;
        $36 = $$02$i3$i >>> 1;
        $37 = $36 & 1;
        $38 = ($37|0)==(0);
        if ($38) {
         $$02$i3$i = $36;$nTrailingZeros$03$i2$i = $35;
        } else {
         break;
        }
       }
       $39 = (($nTrailingZeros$03$i2$i) + 33)|0;
       $40 = ($35|0)==(0);
       if ($40) {
        $$0$i = 0;$46 = $pp$val112;$49 = $33;$53 = 0;
        break;
       } else {
        $42 = $39;
       }
      }
      $41 = ($42>>>0)>(31);
      if ($41) {
       $44 = $42;
       label = 15;
      } else {
       $$0$i = $42;$46 = $pp$val112;$49 = $33;$53 = $42;
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     $43 = (($44) + -32)|0;
     $$0$i = $43;$46 = $33;$49 = 0;$53 = $44;
    }
    $45 = $46 >>> $$0$i;
    $47 = (32 - ($$0$i))|0;
    $48 = $49 << $47;
    $50 = $48 | $45;
    $51 = $49 >>> $$0$i;
    $52 = (($53) + ($$0215))|0;
    $54 = ($50|0)==(1);
    $55 = ($51|0)==(0);
    $or$cond5 = $54 & $55;
    if ($or$cond5) {
     $$0$lcssa31 = $6;$$02$lcssa33 = $52;$i$0$lcssa32 = $21;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$017 = $6;$$0215 = $52;$$0314 = 0;$124 = $55;$33 = $51;$7 = $$pre;$i$016 = $21;$pp$val112 = $50;
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $56 = ($$03$lcssa|0)==(0);
  if ($56) {
   $$0$lcssa31 = $$0$lcssa;$$02$lcssa33 = $$02$lcssa;$i$0$lcssa32 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $57 = ($i$0$lcssa32|0)<(2);
 L30: do {
  if (!($57)) {
   $58 = (($ar) + ($i$0$lcssa32<<2)|0);
   HEAP32[$58>>2] = $tmp$i9;
   $59 = ($width|0)==(0);
   if (!($59)) {
    $60 = ($i$0$lcssa32|0)>(0);
    if ($60) {
     $$02$us$i15 = $width;$76 = $tmp$i9;
    } else {
     $61 = ($width>>>0)>(256);
     $62 = $61 ? 256 : $width;
     $63 = HEAP32[$ar>>2]|0;
     _memcpy(($tmp$i9|0),($63|0),($62|0))|0;
     $64 = ($62|0)==($width|0);
     if ($64) {
      break;
     } else {
      $$02$i179 = $width;$78 = $62;
     }
     while(1) {
      $77 = (($$02$i179) - ($78))|0;
      $79 = ($77>>>0)>(256);
      $80 = $79 ? 256 : $77;
      _memcpy(($tmp$i9|0),($63|0),($80|0))|0;
      $81 = ($77|0)==($80|0);
      if ($81) {
       break L30;
      } else {
       $$02$i179 = $77;$78 = $80;
      }
     }
    }
    while(1) {
     $74 = ($$02$us$i15>>>0)>(256);
     $66 = $74 ? 256 : $$02$us$i15;
     $75 = HEAP32[$ar>>2]|0;
     _memcpy(($76|0),($75|0),($66|0))|0;
     $72 = $75;$i$01$us$i13 = 0;
     while(1) {
      $68 = (($ar) + ($i$01$us$i13<<2)|0);
      $69 = (($i$01$us$i13) + 1)|0;
      $70 = (($ar) + ($69<<2)|0);
      $71 = HEAP32[$70>>2]|0;
      _memcpy(($72|0),($71|0),($66|0))|0;
      $73 = (($72) + ($66)|0);
      HEAP32[$68>>2] = $73;
      $exitcond$i14 = ($69|0)==($i$0$lcssa32|0);
      if ($exitcond$i14) {
       break;
      } else {
       $72 = $71;$i$01$us$i13 = $69;
      }
     }
     $65 = ($$02$us$i15|0)==($66|0);
     if ($65) {
      break L30;
     }
     $67 = (($$02$us$i15) - ($66))|0;
     $$pre$i11 = HEAP32[$58>>2]|0;
     $$02$us$i15 = $67;$76 = $$pre$i11;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa31;
 $82 = ($$02$lcssa33|0)>(1);
 L44: do {
  if ($82) {
   $$012$i = $$02$lcssa33;$$03$i = $$0$lcssa31;$88 = $$0$lcssa31;$i$04$i = 1;
   while(1) {
    $83 = (($$03$i) + ($0)|0);
    $84 = (($$012$i) + -2)|0;
    $85 = (($lp) + ($84<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $sum$i = (($86) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $87 = (($$03$i) + ($$sum$i)|0);
    $89 = (FUNCTION_TABLE_iii[$cmp & 255]($88,$87)|0);
    $90 = ($89|0)>(-1);
    if ($90) {
     $91 = (FUNCTION_TABLE_iii[$cmp & 255]($88,$83)|0);
     $92 = ($91|0)>(-1);
     if ($92) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $93 = (FUNCTION_TABLE_iii[$cmp & 255]($87,$83)|0);
    $94 = ($93|0)>(-1);
    $95 = (($i$04$i) + 1)|0;
    $96 = (($ar$i) + ($i$04$i<<2)|0);
    if ($94) {
     HEAP32[$96>>2] = $87;
     $97 = (($$012$i) + -1)|0;
     $$0$be$i = $87;$$01$be$i = $97;
    } else {
     HEAP32[$96>>2] = $83;
     $$0$be$i = $83;$$01$be$i = $84;
    }
    $98 = ($$01$be$i|0)>(1);
    if (!($98)) {
     $i$0$lcssa$i = $95;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$88 = $$pre$i;$i$04$i = $95;
   }
   $99 = ($i$0$lcssa$i|0)<(2);
   if ($99) {
    $125 = $tmp$i;
   } else {
    $100 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$100>>2] = $tmp$i;
    $101 = ($width|0)==(0);
    if ($101) {
     $125 = $tmp$i;
    } else {
     $102 = ($i$0$lcssa$i|0)>(0);
     if ($102) {
      $$02$us$i = $width;$118 = $tmp$i;
     } else {
      $103 = ($width>>>0)>(256);
      $104 = $103 ? 256 : $width;
      $105 = HEAP32[$ar$i>>2]|0;
      _memcpy(($tmp$i|0),($105|0),($104|0))|0;
      $106 = ($104|0)==($width|0);
      if ($106) {
       $125 = $tmp$i;
       break;
      } else {
       $$02$i6 = $width;$120 = $104;
      }
      while(1) {
       $119 = (($$02$i6) - ($120))|0;
       $121 = ($119>>>0)>(256);
       $122 = $121 ? 256 : $119;
       _memcpy(($tmp$i|0),($105|0),($122|0))|0;
       $123 = ($119|0)==($122|0);
       if ($123) {
        $125 = $tmp$i;
        break L44;
       } else {
        $$02$i6 = $119;$120 = $122;
       }
      }
     }
     while(1) {
      $116 = ($$02$us$i>>>0)>(256);
      $108 = $116 ? 256 : $$02$us$i;
      $117 = HEAP32[$ar$i>>2]|0;
      _memcpy(($118|0),($117|0),($108|0))|0;
      $114 = $117;$i$01$us$i = 0;
      while(1) {
       $110 = (($ar$i) + ($i$01$us$i<<2)|0);
       $111 = (($i$01$us$i) + 1)|0;
       $112 = (($ar$i) + ($111<<2)|0);
       $113 = HEAP32[$112>>2]|0;
       _memcpy(($114|0),($113|0),($108|0))|0;
       $115 = (($114) + ($108)|0);
       HEAP32[$110>>2] = $115;
       $exitcond$i = ($111|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $114 = $113;$i$01$us$i = $111;
       }
      }
      $107 = ($$02$us$i|0)==($108|0);
      if ($107) {
       $125 = $tmp$i;
       break L44;
      }
      $109 = (($$02$us$i) - ($108))|0;
      $$pre$i6 = HEAP32[$100>>2]|0;
      $$02$us$i = $109;$118 = $$pre$i6;
     }
    }
   }
  } else {
   $125 = $tmp$i;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0;
 var $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0;
 var $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0;
 var $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0;
 var $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0;
 var $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$026$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0;
 var $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0;
 var $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$073$i = 0, $sp$166$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0;
 var $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[133008>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((133008 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((133008 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[133008>>2] = $22;
     } else {
      $23 = HEAP32[((133008 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((133008 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((133008 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((133008 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[133008>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[((133008 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((133008 + 8|0))>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[((133008 + 20|0))>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = ((133008 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[133008>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[133008>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((133008 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((133008 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((133008 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((133008 + 8|0))>>2] = $81;
     HEAP32[((133008 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((133008 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((133008 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((133008 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((133008 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((133008 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((133008 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((133008 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((133008 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((133008 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $224 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i;
      $225 = HEAP32[((133008 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((133008 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((133008 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[133008>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[133008>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((133008 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((133008 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((133008 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((133008 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((133008 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i) + 8|0);
     $mem$0 = $243;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((133008 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((133008 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L9: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L9;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((133008 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((133008 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((133008 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((133008 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((133008 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((133008 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((133008 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((133008 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((133008 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((133008 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[133008>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[133008>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((133008 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((133008 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((133008 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((133008 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((133008 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((133008 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L107: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$027$i = $483;$T$026$i = $475;
           while(1) {
            $491 = $K12$027$i >>> 31;
            $492 = ((($T$026$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $K12$027$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L107;
            } else {
             $K12$027$i = $485;$T$026$i = $487;
            }
           }
           $494 = HEAP32[((133008 + 16|0))>>2]|0;
           $495 = ($492>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$026$i;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L87;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((133008 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((133008 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((133008 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((133008 + 20|0))>>2] = $514;
   HEAP32[((133008 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((133008 + 8|0))>>2] = 0;
   HEAP32[((133008 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  STACKTOP = sp;return ($mem$0|0);
 }
 $526 = HEAP32[((133008 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((133008 + 12|0))>>2] = $528;
  $529 = HEAP32[((133008 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((133008 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  STACKTOP = sp;return ($mem$0|0);
 }
 $536 = HEAP32[133480>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((133480 + 8|0))>>2] = $538;
    HEAP32[((133480 + 4|0))>>2] = $538;
    HEAP32[((133480 + 12|0))>>2] = -1;
    HEAP32[((133480 + 16|0))>>2] = -1;
    HEAP32[((133480 + 20|0))>>2] = 0;
    HEAP32[((133008 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[133480>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((133480 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $552 = HEAP32[((133008 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((133008 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $558 = HEAP32[((133008 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((133008 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((133008 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((133008 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$sp$0$i$i>>2]|0;
       $601 = HEAP32[$565>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((133480 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((133008 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((133008 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((133480 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((133008 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((133008 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((133008 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((133008 + 432|0))>>2] = $633;
  $634 = HEAP32[((133008 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((133008 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((133008 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((133008 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((133008 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((133008 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((133008 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((133008 + 460|0))>>2] = 0;
    $641 = HEAP32[133480>>2]|0;
    HEAP32[((133008 + 36|0))>>2] = $641;
    HEAP32[((133008 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((133008 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((133008 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((133008 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((133008 + 24|0))>>2] = $654;
    HEAP32[((133008 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((133480 + 16|0))>>2]|0;
    HEAP32[((133008 + 28|0))>>2] = $660;
   } else {
    $sp$073$i = ((133008 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$073$i>>2]|0;
     $662 = (($sp$073$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      label = 213;
      break;
     }
     $666 = (($sp$073$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$073$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$073$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($663) + ($tsize$244$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((133008 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((133008 + 24|0))>>2] = $684;
       HEAP32[((133008 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((133480 + 16|0))>>2]|0;
       HEAP32[((133008 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((133008 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((133008 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$166$i = ((133008 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$166$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 223;
      break;
     }
     $696 = (($sp$166$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$166$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$166$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$166$i>>2] = $tbase$245$i;
      $703 = (($sp$166$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L335: do {
       if ($729) {
        $730 = HEAP32[((133008 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((133008 + 12|0))>>2] = $731;
        HEAP32[((133008 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((133008 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((133008 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((133008 + 8|0))>>2] = $737;
         HEAP32[((133008 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L343: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((133008 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[133008>>2]|0;
            $764 = $763 & $762;
            HEAP32[133008>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((133008 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((133008 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((133008 + 4|0))>>2] = $807;
             break L343;
            } else {
             $808 = HEAP32[((133008 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L343;
             }
            }
           } while(0);
           $815 = HEAP32[((133008 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((133008 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((133008 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[133008>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[133008>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((133008 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((133008 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((133008 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((133008 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((133008 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((133008 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L432: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L432;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((133008 + 16|0))>>2]|0;
          $912 = ($909>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$909>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L335;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((133008 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((133008 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($929) + -47)|0;
    $$sum1$i14$i = (($929) + -39)|0;
    $934 = (($926) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($926) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((133008 + 24|0))>>2] = $953;
    HEAP32[((133008 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((133480 + 16|0))>>2]|0;
    HEAP32[((133008 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((133008 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((133008 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((133008 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((133008 + 448|0))+12>>2]|0;
    HEAP32[((133008 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((133008 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((133008 + 460|0))>>2] = 0;
    HEAP32[((133008 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($930>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($930>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((133008 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[133008>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[133008>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((133008 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((133008 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((133008 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((133008 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((133008 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((133008 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L483: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L483;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((133008 + 16|0))>>2]|0;
       $1051 = ($1048>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1048>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((133008 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((133008 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((133008 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((133008 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((133008 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$058 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0;
 var $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$057 = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((133008 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((133008 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((133008 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((133008 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[133008>>2]|0;
     $36 = $35 & $34;
     HEAP32[133008>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((133008 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((133008 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((133008 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((133008 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((133008 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((133008 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((133008 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((133008 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((133008 + 12|0))>>2] = $120;
   HEAP32[((133008 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((133008 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   HEAP32[((133008 + 20|0))>>2] = 0;
   HEAP32[((133008 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $125 = HEAP32[((133008 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((133008 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((133008 + 8|0))>>2] = $128;
   HEAP32[((133008 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   STACKTOP = sp;return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((133008 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((133008 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[133008>>2]|0;
     $152 = $151 & $150;
     HEAP32[133008>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((133008 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((133008 + 16|0))>>2]|0;
      $188 = ($RP9$0>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((133008 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((133008 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((133008 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((133008 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((133008 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((133008 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((133008 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((133008 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((133008 + 8|0))>>2] = $133;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((133008 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[133008>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[133008>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((133008 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((133008 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((133008 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  STACKTOP = sp;return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((133008 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((133008 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((133008 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L205: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$058 = $292;$T$057 = $284;
     while(1) {
      $300 = $K19$058 >>> 31;
      $301 = ((($T$057) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       break;
      }
      $294 = $K19$058 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L205;
      } else {
       $K19$058 = $294;$T$057 = $296;
      }
     }
     $303 = HEAP32[((133008 + 16|0))>>2]|0;
     $304 = ($301>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$301>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$057;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((133008 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((133008 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((133008 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((133008 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((133008 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 133504;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 133504;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 STACKTOP = sp;return ($14|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $8 = $$pre;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 255]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 255]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre5 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre5;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 255]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=134080+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa36 = 0, $$012 = 0, $$1$lcssa = 0, $$15 = 0, $$22 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $s$0$lcssa = 0, $s$0$lcssa35 = 0, $s$013 = 0, $s$13 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond11 = $3 & $4;
 L1: do {
  if ($or$cond11) {
   $5 = $c&255;
   $$012 = $n;$s$013 = $src;
   while(1) {
    $6 = HEAP8[$s$013>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa36 = $$012;$s$0$lcssa35 = $s$013;
     label = 6;
     break L1;
    }
    $8 = (($s$013) + 1|0);
    $9 = (($$012) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$012 = $9;$s$013 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa36 = $$0$lcssa;$s$0$lcssa35 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa35>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa36;$s$2 = $s$0$lcssa35;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa36>>>0)>(3);
    L11: do {
     if ($18) {
      $$15 = $$0$lcssa36;$w$06 = $s$0$lcssa35;
      while(1) {
       $19 = HEAP32[$w$06>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$15;$w$0$lcssa = $w$06;
        break L11;
       }
       $26 = (($w$06) + 4|0);
       $27 = (($$15) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$15 = $27;$w$06 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa36;$w$0$lcssa = $s$0$lcssa35;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$22 = $$1$lcssa;$s$13 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$13>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$22;$s$2 = $s$13;
       break L8;
      }
      $32 = (($s$13) + 1|0);
      $33 = (($$22) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$22 = $33;$s$13 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $r$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$02 = $n;$l$03 = $vl;$r$04 = $vr;
   while(1) {
    $1 = HEAP8[$l$03>>0]|0;
    $2 = HEAP8[$r$04>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$02) + -1)|0;
    $5 = (($l$03) + 1|0);
    $6 = (($r$04) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$02 = $4;$l$03 = $5;$r$04 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$02 = 0, $$07 = 0, $$07$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$05 = 0, $or$cond = 0, $or$cond3 = 0, $r$0$lcssa = 0, $r$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $13 = 0;$r$0$lcssa = $_r;
  } else {
   $$07$in = $n;$7 = $1;$l$05 = $_l;$r$06 = $_r;
   while(1) {
    $$07 = (($$07$in) + -1)|0;
    $3 = HEAP8[$r$06>>0]|0;
    $4 = ($3<<24>>24)!=(0);
    $5 = ($$07|0)!=(0);
    $or$cond = $4 & $5;
    $6 = ($7<<24>>24)==($3<<24>>24);
    $or$cond3 = $or$cond & $6;
    if (!($or$cond3)) {
     $13 = $7;$r$0$lcssa = $r$06;
     break L4;
    }
    $8 = (($l$05) + 1|0);
    $9 = (($r$06) + 1|0);
    $10 = HEAP8[$8>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $13 = 0;$r$0$lcssa = $9;
     break;
    } else {
     $$07$in = $$07;$7 = $10;$l$05 = $8;$r$06 = $9;
    }
   }
  }
 } while(0);
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$02 = $16;
 STACKTOP = sp;return ($$02|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0;
 var $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((133008 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((133480 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $30 = HEAP32[((133008 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((133008 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((133008 + 24|0))>>2] = $36;
  HEAP32[((133008 + 12|0))>>2] = $35;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $42 = HEAP32[((133008 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((133008 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((133008 + 8|0))>>2] = $storemerge21;
  HEAP32[((133008 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((133008 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[133008>>2]|0;
    $88 = $87 & $86;
    HEAP32[133008>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = (($R$0) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((133008 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((133008 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((133008 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((133008 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((133008 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((133008 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$050 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$049 = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((133008 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((133008 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((133008 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((133008 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[133008>>2]|0;
     $32 = $31 & $30;
     HEAP32[133008>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((133008 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((133008 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((133008 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((133008 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((133008 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((133008 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((133008 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((133008 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((133008 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((133008 + 12|0))>>2] = $115;
   HEAP32[((133008 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((133008 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    STACKTOP = sp;return;
   }
   HEAP32[((133008 + 20|0))>>2] = 0;
   HEAP32[((133008 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $120 = HEAP32[((133008 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((133008 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((133008 + 8|0))>>2] = $123;
   HEAP32[((133008 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   STACKTOP = sp;return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((133008 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[133008>>2]|0;
     $146 = $145 & $144;
     HEAP32[133008>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((133008 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((133008 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((133008 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((133008 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((133008 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((133008 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((133008 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((133008 + 8|0))>>2] = $128;
   STACKTOP = sp;return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((133008 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[133008>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[133008>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((133008 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((133008 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((133008 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  STACKTOP = sp;return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((133008 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((133008 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((133008 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  STACKTOP = sp;return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$050 = $283;$T$049 = $275;
   while(1) {
    $291 = $K20$050 >>> 31;
    $292 = ((($T$049) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     break;
    }
    $285 = $K20$050 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$050 = $285;$T$049 = $287;
    }
   }
   $294 = HEAP32[((133008 + 16|0))>>2]|0;
   $295 = ($292>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$292>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$049;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((133008 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 STACKTOP = sp;return;
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i102$i = 0, $$0$lcssa$i109$i = 0, $$0$lcssa$i133$i = 0, $$0$lcssa$i148$i = 0, $$0$lcssa$i40 = 0, $$0$lcssa$i44$i = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i51$i = 0, $$0$lcssa$i53$i = 0, $$0$lcssa$i55 = 0, $$0$lcssa$i61$i = 0, $$0$lcssa$i62 = 0;
 var $$0$lcssa$i68$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i74$i = 0, $$0$lcssa$i79 = 0, $$0$lcssa$i81$i = 0, $$0$lcssa$i89$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i100$i = 0, $$01$i107$i = 0, $$01$i131$i = 0, $$01$i146$i = 0, $$01$i38 = 0, $$01$i42$i = 0, $$01$i49$i = 0, $$01$i53 = 0, $$01$i59$i = 0, $$01$i60 = 0, $$01$i66$i = 0, $$01$i67 = 0;
 var $$01$i72$i = 0, $$01$i77 = 0, $$01$i79$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i90$i = 0, $$010$i = 0.0, $$012$i = 0, $$016$i = 0, $$03$i42 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i84$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i117$i = 0, $$117$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i115$i = 0;
 var $$12$i124$i = 0, $$12$i139$i = 0, $$12$i92$i = 0, $$15 = 0, $$19 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20 = 0, $$213$$26$i = 0, $$213$$28$i = 0, $$213$i = 0, $$23$i = 0, $$23$us$i = 0, $$24$i = 0, $$25$i = 0.0, $$26$i = 0, $$28$i = 0, $$3$i = 0.0, $$314$i = 0;
 var $$36$i = 0, $$4$i = 0.0, $$415$lcssa$i = 0, $$415171$i = 0, $$5189$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us307$i = 0, $$a$3$us308$i = 0, $$a$3309$i = 0, $$a$3310$i = 0, $$fl$4 = 0, $$lcssa292$i = 0, $$mask$i = 0, $$mask$i32 = 0, $$mask1$i = 0, $$mask1$i31 = 0, $$neg156$i = 0, $$neg157$i = 0, $$not$i = 0;
 var $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr151$i = 0, $$pre = 0, $$pre$i = 0, $$pre260 = 0, $$pre261 = 0, $$pre306$i = 0, $$sum$i = 0, $$sum18$i = 0, $$sum19$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
 var $1019 = 0, $102 = 0, $1020 = 0.0, $1021 = 0.0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $1029$phi = 0, $103 = 0, $1030 = 0, $1030$phi = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1258$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3244$i = 0, $a$3244$us$i = 0, $a$5$lcssa$i = 0, $a$5218$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0;
 var $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0;
 var $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0238$i = 0, $carry3$0238$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0249$i = 0, $d$0251$i = 0, $d$1237$i = 0, $d$1237$us$i = 0, $d$2$lcssa$i = 0, $d$2217$i = 0, $d$3$i = 0, $d$4180$i = 0, $d$5170$i = 0, $d$6188$i = 0, $e$0233$i = 0, $e$1$i = 0;
 var $e$2213$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0113 = 0, $fl$0118 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt81$lcssa = 0, $fmt81102 = 0;
 var $fmt82 = 0, $fmt83 = 0, $fmt84 = 0, $fmt86 = 0, $fmt87 = 0, $i$0$lcssa = 0, $i$0$lcssa267 = 0, $i$0166 = 0, $i$0232$i = 0, $i$03$i = 0, $i$03$i24 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1225$i = 0, $i$2100 = 0, $i$2212$i = 0, $i$3204$i = 0, $i$397 = 0, $isdigit = 0, $isdigit$i = 0;
 var $isdigit$i26 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigit4 = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i25 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp3 = 0, $isdigittmp5 = 0, $j$0$i = 0, $j$0224$i = 0, $j$0226$i = 0, $j$1205$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0;
 var $l$1165 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i105$i = 0, $or$cond$i40$i = 0, $or$cond$i47$i = 0, $or$cond$i51 = 0, $or$cond$i57$i = 0, $or$cond$i58 = 0, $or$cond$i64$i = 0;
 var $or$cond$i65 = 0, $or$cond$i73 = 0, $or$cond$i75 = 0, $or$cond$i77$i = 0, $or$cond$i98$i = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond271 = 0, $or$cond32$i = 0, $or$cond34$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond7169$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4266 = 0;
 var $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1163$i = 0, $round$0162$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0;
 var $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0177$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0165$i = 0, $s9$0$i = 0, $s9$1184$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge2111 = 0, $storemerge2117 = 0;
 var $storemerge7 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$22$i = 0, $w$35$i = 0, $wc = 0, $ws$0167 = 0, $ws$1175 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i114$i = 0, $y$03$i123$i = 0, $y$03$i138$i = 0, $y$03$i91$i = 0, $z$0$i = 0, $z$0$lcssa = 0;
 var $z$0103 = 0, $z$1$lcssa$i = 0, $z$1257$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3243$i = 0, $z$3243$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 560|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 840|0;
 $pad$i = sp + 584|0;
 $buf = sp + 520|0;
 $wc = sp;
 $mb = sp + 852|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1029 = 0;$1030 = 0;$cnt$0 = 0;$fmt83 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt83>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   label = 352;
   break;
  } else {
   $1031 = $22;$fmt82 = $fmt83;
  }
  while(1) {
   if ((($1031<<24>>24) == 0)) {
    $fmt81$lcssa = $fmt82;$z$0$lcssa = $fmt82;
    break;
   } else if ((($1031<<24>>24) == 37)) {
    $fmt81102 = $fmt82;$z$0103 = $fmt82;
    label = 9;
    break;
   }
   $24 = (($fmt82) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1031 = $$pre;$fmt82 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = (($fmt81102) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt81$lcssa = $fmt81102;$z$0$lcssa = $z$0103;
      break L12;
     }
     $28 = (($z$0103) + 1|0);
     $29 = (($fmt81102) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt81102 = $29;$z$0103 = $28;
      label = 9;
     } else {
      $fmt81$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt83;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt83,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt83|0);
  if (!($35)) {
   $l10n$0$phi = $l10n$0;$1030$phi = $1030;$1029$phi = $1029;$cnt$0 = $cnt$1;$fmt83 = $fmt81$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;$1030 = $1030$phi;$1029 = $1029$phi;
   continue;
  }
  $36 = (($fmt81$lcssa) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $isdigittmp = (($38) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $39 = (($fmt81$lcssa) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(36);
   if ($41) {
    $42 = (($fmt81$lcssa) + 3|0);
    $$pre260 = HEAP8[$42>>0]|0;
    $44 = $$pre260;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $42;
   } else {
    $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
   }
  } else {
   $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
  }
  $43 = $44 << 24 >> 24;
  $45 = $43 & -32;
  $46 = ($45|0)==(32);
  L25: do {
   if ($46) {
    $$pr = $44;$48 = $43;$fl$0118 = 0;$storemerge2117 = $storemerge;
    while(1) {
     $47 = (($48) + -32)|0;
     $49 = 1 << $47;
     $50 = $49 & 75913;
     $51 = ($50|0)==(0);
     if ($51) {
      $59 = $$pr;$fl$0113 = $fl$0118;$storemerge2111 = $storemerge2117;
      break L25;
     }
     $52 = $49 | $fl$0118;
     $53 = (($storemerge2117) + 1|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = $55 & -32;
     $57 = ($56|0)==(32);
     if ($57) {
      $$pr = $54;$48 = $55;$fl$0118 = $52;$storemerge2117 = $53;
     } else {
      $59 = $54;$fl$0113 = $52;$storemerge2111 = $53;
      break;
     }
    }
   } else {
    $59 = $44;$fl$0113 = 0;$storemerge2111 = $storemerge;
   }
  } while(0);
  $58 = ($59<<24>>24)==(42);
  do {
   if ($58) {
    $60 = (($storemerge2111) + 1|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $isdigittmp5 = (($62) + -48)|0;
    $isdigit6 = ($isdigittmp5>>>0)<(10);
    if ($isdigit6) {
     $63 = (($storemerge2111) + 2|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = ($64<<24>>24)==(36);
     if ($65) {
      $66 = (($nl_type) + ($isdigittmp5<<2)|0);
      HEAP32[$66>>2] = 10;
      $67 = HEAP8[$60>>0]|0;
      $68 = $67 << 24 >> 24;
      $69 = (($68) + -48)|0;
      $70 = (($nl_arg) + ($69<<3)|0);
      $71 = $70;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = (($storemerge2111) + 3|0);
      $l10n$2 = 1;$storemerge7 = $77;$w$0 = $73;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $78 = ($l10n$1|0)==(0);
     if (!($78)) {
      $$0 = -1;
      label = 370;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0113;$fmt84 = $60;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $79 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge7 = $60;$w$0 = $79;
    }
    $80 = ($w$0|0)<(0);
    if ($80) {
     $81 = $fl$0113 | 8192;
     $82 = (0 - ($w$0))|0;
     $fl$1 = $81;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $82;
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $83 = $59 << 24 >> 24;
    $isdigittmp1$i = (($83) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $86 = $83;$89 = $storemerge2111;$i$03$i = 0;
     while(1) {
      $84 = ($i$03$i*10)|0;
      $85 = (($86) + -48)|0;
      $87 = (($85) + ($84))|0;
      $88 = (($89) + 1|0);
      $90 = HEAP8[$88>>0]|0;
      $91 = $90 << 24 >> 24;
      $isdigittmp$i = (($91) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $86 = $91;$89 = $88;$i$03$i = $87;
      } else {
       break;
      }
     }
     $92 = ($87|0)<(0);
     if ($92) {
      $$0 = -1;
      label = 370;
      break L1;
     } else {
      $fl$1 = $fl$0113;$fmt84 = $88;$l10n$3 = $l10n$1;$w$1 = $87;
     }
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge2111;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $93 = HEAP8[$fmt84>>0]|0;
  $94 = ($93<<24>>24)==(46);
  L46: do {
   if ($94) {
    $95 = (($fmt84) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = ($96<<24>>24)==(42);
    if (!($97)) {
     $118 = $96 << 24 >> 24;
     $isdigittmp1$i22 = (($118) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $121 = $118;$124 = $95;$i$03$i24 = 0;
     } else {
      $fmt87 = $95;$p$0 = 0;
      break;
     }
     while(1) {
      $119 = ($i$03$i24*10)|0;
      $120 = (($121) + -48)|0;
      $122 = (($120) + ($119))|0;
      $123 = (($124) + 1|0);
      $125 = HEAP8[$123>>0]|0;
      $126 = $125 << 24 >> 24;
      $isdigittmp$i25 = (($126) + -48)|0;
      $isdigit$i26 = ($isdigittmp$i25>>>0)<(10);
      if ($isdigit$i26) {
       $121 = $126;$124 = $123;$i$03$i24 = $122;
      } else {
       $fmt87 = $123;$p$0 = $122;
       break L46;
      }
     }
    }
    $98 = (($fmt84) + 2|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99 << 24 >> 24;
    $isdigittmp3 = (($100) + -48)|0;
    $isdigit4 = ($isdigittmp3>>>0)<(10);
    if ($isdigit4) {
     $101 = (($fmt84) + 3|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = ($102<<24>>24)==(36);
     if ($103) {
      $104 = (($nl_type) + ($isdigittmp3<<2)|0);
      HEAP32[$104>>2] = 10;
      $105 = HEAP8[$98>>0]|0;
      $106 = $105 << 24 >> 24;
      $107 = (($106) + -48)|0;
      $108 = (($nl_arg) + ($107<<3)|0);
      $109 = $108;
      $110 = $109;
      $111 = HEAP32[$110>>2]|0;
      $112 = (($109) + 4)|0;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($fmt84) + 4|0);
      $fmt87 = $115;$p$0 = $111;
      break;
     }
    }
    $116 = ($l10n$3|0)==(0);
    if (!($116)) {
     $$0 = -1;
     label = 370;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $117 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt87 = $98;$p$0 = $117;
    } else {
     $fmt87 = $98;$p$0 = 0;
    }
   } else {
    $fmt87 = $fmt84;$p$0 = -1;
   }
  } while(0);
  $fmt86 = $fmt87;$st$0 = 0;
  while(1) {
   $127 = HEAP8[$fmt86>>0]|0;
   $128 = $127 << 24 >> 24;
   $129 = (($128) + -65)|0;
   $130 = ($129>>>0)>(57);
   if ($130) {
    $$0 = -1;
    label = 370;
    break L1;
   }
   $131 = (($fmt86) + 1|0);
   $132 = ((133512 + (($st$0*58)|0)|0) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) + -1)|0;
   $136 = ($135>>>0)<(8);
   if ($136) {
    $fmt86 = $131;$st$0 = $134;
   } else {
    break;
   }
  }
  $137 = ($133<<24>>24)==(0);
  if ($137) {
   $$0 = -1;
   label = 370;
   break;
  }
  $138 = ($133<<24>>24)==(19);
  $139 = ($argpos$0|0)>(-1);
  L65: do {
   if ($138) {
    if ($139) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1032 = $1029;$1033 = $1030;
     label = 63;
    }
   } else {
    if ($139) {
     $140 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$140>>2] = $134;
     $141 = (($nl_arg) + ($argpos$0<<3)|0);
     $142 = $141;
     $143 = $142;
     $144 = HEAP32[$143>>2]|0;
     $145 = (($142) + 4)|0;
     $146 = $145;
     $147 = HEAP32[$146>>2]|0;
     $1032 = $144;$1033 = $147;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 370;
     break L1;
    }
    $148 = ($133&255)>(20);
    if ($148) {
     $182 = $127;$191 = $1029;$218 = $1030;
    } else {
     do {
      switch ($134|0) {
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1034 = 0;$1035 = $154;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $155 = $arglist_current14;
       $156 = $155;
       $157 = HEAP32[$156>>2]|0;
       $158 = (($155) + 4)|0;
       $159 = $158;
       $160 = HEAP32[$159>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1034 = $160;$1035 = $157;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$175 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $175;$176 = HEAP32[tempDoublePtr>>2]|0;
       $177 = HEAP32[tempDoublePtr+4>>2]|0;
       $1034 = $177;$1035 = $176;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $151 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $152 = ($151|0)<(0);
       $153 = $152 << 31 >> 31;
       $1034 = $153;$1035 = $151;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $167 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i31 = $167 & 65535;
       $1034 = 0;$1035 = $$mask1$i31;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $149 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $150 = $149;
       $1034 = $1030;$1035 = $150;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$178 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $178;$179 = HEAP32[tempDoublePtr>>2]|0;
       $180 = HEAP32[tempDoublePtr+4>>2]|0;
       $1032 = $179;$1033 = $180;
       label = 63;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $174 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i32 = $174 & 255;
       $1034 = 0;$1035 = $$mask$i32;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $168 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $169 = $168&255;
       $170 = $169 << 24 >> 24;
       $171 = ($170|0)<(0);
       $172 = $171 << 31 >> 31;
       $sext = $168 << 24;
       $173 = $sext >> 24;
       $1034 = $172;$1035 = $173;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $161 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $162 = $161&65535;
       $163 = $162 << 16 >> 16;
       $164 = ($163|0)<(0);
       $165 = $164 << 31 >> 31;
       $sext93 = $161 << 16;
       $166 = $sext93 >> 16;
       $1034 = $165;$1035 = $166;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1034 = $1030;$1035 = $1029;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1034 = $1033;$1035 = $1032;
    label = 64;
   } else {
    $1029 = $1032;$1030 = $1033;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre261 = HEAP8[$fmt86>>0]|0;
   $182 = $$pre261;$191 = $1035;$218 = $1034;
  }
  $181 = $182 << 24 >> 24;
  $183 = ($st$0|0)!=(0);
  $184 = $181 & 15;
  $185 = ($184|0)==(3);
  $or$cond9 = $183 & $185;
  $186 = $181 & -33;
  $t$0 = $or$cond9 ? $186 : $181;
  $187 = $fl$1 & 8192;
  $188 = ($187|0)==(0);
  $189 = $fl$1 & -65537;
  $fl$1$ = $188 ? $fl$1 : $189;
  L89: do {
   switch ($t$0|0) {
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 75;
    break;
   }
   case 111:  {
    $238 = ($191|0)==(0);
    $239 = ($218|0)==(0);
    $240 = $238 & $239;
    if ($240) {
     $$0$lcssa$i45 = $2;
    } else {
     $$03$i42 = $2;$242 = $191;$246 = $218;
     while(1) {
      $241 = $242 & 7;
      $243 = $241 | 48;
      $244 = $243&255;
      $245 = (($$03$i42) + -1|0);
      HEAP8[$245>>0] = $244;
      $247 = (_bitshift64Lshr(($242|0),($246|0),3)|0);
      $248 = tempRet0;
      $249 = ($247|0)==(0);
      $250 = ($248|0)==(0);
      $251 = $249 & $250;
      if ($251) {
       $$0$lcssa$i45 = $245;
       break;
      } else {
       $$03$i42 = $245;$242 = $247;$246 = $248;
      }
     }
    }
    $252 = $fl$1$ & 8;
    $253 = ($252|0)==(0);
    $or$cond13 = $253 | $240;
    $$19 = $or$cond13 ? 133976 : ((133976 + 5|0));
    $254 = $or$cond13&1;
    $$20 = $254 ^ 1;
    $293 = $191;$295 = $218;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$20;$prefix$1 = $$19;
    label = 91;
    break;
   }
   case 105: case 100:  {
    $255 = ($218|0)<(0);
    if ($255) {
     $256 = (_i64Subtract(0,0,($191|0),($218|0))|0);
     $257 = tempRet0;
     $263 = $257;$265 = $256;$pl$0 = 1;$prefix$0 = 133976;
     label = 86;
     break L89;
    }
    $258 = $fl$1$ & 2048;
    $259 = ($258|0)==(0);
    if ($259) {
     $260 = $fl$1$ & 1;
     $261 = ($260|0)==(0);
     $$ = $261 ? 133976 : ((133976 + 2|0));
     $263 = $218;$265 = $191;$pl$0 = $260;$prefix$0 = $$;
     label = 86;
    } else {
     $263 = $218;$265 = $191;$pl$0 = 1;$prefix$0 = ((133976 + 1|0));
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $191;HEAP32[tempDoublePtr+4>>2] = $218;$355 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $356 = ($218|0)<(0);
    if ($356) {
     $357 = -$355;
     $$010$i = $357;$pl$0$i = 1;$prefix$0$i = 134000;
    } else {
     $358 = $fl$1$ & 2048;
     $359 = ($358|0)==(0);
     if ($359) {
      $360 = $fl$1$ & 1;
      $361 = ($360|0)==(0);
      $$$i = $361 ? ((134000 + 1|0)) : ((134000 + 6|0));
      $$010$i = $355;$pl$0$i = $360;$prefix$0$i = $$$i;
     } else {
      $$010$i = $355;$pl$0$i = 1;$prefix$0$i = ((134000 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$010$i;$362 = HEAP32[tempDoublePtr>>2]|0;
    $363 = HEAP32[tempDoublePtr+4>>2]|0;
    $364 = $363 & 2146435072;
    $365 = ($364>>>0)<(2146435072);
    $366 = (0)<(0);
    $367 = ($364|0)==(2146435072);
    $368 = $367 & $366;
    $369 = $365 | $368;
    if (!($369)) {
     $370 = $t$0 & 32;
     $371 = ($370|0)!=(0);
     $372 = $371 ? 134024 : 134032;
     $373 = ($$010$i != $$010$i) | (0.0 != 0.0);
     if ($373) {
      $374 = $371 ? 134040 : 134048;
      $pl$1$i = 0;$s1$0$i = $374;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $372;
     }
     $375 = (($pl$1$i) + 3)|0;
     $376 = $fl$1$ & 8192;
     $377 = ($376|0)==(0);
     $378 = ($w$1|0)>($375|0);
     $or$cond$i40$i = $377 & $378;
     if ($or$cond$i40$i) {
      $379 = (($w$1) - ($375))|0;
      $380 = ($379>>>0)>(256);
      $381 = $380 ? 256 : $379;
      _memset(($pad$i|0),32,($381|0))|0;
      $382 = ($379>>>0)>(255);
      if ($382) {
       $$01$i42$i = $379;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $383 = (($$01$i42$i) + -256)|0;
        $384 = ($383>>>0)>(255);
        if ($384) {
         $$01$i42$i = $383;
        } else {
         break;
        }
       }
       $385 = $379 & 255;
       $$0$lcssa$i44$i = $385;
      } else {
       $$0$lcssa$i44$i = $379;
      }
      (___fwritex($pad$i,$$0$lcssa$i44$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $386 = $fl$1$ & 73728;
     $387 = ($386|0)==(8192);
     $or$cond$i47$i = $387 & $378;
     if ($or$cond$i47$i) {
      $388 = (($w$1) - ($375))|0;
      $389 = ($388>>>0)>(256);
      $390 = $389 ? 256 : $388;
      _memset(($pad$i|0),32,($390|0))|0;
      $391 = ($388>>>0)>(255);
      if ($391) {
       $$01$i49$i = $388;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $392 = (($$01$i49$i) + -256)|0;
        $393 = ($392>>>0)>(255);
        if ($393) {
         $$01$i49$i = $392;
        } else {
         break;
        }
       }
       $394 = $388 & 255;
       $$0$lcssa$i51$i = $394;
      } else {
       $$0$lcssa$i51$i = $388;
      }
      (___fwritex($pad$i,$$0$lcssa$i51$i,$f)|0);
     }
     $w$$i = $378 ? $w$1 : $375;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $395 = (+_frexpl($$010$i,$e2$i));
    $396 = $395 * 2.0;
    $397 = $396 != 0.0;
    if ($397) {
     $398 = HEAP32[$e2$i>>2]|0;
     $399 = (($398) + -1)|0;
     HEAP32[$e2$i>>2] = $399;
    }
    $400 = $t$0 | 32;
    $401 = ($400|0)==(97);
    if ($401) {
     $402 = $t$0 & 32;
     $403 = ($402|0)==(0);
     $404 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $403 ? $prefix$0$i : $404;
     $405 = $pl$0$i | 2;
     $406 = ($p$0>>>0)>(11);
     $407 = (12 - ($p$0))|0;
     $re$0$i = $406 ? 0 : $407;
     $408 = ($re$0$i|0)==(0);
     do {
      if ($408) {
       $$1$i = $396;
      } else {
       $re$1163$i = $re$0$i;$round$0162$i = 8.0;
       while(1) {
        $409 = (($re$1163$i) + -1)|0;
        $410 = $round$0162$i * 16.0;
        $411 = ($409|0)==(0);
        if ($411) {
         break;
        } else {
         $re$1163$i = $409;$round$0162$i = $410;
        }
       }
       $412 = HEAP8[$prefix$0$$i>>0]|0;
       $413 = ($412<<24>>24)==(45);
       if ($413) {
        $414 = -$396;
        $415 = $414 - $410;
        $416 = $410 + $415;
        $417 = -$416;
        $$1$i = $417;
        break;
       } else {
        $418 = $396 + $410;
        $419 = $418 - $410;
        $$1$i = $419;
        break;
       }
      }
     } while(0);
     $420 = HEAP32[$e2$i>>2]|0;
     $421 = ($420|0)<(0);
     $422 = (0 - ($420))|0;
     $423 = $421 ? $422 : $420;
     $424 = ($423|0)<(0);
     if ($424) {
      $425 = ($423|0)<(0);
      $426 = $425 << 31 >> 31;
      $$05$i$i = $7;$427 = $423;$428 = $426;
      while(1) {
       $429 = (___uremdi3(($427|0),($428|0),10,0)|0);
       $430 = tempRet0;
       $431 = $429 | 48;
       $432 = $431&255;
       $433 = (($$05$i$i) + -1|0);
       HEAP8[$433>>0] = $432;
       $434 = (___udivdi3(($427|0),($428|0),10,0)|0);
       $435 = tempRet0;
       $436 = ($428>>>0)>(9);
       $437 = ($427>>>0)>(4294967295);
       $438 = ($428|0)==(9);
       $439 = $438 & $437;
       $440 = $436 | $439;
       if ($440) {
        $$05$i$i = $433;$427 = $434;$428 = $435;
       } else {
        break;
       }
      }
      $$0$lcssa$i53$i = $433;$$01$lcssa$off0$i$i = $434;
     } else {
      $$0$lcssa$i53$i = $7;$$01$lcssa$off0$i$i = $423;
     }
     $441 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($441) {
      $$1$lcssa$i$i = $$0$lcssa$i53$i;
     } else {
      $$12$i$i = $$0$lcssa$i53$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $442 = (($y$03$i$i>>>0) % 10)&-1;
       $443 = $442 | 48;
       $444 = $443&255;
       $445 = (($$12$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (($y$03$i$i>>>0) / 10)&-1;
       $447 = ($y$03$i$i>>>0)<(10);
       if ($447) {
        $$1$lcssa$i$i = $445;
        break;
       } else {
        $$12$i$i = $445;$y$03$i$i = $446;
       }
      }
     }
     $448 = ($$1$lcssa$i$i|0)==($7|0);
     if ($448) {
      HEAP8[$8>>0] = 48;
      $estr$0$i = $8;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $449 = HEAP32[$e2$i>>2]|0;
     $450 = $449 >> 31;
     $451 = $450 & 2;
     $452 = (($451) + 43)|0;
     $453 = $452&255;
     $454 = (($estr$0$i) + -1|0);
     HEAP8[$454>>0] = $453;
     $455 = (($t$0) + 15)|0;
     $456 = $455&255;
     $457 = (($estr$0$i) + -2|0);
     HEAP8[$457>>0] = $456;
     $notrhs$i = ($p$0|0)<(1);
     if ($notrhs$i) {
      $458 = $fl$1$ & 8;
      $459 = ($458|0)==(0);
      if ($459) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $460 = (~~(($$2$us$us$i)));
        $461 = (134056 + ($460)|0);
        $462 = HEAP8[$461>>0]|0;
        $463 = $462&255;
        $464 = $463 | $402;
        $465 = $464&255;
        $466 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $465;
        $467 = (+($460|0));
        $468 = $$2$us$us$i - $467;
        $469 = $468 * 16.0;
        $470 = $466;
        $471 = (($470) - ($0))|0;
        $472 = ($471|0)!=(1);
        $notlhs$us$us$i = $469 == 0.0;
        $or$cond$i73 = $472 | $notlhs$us$us$i;
        if ($or$cond$i73) {
         $s$1$us$us$i = $466;
        } else {
         $473 = (($s$0$us$us$i) + 2|0);
         HEAP8[$466>>0] = 46;
         $s$1$us$us$i = $473;
        }
        $474 = $469 != 0.0;
        if ($474) {
         $$2$us$us$i = $469;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $475 = (~~(($$2$us$i)));
        $476 = (134056 + ($475)|0);
        $477 = HEAP8[$476>>0]|0;
        $478 = $477&255;
        $479 = $478 | $402;
        $480 = $479&255;
        $481 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $480;
        $482 = (+($475|0));
        $483 = $$2$us$i - $482;
        $484 = $483 * 16.0;
        $485 = $481;
        $486 = (($485) - ($0))|0;
        $487 = ($486|0)==(1);
        if ($487) {
         $488 = (($s$0$us$i) + 2|0);
         HEAP8[$481>>0] = 46;
         $s$1$us$i = $488;
        } else {
         $s$1$us$i = $481;
        }
        $489 = $484 != 0.0;
        if ($489) {
         $$2$us$i = $484;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      $$2$i = $$1$i;$s$0$i = $buf$i;
      while(1) {
       $490 = (~~(($$2$i)));
       $491 = (134056 + ($490)|0);
       $492 = HEAP8[$491>>0]|0;
       $493 = $492&255;
       $494 = $493 | $402;
       $495 = $494&255;
       $496 = (($s$0$i) + 1|0);
       HEAP8[$s$0$i>>0] = $495;
       $497 = (+($490|0));
       $498 = $$2$i - $497;
       $499 = $498 * 16.0;
       $500 = $496;
       $501 = (($500) - ($0))|0;
       $502 = ($501|0)==(1);
       if ($502) {
        $503 = (($s$0$i) + 2|0);
        HEAP8[$496>>0] = 46;
        $s$1$i = $503;
       } else {
        $s$1$i = $496;
       }
       $504 = $499 != 0.0;
       if ($504) {
        $$2$i = $499;$s$0$i = $s$1$i;
       } else {
        $s$1$lcssa$i = $s$1$i;
        break;
       }
      }
     }
     $505 = ($p$0|0)!=(0);
     $$pre306$i = $s$1$lcssa$i;
     $506 = (($11) + ($$pre306$i))|0;
     $507 = ($506|0)<($p$0|0);
     $or$cond271 = $505 & $507;
     $508 = $457;
     if ($or$cond271) {
      $509 = (($12) + ($p$0))|0;
      $510 = (($509) - ($508))|0;
      $l$0$i = $510;
     } else {
      $511 = (($10) - ($508))|0;
      $512 = (($511) + ($$pre306$i))|0;
      $l$0$i = $512;
     }
     $513 = (($l$0$i) + ($405))|0;
     $514 = $fl$1$ & 73728;
     $515 = ($514|0)==(0);
     $516 = ($w$1|0)>($513|0);
     $or$cond$i57$i = $515 & $516;
     if ($or$cond$i57$i) {
      $517 = (($w$1) - ($513))|0;
      $518 = ($517>>>0)>(256);
      $519 = $518 ? 256 : $517;
      _memset(($pad$i|0),32,($519|0))|0;
      $520 = ($517>>>0)>(255);
      if ($520) {
       $$01$i59$i = $517;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $521 = (($$01$i59$i) + -256)|0;
        $522 = ($521>>>0)>(255);
        if ($522) {
         $$01$i59$i = $521;
        } else {
         break;
        }
       }
       $523 = $517 & 255;
       $$0$lcssa$i61$i = $523;
      } else {
       $$0$lcssa$i61$i = $517;
      }
      (___fwritex($pad$i,$$0$lcssa$i61$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$405,$f)|0);
     $524 = ($514|0)==(65536);
     $or$cond$i64$i = $524 & $516;
     if ($or$cond$i64$i) {
      $525 = (($w$1) - ($513))|0;
      $526 = ($525>>>0)>(256);
      $527 = $526 ? 256 : $525;
      _memset(($pad$i|0),48,($527|0))|0;
      $528 = ($525>>>0)>(255);
      if ($528) {
       $$01$i66$i = $525;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $529 = (($$01$i66$i) + -256)|0;
        $530 = ($529>>>0)>(255);
        if ($530) {
         $$01$i66$i = $529;
        } else {
         break;
        }
       }
       $531 = $525 & 255;
       $$0$lcssa$i68$i = $531;
      } else {
       $$0$lcssa$i68$i = $525;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     $532 = (($$pre306$i) - ($0))|0;
     (___fwritex($buf$i,$532,$f)|0);
     $533 = $457;
     $534 = (($9) - ($533))|0;
     $535 = (($l$0$i) - ($534))|0;
     $536 = (($535) - ($532))|0;
     $537 = ($536|0)>(0);
     if ($537) {
      $538 = ($536>>>0)>(256);
      $539 = $538 ? 256 : $536;
      _memset(($pad$i|0),48,($539|0))|0;
      $540 = ($536>>>0)>(255);
      if ($540) {
       $$01$i72$i = $536;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $541 = (($$01$i72$i) + -256)|0;
        $542 = ($541>>>0)>(255);
        if ($542) {
         $$01$i72$i = $541;
        } else {
         break;
        }
       }
       $543 = $536 & 255;
       $$0$lcssa$i74$i = $543;
      } else {
       $$0$lcssa$i74$i = $536;
      }
      (___fwritex($pad$i,$$0$lcssa$i74$i,$f)|0);
     }
     (___fwritex($457,$534,$f)|0);
     $544 = ($514|0)==(8192);
     $or$cond$i77$i = $544 & $516;
     if ($or$cond$i77$i) {
      $545 = (($w$1) - ($513))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i79$i = $545;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $549 = (($$01$i79$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i79$i = $549;
        } else {
         break;
        }
       }
       $551 = $545 & 255;
       $$0$lcssa$i81$i = $551;
      } else {
       $$0$lcssa$i81$i = $545;
      }
      (___fwritex($pad$i,$$0$lcssa$i81$i,$f)|0);
     }
     $w$22$i = $516 ? $w$1 : $513;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$22$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $552 = ($p$0|0)<(0);
    $$p$i = $552 ? 6 : $p$0;
    if ($397) {
     $553 = $396 * 268435456.0;
     $554 = HEAP32[$e2$i>>2]|0;
     $555 = (($554) + -28)|0;
     HEAP32[$e2$i>>2] = $555;
     $$3$i = $553;$557 = $555;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $396;$557 = $$pre$i;
    }
    $556 = ($557|0)<(0);
    $$36$i = $556 ? $big$i : $13;
    $558 = $$36$i;
    $$4$i = $$3$i;$z$0$i = $$36$i;
    while(1) {
     $559 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $559;
     $560 = (($z$0$i) + 4|0);
     $561 = (+($559>>>0));
     $562 = $$4$i - $561;
     $563 = $562 * 1.0E+9;
     $564 = $563 != 0.0;
     if ($564) {
      $$4$i = $563;$z$0$i = $560;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $565 = ($$pr$i|0)>(0);
    if ($565) {
     $567 = $$pr$i;$a$1258$i = $$36$i;$z$1257$i = $560;
     while(1) {
      $566 = ($567|0)>(29);
      $568 = $566 ? 29 : $567;
      $d$0249$i = (($z$1257$i) + -4|0);
      $569 = ($d$0249$i>>>0)<($a$1258$i>>>0);
      do {
       if ($569) {
        $a$2$ph$i = $a$1258$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $d$0249$i;
        while(1) {
         $570 = HEAP32[$d$0251$i>>2]|0;
         $571 = (_bitshift64Shl(($570|0),0,($568|0))|0);
         $572 = tempRet0;
         $573 = (_i64Add(($571|0),($572|0),($carry$0250$i|0),0)|0);
         $574 = tempRet0;
         $575 = (___uremdi3(($573|0),($574|0),1000000000,0)|0);
         $576 = tempRet0;
         HEAP32[$d$0251$i>>2] = $575;
         $577 = (___udivdi3(($573|0),($574|0),1000000000,0)|0);
         $578 = tempRet0;
         $d$0$i = (($d$0251$i) + -4|0);
         $579 = ($d$0$i>>>0)<($a$1258$i>>>0);
         if ($579) {
          break;
         } else {
          $carry$0250$i = $577;$d$0251$i = $d$0$i;
         }
        }
        $580 = ($577|0)==(0);
        if ($580) {
         $a$2$ph$i = $a$1258$i;
         break;
        }
        $581 = (($a$1258$i) + -4|0);
        HEAP32[$581>>2] = $577;
        $a$2$ph$i = $581;
       }
      } while(0);
      $z$2$i = $z$1257$i;
      while(1) {
       $582 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($582)) {
        break;
       }
       $583 = (($z$2$i) + -4|0);
       $584 = HEAP32[$583>>2]|0;
       $585 = ($584|0)==(0);
       if ($585) {
        $z$2$i = $583;
       } else {
        break;
       }
      }
      $586 = HEAP32[$e2$i>>2]|0;
      $587 = (($586) - ($568))|0;
      HEAP32[$e2$i>>2] = $587;
      $588 = ($587|0)>(0);
      if ($588) {
       $567 = $587;$a$1258$i = $a$2$ph$i;$z$1257$i = $z$2$i;
      } else {
       $$pr151$i = $587;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr151$i = $$pr$i;$a$1$lcssa$i = $$36$i;$z$1$lcssa$i = $560;
    }
    $589 = ($$pr151$i|0)<(0);
    L232: do {
     if ($589) {
      $590 = (($$p$i) + 25)|0;
      $591 = (($590|0) / 9)&-1;
      $592 = (($591) + 1)|0;
      $593 = ($400|0)==(102);
      if ($593) {
       $594 = (($$36$i) + ($592<<2)|0);
       $596 = $$pr151$i;$a$3244$us$i = $a$1$lcssa$i;$z$3243$us$i = $z$1$lcssa$i;
       while(1) {
        $595 = (0 - ($596))|0;
        $597 = ($595|0)>(9);
        $$23$us$i = $597 ? 9 : $595;
        $598 = ($a$3244$us$i>>>0)<($z$3243$us$i>>>0);
        do {
         if ($598) {
          $623 = 1 << $$23$us$i;
          $617 = (($623) + -1)|0;
          $620 = 1000000000 >>> $$23$us$i;
          $carry3$0238$us$i = 0;$d$1237$us$i = $a$3244$us$i;
          while(1) {
           $615 = HEAP32[$d$1237$us$i>>2]|0;
           $616 = $615 & $617;
           $618 = $615 >>> $$23$us$i;
           $619 = (($618) + ($carry3$0238$us$i))|0;
           HEAP32[$d$1237$us$i>>2] = $619;
           $606 = Math_imul($616, $620)|0;
           $621 = (($d$1237$us$i) + 4|0);
           $622 = ($621>>>0)<($z$3243$us$i>>>0);
           if ($622) {
            $carry3$0238$us$i = $606;$d$1237$us$i = $621;
           } else {
            break;
           }
          }
          $602 = HEAP32[$a$3244$us$i>>2]|0;
          $603 = ($602|0)==(0);
          $604 = (($a$3244$us$i) + 4|0);
          $$a$3$us$i = $603 ? $604 : $a$3244$us$i;
          $605 = ($606|0)==(0);
          if ($605) {
           $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $z$3243$us$i;
           break;
          }
          $607 = (($z$3243$us$i) + 4|0);
          HEAP32[$z$3243$us$i>>2] = $606;
          $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $607;
         } else {
          $599 = HEAP32[$a$3244$us$i>>2]|0;
          $600 = ($599|0)==(0);
          $601 = (($a$3244$us$i) + 4|0);
          $$a$3$us307$i = $600 ? $601 : $a$3244$us$i;
          $$a$3$us308$i = $$a$3$us307$i;$z$4$us$i = $z$3243$us$i;
         }
        } while(0);
        $608 = $z$4$us$i;
        $609 = (($608) - ($558))|0;
        $610 = $609 >> 2;
        $611 = ($610|0)>($592|0);
        $$z$4$us$i = $611 ? $594 : $z$4$us$i;
        $612 = HEAP32[$e2$i>>2]|0;
        $613 = (($612) + ($$23$us$i))|0;
        HEAP32[$e2$i>>2] = $613;
        $614 = ($613|0)<(0);
        if ($614) {
         $596 = $613;$a$3244$us$i = $$a$3$us308$i;$z$3243$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us308$i;$z$3$lcssa$i = $$z$4$us$i;
         break L232;
        }
       }
      } else {
       $625 = $$pr151$i;$a$3244$i = $a$1$lcssa$i;$z$3243$i = $z$1$lcssa$i;
      }
      while(1) {
       $624 = (0 - ($625))|0;
       $626 = ($624|0)>(9);
       $$23$i = $626 ? 9 : $624;
       $627 = ($a$3244$i>>>0)<($z$3243$i>>>0);
       do {
        if ($627) {
         $631 = 1 << $$23$i;
         $632 = (($631) + -1)|0;
         $633 = 1000000000 >>> $$23$i;
         $carry3$0238$i = 0;$d$1237$i = $a$3244$i;
         while(1) {
          $634 = HEAP32[$d$1237$i>>2]|0;
          $635 = $634 & $632;
          $636 = $634 >>> $$23$i;
          $637 = (($636) + ($carry3$0238$i))|0;
          HEAP32[$d$1237$i>>2] = $637;
          $638 = Math_imul($635, $633)|0;
          $639 = (($d$1237$i) + 4|0);
          $640 = ($639>>>0)<($z$3243$i>>>0);
          if ($640) {
           $carry3$0238$i = $638;$d$1237$i = $639;
          } else {
           break;
          }
         }
         $641 = HEAP32[$a$3244$i>>2]|0;
         $642 = ($641|0)==(0);
         $643 = (($a$3244$i) + 4|0);
         $$a$3$i = $642 ? $643 : $a$3244$i;
         $644 = ($638|0)==(0);
         if ($644) {
          $$a$3310$i = $$a$3$i;$z$4$i = $z$3243$i;
          break;
         }
         $645 = (($z$3243$i) + 4|0);
         HEAP32[$z$3243$i>>2] = $638;
         $$a$3310$i = $$a$3$i;$z$4$i = $645;
        } else {
         $628 = HEAP32[$a$3244$i>>2]|0;
         $629 = ($628|0)==(0);
         $630 = (($a$3244$i) + 4|0);
         $$a$3309$i = $629 ? $630 : $a$3244$i;
         $$a$3310$i = $$a$3309$i;$z$4$i = $z$3243$i;
        }
       } while(0);
       $646 = $z$4$i;
       $647 = $$a$3310$i;
       $648 = (($646) - ($647))|0;
       $649 = $648 >> 2;
       $650 = ($649|0)>($592|0);
       if ($650) {
        $651 = (($$a$3310$i) + ($592<<2)|0);
        $z$5$i = $651;
       } else {
        $z$5$i = $z$4$i;
       }
       $652 = HEAP32[$e2$i>>2]|0;
       $653 = (($652) + ($$23$i))|0;
       HEAP32[$e2$i>>2] = $653;
       $654 = ($653|0)<(0);
       if ($654) {
        $625 = $653;$a$3244$i = $$a$3310$i;$z$3243$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3310$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $655 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    do {
     if ($655) {
      $656 = $a$3$lcssa$i;
      $657 = (($558) - ($656))|0;
      $658 = $657 >> 2;
      $659 = ($658*9)|0;
      $660 = HEAP32[$a$3$lcssa$i>>2]|0;
      $661 = ($660>>>0)<(10);
      if ($661) {
       $e$1$i = $659;
       break;
      } else {
       $e$0233$i = $659;$i$0232$i = 10;
      }
      while(1) {
       $662 = ($i$0232$i*10)|0;
       $663 = (($e$0233$i) + 1)|0;
       $664 = ($660>>>0)<($662>>>0);
       if ($664) {
        $e$1$i = $663;
        break;
       } else {
        $e$0233$i = $663;$i$0232$i = $662;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $665 = ($400|0)!=(102);
    $666 = $665 ? $e$1$i : 0;
    $667 = (($$p$i) - ($666))|0;
    $668 = ($400|0)==(103);
    $669 = ($$p$i|0)!=(0);
    $$24$i = $668 & $669;
    $$neg156$i = $$24$i << 31 >> 31;
    $670 = (($667) + ($$neg156$i))|0;
    $671 = $z$3$lcssa$i;
    $672 = (($671) - ($558))|0;
    $673 = $672 >> 2;
    $674 = ($673*9)|0;
    $675 = (($674) + -9)|0;
    $676 = ($670|0)<($675|0);
    if ($676) {
     $677 = (($670) + 9216)|0;
     $678 = (($677|0) / 9)&-1;
     $$sum$i = (($678) + -1023)|0;
     $679 = (($$36$i) + ($$sum$i<<2)|0);
     $680 = (($677|0) % 9)&-1;
     $j$0224$i = (($680) + 1)|0;
     $681 = ($j$0224$i|0)<(9);
     if ($681) {
      $i$1225$i = 10;$j$0226$i = $j$0224$i;
      while(1) {
       $682 = ($i$1225$i*10)|0;
       $j$0$i = (($j$0226$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $682;
        break;
       } else {
        $i$1225$i = $682;$j$0226$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $683 = HEAP32[$679>>2]|0;
     $684 = (($683>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $685 = ($684|0)==(0);
     if ($685) {
      $$sum18$i = (($678) + -1022)|0;
      $686 = (($$36$i) + ($$sum18$i<<2)|0);
      $687 = ($686|0)==($z$3$lcssa$i|0);
      if ($687) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $679;$e$3$i = $e$1$i;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
     do {
      if ((label|0) == 232) {
       label = 0;
       $688 = (($683>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $689 = $688 & 1;
       $690 = ($689|0)==(0);
       $$25$i = $690 ? 9007199254740992.0 : 9007199254740994.0;
       $691 = (($i$1$lcssa$i|0) / 2)&-1;
       $692 = ($684>>>0)<($691>>>0);
       do {
        if ($692) {
         $small$0$i = 0.5;
        } else {
         $693 = ($684|0)==($691|0);
         if ($693) {
          $$sum19$i = (($678) + -1022)|0;
          $694 = (($$36$i) + ($$sum19$i<<2)|0);
          $695 = ($694|0)==($z$3$lcssa$i|0);
          if ($695) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $696 = ($pl$0$i|0)==(0);
       do {
        if ($696) {
         $round6$1$i = $$25$i;$small$1$i = $small$0$i;
        } else {
         $697 = HEAP8[$prefix$0$i>>0]|0;
         $698 = ($697<<24>>24)==(45);
         if (!($698)) {
          $round6$1$i = $$25$i;$small$1$i = $small$0$i;
          break;
         }
         $699 = $$25$i * -1.0;
         $700 = $small$0$i * -1.0;
         $round6$1$i = $699;$small$1$i = $700;
        }
       } while(0);
       $701 = (($683) - ($684))|0;
       HEAP32[$679>>2] = $701;
       $702 = $round6$1$i + $small$1$i;
       $703 = $702 != $round6$1$i;
       if (!($703)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $679;$e$3$i = $e$1$i;
        break;
       }
       $704 = (($701) + ($i$1$lcssa$i))|0;
       HEAP32[$679>>2] = $704;
       $705 = ($704>>>0)>(999999999);
       if ($705) {
        $a$5218$i = $a$3$lcssa$i;$d$2217$i = $679;
        while(1) {
         $706 = (($d$2217$i) + -4|0);
         HEAP32[$d$2217$i>>2] = 0;
         $707 = ($706>>>0)<($a$5218$i>>>0);
         if ($707) {
          $708 = (($a$5218$i) + -4|0);
          HEAP32[$708>>2] = 0;
          $a$6$i = $708;
         } else {
          $a$6$i = $a$5218$i;
         }
         $709 = HEAP32[$706>>2]|0;
         $710 = (($709) + 1)|0;
         HEAP32[$706>>2] = $710;
         $711 = ($710>>>0)>(999999999);
         if ($711) {
          $a$5218$i = $a$6$i;$d$2217$i = $706;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $706;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $679;
       }
       $712 = $a$5$lcssa$i;
       $713 = (($558) - ($712))|0;
       $714 = $713 >> 2;
       $715 = ($714*9)|0;
       $716 = HEAP32[$a$5$lcssa$i>>2]|0;
       $717 = ($716>>>0)<(10);
       if ($717) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $715;
        break;
       } else {
        $e$2213$i = $715;$i$2212$i = 10;
       }
       while(1) {
        $718 = ($i$2212$i*10)|0;
        $719 = (($e$2213$i) + 1)|0;
        $720 = ($716>>>0)<($718>>>0);
        if ($720) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $719;
         break;
        } else {
         $e$2213$i = $719;$i$2212$i = $718;
        }
       }
      }
     } while(0);
     $721 = (($d$3$i) + 4|0);
     $722 = ($z$3$lcssa$i>>>0)>($721>>>0);
     $$z$3$i = $722 ? $721 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $723 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $724 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($724)) {
      $$lcssa292$i = 0;
      break;
     }
     $725 = (($z$6$i) + -4|0);
     $726 = HEAP32[$725>>2]|0;
     $727 = ($726|0)==(0);
     if ($727) {
      $z$6$i = $725;
     } else {
      $$lcssa292$i = 1;
      break;
     }
    }
    do {
     if ($668) {
      $728 = ($$p$i|0)==(0);
      $729 = $728&1;
      $$$p$i = (($729) + ($$p$i))|0;
      $730 = ($$$p$i|0)>($e$4$ph$i|0);
      $731 = ($e$4$ph$i|0)>(-5);
      $or$cond5$i = $730 & $731;
      if ($or$cond5$i) {
       $732 = (($t$0) + -1)|0;
       $$neg157$i = (($$$p$i) + -1)|0;
       $733 = (($$neg157$i) - ($e$4$ph$i))|0;
       $$016$i = $732;$$213$i = $733;
      } else {
       $734 = (($t$0) + -2)|0;
       $735 = (($$$p$i) + -1)|0;
       $$016$i = $734;$$213$i = $735;
      }
      $736 = $fl$1$ & 8;
      $737 = ($736|0)==(0);
      if (!($737)) {
       $$117$i = $$016$i;$$314$i = $$213$i;
       break;
      }
      do {
       if ($$lcssa292$i) {
        $738 = (($z$6$i) + -4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = ($739|0)==(0);
        if ($740) {
         $j$2$i = 9;
         break;
        }
        $741 = (($739>>>0) % 10)&-1;
        $742 = ($741|0)==(0);
        if ($742) {
         $i$3204$i = 10;$j$1205$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $743 = ($i$3204$i*10)|0;
         $744 = (($j$1205$i) + 1)|0;
         $745 = (($739>>>0) % ($743>>>0))&-1;
         $746 = ($745|0)==(0);
         if ($746) {
          $i$3204$i = $743;$j$1205$i = $744;
         } else {
          $j$2$i = $744;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $747 = $$016$i | 32;
      $748 = ($747|0)==(102);
      $749 = $z$6$i;
      $750 = (($749) - ($558))|0;
      $751 = $750 >> 2;
      $752 = ($751*9)|0;
      $753 = (($752) + -9)|0;
      if ($748) {
       $754 = (($753) - ($j$2$i))|0;
       $755 = ($754|0)<(0);
       $$26$i = $755 ? 0 : $754;
       $756 = ($$213$i|0)<($$26$i|0);
       $$213$$26$i = $756 ? $$213$i : $$26$i;
       $$117$i = $$016$i;$$314$i = $$213$$26$i;
       break;
      } else {
       $757 = (($753) + ($e$4$ph$i))|0;
       $758 = (($757) - ($j$2$i))|0;
       $759 = ($758|0)<(0);
       $$28$i = $759 ? 0 : $758;
       $760 = ($$213$i|0)<($$28$i|0);
       $$213$$28$i = $760 ? $$213$i : $$28$i;
       $$117$i = $$016$i;$$314$i = $$213$$28$i;
       break;
      }
     } else {
      $$117$i = $t$0;$$314$i = $$p$i;
     }
    } while(0);
    $761 = ($$314$i|0)!=(0);
    if ($761) {
     $765 = 1;
    } else {
     $762 = $fl$1$ & 8;
     $763 = ($762|0)!=(0);
     $765 = $763;
    }
    $764 = $765&1;
    $766 = $$117$i | 32;
    $767 = ($766|0)==(102);
    if ($767) {
     $768 = ($e$4$ph$i|0)>(0);
     $769 = $768 ? $e$4$ph$i : 0;
     $$pn$i = $769;$estr$2$i = 0;
    } else {
     $770 = ($e$4$ph$i|0)<(0);
     $771 = $770 ? $723 : $e$4$ph$i;
     $772 = ($771|0)<(0);
     if ($772) {
      $773 = ($771|0)<(0);
      $774 = $773 << 31 >> 31;
      $$05$i84$i = $7;$775 = $771;$776 = $774;
      while(1) {
       $777 = (___uremdi3(($775|0),($776|0),10,0)|0);
       $778 = tempRet0;
       $779 = $777 | 48;
       $780 = $779&255;
       $781 = (($$05$i84$i) + -1|0);
       HEAP8[$781>>0] = $780;
       $782 = (___udivdi3(($775|0),($776|0),10,0)|0);
       $783 = tempRet0;
       $784 = ($776>>>0)>(9);
       $785 = ($775>>>0)>(4294967295);
       $786 = ($776|0)==(9);
       $787 = $786 & $785;
       $788 = $784 | $787;
       if ($788) {
        $$05$i84$i = $781;$775 = $782;$776 = $783;
       } else {
        break;
       }
      }
      $$0$lcssa$i89$i = $781;$$01$lcssa$off0$i90$i = $782;
     } else {
      $$0$lcssa$i89$i = $7;$$01$lcssa$off0$i90$i = $771;
     }
     $789 = ($$01$lcssa$off0$i90$i|0)==(0);
     if ($789) {
      $estr$1$ph$i = $$0$lcssa$i89$i;
     } else {
      $$12$i92$i = $$0$lcssa$i89$i;$y$03$i91$i = $$01$lcssa$off0$i90$i;
      while(1) {
       $790 = (($y$03$i91$i>>>0) % 10)&-1;
       $791 = $790 | 48;
       $792 = $791&255;
       $793 = (($$12$i92$i) + -1|0);
       HEAP8[$793>>0] = $792;
       $794 = (($y$03$i91$i>>>0) / 10)&-1;
       $795 = ($y$03$i91$i>>>0)<(10);
       if ($795) {
        $estr$1$ph$i = $793;
        break;
       } else {
        $$12$i92$i = $793;$y$03$i91$i = $794;
       }
      }
     }
     $796 = $estr$1$ph$i;
     $797 = (($9) - ($796))|0;
     $798 = ($797|0)<(2);
     if ($798) {
      $estr$1195$i = $estr$1$ph$i;
      while(1) {
       $799 = (($estr$1195$i) + -1|0);
       HEAP8[$799>>0] = 48;
       $800 = $799;
       $801 = (($9) - ($800))|0;
       $802 = ($801|0)<(2);
       if ($802) {
        $estr$1195$i = $799;
       } else {
        $estr$1$lcssa$i = $799;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $803 = $e$4$ph$i >> 31;
     $804 = $803 & 2;
     $805 = (($804) + 43)|0;
     $806 = $805&255;
     $807 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$807>>0] = $806;
     $808 = $$117$i&255;
     $809 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$809>>0] = $808;
     $810 = $809;
     $811 = (($9) - ($810))|0;
     $$pn$i = $811;$estr$2$i = $809;
    }
    $812 = (($pl$0$i) + 1)|0;
    $813 = (($812) + ($$314$i))|0;
    $l$1$i = (($813) + ($764))|0;
    $814 = (($l$1$i) + ($$pn$i))|0;
    $815 = $fl$1$ & 73728;
    $816 = ($815|0)==(0);
    $817 = ($w$1|0)>($814|0);
    $or$cond$i98$i = $816 & $817;
    if ($or$cond$i98$i) {
     $818 = (($w$1) - ($814))|0;
     $819 = ($818>>>0)>(256);
     $820 = $819 ? 256 : $818;
     _memset(($pad$i|0),32,($820|0))|0;
     $821 = ($818>>>0)>(255);
     if ($821) {
      $$01$i100$i = $818;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $822 = (($$01$i100$i) + -256)|0;
       $823 = ($822>>>0)>(255);
       if ($823) {
        $$01$i100$i = $822;
       } else {
        break;
       }
      }
      $824 = $818 & 255;
      $$0$lcssa$i102$i = $824;
     } else {
      $$0$lcssa$i102$i = $818;
     }
     (___fwritex($pad$i,$$0$lcssa$i102$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $825 = ($815|0)==(65536);
    $or$cond$i105$i = $825 & $817;
    if ($or$cond$i105$i) {
     $826 = (($w$1) - ($814))|0;
     $827 = ($826>>>0)>(256);
     $828 = $827 ? 256 : $826;
     _memset(($pad$i|0),48,($828|0))|0;
     $829 = ($826>>>0)>(255);
     if ($829) {
      $$01$i107$i = $826;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $830 = (($$01$i107$i) + -256)|0;
       $831 = ($830>>>0)>(255);
       if ($831) {
        $$01$i107$i = $830;
       } else {
        break;
       }
      }
      $832 = $826 & 255;
      $$0$lcssa$i109$i = $832;
     } else {
      $$0$lcssa$i109$i = $826;
     }
     (___fwritex($pad$i,$$0$lcssa$i109$i,$f)|0);
    }
    do {
     if ($767) {
      $833 = ($a$8$ph$i>>>0)>($$36$i>>>0);
      $r$0$a$8$i = $833 ? $$36$i : $a$8$ph$i;
      $d$4180$i = $r$0$a$8$i;
      while(1) {
       $834 = HEAP32[$d$4180$i>>2]|0;
       $835 = ($834|0)==(0);
       if ($835) {
        $$1$lcssa$i117$i = $14;
       } else {
        $$12$i115$i = $14;$y$03$i114$i = $834;
        while(1) {
         $836 = (($y$03$i114$i>>>0) % 10)&-1;
         $837 = $836 | 48;
         $838 = $837&255;
         $839 = (($$12$i115$i) + -1|0);
         HEAP8[$839>>0] = $838;
         $840 = (($y$03$i114$i>>>0) / 10)&-1;
         $841 = ($y$03$i114$i>>>0)<(10);
         if ($841) {
          $$1$lcssa$i117$i = $839;
          break;
         } else {
          $$12$i115$i = $839;$y$03$i114$i = $840;
         }
        }
       }
       $842 = ($d$4180$i|0)==($r$0$a$8$i|0);
       do {
        if ($842) {
         $846 = ($$1$lcssa$i117$i|0)==($14|0);
         if (!($846)) {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         HEAP8[$16>>0] = 48;
         $s7$1$i = $16;
        } else {
         $843 = ($$1$lcssa$i117$i>>>0)>($buf$i>>>0);
         if ($843) {
          $s7$0177$i = $$1$lcssa$i117$i;
         } else {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         while(1) {
          $844 = (($s7$0177$i) + -1|0);
          HEAP8[$844>>0] = 48;
          $845 = ($844>>>0)>($buf$i>>>0);
          if ($845) {
           $s7$0177$i = $844;
          } else {
           $s7$1$i = $844;
           break;
          }
         }
        }
       } while(0);
       $847 = $s7$1$i;
       $848 = (($15) - ($847))|0;
       (___fwritex($s7$1$i,$848,$f)|0);
       $849 = (($d$4180$i) + 4|0);
       $850 = ($849>>>0)>($$36$i>>>0);
       if ($850) {
        break;
       } else {
        $d$4180$i = $849;
       }
      }
      $$not$i = $761 ^ 1;
      $851 = $fl$1$ & 8;
      $852 = ($851|0)==(0);
      $or$cond32$i = $852 & $$not$i;
      if (!($or$cond32$i)) {
       (___fwritex(134072,1,$f)|0);
      }
      $853 = ($849>>>0)<($z$6$i>>>0);
      $854 = ($$314$i|0)>(0);
      $or$cond7169$i = $853 & $854;
      if ($or$cond7169$i) {
       $$415171$i = $$314$i;$d$5170$i = $849;
       while(1) {
        $855 = HEAP32[$d$5170$i>>2]|0;
        $856 = ($855|0)==(0);
        if ($856) {
         $s8$0165$i = $14;
         label = 301;
        } else {
         $$12$i124$i = $14;$y$03$i123$i = $855;
         while(1) {
          $857 = (($y$03$i123$i>>>0) % 10)&-1;
          $858 = $857 | 48;
          $859 = $858&255;
          $860 = (($$12$i124$i) + -1|0);
          HEAP8[$860>>0] = $859;
          $861 = (($y$03$i123$i>>>0) / 10)&-1;
          $862 = ($y$03$i123$i>>>0)<(10);
          if ($862) {
           break;
          } else {
           $$12$i124$i = $860;$y$03$i123$i = $861;
          }
         }
         $863 = ($860>>>0)>($buf$i>>>0);
         if ($863) {
          $s8$0165$i = $860;
          label = 301;
         } else {
          $s8$0$lcssa$i = $860;
         }
        }
        if ((label|0) == 301) {
         while(1) {
          label = 0;
          $864 = (($s8$0165$i) + -1|0);
          HEAP8[$864>>0] = 48;
          $865 = ($864>>>0)>($buf$i>>>0);
          if ($865) {
           $s8$0165$i = $864;
           label = 301;
          } else {
           $s8$0$lcssa$i = $864;
           break;
          }
         }
        }
        $866 = ($$415171$i|0)>(9);
        $867 = $866 ? 9 : $$415171$i;
        (___fwritex($s8$0$lcssa$i,$867,$f)|0);
        $868 = (($d$5170$i) + 4|0);
        $869 = (($$415171$i) + -9)|0;
        $870 = ($868>>>0)<($z$6$i>>>0);
        $871 = ($869|0)>(0);
        $or$cond7$i = $870 & $871;
        if ($or$cond7$i) {
         $$415171$i = $869;$d$5170$i = $868;
        } else {
         $$415$lcssa$i = $869;
         break;
        }
       }
      } else {
       $$415$lcssa$i = $$314$i;
      }
      $872 = ($$415$lcssa$i|0)>(0);
      if (!($872)) {
       break;
      }
      $873 = ($$415$lcssa$i>>>0)>(256);
      $874 = $873 ? 256 : $$415$lcssa$i;
      _memset(($pad$i|0),48,($874|0))|0;
      $875 = ($$415$lcssa$i>>>0)>(255);
      if ($875) {
       $$01$i131$i = $$415$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $876 = (($$01$i131$i) + -256)|0;
        $877 = ($876>>>0)>(255);
        if ($877) {
         $$01$i131$i = $876;
        } else {
         break;
        }
       }
       $878 = $$415$lcssa$i & 255;
       $$0$lcssa$i133$i = $878;
      } else {
       $$0$lcssa$i133$i = $$415$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i133$i,$f)|0);
     } else {
      $879 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa292$i ? $z$6$i : $879;
      $880 = ($$314$i|0)>(-1);
      do {
       if ($880) {
        $881 = $fl$1$ & 8;
        $882 = ($881|0)==(0);
        $$5189$i = $$314$i;$d$6188$i = $a$8$ph$i;
        while(1) {
         $883 = HEAP32[$d$6188$i>>2]|0;
         $884 = ($883|0)==(0);
         if ($884) {
          label = 313;
         } else {
          $$12$i139$i = $14;$y$03$i138$i = $883;
          while(1) {
           $885 = (($y$03$i138$i>>>0) % 10)&-1;
           $886 = $885 | 48;
           $887 = $886&255;
           $888 = (($$12$i139$i) + -1|0);
           HEAP8[$888>>0] = $887;
           $889 = (($y$03$i138$i>>>0) / 10)&-1;
           $890 = ($y$03$i138$i>>>0)<(10);
           if ($890) {
            break;
           } else {
            $$12$i139$i = $888;$y$03$i138$i = $889;
           }
          }
          $891 = ($888|0)==($14|0);
          if ($891) {
           label = 313;
          } else {
           $s9$0$i = $888;
          }
         }
         if ((label|0) == 313) {
          label = 0;
          HEAP8[$16>>0] = 48;
          $s9$0$i = $16;
         }
         $892 = ($d$6188$i|0)==($a$8$ph$i|0);
         do {
          if ($892) {
           $896 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $897 = ($$5189$i|0)<(1);
           $or$cond34$i = $897 & $882;
           if ($or$cond34$i) {
            $s9$2$i = $896;
            break;
           }
           (___fwritex(134072,1,$f)|0);
           $s9$2$i = $896;
          } else {
           $893 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($893) {
            $s9$1184$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $894 = (($s9$1184$i) + -1|0);
            HEAP8[$894>>0] = 48;
            $895 = ($894>>>0)>($buf$i>>>0);
            if ($895) {
             $s9$1184$i = $894;
            } else {
             $s9$2$i = $894;
             break;
            }
           }
          }
         } while(0);
         $898 = $s9$2$i;
         $899 = (($15) - ($898))|0;
         $900 = ($$5189$i|0)>($899|0);
         $$$5$i = $900 ? $899 : $$5189$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $901 = (($$5189$i) - ($899))|0;
         $902 = (($d$6188$i) + 4|0);
         $903 = ($902>>>0)<($z$6$$i>>>0);
         $904 = ($901|0)>(-1);
         $or$cond9$i = $903 & $904;
         if ($or$cond9$i) {
          $$5189$i = $901;$d$6188$i = $902;
         } else {
          break;
         }
        }
        $905 = ($901|0)>(0);
        if (!($905)) {
         break;
        }
        $906 = ($901>>>0)>(256);
        $907 = $906 ? 256 : $901;
        _memset(($pad$i|0),48,($907|0))|0;
        $908 = ($901>>>0)>(255);
        if ($908) {
         $$01$i146$i = $901;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $909 = (($$01$i146$i) + -256)|0;
          $910 = ($909>>>0)>(255);
          if ($910) {
           $$01$i146$i = $909;
          } else {
           break;
          }
         }
         $911 = $901 & 255;
         $$0$lcssa$i148$i = $911;
        } else {
         $$0$lcssa$i148$i = $901;
        }
        (___fwritex($pad$i,$$0$lcssa$i148$i,$f)|0);
       }
      } while(0);
      $912 = $estr$2$i;
      $913 = (($9) - ($912))|0;
      (___fwritex($estr$2$i,$913,$f)|0);
     }
    } while(0);
    $914 = ($815|0)==(8192);
    $or$cond$i$i = $914 & $817;
    if ($or$cond$i$i) {
     $915 = (($w$1) - ($814))|0;
     $916 = ($915>>>0)>(256);
     $917 = $916 ? 256 : $915;
     _memset(($pad$i|0),32,($917|0))|0;
     $918 = ($915>>>0)>(255);
     if ($918) {
      $$01$i$i = $915;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $919 = (($$01$i$i) + -256)|0;
       $920 = ($919>>>0)>(255);
       if ($920) {
        $$01$i$i = $919;
       } else {
        break;
       }
      }
      $921 = $915 & 255;
      $$0$lcssa$i$i = $921;
     } else {
      $$0$lcssa$i$i = $915;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$35$i = $817 ? $w$1 : $814;
    $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$35$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 99:  {
    $304 = $191&255;
    HEAP8[$4>>0] = $304;
    $1036 = $191;$1037 = $218;$a$2 = $4;$fl$6 = $189;$p$5 = 1;$pl$2 = 0;$prefix$2 = 133976;$z$2 = $2;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 3:  {
     $200 = $cnt$1&65535;
     $201 = $191;
     HEAP16[$201>>1] = $200;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $202 = $cnt$1&255;
     $203 = $191;
     HEAP8[$203>>0] = $202;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $204 = $191;
     HEAP32[$204>>2] = $cnt$1;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $205 = ($cnt$1|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = $191;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $cnt$1;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $190 = $191;
     HEAP32[$190>>2] = $cnt$1;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $193 = ($cnt$1|0)<(0);
     $194 = $193 << 31 >> 31;
     $195 = $191;
     $196 = $195;
     $197 = $196;
     HEAP32[$197>>2] = $cnt$1;
     $198 = (($196) + 4)|0;
     $199 = $198;
     HEAP32[$199>>2] = $194;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $192 = $191;
     HEAP32[$192>>2] = $cnt$1;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 109:  {
    $305 = (___errno_location()|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = (_strerror(($306|0))|0);
    $a$1 = $307;
    label = 96;
    break;
   }
   case 115:  {
    $308 = $191;
    $309 = ($191|0)==(0);
    $$15 = $309 ? 133992 : $308;
    $a$1 = $$15;
    label = 96;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $191;
    HEAP32[$5>>2] = 0;
    $1038 = $wc;$1039 = $6;$p$4266 = -1;
    label = 101;
    break;
   }
   case 83:  {
    $316 = $191;
    $317 = ($p$0|0)==(0);
    if ($317) {
     $1040 = $191;$1041 = $316;$i$0$lcssa267 = 0;
     label = 106;
    } else {
     $1038 = $316;$1039 = $191;$p$4266 = $p$0;
     label = 101;
    }
    break;
   }
   case 117:  {
    $263 = $218;$265 = $191;$pl$0 = 0;$prefix$0 = 133976;
    label = 86;
    break;
   }
   case 112:  {
    $212 = ($p$0>>>0)>(8);
    $213 = $212 ? $p$0 : 8;
    $214 = $fl$1$ | 8;
    $fl$3 = $214;$p$1 = $213;$t$1 = 120;
    label = 75;
    break;
   }
   default: {
    $1036 = $191;$1037 = $218;$a$2 = $fmt83;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 133976;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 75) {
    label = 0;
    $215 = $t$1 & 32;
    $216 = ($191|0)==(0);
    $217 = ($218|0)==(0);
    $219 = $216 & $217;
    if ($219) {
     $293 = $191;$295 = $218;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 133976;
     label = 91;
    } else {
     $$012$i = $2;$221 = $191;$228 = $218;
     while(1) {
      $220 = $221 & 15;
      $222 = (134056 + ($220)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = $223&255;
      $225 = $224 | $215;
      $226 = $225&255;
      $227 = (($$012$i) + -1|0);
      HEAP8[$227>>0] = $226;
      $229 = (_bitshift64Lshr(($221|0),($228|0),4)|0);
      $230 = tempRet0;
      $231 = ($229|0)==(0);
      $232 = ($230|0)==(0);
      $233 = $231 & $232;
      if ($233) {
       break;
      } else {
       $$012$i = $227;$221 = $229;$228 = $230;
      }
     }
     $234 = $fl$3 & 8;
     $235 = ($234|0)==(0);
     if ($235) {
      $293 = $191;$295 = $218;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 133976;
      label = 91;
     } else {
      $236 = $t$1 >> 4;
      $237 = (133976 + ($236)|0);
      $293 = $191;$295 = $218;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $237;
      label = 91;
     }
    }
   }
   else if ((label|0) == 86) {
    label = 0;
    $262 = ($263>>>0)>(0);
    $264 = ($265>>>0)>(4294967295);
    $266 = ($263|0)==(0);
    $267 = $266 & $264;
    $268 = $262 | $267;
    if ($268) {
     $$05$i = $2;$269 = $265;$270 = $263;
     while(1) {
      $271 = (___uremdi3(($269|0),($270|0),10,0)|0);
      $272 = tempRet0;
      $273 = $271 | 48;
      $274 = $273&255;
      $275 = (($$05$i) + -1|0);
      HEAP8[$275>>0] = $274;
      $276 = (___udivdi3(($269|0),($270|0),10,0)|0);
      $277 = tempRet0;
      $278 = ($270>>>0)>(9);
      $279 = ($269>>>0)>(4294967295);
      $280 = ($270|0)==(9);
      $281 = $280 & $279;
      $282 = $278 | $281;
      if ($282) {
       $$05$i = $275;$269 = $276;$270 = $277;
      } else {
       break;
      }
     }
     $$0$lcssa$i47 = $275;$$01$lcssa$off0$i = $276;
    } else {
     $$0$lcssa$i47 = $2;$$01$lcssa$off0$i = $265;
    }
    $283 = ($$01$lcssa$off0$i|0)==(0);
    if ($283) {
     $293 = $265;$295 = $263;$a$0 = $$0$lcssa$i47;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 91;
    } else {
     $$12$i = $$0$lcssa$i47;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $284 = (($y$03$i>>>0) % 10)&-1;
      $285 = $284 | 48;
      $286 = $285&255;
      $287 = (($$12$i) + -1|0);
      HEAP8[$287>>0] = $286;
      $288 = (($y$03$i>>>0) / 10)&-1;
      $289 = ($y$03$i>>>0)<(10);
      if ($289) {
       $293 = $265;$295 = $263;$a$0 = $287;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 91;
       break;
      } else {
       $$12$i = $287;$y$03$i = $288;
      }
     }
    }
   }
   else if ((label|0) == 96) {
    label = 0;
    $310 = (_memchr($a$1,0,$p$0)|0);
    $311 = ($310|0)==(0|0);
    if ($311) {
     $312 = (($a$1) + ($p$0)|0);
     $1036 = $191;$1037 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 133976;$z$2 = $312;
     break;
    } else {
     $313 = $310;
     $314 = $a$1;
     $315 = (($313) - ($314))|0;
     $1036 = $191;$1037 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $315;$pl$2 = 0;$prefix$2 = 133976;$z$2 = $310;
     break;
    }
   }
   else if ((label|0) == 101) {
    label = 0;
    $i$0166 = 0;$l$1165 = 0;$ws$0167 = $1038;
    while(1) {
     $318 = HEAP32[$ws$0167>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $i$0$lcssa = $i$0166;$l$2 = $l$1165;
      break;
     }
     $320 = (_wctomb($mb,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($p$4266) - ($i$0166))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond17 = $321 | $323;
     if ($or$cond17) {
      $i$0$lcssa = $i$0166;$l$2 = $320;
      break;
     }
     $324 = (($ws$0167) + 4|0);
     $325 = (($320) + ($i$0166))|0;
     $326 = ($p$4266>>>0)>($325>>>0);
     if ($326) {
      $i$0166 = $325;$l$1165 = $320;$ws$0167 = $324;
     } else {
      $i$0$lcssa = $325;$l$2 = $320;
      break;
     }
    }
    $327 = ($l$2|0)<(0);
    if ($327) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1040 = $1039;$1041 = $1038;$i$0$lcssa267 = $i$0$lcssa;
     label = 106;
    }
   }
  } while(0);
  if ((label|0) == 91) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = ($293|0)!=(0);
   $294 = ($295|0)!=(0);
   $296 = $292 | $294;
   $297 = ($p$2|0)!=(0);
   $or$cond = $296 | $297;
   if ($or$cond) {
    $298 = $a$0;
    $299 = (($3) - ($298))|0;
    $300 = $296&1;
    $301 = $300 ^ 1;
    $302 = (($301) + ($299))|0;
    $303 = ($p$2|0)>($302|0);
    $p$2$ = $303 ? $p$2 : $302;
    $1036 = $293;$1037 = $295;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1036 = $293;$1037 = $295;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 106) {
   label = 0;
   $328 = $fl$1$ & 73728;
   $329 = ($328|0)==(0);
   $330 = ($w$1|0)>($i$0$lcssa267|0);
   $or$cond$i58 = $329 & $330;
   if ($or$cond$i58) {
    $331 = (($w$1) - ($i$0$lcssa267))|0;
    $332 = ($331>>>0)>(256);
    $333 = $332 ? 256 : $331;
    _memset(($pad$i|0),32,($333|0))|0;
    $334 = ($331>>>0)>(255);
    if ($334) {
     $$01$i60 = $331;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $335 = (($$01$i60) + -256)|0;
      $336 = ($335>>>0)>(255);
      if ($336) {
       $$01$i60 = $335;
      } else {
       break;
      }
     }
     $337 = $331 & 255;
     $$0$lcssa$i62 = $337;
    } else {
     $$0$lcssa$i62 = $331;
    }
    (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
   }
   $338 = ($i$0$lcssa267|0)==(0);
   L477: do {
    if (!($338)) {
     $i$1174 = 0;$ws$1175 = $1041;
     while(1) {
      $339 = HEAP32[$ws$1175>>2]|0;
      $340 = ($339|0)==(0);
      if ($340) {
       break L477;
      }
      $341 = (_wctomb($mb,$339)|0);
      $342 = (($341) + ($i$1174))|0;
      $343 = ($342|0)>($i$0$lcssa267|0);
      if ($343) {
       break L477;
      }
      $344 = (($ws$1175) + 4|0);
      (___fwritex($mb,$341,$f)|0);
      $345 = ($342>>>0)<($i$0$lcssa267>>>0);
      if ($345) {
       $i$1174 = $342;$ws$1175 = $344;
      } else {
       break;
      }
     }
    }
   } while(0);
   $346 = ($328|0)==(8192);
   $or$cond$i65 = $346 & $330;
   if ($or$cond$i65) {
    $347 = (($w$1) - ($i$0$lcssa267))|0;
    $348 = ($347>>>0)>(256);
    $349 = $348 ? 256 : $347;
    _memset(($pad$i|0),32,($349|0))|0;
    $350 = ($347>>>0)>(255);
    if ($350) {
     $$01$i67 = $347;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $351 = (($$01$i67) + -256)|0;
      $352 = ($351>>>0)>(255);
      if ($352) {
       $$01$i67 = $351;
      } else {
       break;
      }
     }
     $353 = $347 & 255;
     $$0$lcssa$i69 = $353;
    } else {
     $$0$lcssa$i69 = $347;
    }
    (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
   }
   $354 = $330 ? $w$1 : $i$0$lcssa267;
   $1029 = $1040;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $354;$l10n$0 = $l10n$3;
   continue;
  }
  $922 = $z$2;
  $923 = $a$2;
  $924 = (($922) - ($923))|0;
  $925 = ($p$5|0)<($924|0);
  $$p$5 = $925 ? $924 : $p$5;
  $926 = (($pl$2) + ($$p$5))|0;
  $927 = ($w$1|0)<($926|0);
  $w$2 = $927 ? $926 : $w$1;
  $928 = $fl$6 & 73728;
  $929 = ($928|0)==(0);
  $930 = ($w$2|0)>($926|0);
  $or$cond$i75 = $929 & $930;
  if ($or$cond$i75) {
   $931 = (($w$2) - ($926))|0;
   $932 = ($931>>>0)>(256);
   $933 = $932 ? 256 : $931;
   _memset(($pad$i|0),32,($933|0))|0;
   $934 = ($931>>>0)>(255);
   if ($934) {
    $$01$i77 = $931;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $935 = (($$01$i77) + -256)|0;
     $936 = ($935>>>0)>(255);
     if ($936) {
      $$01$i77 = $935;
     } else {
      break;
     }
    }
    $937 = $931 & 255;
    $$0$lcssa$i79 = $937;
   } else {
    $$0$lcssa$i79 = $931;
   }
   (___fwritex($pad$i,$$0$lcssa$i79,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $938 = ($928|0)==(65536);
  $or$cond$i51 = $938 & $930;
  if ($or$cond$i51) {
   $939 = (($w$2) - ($926))|0;
   $940 = ($939>>>0)>(256);
   $941 = $940 ? 256 : $939;
   _memset(($pad$i|0),48,($941|0))|0;
   $942 = ($939>>>0)>(255);
   if ($942) {
    $$01$i53 = $939;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $943 = (($$01$i53) + -256)|0;
     $944 = ($943>>>0)>(255);
     if ($944) {
      $$01$i53 = $943;
     } else {
      break;
     }
    }
    $945 = $939 & 255;
    $$0$lcssa$i55 = $945;
   } else {
    $$0$lcssa$i55 = $939;
   }
   (___fwritex($pad$i,$$0$lcssa$i55,$f)|0);
  }
  $946 = ($$p$5|0)>($924|0);
  if ($946) {
   $947 = (($$p$5) - ($924))|0;
   $948 = ($947>>>0)>(256);
   $949 = $948 ? 256 : $947;
   _memset(($pad$i|0),48,($949|0))|0;
   $950 = ($947>>>0)>(255);
   if ($950) {
    $$01$i38 = $947;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $951 = (($$01$i38) + -256)|0;
     $952 = ($951>>>0)>(255);
     if ($952) {
      $$01$i38 = $951;
     } else {
      break;
     }
    }
    $953 = $947 & 255;
    $$0$lcssa$i40 = $953;
   } else {
    $$0$lcssa$i40 = $947;
   }
   (___fwritex($pad$i,$$0$lcssa$i40,$f)|0);
  }
  (___fwritex($a$2,$924,$f)|0);
  $954 = ($928|0)==(8192);
  $or$cond$i = $954 & $930;
  if (!($or$cond$i)) {
   $1029 = $1036;$1030 = $1037;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $955 = (($w$2) - ($926))|0;
  $956 = ($955>>>0)>(256);
  $957 = $956 ? 256 : $955;
  _memset(($pad$i|0),32,($957|0))|0;
  $958 = ($955>>>0)>(255);
  if ($958) {
   $$01$i = $955;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $959 = (($$01$i) + -256)|0;
    $960 = ($959>>>0)>(255);
    if ($960) {
     $$01$i = $959;
    } else {
     break;
    }
   }
   $961 = $955 & 255;
   $$0$lcssa$i = $961;
  } else {
   $$0$lcssa$i = $955;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1029 = $1036;$1030 = $1037;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 352) {
  $962 = ($f|0)==(0|0);
  if (!($962)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $963 = ($l10n$0|0)==(0);
  if ($963) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2100 = 1;
  }
  while(1) {
   $964 = (($nl_type) + ($i$2100<<2)|0);
   $965 = HEAP32[$964>>2]|0;
   $966 = ($965|0)==(0);
   if ($966) {
    $i$397 = $i$2100;
    break;
   }
   $967 = (($nl_arg) + ($i$2100<<3)|0);
   $968 = ($965>>>0)>(20);
   L534: do {
    if (!($968)) {
     do {
      switch ($965|0) {
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $977 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $978 = $967;
       $979 = $978;
       HEAP32[$979>>2] = $977;
       $980 = (($978) + 4)|0;
       $981 = $980;
       HEAP32[$981>>2] = 0;
       break L534;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $992 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $993 = $992&65535;
       $994 = $993 << 16 >> 16;
       $995 = ($994|0)<(0);
       $996 = $995 << 31 >> 31;
       $997 = $967;
       $998 = $997;
       HEAP32[$998>>2] = $994;
       $999 = (($997) + 4)|0;
       $1000 = $999;
       HEAP32[$1000>>2] = $996;
       break L534;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1001 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1001 & 65535;
       $1002 = $967;
       $1003 = $1002;
       HEAP32[$1003>>2] = $$mask1$i;
       $1004 = (($1002) + 4)|0;
       $1005 = $1004;
       HEAP32[$1005>>2] = 0;
       break L534;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $982 = $arglist_current44;
       $983 = $982;
       $984 = HEAP32[$983>>2]|0;
       $985 = (($982) + 4)|0;
       $986 = $985;
       $987 = HEAP32[$986>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $988 = $967;
       $989 = $988;
       HEAP32[$989>>2] = $984;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = $987;
       break L534;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1015 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1015 & 255;
       $1016 = $967;
       $1017 = $1016;
       HEAP32[$1017>>2] = $$mask$i;
       $1018 = (($1016) + 4)|0;
       $1019 = $1018;
       HEAP32[$1019>>2] = 0;
       break L534;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1020 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$967>>3] = $1020;
       break L534;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1021 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$967>>3] = $1021;
       break L534;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1006 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1007 = $1006&255;
       $1008 = $1007 << 24 >> 24;
       $1009 = ($1008|0)<(0);
       $1010 = $1009 << 31 >> 31;
       $1011 = $967;
       $1012 = $1011;
       HEAP32[$1012>>2] = $1008;
       $1013 = (($1011) + 4)|0;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       break L534;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $969 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$967>>2] = $969;
       break L534;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $970 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $971 = ($970|0)<(0);
       $972 = $971 << 31 >> 31;
       $973 = $967;
       $974 = $973;
       HEAP32[$974>>2] = $970;
       $975 = (($973) + 4)|0;
       $976 = $975;
       HEAP32[$976>>2] = $972;
       break L534;
       break;
      }
      default: {
       break L534;
      }
      }
     } while(0);
    }
   } while(0);
   $1022 = (($i$2100) + 1)|0;
   $1023 = ($1022|0)<(10);
   if ($1023) {
    $i$2100 = $1022;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1026 = (($nl_type) + ($i$397<<2)|0);
   $1027 = HEAP32[$1026>>2]|0;
   $1028 = ($1027|0)==(0);
   $1025 = (($i$397) + 1)|0;
   if (!($1028)) {
    $$0 = -1;
    label = 370;
    break;
   }
   $1024 = ($1025|0)<(10);
   if ($1024) {
    $i$397 = $1025;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 370) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&255](a1|0);
  }


  function dynCall_viiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0;
    FUNCTION_TABLE_viiiiiiiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&255](a1|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&127](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function b1(p0) { p0 = p0|0; nullFunc_vi(1); }
  function b2(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0; nullFunc_viiiiiiiiiiii(2); }
  function b3(p0) { p0 = p0|0; nullFunc_ii(3);return 0; }
  function b4(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(4); }
  function b5(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(5); }
  function b6(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(6);return 0; }
  function b7(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(7);return 0; }
  function b8(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_sn_write,b0,__TIFFVSetField,__TIFFVGetField,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,__tiffDummyMapProc,b0,__tiffReadProc,__tiffWriteProc,b0,b0,b0,__tiffMapProc,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,_Fax3VGetField,_Fax3VSetField,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_LogLuvVGetField,_LogLuvVSetField,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,_PredictorVGetField,_PredictorVSetField,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_vi = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__TIFFvoid,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_Fax3Close,_Fax3Cleanup,b1,b1,b1,b1,b1,b1,b1,b1,b1,_LogLuvClose,_LogLuvCleanup,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_LZWCleanup,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_viiiiiiiiiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_putRGBAAseparate8bittile,_putRGBUAseparate8bittile,_putRGBseparate8bittile,_putRGBAAseparate16bittile,_putRGBUAseparate16bittile,_putRGBseparate16bittile,_putCMYKseparate8bittile
  ,_putseparate8bitYCbCr11tile,b2,b2,b2,b2];
  var FUNCTION_TABLE_ii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,__tiffCloseProc,__tiffSizeProc,b3,b3,__TIFFNoFixupTags,__TIFFtrue,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__notConfigured,_DumpFixupTags,b3,b3,b3,b3
  ,b3,_Fax4PostEncode,b3,b3,b3,b3,b3,_Fax3FixupTags,_Fax3SetupState,b3,b3,b3,_Fax3PostEncode,b3,b3,b3,b3,b3,_LogLuvFixupTags,_LogLuvSetupDecode,b3,b3,_LogLuvSetupEncode,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_LZWFixupTags,_LZWSetupDecode,b3,b3,_LZWSetupEncode,b3,_LZWPostEncode,b3,b3,b3,b3,b3
  ,b3,_PackBitsPostEncode,b3,b3,b3,b3,b3,_PredictorSetupDecode,_PredictorSetupEncode,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_ThunderSetupDecode,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_viii = [b4,_unixWarningHandler,_unixErrorHandler,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__TIFFNoPostDecode,b4,b4,__TIFFSwab16BitData,__TIFFSwab24BitData,__TIFFSwab32BitData,__TIFFSwab64BitData,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__TIFFDefaultTileSize,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,_Fax3PrintDir,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__logLuvNop,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,_Luv24toXYZ,_Luv24toLuv48,_Luv24toRGB,b4,_Luv32toXYZ,_Luv32toLuv48,_Luv32toRGB,b4,_L16toY,_L16toGry,b4,_Luv24fromXYZ,_Luv24fromLuv48,b4,_Luv32fromXYZ,_Luv32fromLuv48,b4,_L16fromY,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,_PredictorPrintDir,b4,b4,_horAcc8,_horAcc16,_horAcc32,b4,b4,_swabHorAcc16,_swabHorAcc32,_fpAcc,_horDiff8,_horDiff16,_horDiff32,b4,b4,_fpDiff,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_viiiiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_putRGBAAcontig8bittile,_putRGBUAcontig8bittile,_putRGBcontig8bittile,_putRGBAAcontig16bittile
  ,_putRGBUAcontig16bittile,_putRGBcontig16bittile,_putRGBcontig8bitCMYKtile,_putRGBcontig8bitCMYKMaptile,_put8bitcmaptile,_put4bitcmaptile,_put2bitcmaptile,_put1bitcmaptile,_put16bitbwtile,_putagreytile,_putgreytile,_put4bitbwtile,_put2bitbwtile,_put1bitbwtile,_putcontig8bitYCbCr44tile,_putcontig8bitYCbCr42tile,_putcontig8bitYCbCr41tile,_putcontig8bitYCbCr22tile,_putcontig8bitYCbCr21tile,_putcontig8bitYCbCr12tile,_putcontig8bitYCbCr11tile,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,_putcontig8bitCIELab,b5,b5,b5];
  var FUNCTION_TABLE_iiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_gtTileContig,_gtStripContig,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_gtTileSeparate,_gtStripSeparate,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,__tiffSeekProc,b6,b6,b6,b6,b6,b6,b6,__TIFFNoRowDecode,__TIFFNoStripDecode,__TIFFNoTileDecode,__TIFFNoRowEncode,__TIFFNoStripEncode,__TIFFNoTileEncode,b6,b6,b6,b6,b6,b6,_DumpModeDecode,_DumpModeEncode,b6,_Fax4Decode
  ,_Fax4Encode,b6,_Fax3DecodeRLE,b6,b6,b6,b6,b6,b6,b6,_Fax3Decode1D,b6,b6,_Fax3Encode,b6,b6,_Fax3Decode2D,b6,b6,b6,_LogLuvDecodeStrip,_LogLuvDecodeTile,b6,_LogLuvEncodeStrip,_LogLuvEncodeTile,b6,b6,b6,b6,_LogLuvDecode24
  ,b6,b6,b6,_LogLuvDecode32,b6,b6,b6,_LogL16Decode,b6,b6,_LogLuvEncode24,b6,b6,_LogLuvEncode32,b6,b6,_LogL16Encode,b6,b6,b6,b6,_LZWDecode,b6,b6,b6,_LZWEncode,b6,_LZWDecodeCompat,_NeXTDecode,_PackBitsDecode
  ,b6,b6,_PackBitsEncode,_PackBitsEncodeChunk,b6,b6,b6,b6,b6,b6,b6,b6,_PredictorDecodeRow,_PredictorDecodeTile,b6,b6,b6,b6,b6,b6,_PredictorEncodeRow,_PredictorEncodeTile,b6,b6,_ThunderDecodeRow,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_iii = [b7,b7,b7,_TIFFInitDumpMode,_TIFFInitLZW,_TIFFInitPackBits,_TIFFInitThunderScan,_TIFFInitNeXT,_NotConfigured,_TIFFInitCCITTRLE,_TIFFInitCCITTRLEW,_TIFFInitCCITTFax3,_TIFFInitCCITTFax4,_TIFFInitSGILog,b7,b7,b7,b7,b7,b7,b7,b7,_tagCompare,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__TIFFNoPreCode,b7,b7,b7,b7,b7,b7,b7,__TIFFNoSeek,__TIFFDefaultStripSize,b7,b7,b7,b7,b7,_DumpModeSeek,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,_Fax3PreDecode,b7,_Fax3PreEncode,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_LZWPreDecode,b7,b7,_LZWPreEncode,b7,b7,b7,b7,b7,b7
  ,_PackBitsPreEncode,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_viiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,__tiffDummyUnmapProc,b8,b8,b8,b8,b8,b8,__tiffUnmapProc,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,__TIFFFax3fillruns,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8];

  return { _i64Subtract: _i64Subtract, _free: _free, _realloc: _realloc, _i64Add: _i64Add, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _tiff_to_bmp: _tiff_to_bmp, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_viiiiiiiiiiii: dynCall_viiiiiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__tiff_to_bmp = asm["_tiff_to_bmp"]; asm["_tiff_to_bmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__tiff_to_bmp.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _tiff_to_bmp = Module["_tiff_to_bmp"] = asm["_tiff_to_bmp"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viiiiiiiiiiii = Module["dynCall_viiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



var filecount = 0;

function getBmp(url) {
  return new Promise(function(resolve, reject) {
    fetch(url)
      .then(function(res) { return res.arrayBuffer(); })
      .then(function(buffer) {
        var filename = "tmp" + (++filecount) + ".tiff";
        FS.createDataFile(
            '/',
            filename,
            new Uint8Array(buffer), true, false);
        bmpOutput = [];
        var ret = Module.ccall('tiff_to_bmp',
                               'number',
                               ['string'],
                               [filename])
        if (ret == 0)
          resolve(new Response(new Blob(bmpOutput, {type: "image/bmp"})));
        else
          reject();
      });
  });
}

self.addEventListener('fetch', function(event) {
  if (event.request.url.indexOf('.tif') == -1)
    return;
  event.respondWith(getBmp(event.request.url));
});

